
pilot_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034f0  080099b8  080099b8  000199b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cea8  0800cea8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cea8  0800cea8  0001cea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceb0  0800ceb0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceb0  0800ceb0  0001ceb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ceb4  0800ceb4  0001ceb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ceb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a47c  200001f4  0800d0ac  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a670  0800d0ac  0002a670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a49a  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000581b  00000000  00000000  0004a6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000195a0  00000000  00000000  0004fed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  00069480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002198  00000000  00000000  0006aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d442  00000000  00000000  0006cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028f14  00000000  00000000  0009a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e431  00000000  00000000  000c2fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d140f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005644  00000000  00000000  001d1460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099a0 	.word	0x080099a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080099a0 	.word	0x080099a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f4c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4e:	2400      	movs	r4, #0
{
 8000f50:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	2218      	movs	r2, #24
 8000f54:	4621      	mov	r1, r4
 8000f56:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8000f58:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000f5c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	f005 fd4f 	bl	8006a00 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f62:	4827      	ldr	r0, [pc, #156]	; (8001000 <MX_ADC1_Init+0xb4>)
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_ADC1_Init+0xb8>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6a:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f6c:	e9c0 3400 	strd	r3, r4, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7a:	8302      	strh	r2, [r0, #24]
  hadc1.Init.NbrOfConversion = 2;
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f84:	6342      	str	r2, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000f86:	f04f 0c0c 	mov.w	ip, #12
 8000f8a:	2280      	movs	r2, #128	; 0x80
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f90:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000f94:	e9c0 c20f 	strd	ip, r2, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f98:	e9c0 4311 	strd	r4, r3, [r0, #68]	; 0x44
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.OversamplingMode = ENABLE;
 8000fa0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa4:	f001 fdb0 	bl	8002b08 <HAL_ADC_Init>
 8000fa8:	b108      	cbz	r0, 8000fae <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000faa:	f000 fcff 	bl	80019ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fae:	4814      	ldr	r0, [pc, #80]	; (8001000 <MX_ADC1_Init+0xb4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb0:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb2:	a901      	add	r1, sp, #4
 8000fb4:	f002 f9c2 	bl	800333c <HAL_ADCEx_MultiModeConfigChannel>
 8000fb8:	b108      	cbz	r0, 8000fbe <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fba:	f000 fcf7 	bl	80019ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fbe:	4912      	ldr	r1, [pc, #72]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	e9cd 1304 	strd	r1, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	237f      	movs	r3, #127	; 0x7f
 8000fca:	e9cd 0306 	strd	r0, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 8000fce:	2404      	movs	r4, #4
 8000fd0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd2:	480b      	ldr	r0, [pc, #44]	; (8001000 <MX_ADC1_Init+0xb4>)
 8000fd4:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8000fd6:	e9cd 4308 	strd	r4, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	f001 febb 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8000fde:	b108      	cbz	r0, 8000fe4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fe0:	f000 fce4 	bl	80019ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fe4:	4a09      	ldr	r2, [pc, #36]	; (800100c <MX_ADC1_Init+0xc0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_ADC1_Init+0xb4>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fe8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fec:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff0:	f001 feb0 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8000ff4:	b108      	cbz	r0, 8000ffa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000ff6:	f000 fcd9 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffa:	b00a      	add	sp, #40	; 0x28
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	bf00      	nop
 8001000:	20000210 	.word	0x20000210
 8001004:	50040000 	.word	0x50040000
 8001008:	04300002 	.word	0x04300002
 800100c:	08600004 	.word	0x08600004

08001010 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	b0aa      	sub	sp, #168	; 0xa8
 8001014:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	2214      	movs	r2, #20
 8001018:	2100      	movs	r1, #0
 800101a:	a803      	add	r0, sp, #12
 800101c:	f005 fcf0 	bl	8006a00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001020:	2288      	movs	r2, #136	; 0x88
 8001022:	2100      	movs	r1, #0
 8001024:	a808      	add	r0, sp, #32
 8001026:	f005 fceb 	bl	8006a00 <memset>
  if(adcHandle->Instance==ADC1)
 800102a:	682a      	ldr	r2, [r5, #0]
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <HAL_ADC_MspInit+0xc8>)
 800102e:	429a      	cmp	r2, r3
 8001030:	d14f      	bne.n	80010d2 <HAL_ADC_MspInit+0xc2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001032:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001036:	9308      	str	r3, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001038:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800103c:	9326      	str	r3, [sp, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800103e:	2301      	movs	r3, #1
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001040:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001044:	f04f 0c10 	mov.w	ip, #16
 8001048:	2307      	movs	r3, #7
 800104a:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800104e:	2302      	movs	r3, #2
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001050:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001054:	a808      	add	r0, sp, #32
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800105a:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105c:	f003 f988 	bl	8004370 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	b108      	cbz	r0, 8001066 <HAL_ADC_MspInit+0x56>
    {
      Error_Handler();
 8001062:	f000 fca3 	bl	80019ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_ADC_MspInit+0xcc>)
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	481d      	ldr	r0, [pc, #116]	; (80010e0 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800106a:	6cda      	ldr	r2, [r3, #76]	; 0x4c

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800106c:	4c1d      	ldr	r4, [pc, #116]	; (80010e4 <HAL_ADC_MspInit+0xd4>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800106e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001072:	64da      	str	r2, [r3, #76]	; 0x4c
 8001074:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001076:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800107a:	9201      	str	r2, [sp, #4]
 800107c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001080:	f042 0204 	orr.w	r2, r2, #4
 8001084:	64da      	str	r2, [r3, #76]	; 0x4c
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001094:	230b      	movs	r3, #11
 8001096:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800109a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f002 fb5d 	bl	800375c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010a4:	6226      	str	r6, [r4, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80010a6:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b4:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010b8:	2320      	movs	r3, #32
 80010ba:	e9c4 0306 	strd	r0, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010be:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	e9c4 6602 	strd	r6, r6, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010c4:	f002 fa0c 	bl	80034e0 <HAL_DMA_Init>
 80010c8:	b108      	cbz	r0, 80010ce <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80010ca:	f000 fc6f 	bl	80019ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ce:	64ec      	str	r4, [r5, #76]	; 0x4c
 80010d0:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d2:	b02a      	add	sp, #168	; 0xa8
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
 80010d6:	bf00      	nop
 80010d8:	50040000 	.word	0x50040000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000800 	.word	0x48000800
 80010e4:	20000274 	.word	0x20000274
 80010e8:	40020008 	.word	0x40020008

080010ec <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_DMA_Init+0x2c>)
{
 80010ee:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	649a      	str	r2, [r3, #72]	; 0x48
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001102:	4611      	mov	r1, r2
 8001104:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001106:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001108:	f002 f996 	bl	8003438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800110c:	200f      	movs	r0, #15

}
 800110e:	b003      	add	sp, #12
 8001110:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001114:	f002 b9c2 	b.w	800349c <HAL_NVIC_EnableIRQ>
 8001118:	40021000 	.word	0x40021000

0800111c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	2214      	movs	r2, #20
 8001122:	2100      	movs	r1, #0
 8001124:	a803      	add	r0, sp, #12
 8001126:	f005 fc6b 	bl	8006a00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <MX_GPIO_Init+0x108>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 800112c:	4f3e      	ldr	r7, [pc, #248]	; (8001228 <MX_GPIO_Init+0x10c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001130:	4d3e      	ldr	r5, [pc, #248]	; (800122c <MX_GPIO_Init+0x110>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	f042 0204 	orr.w	r2, r2, #4
 8001136:	64da      	str	r2, [r3, #76]	; 0x4c
 8001138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113a:	f002 0204 	and.w	r2, r2, #4
 800113e:	9200      	str	r2, [sp, #0]
 8001140:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001144:	f042 0201 	orr.w	r2, r2, #1
 8001148:	64da      	str	r2, [r3, #76]	; 0x4c
 800114a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800114c:	f002 0201 	and.w	r2, r2, #1
 8001150:	9201      	str	r2, [sp, #4]
 8001152:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001156:	f042 0202 	orr.w	r2, r2, #2
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2120      	movs	r1, #32
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800116e:	f002 fbd3 	bl	8003918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8001172:	4638      	mov	r0, r7
 8001174:	2200      	movs	r2, #0
 8001176:	f640 0144 	movw	r1, #2116	; 0x844
 800117a:	f002 fbcd 	bl	8003918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800117e:	4638      	mov	r0, r7
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	f002 fbc7 	bl	8003918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 800118a:	4628      	mov	r0, r5
 800118c:	2200      	movs	r2, #0
 800118e:	2180      	movs	r1, #128	; 0x80

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001192:	f002 fbc1 	bl	8003918 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800119e:	a903      	add	r1, sp, #12
 80011a0:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a2:	e9cd 2303 	strd	r2, r3, [sp, #12]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f002 fad7 	bl	800375c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011b0:	a903      	add	r1, sp, #12
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011be:	f002 facd 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin|NRF24_CE_Pin;
 80011c2:	f641 0344 	movw	r3, #6212	; 0x1844
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	a903      	add	r1, sp, #12
 80011c8:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f002 fac3 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 80011d6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 80011d8:	a903      	add	r1, sp, #12
 80011da:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f002 faba 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f002 faae 	bl	800375c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001200:	4622      	mov	r2, r4
 8001202:	2102      	movs	r1, #2
 8001204:	2017      	movs	r0, #23
 8001206:	f002 f917 	bl	8003438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800120a:	2017      	movs	r0, #23
 800120c:	f002 f946 	bl	800349c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001210:	4622      	mov	r2, r4
 8001212:	4621      	mov	r1, r4
 8001214:	2028      	movs	r0, #40	; 0x28
 8001216:	f002 f90f 	bl	8003438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121a:	2028      	movs	r0, #40	; 0x28
 800121c:	f002 f93e 	bl	800349c <HAL_NVIC_EnableIRQ>

}
 8001220:	b009      	add	sp, #36	; 0x24
 8001222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	48000400 	.word	0x48000400
 800122c:	48000800 	.word	0x48000800

08001230 <display_float>:
    for (int i = 0; i < 8; i++) {
      hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
    }
}

void display_float(float val, int x0, int y0){
 8001230:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001234:	4604      	mov	r4, r0
	int index = x0;

	char array[7];
	sprintf(array, "%.2f", val);
 8001236:	ee10 0a10 	vmov	r0, s0
void display_float(float val, int x0, int y0){
 800123a:	460e      	mov	r6, r1
	sprintf(array, "%.2f", val);
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	a802      	add	r0, sp, #8
 8001246:	490c      	ldr	r1, [pc, #48]	; (8001278 <display_float+0x48>)

	for(int i = 0; i < 7; i++){
		int unicode = array[i];
		hagl_put_char(unicode, index, y0, YELLOW, std_font);
 8001248:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800127c <display_float+0x4c>
	sprintf(array, "%.2f", val);
 800124c:	f006 f93a 	bl	80074c4 <siprintf>
	for(int i = 0; i < 7; i++){
 8001250:	ad02      	add	r5, sp, #8
 8001252:	f104 072a 	add.w	r7, r4, #42	; 0x2a
		hagl_put_char(unicode, index, y0, YELLOW, std_font);
 8001256:	b236      	sxth	r6, r6
 8001258:	f8cd 8000 	str.w	r8, [sp]
 800125c:	b221      	sxth	r1, r4
 800125e:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001262:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001266:	4632      	mov	r2, r6
		index += 6;
 8001268:	3406      	adds	r4, #6
		hagl_put_char(unicode, index, y0, YELLOW, std_font);
 800126a:	f005 f8fe 	bl	800646a <hagl_put_char>
	for(int i = 0; i < 7; i++){
 800126e:	42bc      	cmp	r4, r7
 8001270:	d1f2      	bne.n	8001258 <display_float+0x28>
	}

}
 8001272:	b004      	add	sp, #16
 8001274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001278:	080099b8 	.word	0x080099b8
 800127c:	080099c0 	.word	0x080099c0

08001280 <display_int>:


void display_int(int val, int x0, int y0){
 8001280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af02      	add	r7, sp, #8
 8001288:	4680      	mov	r8, r0
 800128a:	4615      	mov	r5, r2
 800128c:	460c      	mov	r4, r1
	int digits_num = count_digits(val);
 800128e:	f000 ff56 	bl	800213e <count_digits>
	int index = x0;

	char array[digits_num];
 8001292:	1dc3      	adds	r3, r0, #7
 8001294:	f023 0307 	bic.w	r3, r3, #7
 8001298:	ebad 0d03 	sub.w	sp, sp, r3
 800129c:	f10d 0908 	add.w	r9, sp, #8
	sprintf(array, "%d", val);
 80012a0:	4642      	mov	r2, r8
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <display_int+0x5c>)

	for(int i = 0; i < digits_num; i++){
		int unicode = array[i];
		hagl_put_char(unicode, index, y0, YELLOW, std_font);
 80012a4:	f8df a038 	ldr.w	sl, [pc, #56]	; 80012e0 <display_int+0x60>
	int digits_num = count_digits(val);
 80012a8:	4606      	mov	r6, r0
	sprintf(array, "%d", val);
 80012aa:	4648      	mov	r0, r9
 80012ac:	f006 f90a 	bl	80074c4 <siprintf>
	for(int i = 0; i < digits_num; i++){
 80012b0:	f04f 0800 	mov.w	r8, #0
		hagl_put_char(unicode, index, y0, YELLOW, std_font);
 80012b4:	b22d      	sxth	r5, r5
	for(int i = 0; i < digits_num; i++){
 80012b6:	45b0      	cmp	r8, r6
 80012b8:	db02      	blt.n	80012c0 <display_int+0x40>
		index += 6;
	}

}
 80012ba:	46bd      	mov	sp, r7
 80012bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		hagl_put_char(unicode, index, y0, YELLOW, std_font);
 80012c0:	f819 0008 	ldrb.w	r0, [r9, r8]
 80012c4:	f8cd a000 	str.w	sl, [sp]
 80012c8:	b221      	sxth	r1, r4
 80012ca:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80012ce:	462a      	mov	r2, r5
 80012d0:	f005 f8cb 	bl	800646a <hagl_put_char>
		index += 6;
 80012d4:	3406      	adds	r4, #6
	for(int i = 0; i < digits_num; i++){
 80012d6:	f108 0801 	add.w	r8, r8, #1
 80012da:	e7ec      	b.n	80012b6 <display_int+0x36>
 80012dc:	080099bd 	.word	0x080099bd
 80012e0:	080099c0 	.word	0x080099c0
 80012e4:	00000000 	.word	0x00000000

080012e8 <calc_current>:

float calc_current(int current){
	float voltage = 3.3f * current / 4096.0f;
 80012e8:	ee07 0a90 	vmov	s15, r0
 80012ec:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001350 <calc_current+0x68>
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
float calc_current(int current){
 80012f4:	b508      	push	{r3, lr}
	float voltage = 3.3f * current / 4096.0f;
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
	float current_mA = 36.7*voltage/3.3 - 18.3;
 80012fa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001354 <calc_current+0x6c>
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	ee17 0a90 	vmov	r0, s15
 8001306:	f7ff f91f 	bl	8000548 <__aeabi_f2d>
 800130a:	a30b      	add	r3, pc, #44	; (adr r3, 8001338 <calc_current+0x50>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f972 	bl	80005f8 <__aeabi_dmul>
 8001314:	a30a      	add	r3, pc, #40	; (adr r3, 8001340 <calc_current+0x58>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff fa97 	bl	800084c <__aeabi_ddiv>
 800131e:	a30a      	add	r3, pc, #40	; (adr r3, 8001348 <calc_current+0x60>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ffb0 	bl	8000288 <__aeabi_dsub>
 8001328:	f7ff fc3e 	bl	8000ba8 <__aeabi_d2f>
	return current_mA;
}
 800132c:	ee00 0a10 	vmov	s0, r0
 8001330:	bd08      	pop	{r3, pc}
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	9999999a 	.word	0x9999999a
 800133c:	40425999 	.word	0x40425999
 8001340:	66666666 	.word	0x66666666
 8001344:	400a6666 	.word	0x400a6666
 8001348:	cccccccd 	.word	0xcccccccd
 800134c:	40324ccc 	.word	0x40324ccc
 8001350:	40533333 	.word	0x40533333
 8001354:	39800000 	.word	0x39800000

08001358 <render_screen>:

void render_screen(){
 8001358:	b513      	push	{r0, r1, r4, lr}
	  while (lcd_is_busy()) {}
 800135a:	f000 f969 	bl	8001630 <lcd_is_busy>
 800135e:	2800      	cmp	r0, #0
 8001360:	d1fb      	bne.n	800135a <render_screen+0x2>
	  lcd_copy();
 8001362:	f000 f92d 	bl	80015c0 <lcd_copy>


	  uint32_t tickstart = HAL_GetTick();
 8001366:	f001 fb9f 	bl	8002aa8 <HAL_GetTick>
 800136a:	4604      	mov	r4, r0
	  while ((HAL_GetTick() - tickstart) < 25)
 800136c:	f001 fb9c 	bl	8002aa8 <HAL_GetTick>
 8001370:	1b03      	subs	r3, r0, r4
 8001372:	2b18      	cmp	r3, #24
 8001374:	d9fa      	bls.n	800136c <render_screen+0x14>
	  {
	  }

	 hagl_fill_rectangle(15, 15, 130, 110, 0x0000);
 8001376:	2300      	movs	r3, #0
 8001378:	210f      	movs	r1, #15
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2282      	movs	r2, #130	; 0x82
 800137e:	236e      	movs	r3, #110	; 0x6e
 8001380:	4608      	mov	r0, r1
 8001382:	f005 f80b 	bl	800639c <hagl_fill_rectangle>

	  while (lcd_is_busy()) {}
 8001386:	f000 f953 	bl	8001630 <lcd_is_busy>
 800138a:	2800      	cmp	r0, #0
 800138c:	d1fb      	bne.n	8001386 <render_screen+0x2e>
	  lcd_copy();
}
 800138e:	b002      	add	sp, #8
 8001390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  lcd_copy();
 8001394:	f000 b914 	b.w	80015c0 <lcd_copy>

08001398 <signal_lost>:

void signal_lost(){
 8001398:	b513      	push	{r0, r1, r4, lr}
	 hagl_put_char(83, 20, 100, RED, std_font);
 800139a:	4c24      	ldr	r4, [pc, #144]	; (800142c <signal_lost+0x94>)
 800139c:	9400      	str	r4, [sp, #0]
 800139e:	23f8      	movs	r3, #248	; 0xf8
 80013a0:	2264      	movs	r2, #100	; 0x64
 80013a2:	2114      	movs	r1, #20
 80013a4:	2053      	movs	r0, #83	; 0x53
 80013a6:	f005 f860 	bl	800646a <hagl_put_char>
	 hagl_put_char(73, 26, 100, RED, std_font);
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	23f8      	movs	r3, #248	; 0xf8
 80013ae:	2264      	movs	r2, #100	; 0x64
 80013b0:	211a      	movs	r1, #26
 80013b2:	2049      	movs	r0, #73	; 0x49
 80013b4:	f005 f859 	bl	800646a <hagl_put_char>
	 hagl_put_char(71, 32, 100, RED, std_font);
 80013b8:	9400      	str	r4, [sp, #0]
 80013ba:	23f8      	movs	r3, #248	; 0xf8
 80013bc:	2264      	movs	r2, #100	; 0x64
 80013be:	2120      	movs	r1, #32
 80013c0:	2047      	movs	r0, #71	; 0x47
 80013c2:	f005 f852 	bl	800646a <hagl_put_char>
	 hagl_put_char(78, 38, 100, RED, std_font);
 80013c6:	9400      	str	r4, [sp, #0]
 80013c8:	23f8      	movs	r3, #248	; 0xf8
 80013ca:	2264      	movs	r2, #100	; 0x64
 80013cc:	2126      	movs	r1, #38	; 0x26
 80013ce:	204e      	movs	r0, #78	; 0x4e
 80013d0:	f005 f84b 	bl	800646a <hagl_put_char>
	 hagl_put_char(65, 44, 100, RED, std_font);
 80013d4:	9400      	str	r4, [sp, #0]
 80013d6:	23f8      	movs	r3, #248	; 0xf8
 80013d8:	2264      	movs	r2, #100	; 0x64
 80013da:	212c      	movs	r1, #44	; 0x2c
 80013dc:	2041      	movs	r0, #65	; 0x41
 80013de:	f005 f844 	bl	800646a <hagl_put_char>
	 hagl_put_char(76, 50, 100, RED, std_font);
 80013e2:	9400      	str	r4, [sp, #0]
 80013e4:	23f8      	movs	r3, #248	; 0xf8
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	2132      	movs	r1, #50	; 0x32
 80013ea:	204c      	movs	r0, #76	; 0x4c
 80013ec:	f005 f83d 	bl	800646a <hagl_put_char>

	 hagl_put_char(76, 62, 100, RED, std_font);
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	23f8      	movs	r3, #248	; 0xf8
 80013f4:	2264      	movs	r2, #100	; 0x64
 80013f6:	213e      	movs	r1, #62	; 0x3e
 80013f8:	204c      	movs	r0, #76	; 0x4c
 80013fa:	f005 f836 	bl	800646a <hagl_put_char>
	 hagl_put_char(79, 68, 100, RED, std_font);
 80013fe:	9400      	str	r4, [sp, #0]
 8001400:	23f8      	movs	r3, #248	; 0xf8
 8001402:	2264      	movs	r2, #100	; 0x64
 8001404:	2144      	movs	r1, #68	; 0x44
 8001406:	204f      	movs	r0, #79	; 0x4f
 8001408:	f005 f82f 	bl	800646a <hagl_put_char>
	 hagl_put_char(83, 74, 100, RED, std_font);
 800140c:	9400      	str	r4, [sp, #0]
 800140e:	23f8      	movs	r3, #248	; 0xf8
 8001410:	2264      	movs	r2, #100	; 0x64
 8001412:	214a      	movs	r1, #74	; 0x4a
 8001414:	2053      	movs	r0, #83	; 0x53
 8001416:	f005 f828 	bl	800646a <hagl_put_char>
	 hagl_put_char(84, 80, 100, RED, std_font);
 800141a:	9400      	str	r4, [sp, #0]
 800141c:	23f8      	movs	r3, #248	; 0xf8
 800141e:	2264      	movs	r2, #100	; 0x64
 8001420:	2150      	movs	r1, #80	; 0x50
 8001422:	2054      	movs	r0, #84	; 0x54
 8001424:	f005 f821 	bl	800646a <hagl_put_char>
}
 8001428:	b002      	add	sp, #8
 800142a:	bd10      	pop	{r4, pc}
 800142c:	080099c0 	.word	0x080099c0

08001430 <display_params>:

void display_params(uint16_t joystick_x, uint16_t joystick_y, int distance, float current){
 8001430:	b530      	push	{r4, r5, lr}
 8001432:	ed2d 8b02 	vpush	{d8}
 8001436:	b085      	sub	sp, #20
 8001438:	eeb0 8a40 	vmov.f32	s16, s0
 800143c:	4615      	mov	r5, r2
	 PWM_duty_cycle result;
	 result = calc_PWM(joystick_x, joystick_y);
 800143e:	f000 fcdb 	bl	8001df8 <calc_PWM>

	 hagl_put_char(76, 20, 20, YELLOW, std_font);
 8001442:	4c30      	ldr	r4, [pc, #192]	; (8001504 <display_params+0xd4>)
 8001444:	9400      	str	r4, [sp, #0]
 8001446:	2214      	movs	r2, #20
 8001448:	4611      	mov	r1, r2
 800144a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800144e:	204c      	movs	r0, #76	; 0x4c
	 result = calc_PWM(joystick_x, joystick_y);
 8001450:	edcd 0a03 	vstr	s1, [sp, #12]
 8001454:	ed8d 0a02 	vstr	s0, [sp, #8]
	 hagl_put_char(76, 20, 20, YELLOW, std_font);
 8001458:	f005 f807 	bl	800646a <hagl_put_char>
	 hagl_put_char(61, 27, 20, YELLOW, std_font);
 800145c:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001460:	2214      	movs	r2, #20
 8001462:	9400      	str	r4, [sp, #0]
 8001464:	211b      	movs	r1, #27
 8001466:	203d      	movs	r0, #61	; 0x3d
 8001468:	f004 ffff 	bl	800646a <hagl_put_char>
     display_float(result.vel_L, 40, 20);
 800146c:	ed9d 0a02 	vldr	s0, [sp, #8]
 8001470:	2114      	movs	r1, #20
 8001472:	2028      	movs	r0, #40	; 0x28
 8001474:	f7ff fedc 	bl	8001230 <display_float>


	 hagl_put_char(82, 20, 40, YELLOW, std_font);
 8001478:	9400      	str	r4, [sp, #0]
 800147a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800147e:	2228      	movs	r2, #40	; 0x28
 8001480:	2114      	movs	r1, #20
 8001482:	2052      	movs	r0, #82	; 0x52
 8001484:	f004 fff1 	bl	800646a <hagl_put_char>
	 hagl_put_char(61, 27, 40, YELLOW, std_font);
 8001488:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800148c:	2228      	movs	r2, #40	; 0x28
 800148e:	9400      	str	r4, [sp, #0]
 8001490:	211b      	movs	r1, #27
 8001492:	203d      	movs	r0, #61	; 0x3d
 8001494:	f004 ffe9 	bl	800646a <hagl_put_char>
     display_float(result.vel_R, 40, 40);
 8001498:	2128      	movs	r1, #40	; 0x28
 800149a:	ed9d 0a03 	vldr	s0, [sp, #12]
 800149e:	4608      	mov	r0, r1
 80014a0:	f7ff fec6 	bl	8001230 <display_float>


	 hagl_put_char(100, 20, 60, YELLOW, std_font);
 80014a4:	9400      	str	r4, [sp, #0]
 80014a6:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80014aa:	223c      	movs	r2, #60	; 0x3c
 80014ac:	2114      	movs	r1, #20
 80014ae:	2064      	movs	r0, #100	; 0x64
 80014b0:	f004 ffdb 	bl	800646a <hagl_put_char>
	 hagl_put_char(61, 27, 60, YELLOW, std_font);
 80014b4:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80014b8:	9400      	str	r4, [sp, #0]
 80014ba:	223c      	movs	r2, #60	; 0x3c
 80014bc:	211b      	movs	r1, #27
 80014be:	203d      	movs	r0, #61	; 0x3d
 80014c0:	f004 ffd3 	bl	800646a <hagl_put_char>
	 display_int(distance, 40, 60);
 80014c4:	4628      	mov	r0, r5
 80014c6:	223c      	movs	r2, #60	; 0x3c
 80014c8:	2128      	movs	r1, #40	; 0x28
 80014ca:	f7ff fed9 	bl	8001280 <display_int>


	 hagl_put_char(73, 20, 80, YELLOW, std_font);
 80014ce:	9400      	str	r4, [sp, #0]
 80014d0:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80014d4:	2250      	movs	r2, #80	; 0x50
 80014d6:	2114      	movs	r1, #20
 80014d8:	2049      	movs	r0, #73	; 0x49
 80014da:	f004 ffc6 	bl	800646a <hagl_put_char>
	 hagl_put_char(61, 27, 80, YELLOW, std_font);
 80014de:	9400      	str	r4, [sp, #0]
 80014e0:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80014e4:	2250      	movs	r2, #80	; 0x50
 80014e6:	211b      	movs	r1, #27
 80014e8:	203d      	movs	r0, #61	; 0x3d
 80014ea:	f004 ffbe 	bl	800646a <hagl_put_char>
	 display_float(current, 40, 80);
 80014ee:	2150      	movs	r1, #80	; 0x50
 80014f0:	2028      	movs	r0, #40	; 0x28
 80014f2:	eeb0 0a48 	vmov.f32	s0, s16

}
 80014f6:	b005      	add	sp, #20
 80014f8:	ecbd 8b02 	vpop	{d8}
 80014fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	 display_float(current, 40, 80);
 8001500:	f7ff be96 	b.w	8001230 <display_float>
 8001504:	080099c0 	.word	0x080099c0

08001508 <lcd_data>:
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

static void lcd_data(uint8_t data)
{
 8001508:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800150a:	4c0f      	ldr	r4, [pc, #60]	; (8001548 <lcd_data+0x40>)
{
 800150c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	4620      	mov	r0, r4
 8001514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001518:	f002 f9fe 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800151c:	4620      	mov	r0, r4
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001524:	f002 f9f8 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	f10d 0107 	add.w	r1, sp, #7
 8001530:	2201      	movs	r2, #1
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <lcd_data+0x44>)
 8001534:	f003 fa88 	bl	8004a48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153e:	4620      	mov	r0, r4
 8001540:	f002 f9ea 	bl	8003918 <HAL_GPIO_WritePin>
}
 8001544:	b002      	add	sp, #8
 8001546:	bd10      	pop	{r4, pc}
 8001548:	48000400 	.word	0x48000400
 800154c:	2000a50c 	.word	0x2000a50c

08001550 <lcd_data16>:
		lcd_data(value);
	}
}

static void lcd_data16(uint16_t value)
{
 8001550:	b510      	push	{r4, lr}
 8001552:	4604      	mov	r4, r0
	lcd_data(value >> 8);
 8001554:	0a00      	lsrs	r0, r0, #8
 8001556:	f7ff ffd7 	bl	8001508 <lcd_data>
	lcd_data(value);
 800155a:	b2e0      	uxtb	r0, r4
}
 800155c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_data(value);
 8001560:	f7ff bfd2 	b.w	8001508 <lcd_data>

08001564 <lcd_cmd>:
{
 8001564:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001566:	4c0f      	ldr	r4, [pc, #60]	; (80015a4 <lcd_cmd+0x40>)
{
 8001568:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	4620      	mov	r0, r4
 8001570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001574:	f002 f9d0 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001578:	4620      	mov	r0, r4
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001580:	f002 f9ca 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	f10d 0107 	add.w	r1, sp, #7
 800158c:	2201      	movs	r2, #1
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <lcd_cmd+0x44>)
 8001590:	f003 fa5a 	bl	8004a48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159a:	4620      	mov	r0, r4
 800159c:	f002 f9bc 	bl	8003918 <HAL_GPIO_WritePin>
}
 80015a0:	b002      	add	sp, #8
 80015a2:	bd10      	pop	{r4, pc}
 80015a4:	48000400 	.word	0x48000400
 80015a8:	2000a50c 	.word	0x2000a50c

080015ac <lcd_put_pixel>:



void lcd_put_pixel(int x, int y, uint16_t color)
{
	frame_buffer[x + y * LCD_WIDTH] = color;
 80015ac:	23a0      	movs	r3, #160	; 0xa0
 80015ae:	fb03 0101 	mla	r1, r3, r1, r0
 80015b2:	4b02      	ldr	r3, [pc, #8]	; (80015bc <lcd_put_pixel+0x10>)
 80015b4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200002bc 	.word	0x200002bc

080015c0 <lcd_copy>:

void lcd_copy(void)
{
 80015c0:	b508      	push	{r3, lr}
  lcd_cmd(ST7735S_CASET);
 80015c2:	202a      	movs	r0, #42	; 0x2a
 80015c4:	f7ff ffce 	bl	8001564 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff ffc1 	bl	8001550 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80015ce:	20a0      	movs	r0, #160	; 0xa0
 80015d0:	f7ff ffbe 	bl	8001550 <lcd_data16>
  lcd_cmd(ST7735S_RASET);
 80015d4:	202b      	movs	r0, #43	; 0x2b
 80015d6:	f7ff ffc5 	bl	8001564 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80015da:	2002      	movs	r0, #2
 80015dc:	f7ff ffb8 	bl	8001550 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80015e0:	2081      	movs	r0, #129	; 0x81
 80015e2:	f7ff ffb5 	bl	8001550 <lcd_data16>
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
	lcd_cmd(ST7735S_RAMWR);
 80015e6:	202c      	movs	r0, #44	; 0x2c
 80015e8:	f7ff ffbc 	bl	8001564 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <lcd_copy+0x54>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f4:	f002 f990 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80015f8:	4806      	ldr	r0, [pc, #24]	; (8001614 <lcd_copy+0x54>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001600:	f002 f98a 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
}
 8001604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <lcd_copy+0x58>)
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <lcd_copy+0x5c>)
 800160c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001610:	f003 bcc8 	b.w	8004fa4 <HAL_SPI_Transmit_DMA>
 8001614:	48000400 	.word	0x48000400
 8001618:	200002bc 	.word	0x200002bc
 800161c:	2000a50c 	.word	0x2000a50c

08001620 <lcd_transfer_done>:

void lcd_transfer_done(void)
{
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <lcd_transfer_done+0xc>)
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001628:	f002 b976 	b.w	8003918 <HAL_GPIO_WritePin>
 800162c:	48000400 	.word	0x48000400

08001630 <lcd_is_busy>:
}

bool lcd_is_busy(void)
{
 8001630:	b508      	push	{r3, lr}
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY)
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <lcd_is_busy+0x10>)
 8001634:	f003 fd89 	bl	800514a <HAL_SPI_GetState>
		return true;
	else
		return false;
}
 8001638:	1e83      	subs	r3, r0, #2
 800163a:	4258      	negs	r0, r3
 800163c:	4158      	adcs	r0, r3
 800163e:	bd08      	pop	{r3, pc}
 8001640:	2000a50c 	.word	0x2000a50c

08001644 <lcd_init>:



void lcd_init(void)
{
 8001644:	b538      	push	{r3, r4, r5, lr}
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2104      	movs	r1, #4
 800164a:	4815      	ldr	r0, [pc, #84]	; (80016a0 <lcd_init+0x5c>)
 800164c:	4d15      	ldr	r5, [pc, #84]	; (80016a4 <lcd_init+0x60>)
 800164e:	f002 f963 	bl	8003918 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001652:	2064      	movs	r0, #100	; 0x64
 8001654:	f001 fa2e 	bl	8002ab4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <lcd_init+0x5c>)
 800165a:	2201      	movs	r2, #1
 800165c:	2104      	movs	r1, #4
 800165e:	f002 f95b 	bl	8003918 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001662:	2064      	movs	r0, #100	; 0x64
 8001664:	f001 fa26 	bl	8002ab4 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001668:	2400      	movs	r4, #0
    lcd_send(init_table[i]);
 800166a:	f835 3b02 	ldrh.w	r3, [r5], #2
		lcd_cmd(value);
 800166e:	b2d8      	uxtb	r0, r3
	if (value & 0x100) {
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	d512      	bpl.n	800169a <lcd_init+0x56>
		lcd_cmd(value);
 8001674:	f7ff ff76 	bl	8001564 <lcd_cmd>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001678:	3401      	adds	r4, #1
 800167a:	2c4c      	cmp	r4, #76	; 0x4c
 800167c:	d1f5      	bne.n	800166a <lcd_init+0x26>
  }

  HAL_Delay(200);
 800167e:	20c8      	movs	r0, #200	; 0xc8
 8001680:	f001 fa18 	bl	8002ab4 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8001684:	2011      	movs	r0, #17
 8001686:	f7ff ff6d 	bl	8001564 <lcd_cmd>
  HAL_Delay(120);
 800168a:	2078      	movs	r0, #120	; 0x78
 800168c:	f001 fa12 	bl	8002ab4 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
}
 8001690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  lcd_cmd(ST7735S_DISPON);
 8001694:	2029      	movs	r0, #41	; 0x29
 8001696:	f7ff bf65 	b.w	8001564 <lcd_cmd>
		lcd_data(value);
 800169a:	f7ff ff35 	bl	8001508 <lcd_data>
 800169e:	e7eb      	b.n	8001678 <lcd_init+0x34>
 80016a0:	48000400 	.word	0x48000400
 80016a4:	0800c976 	.word	0x0800c976

080016a8 <MessegeHandle>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void MessegeHandle(uint8_t Message[]){
 80016a8:	b513      	push	{r0, r1, r4, lr}
    switch(Message[0]){
 80016aa:	7803      	ldrb	r3, [r0, #0]
 80016ac:	2b64      	cmp	r3, #100	; 0x64
void MessegeHandle(uint8_t Message[]){
 80016ae:	4604      	mov	r4, r0
    switch(Message[0]){
 80016b0:	d120      	bne.n	80016f4 <MessegeHandle+0x4c>
    case('d'):
        {
    	if(Message[1] == 'd')
 80016b2:	7843      	ldrb	r3, [r0, #1]
 80016b4:	2b64      	cmp	r3, #100	; 0x64
 80016b6:	d01d      	beq.n	80016f4 <MessegeHandle+0x4c>
    	{
    		break;
    	}
        char received_dist[] = {Message[1], Message[2], Message[3]};
 80016b8:	f88d 3000 	strb.w	r3, [sp]
 80016bc:	7883      	ldrb	r3, [r0, #2]
 80016be:	f88d 3001 	strb.w	r3, [sp, #1]
 80016c2:	78c3      	ldrb	r3, [r0, #3]
 80016c4:	f88d 3002 	strb.w	r3, [sp, #2]
        distance = atoi(received_dist);
 80016c8:	4668      	mov	r0, sp
 80016ca:	f004 ff34 	bl	8006536 <atoi>
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MessegeHandle+0x50>)
 80016d0:	6018      	str	r0, [r3, #0]
        char received_current[] = {Message[7], Message[8], Message[9], Message[10]};
 80016d2:	79e3      	ldrb	r3, [r4, #7]
 80016d4:	f88d 3004 	strb.w	r3, [sp, #4]
 80016d8:	7a23      	ldrb	r3, [r4, #8]
 80016da:	f88d 3005 	strb.w	r3, [sp, #5]
 80016de:	7a63      	ldrb	r3, [r4, #9]
 80016e0:	f88d 3006 	strb.w	r3, [sp, #6]
        acs711ex_voltage = atoi(received_current);
 80016e4:	a801      	add	r0, sp, #4
        char received_current[] = {Message[7], Message[8], Message[9], Message[10]};
 80016e6:	7aa3      	ldrb	r3, [r4, #10]
 80016e8:	f88d 3007 	strb.w	r3, [sp, #7]
        acs711ex_voltage = atoi(received_current);
 80016ec:	f004 ff23 	bl	8006536 <atoi>
 80016f0:	4b02      	ldr	r3, [pc, #8]	; (80016fc <MessegeHandle+0x54>)
 80016f2:	6018      	str	r0, [r3, #0]
        }

    default:
        break;
    }
}
 80016f4:	b002      	add	sp, #8
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	2000a454 	.word	0x2000a454
 80016fc:	2000a450 	.word	0x2000a450

08001700 <nRF24_EventTxCallback>:

void nRF24_EventTxCallback(void)
{
 8001700:	b508      	push	{r3, lr}
      MessageLength = sprintf((char*)Message, "TX\n\r");
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <nRF24_EventTxCallback+0x20>)
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <nRF24_EventTxCallback+0x24>)
 8001706:	4618      	mov	r0, r3
 8001708:	f005 ff3f 	bl	800758a <strcpy>
 800170c:	4906      	ldr	r1, [pc, #24]	; (8001728 <nRF24_EventTxCallback+0x28>)
 800170e:	2204      	movs	r2, #4
 8001710:	700a      	strb	r2, [r1, #0]
      HAL_UART_Transmit_IT(&huart2, Message, MessageLength);
}
 8001712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_UART_Transmit_IT(&huart2, Message, MessageLength);
 8001716:	4601      	mov	r1, r0
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <nRF24_EventTxCallback+0x2c>)
 800171a:	f003 bff7 	b.w	800570c <HAL_UART_Transmit_IT>
 800171e:	bf00      	nop
 8001720:	2000a2bc 	.word	0x2000a2bc
 8001724:	0800ca0e 	.word	0x0800ca0e
 8001728:	2000a384 	.word	0x2000a384
 800172c:	2000a5c0 	.word	0x2000a5c0

08001730 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001730:	b508      	push	{r3, lr}
      MessageLength = sprintf((char*)Message, "MX\n\r");
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <nRF24_EventMrCallback+0x20>)
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <nRF24_EventMrCallback+0x24>)
 8001736:	4618      	mov	r0, r3
 8001738:	f005 ff27 	bl	800758a <strcpy>
 800173c:	4906      	ldr	r1, [pc, #24]	; (8001758 <nRF24_EventMrCallback+0x28>)
 800173e:	2204      	movs	r2, #4
 8001740:	700a      	strb	r2, [r1, #0]
      HAL_UART_Transmit_IT(&huart2, Message, MessageLength);
}
 8001742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_UART_Transmit_IT(&huart2, Message, MessageLength);
 8001746:	4601      	mov	r1, r0
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <nRF24_EventMrCallback+0x2c>)
 800174a:	f003 bfdf 	b.w	800570c <HAL_UART_Transmit_IT>
 800174e:	bf00      	nop
 8001750:	2000a2bc 	.word	0x2000a2bc
 8001754:	0800ca13 	.word	0x0800ca13
 8001758:	2000a384 	.word	0x2000a384
 800175c:	2000a5c0 	.word	0x2000a5c0

08001760 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void){
 8001760:	b510      	push	{r4, lr}

    nRF24_ReadData(Message_RX, &MessageLength_RX);
 8001762:	4c09      	ldr	r4, [pc, #36]	; (8001788 <nRF24_EventRxCallback+0x28>)
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <nRF24_EventRxCallback+0x2c>)
 8001766:	4621      	mov	r1, r4
 8001768:	f001 f83c 	bl	80027e4 <nRF24_ReadData>
    if(MessageLength_RX > 0){
 800176c:	7822      	ldrb	r2, [r4, #0]
 800176e:	b132      	cbz	r2, 800177e <nRF24_EventRxCallback+0x1e>

    HAL_UART_Transmit_IT(&huart2, Message_RX, MessageLength_RX);
 8001770:	4906      	ldr	r1, [pc, #24]	; (800178c <nRF24_EventRxCallback+0x2c>)
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <nRF24_EventRxCallback+0x30>)
 8001774:	f003 ffca 	bl	800570c <HAL_UART_Transmit_IT>
    MessegeHandle(Message_RX);
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <nRF24_EventRxCallback+0x2c>)
 800177a:	f7ff ff95 	bl	80016a8 <MessegeHandle>
    }
      nRF24_FlushRX();

}
 800177e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      nRF24_FlushRX();
 8001782:	f000 be33 	b.w	80023ec <nRF24_FlushRX>
 8001786:	bf00      	nop
 8001788:	2000a385 	.word	0x2000a385
 800178c:	2000a386 	.word	0x2000a386
 8001790:	2000a5c0 	.word	0x2000a5c0

08001794 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
	if (hspi == &hspi2)
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <HAL_SPI_TxCpltCallback+0xc>)
 8001796:	4283      	cmp	r3, r0
 8001798:	d101      	bne.n	800179e <HAL_SPI_TxCpltCallback+0xa>
	{
		lcd_transfer_done();
 800179a:	f7ff bf41 	b.w	8001620 <lcd_transfer_done>
	}
}
 800179e:	4770      	bx	lr
 80017a0:	2000a50c 	.word	0x2000a50c

080017a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &htim3) {
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80017a6:	4283      	cmp	r3, r0
	  send_msg = !send_msg;
 80017a8:	bf01      	itttt	eq
 80017aa:	4a04      	ldreq	r2, [pc, #16]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x18>)
 80017ac:	7813      	ldrbeq	r3, [r2, #0]
 80017ae:	f083 0301 	eoreq.w	r3, r3, #1
 80017b2:	7013      	strbeq	r3, [r2, #0]
  }
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000a574 	.word	0x2000a574
 80017bc:	2000a45d 	.word	0x2000a45d

080017c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b500      	push	{lr}
 80017c2:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c4:	2244      	movs	r2, #68	; 0x44
 80017c6:	2100      	movs	r1, #0
 80017c8:	a805      	add	r0, sp, #20
 80017ca:	f005 f919 	bl	8006a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ce:	2214      	movs	r2, #20
 80017d0:	2100      	movs	r1, #0
 80017d2:	4668      	mov	r0, sp
 80017d4:	f005 f914 	bl	8006a00 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017dc:	f002 f8be 	bl	800395c <HAL_PWREx_ControlVoltageScaling>
 80017e0:	b108      	cbz	r0, 80017e6 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017e6:	2310      	movs	r3, #16
 80017e8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017ea:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017ec:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017ee:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f0:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017f2:	e9cd 200b 	strd	r2, r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017f6:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017fa:	2028      	movs	r0, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017fc:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017fe:	2207      	movs	r2, #7
 8001800:	e9cd 0212 	strd	r0, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001804:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001806:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180a:	f002 f96d 	bl	8003ae8 <HAL_RCC_OscConfig>
 800180e:	b108      	cbz	r0, 8001814 <SystemClock_Config+0x54>
 8001810:	b672      	cpsid	i
  while (1)
 8001812:	e7fe      	b.n	8001812 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001814:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001818:	220f      	movs	r2, #15
 800181a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800181e:	2104      	movs	r1, #4
 8001820:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001822:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001826:	f002 fbe5 	bl	8003ff4 <HAL_RCC_ClockConfig>
 800182a:	b108      	cbz	r0, 8001830 <SystemClock_Config+0x70>
 800182c:	b672      	cpsid	i
  while (1)
 800182e:	e7fe      	b.n	800182e <SystemClock_Config+0x6e>
}
 8001830:	b017      	add	sp, #92	; 0x5c
 8001832:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001838 <main>:
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
  HAL_Init();
 800183c:	f001 f918 	bl	8002a70 <HAL_Init>
  SystemClock_Config();
 8001840:	f7ff ffbe 	bl	80017c0 <SystemClock_Config>
  MX_GPIO_Init();
 8001844:	f7ff fc6a 	bl	800111c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001848:	f000 f8f4 	bl	8001a34 <MX_SPI1_Init>
  MX_DMA_Init();
 800184c:	f7ff fc4e 	bl	80010ec <MX_DMA_Init>
  MX_ADC1_Init();
 8001850:	f7ff fb7c 	bl	8000f4c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001854:	f000 fc94 	bl	8002180 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001858:	f000 f914 	bl	8001a84 <MX_SPI2_Init>
  MX_TIM3_Init();
 800185c:	f000 fa74 	bl	8001d48 <MX_TIM3_Init>
  nRF24_Init(&hspi1);
 8001860:	483d      	ldr	r0, [pc, #244]	; (8001958 <main+0x120>)
	  if (send_msg == 1){
 8001862:	4d3e      	ldr	r5, [pc, #248]	; (800195c <main+0x124>)
 8001864:	4c3e      	ldr	r4, [pc, #248]	; (8001960 <main+0x128>)
		  MessageLength = sprintf((char*)Message, "s%d%02d%d%02d\n\r", directions.dirL, abs((int)result.vel_L), directions.dirR, abs((int)result.vel_R) );
 8001866:	4e3f      	ldr	r6, [pc, #252]	; (8001964 <main+0x12c>)
  nRF24_Init(&hspi1);
 8001868:	f001 f846 	bl	80028f8 <nRF24_Init>
  nRF24_SetRXAddress(0, (uint8_t*)"Nad");
 800186c:	493e      	ldr	r1, [pc, #248]	; (8001968 <main+0x130>)
 800186e:	2000      	movs	r0, #0
 8001870:	f000 fe67 	bl	8002542 <nRF24_SetRXAddress>
  nRF24_SetTXAddress((uint8_t*)"Odb");
 8001874:	483d      	ldr	r0, [pc, #244]	; (800196c <main+0x134>)
 8001876:	f000 fea3 	bl	80025c0 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 800187a:	f000 fe7f 	bl	800257c <nRF24_RX_Mode>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800187e:	217f      	movs	r1, #127	; 0x7f
 8001880:	483b      	ldr	r0, [pc, #236]	; (8001970 <main+0x138>)
 8001882:	f001 fd11 	bl	80032a8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)joystick, 2);
 8001886:	4936      	ldr	r1, [pc, #216]	; (8001960 <main+0x128>)
 8001888:	4839      	ldr	r0, [pc, #228]	; (8001970 <main+0x138>)
 800188a:	2202      	movs	r2, #2
 800188c:	f001 fc5a 	bl	8003144 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8001890:	4838      	ldr	r0, [pc, #224]	; (8001974 <main+0x13c>)
 8001892:	f003 fc5d 	bl	8005150 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8001896:	f7ff fed5 	bl	8001644 <lcd_init>
	  if (send_msg == 1){
 800189a:	782b      	ldrb	r3, [r5, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d03f      	beq.n	8001920 <main+0xe8>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018a0:	2120      	movs	r1, #32
 80018a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a6:	f002 f83c 	bl	8003922 <HAL_GPIO_TogglePin>
		  result = calc_PWM(joystick[0], joystick[1]);
 80018aa:	8820      	ldrh	r0, [r4, #0]
 80018ac:	8861      	ldrh	r1, [r4, #2]
 80018ae:	b280      	uxth	r0, r0
 80018b0:	b289      	uxth	r1, r1
 80018b2:	f000 faa1 	bl	8001df8 <calc_PWM>
		  directions = calc_dirs( (int)result.vel_L, (int)result.vel_R );
 80018b6:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80018ba:	a806      	add	r0, sp, #24
 80018bc:	ee17 2a90 	vmov	r2, s15
 80018c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		  result = calc_PWM(joystick[0], joystick[1]);
 80018c4:	eeb0 8a40 	vmov.f32	s16, s0
		  directions = calc_dirs( (int)result.vel_L, (int)result.vel_R );
 80018c8:	ee17 1a90 	vmov	r1, s15
		  result = calc_PWM(joystick[0], joystick[1]);
 80018cc:	eef0 8a60 	vmov.f32	s17, s1
		  directions = calc_dirs( (int)result.vel_L, (int)result.vel_R );
 80018d0:	f000 fc2a 	bl	8002128 <calc_dirs>
		  result = truncate_digits_to_send(result.vel_L, result.vel_R);
 80018d4:	eeb0 0a48 	vmov.f32	s0, s16
 80018d8:	eef0 0a68 	vmov.f32	s1, s17
 80018dc:	f000 fc06 	bl	80020ec <truncate_digits_to_send>
 80018e0:	edcd 0a05 	vstr	s1, [sp, #20]
		  MessageLength = sprintf((char*)Message, "s%d%02d%d%02d\n\r", directions.dirL, abs((int)result.vel_L), directions.dirR, abs((int)result.vel_R) );
 80018e4:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80018e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80018ec:	ee10 2a90 	vmov	r2, s1
 80018f0:	ee17 3a90 	vmov	r3, s15
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	bfb8      	it	lt
 80018f8:	4252      	neglt	r2, r2
 80018fa:	9201      	str	r2, [sp, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	9a07      	ldr	r2, [sp, #28]
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	bfb8      	it	lt
 8001904:	425b      	neglt	r3, r3
 8001906:	4631      	mov	r1, r6
 8001908:	9a06      	ldr	r2, [sp, #24]
 800190a:	481b      	ldr	r0, [pc, #108]	; (8001978 <main+0x140>)
		  result = truncate_digits_to_send(result.vel_L, result.vel_R);
 800190c:	ed8d 0a04 	vstr	s0, [sp, #16]
		  MessageLength = sprintf((char*)Message, "s%d%02d%d%02d\n\r", directions.dirL, abs((int)result.vel_L), directions.dirR, abs((int)result.vel_R) );
 8001910:	f005 fdd8 	bl	80074c4 <siprintf>
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <main+0x144>)
 8001916:	b2c1      	uxtb	r1, r0
		  nRF24_SendData(Message, MessageLength);
 8001918:	4817      	ldr	r0, [pc, #92]	; (8001978 <main+0x140>)
		  MessageLength = sprintf((char*)Message, "s%d%02d%d%02d\n\r", directions.dirL, abs((int)result.vel_L), directions.dirR, abs((int)result.vel_R) );
 800191a:	7019      	strb	r1, [r3, #0]
		  nRF24_SendData(Message, MessageLength);
 800191c:	f000 fefc 	bl	8002718 <nRF24_SendData>
	  nRF24_Event();
 8001920:	f000 ffb8 	bl	8002894 <nRF24_Event>
	  	 display_params(joystick[0], joystick[1], distance, calc_current(acs711ex_voltage));
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <main+0x148>)
 8001926:	8827      	ldrh	r7, [r4, #0]
 8001928:	8861      	ldrh	r1, [r4, #2]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <main+0x14c>)
 800192e:	9202      	str	r2, [sp, #8]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	b289      	uxth	r1, r1
 8001934:	b2bf      	uxth	r7, r7
 8001936:	9103      	str	r1, [sp, #12]
 8001938:	f7ff fcd6 	bl	80012e8 <calc_current>
 800193c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8001940:	4638      	mov	r0, r7
 8001942:	f7ff fd75 	bl	8001430 <display_params>
	  	 if(print_alarm == 1){
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <main+0x150>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b10b      	cbz	r3, 8001950 <main+0x118>
		 signal_lost();
 800194c:	f7ff fd24 	bl	8001398 <signal_lost>
 		 render_screen();
 8001950:	f7ff fd02 	bl	8001358 <render_screen>
	  if (send_msg == 1){
 8001954:	e7a1      	b.n	800189a <main+0x62>
 8001956:	bf00      	nop
 8001958:	2000a4a8 	.word	0x2000a4a8
 800195c:	2000a45d 	.word	0x2000a45d
 8001960:	2000a458 	.word	0x2000a458
 8001964:	0800ca20 	.word	0x0800ca20
 8001968:	0800ca18 	.word	0x0800ca18
 800196c:	0800ca1c 	.word	0x0800ca1c
 8001970:	20000210 	.word	0x20000210
 8001974:	2000a574 	.word	0x2000a574
 8001978:	2000a2bc 	.word	0x2000a2bc
 800197c:	2000a384 	.word	0x2000a384
 8001980:	2000a454 	.word	0x2000a454
 8001984:	2000a450 	.word	0x2000a450
 8001988:	2000a45c 	.word	0x2000a45c

0800198c <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == NRF24_IRQ_Pin)
 800198c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001990:	d101      	bne.n	8001996 <HAL_GPIO_EXTI_Callback+0xa>
		nRF24_IRQ_Handler();
 8001992:	f000 bf45 	b.w	8002820 <nRF24_IRQ_Handler>
	if (GPIO_Pin == USER_BUTTON_Pin) {
 8001996:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
		print_alarm = !print_alarm;
 800199a:	bf01      	itttt	eq
 800199c:	4a02      	ldreq	r2, [pc, #8]	; (80019a8 <HAL_GPIO_EXTI_Callback+0x1c>)
 800199e:	7813      	ldrbeq	r3, [r2, #0]
 80019a0:	f083 0301 	eoreq.w	r3, r3, #1
 80019a4:	7013      	strbeq	r3, [r2, #0]
}
 80019a6:	4770      	bx	lr
 80019a8:	2000a45c 	.word	0x2000a45c

080019ac <Error_Handler>:
 80019ac:	b672      	cpsid	i
  while (1)
 80019ae:	e7fe      	b.n	80019ae <Error_Handler+0x2>

080019b0 <RB_CreateBuffer>:
#include "main.h"
#include "ring_buffer.h"
#include "stdlib.h"

RB_Status RB_CreateBuffer(RingBuffer **Buffer, uint8_t Size)
{
 80019b0:	b538      	push	{r3, r4, r5, lr}
 80019b2:	4605      	mov	r5, r0
	*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));
 80019b4:	1d08      	adds	r0, r1, #4
{
 80019b6:	460c      	mov	r4, r1
	*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));
 80019b8:	f005 f80c 	bl	80069d4 <malloc>
 80019bc:	4603      	mov	r3, r0
	if(Buffer == NULL)
	{
		return RB_NOTCREATED;
	}

	(*Buffer)->Size = Size;
 80019be:	7004      	strb	r4, [r0, #0]
	*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));
 80019c0:	6028      	str	r0, [r5, #0]
	(*Buffer)->Head = 0;
 80019c2:	2000      	movs	r0, #0
 80019c4:	7058      	strb	r0, [r3, #1]
	(*Buffer)->Tail = 0;
 80019c6:	8058      	strh	r0, [r3, #2]
	(*Buffer)->Elements = 0;

	return RB_OK;
}
 80019c8:	bd38      	pop	{r3, r4, r5, pc}

080019ca <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 80019ca:	b570      	push	{r4, r5, r6, lr}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 80019cc:	7845      	ldrb	r5, [r0, #1]
 80019ce:	7804      	ldrb	r4, [r0, #0]

	if( TempHead == Buffer->Tail) // No room for new data
 80019d0:	7886      	ldrb	r6, [r0, #2]
	TempHead = (Buffer->Head + 1) % Buffer->Size;
 80019d2:	1c6b      	adds	r3, r5, #1
 80019d4:	fbb3 f2f4 	udiv	r2, r3, r4
 80019d8:	fb04 3212 	mls	r2, r4, r2, r3
	if( TempHead == Buffer->Tail) // No room for new data
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	4296      	cmp	r6, r2
 80019e0:	d00c      	beq.n	80019fc <RB_WriteToBuffer+0x32>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 80019e2:	4405      	add	r5, r0

		Buffer->Head++;
		Buffer->Head %= Buffer->Size;
 80019e4:	b2db      	uxtb	r3, r3
		Buffer->Buffer[Buffer->Head] = Data;
 80019e6:	7129      	strb	r1, [r5, #4]
		Buffer->Head %= Buffer->Size;
 80019e8:	fbb3 f2f4 	udiv	r2, r3, r4
 80019ec:	fb04 3312 	mls	r3, r4, r2, r3
 80019f0:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 80019f2:	78c3      	ldrb	r3, [r0, #3]
 80019f4:	3301      	adds	r3, #1
 80019f6:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 80019f8:	2000      	movs	r0, #0
}
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
		return RB_NOFREESPACE;
 80019fc:	2003      	movs	r0, #3
 80019fe:	e7fc      	b.n	80019fa <RB_WriteToBuffer+0x30>

08001a00 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 8001a00:	7883      	ldrb	r3, [r0, #2]
 8001a02:	7842      	ldrb	r2, [r0, #1]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d010      	beq.n	8001a2a <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8001a08:	4403      	add	r3, r0
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 8001a0e:	7883      	ldrb	r3, [r0, #2]
		Buffer->Tail %= Buffer->Size;
 8001a10:	7802      	ldrb	r2, [r0, #0]
		Buffer->Tail++;
 8001a12:	3301      	adds	r3, #1
		Buffer->Tail %= Buffer->Size;
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a1a:	fb02 3311 	mls	r3, r2, r1, r3
 8001a1e:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 8001a20:	78c3      	ldrb	r3, [r0, #3]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 8001a26:	2000      	movs	r0, #0
 8001a28:	4770      	bx	lr
		return RB_NOELEMENTS;
 8001a2a:	2004      	movs	r0, #4
}
 8001a2c:	4770      	bx	lr

08001a2e <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 8001a2e:	78c0      	ldrb	r0, [r0, #3]
 8001a30:	4770      	bx	lr
	...

08001a34 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a34:	4811      	ldr	r0, [pc, #68]	; (8001a7c <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_SPI1_Init+0x4c>)
{
 8001a38:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a3e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a48:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a50:	2230      	movs	r2, #48	; 0x30
 8001a52:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001a56:	2207      	movs	r2, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a58:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a60:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a64:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a66:	2308      	movs	r3, #8
 8001a68:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a6a:	f002 ff83 	bl	8004974 <HAL_SPI_Init>
 8001a6e:	b118      	cbz	r0, 8001a78 <MX_SPI1_Init+0x44>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a74:	f7ff bf9a 	b.w	80019ac <Error_Handler>
}
 8001a78:	bd08      	pop	{r3, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000a4a8 	.word	0x2000a4a8
 8001a80:	40013000 	.word	0x40013000

08001a84 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a84:	4810      	ldr	r0, [pc, #64]	; (8001ac8 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <MX_SPI2_Init+0x48>)
{
 8001a88:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a8a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a8e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a98:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8001aa6:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aac:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ab0:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ab6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ab8:	f002 ff5c 	bl	8004974 <HAL_SPI_Init>
 8001abc:	b118      	cbz	r0, 8001ac6 <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001ac2:	f7ff bf73 	b.w	80019ac <Error_Handler>
}
 8001ac6:	bd08      	pop	{r3, pc}
 8001ac8:	2000a50c 	.word	0x2000a50c
 8001acc:	40003800 	.word	0x40003800

08001ad0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	4606      	mov	r6, r0
 8001ad4:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	2214      	movs	r2, #20
 8001ad8:	2100      	movs	r1, #0
 8001ada:	a807      	add	r0, sp, #28
 8001adc:	f004 ff90 	bl	8006a00 <memset>
  if(spiHandle->Instance==SPI1)
 8001ae0:	6833      	ldr	r3, [r6, #0]
 8001ae2:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <HAL_SPI_MspInit+0x120>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d135      	bne.n	8001b54 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_SPI_MspInit+0x124>)
 8001aea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001af0:	661a      	str	r2, [r3, #96]	; 0x60
 8001af2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001af4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b06:	f002 0201 	and.w	r2, r2, #1
 8001b0a:	9202      	str	r2, [sp, #8]
 8001b0c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b10:	f042 0202 	orr.w	r2, r2, #2
 8001b14:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	9303      	str	r3, [sp, #12]
 8001b1e:	9b03      	ldr	r3, [sp, #12]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2602      	movs	r6, #2
 8001b22:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b24:	2503      	movs	r5, #3
 8001b26:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	a907      	add	r1, sp, #28
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b32:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f001 fe11 	bl	800375c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b3a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	482d      	ldr	r0, [pc, #180]	; (8001bf8 <HAL_SPI_MspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b42:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f001 fe06 	bl	800375c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b50:	b00d      	add	sp, #52	; 0x34
 8001b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI2)
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_SPI_MspInit+0x12c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d1fa      	bne.n	8001b50 <HAL_SPI_MspInit+0x80>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_SPI_MspInit+0x124>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	4828      	ldr	r0, [pc, #160]	; (8001c00 <HAL_SPI_MspInit+0x130>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b64:	659a      	str	r2, [r3, #88]	; 0x58
 8001b66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b68:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b6c:	9204      	str	r2, [sp, #16]
 8001b6e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b72:	f042 0204 	orr.w	r2, r2, #4
 8001b76:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7a:	f002 0204 	and.w	r2, r2, #4
 8001b7e:	9205      	str	r2, [sp, #20]
 8001b80:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b84:	f042 0202 	orr.w	r2, r2, #2
 8001b88:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b94:	2405      	movs	r4, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b98:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ba2:	e9cd 740a 	strd	r7, r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	f001 fdd9 	bl	800375c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	e9cd 3507 	strd	r3, r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	4811      	ldr	r0, [pc, #68]	; (8001bf8 <HAL_SPI_MspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bb4:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	a907      	add	r1, sp, #28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001bba:	4c12      	ldr	r4, [pc, #72]	; (8001c04 <HAL_SPI_MspInit+0x134>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f001 fdcc 	bl	800375c <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001bc4:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_SPI_MspInit+0x138>)
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc6:	6225      	str	r5, [r4, #32]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bce:	2310      	movs	r3, #16
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd0:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001bd4:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd6:	2380      	movs	r3, #128	; 0x80
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd8:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001bdc:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001be0:	f001 fc7e 	bl	80034e0 <HAL_DMA_Init>
 8001be4:	b108      	cbz	r0, 8001bea <HAL_SPI_MspInit+0x11a>
      Error_Handler();
 8001be6:	f7ff fee1 	bl	80019ac <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001bea:	6574      	str	r4, [r6, #84]	; 0x54
 8001bec:	62a6      	str	r6, [r4, #40]	; 0x28
}
 8001bee:	e7af      	b.n	8001b50 <HAL_SPI_MspInit+0x80>
 8001bf0:	40013000 	.word	0x40013000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48000400 	.word	0x48000400
 8001bfc:	40003800 	.word	0x40003800
 8001c00:	48000800 	.word	0x48000800
 8001c04:	2000a460 	.word	0x2000a460
 8001c08:	40020058 	.word	0x40020058

08001c0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_MspInit+0x2c>)
 8001c0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	661a      	str	r2, [r3, #96]	; 0x60
 8001c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001c18:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	f002 0201 	and.w	r2, r2, #1
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c28:	659a      	str	r2, [r3, #88]	; 0x58
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c34:	b002      	add	sp, #8
 8001c36:	4770      	bx	lr
 8001c38:	40021000 	.word	0x40021000

08001c3c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler>

08001c3e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <HardFault_Handler>

08001c40 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler>

08001c42 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler>

08001c44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <UsageFault_Handler>

08001c46 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c46:	4770      	bx	lr

08001c48 <DebugMon_Handler>:
 8001c48:	4770      	bx	lr

08001c4a <PendSV_Handler>:
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 bf20 	b.w	8002a90 <HAL_IncTick>

08001c50 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <DMA1_Channel5_IRQHandler+0x8>)
 8001c52:	f001 bd39 	b.w	80036c8 <HAL_DMA_IRQHandler>
 8001c56:	bf00      	nop
 8001c58:	2000a460 	.word	0x2000a460

08001c5c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8001c5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c60:	f001 be68 	b.w	8003934 <HAL_GPIO_EXTI_IRQHandler>

08001c64 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c64:	4801      	ldr	r0, [pc, #4]	; (8001c6c <TIM3_IRQHandler+0x8>)
 8001c66:	f003 bab1 	b.w	80051cc <HAL_TIM_IRQHandler>
 8001c6a:	bf00      	nop
 8001c6c:	2000a574 	.word	0x2000a574

08001c70 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c70:	4801      	ldr	r0, [pc, #4]	; (8001c78 <USART2_IRQHandler+0x8>)
 8001c72:	f003 bd8f 	b.w	8005794 <HAL_UART_IRQHandler>
 8001c76:	bf00      	nop
 8001c78:	2000a5c0 	.word	0x2000a5c0

08001c7c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001c7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c80:	f001 be58 	b.w	8003934 <HAL_GPIO_EXTI_IRQHandler>

08001c84 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001c84:	2001      	movs	r0, #1
 8001c86:	4770      	bx	lr

08001c88 <_kill>:

int _kill(int pid, int sig)
{
 8001c88:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c8a:	f004 fc59 	bl	8006540 <__errno>
 8001c8e:	2316      	movs	r3, #22
 8001c90:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001c92:	f04f 30ff 	mov.w	r0, #4294967295
 8001c96:	bd08      	pop	{r3, pc}

08001c98 <_exit>:

void _exit (int status)
{
 8001c98:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c9a:	f004 fc51 	bl	8006540 <__errno>
 8001c9e:	2316      	movs	r3, #22
 8001ca0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001ca2:	e7fe      	b.n	8001ca2 <_exit+0xa>

08001ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	460d      	mov	r5, r1
 8001ca8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	460e      	mov	r6, r1
 8001cac:	1b73      	subs	r3, r6, r5
 8001cae:	429c      	cmp	r4, r3
 8001cb0:	dc01      	bgt.n	8001cb6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001cb6:	f3af 8000 	nop.w
 8001cba:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	e7f5      	b.n	8001cac <_read+0x8>

08001cc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	460d      	mov	r5, r1
 8001cc4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	460e      	mov	r6, r1
 8001cc8:	1b73      	subs	r3, r6, r5
 8001cca:	429c      	cmp	r4, r3
 8001ccc:	dc01      	bgt.n	8001cd2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001cce:	4620      	mov	r0, r4
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001cd2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001cd6:	f000 fa3f 	bl	8002158 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	e7f5      	b.n	8001cc8 <_write+0x8>

08001cdc <_close>:

int _close(int file)
{
	return -1;
}
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	4770      	bx	lr

08001ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce6:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001ce8:	2000      	movs	r0, #0
 8001cea:	4770      	bx	lr

08001cec <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001cec:	2001      	movs	r0, #1
 8001cee:	4770      	bx	lr

08001cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	4770      	bx	lr

08001cf4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <_sbrk+0x30>)
 8001cf6:	6811      	ldr	r1, [r2, #0]
{
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001cfc:	b909      	cbnz	r1, 8001d02 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001cfe:	490a      	ldr	r1, [pc, #40]	; (8001d28 <_sbrk+0x34>)
 8001d00:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	6810      	ldr	r0, [r2, #0]
 8001d04:	4909      	ldr	r1, [pc, #36]	; (8001d2c <_sbrk+0x38>)
 8001d06:	4c0a      	ldr	r4, [pc, #40]	; (8001d30 <_sbrk+0x3c>)
 8001d08:	4403      	add	r3, r0
 8001d0a:	1b09      	subs	r1, r1, r4
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	d906      	bls.n	8001d1e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d10:	f004 fc16 	bl	8006540 <__errno>
 8001d14:	230c      	movs	r3, #12
 8001d16:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d1c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d1e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001d20:	e7fc      	b.n	8001d1c <_sbrk+0x28>
 8001d22:	bf00      	nop
 8001d24:	2000a570 	.word	0x2000a570
 8001d28:	2000a670 	.word	0x2000a670
 8001d2c:	20018000 	.word	0x20018000
 8001d30:	00002000 	.word	0x00002000

08001d34 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d34:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <SystemInit+0x10>)
 8001d36:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d48:	b500      	push	{lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	2210      	movs	r2, #16
{
 8001d4c:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	2100      	movs	r1, #0
 8001d50:	eb0d 0002 	add.w	r0, sp, r2
 8001d54:	f004 fe54 	bl	8006a00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d58:	4815      	ldr	r0, [pc, #84]	; (8001db0 <MX_TIM3_Init+0x68>)
  htim3.Init.Prescaler = 7999;
 8001d5a:	4916      	ldr	r1, [pc, #88]	; (8001db4 <MX_TIM3_Init+0x6c>)
 8001d5c:	f641 723f 	movw	r2, #7999	; 0x1f3f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 7999;
 8001d62:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1499;
 8001d66:	f240 52db 	movw	r2, #1499	; 0x5db
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d72:	9303      	str	r3, [sp, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d78:	f003 fb3e 	bl	80053f8 <HAL_TIM_Base_Init>
 8001d7c:	b108      	cbz	r0, 8001d82 <MX_TIM3_Init+0x3a>
  {
    Error_Handler();
 8001d7e:	f7ff fe15 	bl	80019ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d86:	480a      	ldr	r0, [pc, #40]	; (8001db0 <MX_TIM3_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d88:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d8a:	a904      	add	r1, sp, #16
 8001d8c:	f003 fb6e 	bl	800546c <HAL_TIM_ConfigClockSource>
 8001d90:	b108      	cbz	r0, 8001d96 <MX_TIM3_Init+0x4e>
  {
    Error_Handler();
 8001d92:	f7ff fe0b 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d9c:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da0:	f003 fc00 	bl	80055a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	b108      	cbz	r0, 8001daa <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001da6:	f7ff fe01 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001daa:	b009      	add	sp, #36	; 0x24
 8001dac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001db0:	2000a574 	.word	0x2000a574
 8001db4:	40000400 	.word	0x40000400

08001db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db8:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dbc:	6802      	ldr	r2, [r0, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d115      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8001dc6:	210a      	movs	r1, #10
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dca:	f042 0202 	orr.w	r2, r2, #2
 8001dce:	659a      	str	r2, [r3, #88]	; 0x58
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ddc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8001dde:	f001 fb2b 	bl	8003438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001de2:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001de4:	b003      	add	sp, #12
 8001de6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dea:	f001 bb57 	b.w	800349c <HAL_NVIC_EnableIRQ>
}
 8001dee:	b003      	add	sp, #12
 8001df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001df4:	40000400 	.word	0x40000400

08001df8 <calc_PWM>:

struct joystick_params joystick = {1917.0f, 1955.0f, 5.0f, 40.0f};


PWM_duty_cycle calc_PWM(uint16_t x, uint16_t y)
{
 8001df8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	PWM_duty_cycle robot_vel;


	// first quarter
	if( (x >= joystick.ADC_X_center) && (y <= joystick.ADC_Y_center ) ){
 8001dfc:	ee07 0a90 	vmov	s15, r0
 8001e00:	4cb5      	ldr	r4, [pc, #724]	; (80020d8 <calc_PWM+0x2e0>)
{
 8001e02:	ed2d 8b06 	vpush	{d8-d10}
	if( (x >= joystick.ADC_X_center) && (y <= joystick.ADC_Y_center ) ){
 8001e06:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8001e0a:	edd4 7a00 	vldr	s15, [r4]
 8001e0e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001e16:	ee09 1a90 	vmov	s19, r1
 8001e1a:	b086      	sub	sp, #24
	if( (x >= joystick.ADC_X_center) && (y <= joystick.ADC_Y_center ) ){
 8001e1c:	db78      	blt.n	8001f10 <calc_PWM+0x118>
 8001e1e:	eeb8 aae9 	vcvt.f32.s32	s20, s19
 8001e22:	edd4 aa01 	vldr	s21, [r4, #4]
 8001e26:	eeb4 aaea 	vcmpe.f32	s20, s21
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	d86f      	bhi.n	8001f10 <calc_PWM+0x118>
		robot_vel.vel_L = sqrt((pow (x - joystick.ADC_X_center, 2.0f) + pow (y - joystick.ADC_Y_center, 2.0f)))/(joystick.ADC_Y_center)*100.0f;
 8001e30:	ee79 7a67 	vsub.f32	s15, s18, s15
 8001e34:	ee17 0a90 	vmov	r0, s15
 8001e38:	f7fe fb86 	bl	8000548 <__aeabi_f2d>
 8001e3c:	ee7a 7a6a 	vsub.f32	s15, s20, s21
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	ee17 0a90 	vmov	r0, s15
 8001e48:	e9cd 2300 	strd	r2, r3, [sp]
 8001e4c:	f7fe fb7c 	bl	8000548 <__aeabi_f2d>
 8001e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001e54:	4680      	mov	r8, r0
 8001e56:	4689      	mov	r9, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4642      	mov	r2, r8
 8001e62:	4606      	mov	r6, r0
 8001e64:	460f      	mov	r7, r1
 8001e66:	464b      	mov	r3, r9
 8001e68:	4640      	mov	r0, r8
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4630      	mov	r0, r6
 8001e76:	4639      	mov	r1, r7
 8001e78:	f7fe fa08 	bl	800028c <__adddf3>
 8001e7c:	ec41 0b10 	vmov	d0, r0, r1
 8001e80:	f007 fcaf 	bl	80097e2 <sqrt>
 8001e84:	edd4 8a01 	vldr	s17, [r4, #4]
 8001e88:	ee18 0a90 	vmov	r0, s17
 8001e8c:	ec57 6b10 	vmov	r6, r7, d0
 8001e90:	f7fe fb5a 	bl	8000548 <__aeabi_f2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4630      	mov	r0, r6
 8001e9a:	4639      	mov	r1, r7
 8001e9c:	f7fe fcd6 	bl	800084c <__aeabi_ddiv>
 8001ea0:	4b8e      	ldr	r3, [pc, #568]	; (80020dc <calc_PWM+0x2e4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f7fe fba8 	bl	80005f8 <__aeabi_dmul>
 8001ea8:	f7fe fe7e 	bl	8000ba8 <__aeabi_d2f>
		if (robot_vel.vel_L > 100.0f){
 8001eac:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80020e0 <calc_PWM+0x2e8>
		robot_vel.vel_L = sqrt((pow (x - joystick.ADC_X_center, 2.0f) + pow (y - joystick.ADC_Y_center, 2.0f)))/(joystick.ADC_Y_center)*100.0f;
 8001eb0:	ee08 0a10 	vmov	s16, r0
			robot_vel.vel_L = 100.0f;
 8001eb4:	eeb4 8a67 	vcmp.f32	s16, s15
 8001eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebc:	bfc8      	it	gt
 8001ebe:	eeb0 8a67 	vmovgt.f32	s16, s15
		}
		robot_vel.vel_R = robot_vel.vel_L * atan((joystick.ADC_Y_center - y)/(x - joystick.ADC_X_center)) * 2.0f/PI ;
 8001ec2:	edd4 7a00 	vldr	s15, [r4]
 8001ec6:	ee78 8aca 	vsub.f32	s17, s17, s20
 8001eca:	ee79 7a67 	vsub.f32	s15, s18, s15
 8001ece:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 8001ed2:	ee17 0a90 	vmov	r0, s15
 8001ed6:	f7fe fb37 	bl	8000548 <__aeabi_f2d>
 8001eda:	ec41 0b10 	vmov	d0, r0, r1
 8001ede:	f007 fad7 	bl	8009490 <atan>
 8001ee2:	ec57 6b10 	vmov	r6, r7, d0
 8001ee6:	ee18 0a10 	vmov	r0, s16
 8001eea:	f7fe fb2d 	bl	8000548 <__aeabi_f2d>
 8001eee:	4632      	mov	r2, r6
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	f7fe fb81 	bl	80005f8 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	f7fe f9c7 	bl	800028c <__adddf3>
 8001efe:	a374      	add	r3, pc, #464	; (adr r3, 80020d0 <calc_PWM+0x2d8>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fca2 	bl	800084c <__aeabi_ddiv>
 8001f08:	f7fe fe4e 	bl	8000ba8 <__aeabi_d2f>
 8001f0c:	ee08 0a90 	vmov	s17, r0
	}


	// second quarter
	if( (x < joystick.ADC_X_center) && (y <= joystick.ADC_Y_center ) ){
 8001f10:	edd4 7a00 	vldr	s15, [r4]
 8001f14:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	d578      	bpl.n	8002010 <calc_PWM+0x218>
 8001f1e:	eeb8 aae9 	vcvt.f32.s32	s20, s19
 8001f22:	edd4 aa01 	vldr	s21, [r4, #4]
 8001f26:	eeb4 aaea 	vcmpe.f32	s20, s21
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	d86f      	bhi.n	8002010 <calc_PWM+0x218>
		robot_vel.vel_R = sqrt((pow (x - joystick.ADC_X_center, 2.0f) + pow (y - joystick.ADC_Y_center, 2.0f)))/(joystick.ADC_Y_center)*100.0f;
 8001f30:	ee79 7a67 	vsub.f32	s15, s18, s15
 8001f34:	ee17 0a90 	vmov	r0, s15
 8001f38:	f7fe fb06 	bl	8000548 <__aeabi_f2d>
 8001f3c:	ee7a 7a6a 	vsub.f32	s15, s20, s21
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	ee17 0a90 	vmov	r0, s15
 8001f48:	e9cd 2300 	strd	r2, r3, [sp]
 8001f4c:	f7fe fafc 	bl	8000548 <__aeabi_f2d>
 8001f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001f54:	4680      	mov	r8, r0
 8001f56:	4689      	mov	r9, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7fe fb4c 	bl	80005f8 <__aeabi_dmul>
 8001f60:	4642      	mov	r2, r8
 8001f62:	4606      	mov	r6, r0
 8001f64:	460f      	mov	r7, r1
 8001f66:	464b      	mov	r3, r9
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	f7fe fb44 	bl	80005f8 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4630      	mov	r0, r6
 8001f76:	4639      	mov	r1, r7
 8001f78:	f7fe f988 	bl	800028c <__adddf3>
 8001f7c:	ec41 0b10 	vmov	d0, r0, r1
 8001f80:	f007 fc2f 	bl	80097e2 <sqrt>
 8001f84:	ed94 8a01 	vldr	s16, [r4, #4]
 8001f88:	ee18 0a10 	vmov	r0, s16
 8001f8c:	ec57 6b10 	vmov	r6, r7, d0
 8001f90:	f7fe fada 	bl	8000548 <__aeabi_f2d>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4630      	mov	r0, r6
 8001f9a:	4639      	mov	r1, r7
 8001f9c:	f7fe fc56 	bl	800084c <__aeabi_ddiv>
 8001fa0:	4b4e      	ldr	r3, [pc, #312]	; (80020dc <calc_PWM+0x2e4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f7fe fb28 	bl	80005f8 <__aeabi_dmul>
 8001fa8:	f7fe fdfe 	bl	8000ba8 <__aeabi_d2f>
		if (robot_vel.vel_R > 100.0f){
 8001fac:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80020e0 <calc_PWM+0x2e8>
		robot_vel.vel_R = sqrt((pow (x - joystick.ADC_X_center, 2.0f) + pow (y - joystick.ADC_Y_center, 2.0f)))/(joystick.ADC_Y_center)*100.0f;
 8001fb0:	ee08 0a90 	vmov	s17, r0
			robot_vel.vel_R = 100.0f;
 8001fb4:	eef4 8a67 	vcmp.f32	s17, s15
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	bfc8      	it	gt
 8001fbe:	eef0 8a67 	vmovgt.f32	s17, s15
		}
		robot_vel.vel_L = robot_vel.vel_R * atan((joystick.ADC_Y_center - y)/(joystick.ADC_X_center - x)) * 2.0f/PI ;
 8001fc2:	edd4 7a00 	vldr	s15, [r4]
 8001fc6:	ee38 8a4a 	vsub.f32	s16, s16, s20
 8001fca:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8001fce:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8001fd2:	ee17 0a90 	vmov	r0, s15
 8001fd6:	f7fe fab7 	bl	8000548 <__aeabi_f2d>
 8001fda:	ec41 0b10 	vmov	d0, r0, r1
 8001fde:	f007 fa57 	bl	8009490 <atan>
 8001fe2:	ec57 6b10 	vmov	r6, r7, d0
 8001fe6:	ee18 0a90 	vmov	r0, s17
 8001fea:	f7fe faad 	bl	8000548 <__aeabi_f2d>
 8001fee:	4632      	mov	r2, r6
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	f7fe fb01 	bl	80005f8 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	f7fe f947 	bl	800028c <__adddf3>
 8001ffe:	a334      	add	r3, pc, #208	; (adr r3, 80020d0 <calc_PWM+0x2d8>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fc22 	bl	800084c <__aeabi_ddiv>
 8002008:	f7fe fdce 	bl	8000ba8 <__aeabi_d2f>
 800200c:	ee08 0a10 	vmov	s16, r0
	}


	// back
	if( ((x > joystick.ADC_X_center - joystick.radius_back) && (x < joystick.ADC_X_center + joystick.radius_back)) &&  (y > joystick.ADC_Y_center + joystick.radius_back) ){
 8002010:	edd4 6a00 	vldr	s13, [r4]
 8002014:	edd4 5a03 	vldr	s11, [r4, #12]
				robot_vel.vel_L = (-1.0f) * (y- joystick.ADC_Y_center - joystick.stable_radius)/(4095.0f- joystick.ADC_Y_center - joystick.stable_radius ) * 100.0f;
 8002018:	ed94 7a02 	vldr	s14, [r4, #8]
	if( ((x > joystick.ADC_X_center - joystick.radius_back) && (x < joystick.ADC_X_center + joystick.radius_back)) &&  (y > joystick.ADC_Y_center + joystick.radius_back) ){
 800201c:	ee76 7ae5 	vsub.f32	s15, s13, s11
 8002020:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8002024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002028:	dd25      	ble.n	8002076 <calc_PWM+0x27e>
 800202a:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800202e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	d51e      	bpl.n	8002076 <calc_PWM+0x27e>
 8002038:	ed94 5a01 	vldr	s10, [r4, #4]
 800203c:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8002040:	ee75 5a85 	vadd.f32	s11, s11, s10
 8002044:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	dd13      	ble.n	8002076 <calc_PWM+0x27e>
				robot_vel.vel_L = (-1.0f) * (y- joystick.ADC_Y_center - joystick.stable_radius)/(4095.0f- joystick.ADC_Y_center - joystick.stable_radius ) * 100.0f;
 800204e:	ed9f 6a25 	vldr	s12, [pc, #148]	; 80020e4 <calc_PWM+0x2ec>
 8002052:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8002056:	ee36 6a45 	vsub.f32	s12, s12, s10
 800205a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800205e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8002062:	eef1 7a67 	vneg.f32	s15, s15
 8002066:	ee87 8a86 	vdiv.f32	s16, s15, s12
 800206a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80020e0 <calc_PWM+0x2e8>
 800206e:	ee28 8a27 	vmul.f32	s16, s16, s15
				robot_vel.vel_R = (-1.0f) * (y- joystick.ADC_Y_center - joystick.stable_radius)/(4095.0f- joystick.ADC_Y_center - joystick.stable_radius ) * 100.0f;
 8002072:	eef0 8a48 	vmov.f32	s17, s16
	}

	// deadband at center
	if( ((x > joystick.ADC_X_center - joystick.stable_radius) && (x < joystick.ADC_X_center + joystick.stable_radius)) && ((y > joystick.ADC_Y_center - joystick.stable_radius) && (y < joystick.ADC_Y_center + joystick.stable_radius)) ){
 8002076:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800207a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	dd1c      	ble.n	80020be <calc_PWM+0x2c6>
 8002084:	ee76 6a87 	vadd.f32	s13, s13, s14
 8002088:	eeb4 9ae6 	vcmpe.f32	s18, s13
 800208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002090:	d515      	bpl.n	80020be <calc_PWM+0x2c6>
 8002092:	edd4 7a01 	vldr	s15, [r4, #4]
 8002096:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 800209a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800209e:	eef4 9ae6 	vcmpe.f32	s19, s13
 80020a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a6:	dd0a      	ble.n	80020be <calc_PWM+0x2c6>
 80020a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ac:	eef4 9ae7 	vcmpe.f32	s19, s15
 80020b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		robot_vel.vel_L = 0.0f;
		robot_vel.vel_R = 0.0f;
 80020b4:	bf44      	itt	mi
 80020b6:	eddf 8a0c 	vldrmi	s17, [pc, #48]	; 80020e8 <calc_PWM+0x2f0>
		robot_vel.vel_L = 0.0f;
 80020ba:	eeb0 8a68 	vmovmi.f32	s16, s17
	}



    return robot_vel;
}
 80020be:	eeb0 0a48 	vmov.f32	s0, s16
 80020c2:	eef0 0a68 	vmov.f32	s1, s17
 80020c6:	b006      	add	sp, #24
 80020c8:	ecbd 8b06 	vpop	{d8-d10}
 80020cc:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80020d0:	53c8d4f1 	.word	0x53c8d4f1
 80020d4:	400921fb 	.word	0x400921fb
 80020d8:	20000004 	.word	0x20000004
 80020dc:	40590000 	.word	0x40590000
 80020e0:	42c80000 	.word	0x42c80000
 80020e4:	457ff000 	.word	0x457ff000
 80020e8:	00000000 	.word	0x00000000

080020ec <truncate_digits_to_send>:
	PWM_duty_cycle result;

	  if (vel_L > 99){
	  	result.vel_L = 99;
	  }
	  if (vel_L < -99){
 80020ec:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002120 <truncate_digits_to_send+0x34>
 80020f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002124 <truncate_digits_to_send+0x38>
 80020f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	eef4 0ae7 	vcmpe.f32	s1, s15
 8002100:	bf54      	ite	pl
 8002102:	eeb0 0a47 	vmovpl.f32	s0, s14
 8002106:	eeb0 0a67 	vmovmi.f32	s0, s15

	  if (vel_R > 99){
	  	result.vel_R = 99;
	  }

	  if (vel_R < -99){
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
PWM_duty_cycle truncate_digits_to_send(float vel_L, float vel_R){
 800210e:	b084      	sub	sp, #16
	  	result.vel_R = -99;
	  }

	  return result;
}
 8002110:	bf54      	ite	pl
 8002112:	eef0 0a47 	vmovpl.f32	s1, s14
 8002116:	eef0 0a67 	vmovmi.f32	s1, s15
 800211a:	b004      	add	sp, #16
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	c2c60000 	.word	0xc2c60000
 8002124:	42c60000 	.word	0x42c60000

08002128 <calc_dirs>:

Wheels_directions calc_dirs(int velocity_left, int velocity_right){

	Wheels_directions robot_dirs;

	if(velocity_left > 0){
 8002128:	2900      	cmp	r1, #0
 800212a:	bfcc      	ite	gt
 800212c:	2100      	movgt	r1, #0
 800212e:	2101      	movle	r1, #1
	}
	else {
		robot_dirs.dirL = 1;
	}

	if(velocity_right > 0){
 8002130:	2a00      	cmp	r2, #0
 8002132:	bfcc      	ite	gt
 8002134:	2200      	movgt	r2, #0
 8002136:	2201      	movle	r2, #1
	}
	else {
		robot_dirs.dirR = 1;
	}

	return robot_dirs;
 8002138:	6001      	str	r1, [r0, #0]
 800213a:	6042      	str	r2, [r0, #4]
}
 800213c:	4770      	bx	lr

0800213e <count_digits>:


int count_digits(int number){
	int digits = 0;
	if (number == 0) return 1;
 800213e:	b140      	cbz	r0, 8002152 <count_digits+0x14>
	if (number < 0) digits = 1;
 8002140:	0fc3      	lsrs	r3, r0, #31
	while (number) {
		number /= 10;
 8002142:	220a      	movs	r2, #10
		digits++;
 8002144:	3301      	adds	r3, #1
		number /= 10;
 8002146:	fb90 f0f2 	sdiv	r0, r0, r2
	while (number) {
 800214a:	2800      	cmp	r0, #0
 800214c:	d1fa      	bne.n	8002144 <count_digits+0x6>
	}
	return digits;
}
 800214e:	4618      	mov	r0, r3
 8002150:	4770      	bx	lr
	if (number == 0) return 1;
 8002152:	2301      	movs	r3, #1
 8002154:	e7fb      	b.n	800214e <count_digits+0x10>
	...

08002158 <__io_putchar>:
#include "usart.h"



int __io_putchar(int ch)
{
 8002158:	b507      	push	{r0, r1, r2, lr}
  if (ch == '\n') {
 800215a:	280a      	cmp	r0, #10
{
 800215c:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 800215e:	d102      	bne.n	8002166 <__io_putchar+0xe>
    __io_putchar('\r');
 8002160:	200d      	movs	r0, #13
 8002162:	f7ff fff9 	bl	8002158 <__io_putchar>
  }

  HAL_UART_Transmit(&UART_HANDLE, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	2201      	movs	r2, #1
 800216c:	a901      	add	r1, sp, #4
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <__io_putchar+0x24>)
 8002170:	f003 fe4a 	bl	8005e08 <HAL_UART_Transmit>

  return 1;
}
 8002174:	2001      	movs	r0, #1
 8002176:	b003      	add	sp, #12
 8002178:	f85d fb04 	ldr.w	pc, [sp], #4
 800217c:	2000a5c0 	.word	0x2000a5c0

08002180 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8002182:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <MX_USART2_UART_Init+0x38>)
{
 8002184:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8002186:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800218a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800218e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002190:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002192:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 800219e:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021a2:	f003 febe 	bl	8005f22 <HAL_UART_Init>
 80021a6:	b118      	cbz	r0, 80021b0 <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80021ac:	f7ff bbfe 	b.w	80019ac <Error_Handler>
}
 80021b0:	bd08      	pop	{r3, pc}
 80021b2:	bf00      	nop
 80021b4:	2000a5c0 	.word	0x2000a5c0
 80021b8:	40004400 	.word	0x40004400

080021bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021bc:	b510      	push	{r4, lr}
 80021be:	b0aa      	sub	sp, #168	; 0xa8
 80021c0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	2214      	movs	r2, #20
 80021c4:	2100      	movs	r1, #0
 80021c6:	a803      	add	r0, sp, #12
 80021c8:	f004 fc1a 	bl	8006a00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021cc:	2288      	movs	r2, #136	; 0x88
 80021ce:	2100      	movs	r1, #0
 80021d0:	a808      	add	r0, sp, #32
 80021d2:	f004 fc15 	bl	8006a00 <memset>
  if(uartHandle->Instance==USART2)
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_UART_MspInit+0x8c>)
 80021da:	429a      	cmp	r2, r3
 80021dc:	d131      	bne.n	8002242 <HAL_UART_MspInit+0x86>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021de:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021e2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e4:	f002 f8c4 	bl	8004370 <HAL_RCCEx_PeriphCLKConfig>
 80021e8:	b108      	cbz	r0, 80021ee <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80021ea:	f7ff fbdf 	bl	80019ac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_UART_MspInit+0x90>)
 80021f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021f6:	659a      	str	r2, [r3, #88]	; 0x58
 80021f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	64da      	str	r2, [r3, #76]	; 0x4c
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	9302      	str	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2400      	movs	r4, #0
 800221e:	2303      	movs	r3, #3
 8002220:	e9cd 4305 	strd	r4, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002226:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800222c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f001 fa95 	bl	800375c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002232:	2026      	movs	r0, #38	; 0x26
 8002234:	4622      	mov	r2, r4
 8002236:	4621      	mov	r1, r4
 8002238:	f001 f8fe 	bl	8003438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800223c:	2026      	movs	r0, #38	; 0x26
 800223e:	f001 f92d 	bl	800349c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002242:	b02a      	add	sp, #168	; 0xa8
 8002244:	bd10      	pop	{r4, pc}
 8002246:	bf00      	nop
 8002248:	40004400 	.word	0x40004400
 800224c:	40021000 	.word	0x40021000

08002250 <nRF24_SendSpi>:
{
	HAL_Delay(Time);
}

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002250:	460a      	mov	r2, r1
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8002252:	4601      	mov	r1, r0
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <nRF24_SendSpi+0x10>)
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	6800      	ldr	r0, [r0, #0]
 800225c:	f002 bbf4 	b.w	8004a48 <HAL_SPI_Transmit>
 8002260:	2000a654 	.word	0x2000a654

08002264 <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002264:	b513      	push	{r0, r1, r4, lr}
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
	tmp[1] = val;

	NRF24_CSN_LOW;
 8002266:	4c0b      	ldr	r4, [pc, #44]	; (8002294 <nRF24_WriteRegister+0x30>)
	tmp[1] = val;
 8002268:	f88d 1005 	strb.w	r1, [sp, #5]
	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 800226c:	f040 0020 	orr.w	r0, r0, #32
 8002270:	f88d 0004 	strb.w	r0, [sp, #4]
	NRF24_CSN_LOW;
 8002274:	2200      	movs	r2, #0
 8002276:	4620      	mov	r0, r4
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	f001 fb4d 	bl	8003918 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 800227e:	a801      	add	r0, sp, #4
 8002280:	2102      	movs	r1, #2
 8002282:	f7ff ffe5 	bl	8002250 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002286:	2201      	movs	r2, #1
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	4620      	mov	r0, r4
 800228c:	f001 fb44 	bl	8003918 <HAL_GPIO_WritePin>
}
 8002290:	b002      	add	sp, #8
 8002292:	bd10      	pop	{r4, pc}
 8002294:	48000800 	.word	0x48000800

08002298 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8002298:	b573      	push	{r0, r1, r4, r5, r6, lr}
	reg = NRF24_CMD_W_REGISTER | reg;

	NRF24_CSN_LOW;
 800229a:	4e0e      	ldr	r6, [pc, #56]	; (80022d4 <nRF24_WriteRegisters+0x3c>)
	reg = NRF24_CMD_W_REGISTER | reg;
 800229c:	f040 0020 	orr.w	r0, r0, #32
{
 80022a0:	460c      	mov	r4, r1
 80022a2:	4615      	mov	r5, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 80022a4:	f88d 0007 	strb.w	r0, [sp, #7]
	NRF24_CSN_LOW;
 80022a8:	2200      	movs	r2, #0
 80022aa:	4630      	mov	r0, r6
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	f001 fb33 	bl	8003918 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80022b2:	f10d 0007 	add.w	r0, sp, #7
 80022b6:	2101      	movs	r1, #1
 80022b8:	f7ff ffca 	bl	8002250 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 80022bc:	4629      	mov	r1, r5
 80022be:	4620      	mov	r0, r4
 80022c0:	f7ff ffc6 	bl	8002250 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80022c4:	2201      	movs	r2, #1
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	4630      	mov	r0, r6
 80022ca:	f001 fb25 	bl	8003918 <HAL_GPIO_WritePin>
}
 80022ce:	b002      	add	sp, #8
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
 80022d2:	bf00      	nop
 80022d4:	48000800 	.word	0x48000800

080022d8 <nRF24_ReadRegister>:
{
 80022d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NRF24_CSN_LOW;
 80022da:	4c0f      	ldr	r4, [pc, #60]	; (8002318 <nRF24_ReadRegister+0x40>)
{
 80022dc:	f88d 0007 	strb.w	r0, [sp, #7]
	NRF24_CSN_LOW;
 80022e0:	2200      	movs	r2, #0
 80022e2:	4620      	mov	r0, r4
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	f001 fb17 	bl	8003918 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80022ea:	f10d 0007 	add.w	r0, sp, #7
 80022ee:	2101      	movs	r1, #1
 80022f0:	f7ff ffae 	bl	8002250 <nRF24_SendSpi>
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <nRF24_ReadRegister+0x44>)
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	f10d 010f 	add.w	r1, sp, #15
 80022fe:	2201      	movs	r2, #1
 8002300:	6800      	ldr	r0, [r0, #0]
 8002302:	f002 fd96 	bl	8004e32 <HAL_SPI_Receive>
	NRF24_CSN_HIGH;
 8002306:	4620      	mov	r0, r4
 8002308:	2201      	movs	r2, #1
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	f001 fb04 	bl	8003918 <HAL_GPIO_WritePin>
}
 8002310:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002314:	b004      	add	sp, #16
 8002316:	bd10      	pop	{r4, pc}
 8002318:	48000800 	.word	0x48000800
 800231c:	2000a654 	.word	0x2000a654

08002320 <nRF24_ReadRegisters>:
{
 8002320:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NRF24_CSN_LOW;
 8002322:	4e0f      	ldr	r6, [pc, #60]	; (8002360 <nRF24_ReadRegisters+0x40>)
{
 8002324:	f88d 0007 	strb.w	r0, [sp, #7]
 8002328:	460c      	mov	r4, r1
 800232a:	4615      	mov	r5, r2
	NRF24_CSN_LOW;
 800232c:	4630      	mov	r0, r6
 800232e:	2200      	movs	r2, #0
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	f001 faf1 	bl	8003918 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8002336:	f10d 0007 	add.w	r0, sp, #7
 800233a:	2101      	movs	r1, #1
 800233c:	f7ff ff88 	bl	8002250 <nRF24_SendSpi>
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <nRF24_ReadRegisters+0x44>)
 8002342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002346:	462a      	mov	r2, r5
 8002348:	4621      	mov	r1, r4
 800234a:	6800      	ldr	r0, [r0, #0]
 800234c:	f002 fd71 	bl	8004e32 <HAL_SPI_Receive>
	NRF24_CSN_HIGH;
 8002350:	2201      	movs	r2, #1
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	4630      	mov	r0, r6
 8002356:	f001 fadf 	bl	8003918 <HAL_GPIO_WritePin>
}
 800235a:	b002      	add	sp, #8
 800235c:	bd70      	pop	{r4, r5, r6, pc}
 800235e:	bf00      	nop
 8002360:	48000800 	.word	0x48000800
 8002364:	2000a654 	.word	0x2000a654

08002368 <nRF24_ReadConfig>:
	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff bfb5 	b.w	80022d8 <nRF24_ReadRegister>

0800236e <nRF24_WriteConfig>:
}

void nRF24_WriteConfig(uint8_t conf)
{
 800236e:	4601      	mov	r1, r0
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff bf77 	b.w	8002264 <nRF24_WriteRegister>

08002376 <nRF24_SetPALevel>:
}

void nRF24_SetPALevel(uint8_t lev)
{
 8002376:	b510      	push	{r4, lr}
 8002378:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800237a:	2006      	movs	r0, #6
 800237c:	f7ff ffac 	bl	80022d8 <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 8002380:	f020 0307 	bic.w	r3, r0, #7
	rf_setup |= (lev<<1);
 8002384:	ea43 0144 	orr.w	r1, r3, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002388:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
}
 800238c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002390:	2006      	movs	r0, #6
 8002392:	f7ff bf67 	b.w	8002264 <nRF24_WriteRegister>

08002396 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002396:	b510      	push	{r4, lr}
 8002398:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800239a:	2006      	movs	r0, #6
 800239c:	f7ff ff9c 	bl	80022d8 <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
	if(dr == NRF24_RF_DR_250KBPS)
 80023a0:	2c02      	cmp	r4, #2
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80023a2:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 80023a6:	d106      	bne.n	80023b6 <nRF24_SetDataRate+0x20>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80023a8:	f041 0120 	orr.w	r1, r1, #32
	else if(dr == NRF24_RF_DR_2MBPS)
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
}
 80023ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80023b0:	2006      	movs	r0, #6
 80023b2:	f7ff bf57 	b.w	8002264 <nRF24_WriteRegister>
	else if(dr == NRF24_RF_DR_2MBPS)
 80023b6:	2c01      	cmp	r4, #1
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80023b8:	bf08      	it	eq
 80023ba:	f041 0108 	orreq.w	r1, r1, #8
 80023be:	e7f5      	b.n	80023ac <nRF24_SetDataRate+0x16>

080023c0 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
	return (nRF24_ReadRegister(NRF24_STATUS));
 80023c0:	2007      	movs	r0, #7
 80023c2:	f7ff bf89 	b.w	80022d8 <nRF24_ReadRegister>

080023c6 <nRF24_WriteStatus>:
}

void nRF24_WriteStatus(uint8_t st)
{
 80023c6:	4601      	mov	r1, r0
	nRF24_WriteRegister(NRF24_STATUS, st);
 80023c8:	2007      	movs	r0, #7
 80023ca:	f7ff bf4b 	b.w	8002264 <nRF24_WriteRegister>

080023ce <nRF24_ReadFifoStatus>:
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80023ce:	2017      	movs	r0, #23
 80023d0:	f7ff bf82 	b.w	80022d8 <nRF24_ReadRegister>

080023d4 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 80023d8:	f7ff fff9 	bl	80023ce <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 80023dc:	4120      	asrs	r0, r4
	{
		return 1;
	}

	return 0;
}
 80023de:	f000 0001 	and.w	r0, r0, #1
 80023e2:	bd10      	pop	{r4, pc}

080023e4 <nRF24_IsTxFull>:
	return nRF24_IsBitSetInFifoStatus(NRF24_TX_REUSE);
}

uint8_t nRF24_IsTxFull(void)
{
	return nRF24_IsBitSetInFifoStatus(NRF24_TX_FULL);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff bff5 	b.w	80023d4 <nRF24_IsBitSetInFifoStatus>
	...

080023ec <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 80023ec:	b513      	push	{r0, r1, r4, lr}
	uint8_t command = NRF24_CMD_FLUSH_RX;

	NRF24_CSN_LOW;
 80023ee:	4c0a      	ldr	r4, [pc, #40]	; (8002418 <nRF24_FlushRX+0x2c>)
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80023f0:	23e2      	movs	r3, #226	; 0xe2
	NRF24_CSN_LOW;
 80023f2:	2200      	movs	r2, #0
 80023f4:	4620      	mov	r0, r4
 80023f6:	2180      	movs	r1, #128	; 0x80
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80023f8:	f88d 3007 	strb.w	r3, [sp, #7]
	NRF24_CSN_LOW;
 80023fc:	f001 fa8c 	bl	8003918 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002400:	f10d 0007 	add.w	r0, sp, #7
 8002404:	2101      	movs	r1, #1
 8002406:	f7ff ff23 	bl	8002250 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800240a:	2201      	movs	r2, #1
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	4620      	mov	r0, r4
 8002410:	f001 fa82 	bl	8003918 <HAL_GPIO_WritePin>
}
 8002414:	b002      	add	sp, #8
 8002416:	bd10      	pop	{r4, pc}
 8002418:	48000800 	.word	0x48000800

0800241c <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 800241c:	b513      	push	{r0, r1, r4, lr}
	uint8_t command = NRF24_CMD_FLUSH_TX;

	NRF24_CSN_LOW;
 800241e:	4c0a      	ldr	r4, [pc, #40]	; (8002448 <nRF24_FlushTX+0x2c>)
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002420:	23e1      	movs	r3, #225	; 0xe1
	NRF24_CSN_LOW;
 8002422:	2200      	movs	r2, #0
 8002424:	4620      	mov	r0, r4
 8002426:	2180      	movs	r1, #128	; 0x80
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002428:	f88d 3007 	strb.w	r3, [sp, #7]
	NRF24_CSN_LOW;
 800242c:	f001 fa74 	bl	8003918 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002430:	f10d 0007 	add.w	r0, sp, #7
 8002434:	2101      	movs	r1, #1
 8002436:	f7ff ff0b 	bl	8002250 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800243a:	2201      	movs	r2, #1
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	4620      	mov	r0, r4
 8002440:	f001 fa6a 	bl	8003918 <HAL_GPIO_WritePin>
}
 8002444:	b002      	add	sp, #8
 8002446:	bd10      	pop	{r4, pc}
 8002448:	48000800 	.word	0x48000800

0800244c <nRF24_TX_Mode>:
{
 800244c:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 800244e:	2200      	movs	r2, #0
 8002450:	2140      	movs	r1, #64	; 0x40
 8002452:	480b      	ldr	r0, [pc, #44]	; (8002480 <nRF24_TX_Mode+0x34>)
 8002454:	f001 fa60 	bl	8003918 <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8002458:	f7ff ff86 	bl	8002368 <nRF24_ReadConfig>
	config &= ~(1<<NRF24_PRIM_RX);
 800245c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 8002460:	f040 0002 	orr.w	r0, r0, #2
 8002464:	f7ff ff83 	bl	800236e <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002468:	2070      	movs	r0, #112	; 0x70
 800246a:	f7ff ffac 	bl	80023c6 <nRF24_WriteStatus>
	nRF24_FlushRX();
 800246e:	f7ff ffbd 	bl	80023ec <nRF24_FlushRX>
	nRF24_FlushTX();
 8002472:	f7ff ffd3 	bl	800241c <nRF24_FlushTX>
}
 8002476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(Time);
 800247a:	2001      	movs	r0, #1
 800247c:	f000 bb1a 	b.w	8002ab4 <HAL_Delay>
 8002480:	48000400 	.word	0x48000400

08002484 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8002488:	f7ff ff6e 	bl	8002368 <nRF24_ReadConfig>

	if(onoff)
 800248c:	b134      	cbz	r4, 800249c <nRF24_EnableCRC+0x18>
		config |= (1<<NRF24_EN_CRC);
 800248e:	f040 0008 	orr.w	r0, r0, #8
 8002492:	b2c0      	uxtb	r0, r0
	else
		config &= ~(1<<NRF24_EN_CRC);
	nRF24_WriteConfig(config);
}
 8002494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nRF24_WriteConfig(config);
 8002498:	f7ff bf69 	b.w	800236e <nRF24_WriteConfig>
		config &= ~(1<<NRF24_EN_CRC);
 800249c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80024a0:	e7f8      	b.n	8002494 <nRF24_EnableCRC+0x10>

080024a2 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80024a2:	b510      	push	{r4, lr}
 80024a4:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 80024a6:	f7ff ff5f 	bl	8002368 <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 80024aa:	2c01      	cmp	r4, #1
		config |= (1<<NRF24_CRCO);
 80024ac:	bf08      	it	eq
 80024ae:	f040 0004 	orreq.w	r0, r0, #4
	else
		config &= ~(1<<NRF24_CRCO);
	nRF24_WriteConfig(config);
}
 80024b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		config |= (1<<NRF24_CRCO);
 80024b6:	bf0c      	ite	eq
 80024b8:	b2c0      	uxtbeq	r0, r0
		config &= ~(1<<NRF24_CRCO);
 80024ba:	f000 00fb 	andne.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 80024be:	f7ff bf56 	b.w	800236e <nRF24_WriteConfig>

080024c2 <nRF24_SetRFChannel>:
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
}

void nRF24_SetRFChannel(uint8_t channel)
{
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80024c2:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80024c6:	2005      	movs	r0, #5
 80024c8:	f7ff becc 	b.w	8002264 <nRF24_WriteRegister>

080024cc <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80024cc:	b538      	push	{r3, r4, r5, lr}
 80024ce:	4604      	mov	r4, r0
	if(pipe > 5)
		pipe = 5; // Block too high pipe number
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80024d0:	2002      	movs	r0, #2
{
 80024d2:	460d      	mov	r5, r1
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80024d4:	f7ff ff00 	bl	80022d8 <nRF24_ReadRegister>
	if(onoff == 1)
		enable_pipe |= (1<<pipe);
 80024d8:	2c05      	cmp	r4, #5
 80024da:	bf28      	it	cs
 80024dc:	2405      	movcs	r4, #5
 80024de:	2301      	movs	r3, #1
 80024e0:	40a3      	lsls	r3, r4
 80024e2:	b25b      	sxtb	r3, r3
	if(onoff == 1)
 80024e4:	2d01      	cmp	r5, #1
		enable_pipe |= (1<<pipe);
 80024e6:	bf0c      	ite	eq
 80024e8:	ea43 0100 	orreq.w	r1, r3, r0
	else
		enable_pipe &= ~(1<<pipe);
 80024ec:	ea20 0103 	bicne.w	r1, r0, r3
 80024f0:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
}
 80024f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80024f6:	2002      	movs	r0, #2
 80024f8:	f7ff beb4 	b.w	8002264 <nRF24_WriteRegister>

080024fc <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4604      	mov	r4, r0
	if(pipe > 5)
		pipe = 5; // Block too high pipe number
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002500:	2001      	movs	r0, #1
{
 8002502:	460d      	mov	r5, r1
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002504:	f7ff fee8 	bl	80022d8 <nRF24_ReadRegister>
	if(onoff == 1)
		enaa |= (1<<pipe);
 8002508:	2c05      	cmp	r4, #5
 800250a:	bf28      	it	cs
 800250c:	2405      	movcs	r4, #5
 800250e:	2301      	movs	r3, #1
 8002510:	40a3      	lsls	r3, r4
 8002512:	b25b      	sxtb	r3, r3
	if(onoff == 1)
 8002514:	2d01      	cmp	r5, #1
		enaa |= (1<<pipe);
 8002516:	bf0c      	ite	eq
 8002518:	ea43 0100 	orreq.w	r1, r3, r0
	else
		enaa &= ~(1<<pipe);
 800251c:	ea20 0103 	bicne.w	r1, r0, r3
 8002520:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
}
 8002522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002526:	2001      	movs	r0, #1
 8002528:	f7ff be9c 	b.w	8002264 <nRF24_WriteRegister>

0800252c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
	if(size > 5)
 800252c:	2803      	cmp	r0, #3
 800252e:	bf38      	it	cc
 8002530:	2003      	movcc	r0, #3
		size = 5; // Maximum are 5 bytes
	if(size < 3)
		size = 3; // Minimum are 3 bytes
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002532:	2805      	cmp	r0, #5
 8002534:	bf28      	it	cs
 8002536:	2005      	movcs	r0, #5
 8002538:	1e81      	subs	r1, r0, #2
 800253a:	b2c9      	uxtb	r1, r1
 800253c:	2003      	movs	r0, #3
 800253e:	f7ff be91 	b.w	8002264 <nRF24_WriteRegister>

08002542 <nRF24_SetRXAddress>:
}

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002542:	b507      	push	{r0, r1, r2, lr}
 8002544:	4602      	mov	r2, r0
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002546:	f100 030a 	add.w	r3, r0, #10
	if((pipe == 0) || (pipe == 1))
 800254a:	2a01      	cmp	r2, #1
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800254c:	b2d8      	uxtb	r0, r3
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800254e:	788b      	ldrb	r3, [r1, #2]
	if((pipe == 0) || (pipe == 1))
 8002550:	d80e      	bhi.n	8002570 <nRF24_SetRXAddress+0x2e>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002552:	780a      	ldrb	r2, [r1, #0]
 8002554:	f88d 2006 	strb.w	r2, [sp, #6]
 8002558:	784a      	ldrb	r2, [r1, #1]
 800255a:	f88d 2005 	strb.w	r2, [sp, #5]
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800255e:	a901      	add	r1, sp, #4
 8002560:	2203      	movs	r2, #3
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002562:	f88d 3004 	strb.w	r3, [sp, #4]
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002566:	f7ff fe97 	bl	8002298 <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 800256a:	b003      	add	sp, #12
 800256c:	f85d fb04 	ldr.w	pc, [sp], #4
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002570:	4619      	mov	r1, r3
}
 8002572:	b003      	add	sp, #12
 8002574:	f85d eb04 	ldr.w	lr, [sp], #4
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002578:	f7ff be74 	b.w	8002264 <nRF24_WriteRegister>

0800257c <nRF24_RX_Mode>:
{
 800257c:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 800257e:	f7ff fef3 	bl	8002368 <nRF24_ReadConfig>
	nRF24_SetRXAddress(0, addr_p0_backup);
 8002582:	490d      	ldr	r1, [pc, #52]	; (80025b8 <nRF24_RX_Mode+0x3c>)
	uint8_t config = nRF24_ReadConfig();
 8002584:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8002586:	2000      	movs	r0, #0
 8002588:	f7ff ffdb 	bl	8002542 <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 800258c:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8002590:	b2c0      	uxtb	r0, r0
 8002592:	f7ff feec 	bl	800236e <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002596:	2070      	movs	r0, #112	; 0x70
 8002598:	f7ff ff15 	bl	80023c6 <nRF24_WriteStatus>
	nRF24_FlushRX();
 800259c:	f7ff ff26 	bl	80023ec <nRF24_FlushRX>
	nRF24_FlushTX();
 80025a0:	f7ff ff3c 	bl	800241c <nRF24_FlushTX>
	NRF24_CE_HIGH;
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <nRF24_RX_Mode+0x40>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	f001 f9b5 	bl	8003918 <HAL_GPIO_WritePin>
}
 80025ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(Time);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f000 ba7e 	b.w	8002ab4 <HAL_Delay>
 80025b8:	2000a650 	.word	0x2000a650
 80025bc:	48000400 	.word	0x48000400

080025c0 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80025c0:	b513      	push	{r0, r1, r4, lr}
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80025c2:	2203      	movs	r2, #3
{
 80025c4:	4604      	mov	r4, r0
	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80025c6:	a901      	add	r1, sp, #4
 80025c8:	200a      	movs	r0, #10
 80025ca:	f7ff fea9 	bl	8002320 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <nRF24_SetTXAddress+0x4c>)
 80025d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80025d4:	709a      	strb	r2, [r3, #2]
 80025d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80025da:	705a      	strb	r2, [r3, #1]
 80025dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80025e0:	701a      	strb	r2, [r3, #0]

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80025e2:	7823      	ldrb	r3, [r4, #0]
 80025e4:	f88d 3006 	strb.w	r3, [sp, #6]
 80025e8:	7863      	ldrb	r3, [r4, #1]
 80025ea:	f88d 3005 	strb.w	r3, [sp, #5]
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80025ee:	a901      	add	r1, sp, #4
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80025f0:	78a3      	ldrb	r3, [r4, #2]
 80025f2:	f88d 3004 	strb.w	r3, [sp, #4]
	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80025f6:	2203      	movs	r2, #3
 80025f8:	200a      	movs	r0, #10
 80025fa:	f7ff fe4d 	bl	8002298 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80025fe:	2203      	movs	r2, #3
 8002600:	a901      	add	r1, sp, #4
 8002602:	2010      	movs	r0, #16
 8002604:	f7ff fe48 	bl	8002298 <nRF24_WriteRegisters>
}
 8002608:	b002      	add	sp, #8
 800260a:	bd10      	pop	{r4, pc}
 800260c:	2000a650 	.word	0x2000a650

08002610 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002610:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8002612:	f7ff fed5 	bl	80023c0 <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002616:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
}
 800261a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	nRF24_WriteStatus(status);
 800261e:	b2c0      	uxtb	r0, r0
 8002620:	f7ff bed1 	b.w	80023c6 <nRF24_WriteStatus>

08002624 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8002624:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8002626:	2060      	movs	r0, #96	; 0x60
 8002628:	f7ff fe56 	bl	80022d8 <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 800262c:	2820      	cmp	r0, #32
 800262e:	d905      	bls.n	800263c <nRF24_GetDynamicPayloadSize+0x18>
    {
        nRF24_FlushRX();
 8002630:	f7ff fedc 	bl	80023ec <nRF24_FlushRX>
	HAL_Delay(Time);
 8002634:	2002      	movs	r0, #2
 8002636:	f000 fa3d 	bl	8002ab4 <HAL_Delay>
 800263a:	2000      	movs	r0, #0
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 800263c:	bd08      	pop	{r3, pc}

0800263e <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800263e:	b510      	push	{r4, lr}
 8002640:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8002642:	f7ff fe91 	bl	8002368 <nRF24_ReadConfig>

	if(!onoff)
 8002646:	b934      	cbnz	r4, 8002656 <nRF24_EnableRXDataReadyIRQ+0x18>
		config |= (1<<NRF24_RX_DR);
 8002648:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800264c:	b2c0      	uxtb	r0, r0
	else
		config &= ~(1<<NRF24_RX_DR);

	nRF24_WriteConfig(config);
}
 800264e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nRF24_WriteConfig(config);
 8002652:	f7ff be8c 	b.w	800236e <nRF24_WriteConfig>
		config &= ~(1<<NRF24_RX_DR);
 8002656:	f000 00bf 	and.w	r0, r0, #191	; 0xbf
 800265a:	e7f8      	b.n	800264e <nRF24_EnableRXDataReadyIRQ+0x10>

0800265c <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 800265c:	b510      	push	{r4, lr}
 800265e:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8002660:	f7ff fe82 	bl	8002368 <nRF24_ReadConfig>

	if(!onoff)
 8002664:	b934      	cbnz	r4, 8002674 <nRF24_EnableTXDataSentIRQ+0x18>
		config |= (1<<NRF24_TX_DS);
 8002666:	f040 0020 	orr.w	r0, r0, #32
 800266a:	b2c0      	uxtb	r0, r0
	else
		config &= ~(1<<NRF24_TX_DS);

	nRF24_WriteConfig(config);
}
 800266c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nRF24_WriteConfig(config);
 8002670:	f7ff be7d 	b.w	800236e <nRF24_WriteConfig>
		config &= ~(1<<NRF24_TX_DS);
 8002674:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002678:	e7f8      	b.n	800266c <nRF24_EnableTXDataSentIRQ+0x10>

0800267a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800267a:	b510      	push	{r4, lr}
 800267c:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 800267e:	f7ff fe73 	bl	8002368 <nRF24_ReadConfig>

	if(!onoff)
 8002682:	b934      	cbnz	r4, 8002692 <nRF24_EnableMaxRetransmitIRQ+0x18>
		config |= (1<<NRF24_MAX_RT);
 8002684:	f040 0010 	orr.w	r0, r0, #16
 8002688:	b2c0      	uxtb	r0, r0
	else
		config &= ~(1<<NRF24_MAX_RT);

	nRF24_WriteConfig(config);
}
 800268a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nRF24_WriteConfig(config);
 800268e:	f7ff be6e 	b.w	800236e <nRF24_WriteConfig>
		config &= ~(1<<NRF24_MAX_RT);
 8002692:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 8002696:	e7f8      	b.n	800268a <nRF24_EnableMaxRetransmitIRQ+0x10>

08002698 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8002698:	460a      	mov	r2, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 800269a:	4601      	mov	r1, r0
 800269c:	20a0      	movs	r0, #160	; 0xa0
 800269e:	f7ff bdfb 	b.w	8002298 <nRF24_WriteRegisters>

080026a2 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 80026a2:	b538      	push	{r3, r4, r5, lr}
 80026a4:	460d      	mov	r5, r1
 80026a6:	4604      	mov	r4, r0
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 80026a8:	f7ff ffbc 	bl	8002624 <nRF24_GetDynamicPayloadSize>
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 80026ac:	4621      	mov	r1, r4
	*size = nRF24_GetDynamicPayloadSize();
 80026ae:	4602      	mov	r2, r0
 80026b0:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 80026b2:	2061      	movs	r0, #97	; 0x61
 80026b4:	f7ff fe34 	bl	8002320 <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 80026b8:	2101      	movs	r1, #1
 80026ba:	2007      	movs	r0, #7
 80026bc:	f7ff fdd2 	bl	8002264 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 80026c0:	f7ff fe7e 	bl	80023c0 <nRF24_ReadStatus>
 80026c4:	0683      	lsls	r3, r0, #26
 80026c6:	d505      	bpl.n	80026d4 <nRF24_ReadRXPaylaod+0x32>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 80026c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80026cc:	2120      	movs	r1, #32
 80026ce:	2007      	movs	r0, #7
 80026d0:	f7ff bdc8 	b.w	8002264 <nRF24_WriteRegister>
}
 80026d4:	bd38      	pop	{r3, r4, r5, pc}

080026d6 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 80026d6:	2920      	cmp	r1, #32
{
 80026d8:	b508      	push	{r3, lr}
	if(Size > 32)
 80026da:	d803      	bhi.n	80026e4 <nRF24_SendPacket+0xe>
		return NRF24_NO_TRANSMITTED_PACKET;

	nRF24_WriteTXPayload(Data, Size);
 80026dc:	f7ff ffdc 	bl	8002698 <nRF24_WriteTXPayload>
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
 80026e0:	2000      	movs	r0, #0
}
 80026e2:	bd08      	pop	{r3, pc}
		return NRF24_NO_TRANSMITTED_PACKET;
 80026e4:	2001      	movs	r0, #1
 80026e6:	e7fc      	b.n	80026e2 <nRF24_SendPacket+0xc>

080026e8 <nRF24_IsSomtehingToRead>:

#if (NRF24_USE_RINGBUFFER == 1)
uint8_t nRF24_IsSomtehingToRead(void)
{
 80026e8:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(RXBuffer)?1:0;
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <nRF24_IsSomtehingToRead+0x14>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f7ff f99e 	bl	8001a2e <RB_ElementsAvailable>
}
 80026f2:	3800      	subs	r0, #0
 80026f4:	bf18      	it	ne
 80026f6:	2001      	movne	r0, #1
 80026f8:	bd08      	pop	{r3, pc}
 80026fa:	bf00      	nop
 80026fc:	2000a648 	.word	0x2000a648

08002700 <nRF24_IsSomtehingToSend>:

uint8_t nRF24_IsSomtehingToSend(void)
{
 8002700:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(TXBuffer)?1:0;
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <nRF24_IsSomtehingToSend+0x14>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	f7ff f992 	bl	8001a2e <RB_ElementsAvailable>
}
 800270a:	3800      	subs	r0, #0
 800270c:	bf18      	it	ne
 800270e:	2001      	movne	r0, #1
 8002710:	bd08      	pop	{r3, pc}
 8002712:	bf00      	nop
 8002714:	2000a64c 	.word	0x2000a64c

08002718 <nRF24_SendData>:
#endif

}

nRF24_TX_Status nRF24_SendData(uint8_t* Data, uint8_t Size)
{
 8002718:	b570      	push	{r4, r5, r6, lr}
#if (NRF24_USE_RINGBUFFER == 1)
	uint8_t i = 0;

	while(Size > 0)
	{
		if(RB_OK == RB_WriteToBuffer(TXBuffer, Data[i++]))
 800271a:	4e08      	ldr	r6, [pc, #32]	; (800273c <nRF24_SendData+0x24>)
 800271c:	1e45      	subs	r5, r0, #1
	while(Size > 0)
 800271e:	460c      	mov	r4, r1
 8002720:	b90c      	cbnz	r4, 8002726 <nRF24_SendData+0xe>
			return NRF24_NO_TRANSMITTED_PACKET;
		}
	}
	return NRF24_TRANSMITTED_PACKET;
#endif
}
 8002722:	4620      	mov	r0, r4
 8002724:	bd70      	pop	{r4, r5, r6, pc}
		if(RB_OK == RB_WriteToBuffer(TXBuffer, Data[i++]))
 8002726:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800272a:	6830      	ldr	r0, [r6, #0]
 800272c:	f7ff f94d 	bl	80019ca <RB_WriteToBuffer>
 8002730:	b910      	cbnz	r0, 8002738 <nRF24_SendData+0x20>
			Size--;
 8002732:	3c01      	subs	r4, #1
 8002734:	b2e4      	uxtb	r4, r4
 8002736:	e7f3      	b.n	8002720 <nRF24_SendData+0x8>
			return NRF24_NO_TRANSMITTED_PACKET;
 8002738:	2401      	movs	r4, #1
 800273a:	e7f2      	b.n	8002722 <nRF24_SendData+0xa>
 800273c:	2000a64c 	.word	0x2000a64c

08002740 <nRF24_CheckTXAndSend>:
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	b088      	sub	sp, #32
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8002744:	f7ff ffdc 	bl	8002700 <nRF24_IsSomtehingToSend>
 8002748:	b1e8      	cbz	r0, 8002786 <nRF24_CheckTXAndSend+0x46>
 800274a:	4d13      	ldr	r5, [pc, #76]	; (8002798 <nRF24_CheckTXAndSend+0x58>)
 800274c:	782b      	ldrb	r3, [r5, #0]
 800274e:	b1d3      	cbz	r3, 8002786 <nRF24_CheckTXAndSend+0x46>
	{
		nRF24_TX_Mode();

		Nrf24TXFreeFlag = 0;
		DataCounter = RB_ElementsAvailable(TXBuffer);
 8002750:	4e12      	ldr	r6, [pc, #72]	; (800279c <nRF24_CheckTXAndSend+0x5c>)
		nRF24_TX_Mode();
 8002752:	f7ff fe7b 	bl	800244c <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 8002756:	2400      	movs	r4, #0
		DataCounter = RB_ElementsAvailable(TXBuffer);
 8002758:	6830      	ldr	r0, [r6, #0]
		Nrf24TXFreeFlag = 0;
 800275a:	702c      	strb	r4, [r5, #0]
		DataCounter = RB_ElementsAvailable(TXBuffer);
 800275c:	f7ff f967 	bl	8001a2e <RB_ElementsAvailable>
		if(DataCounter > 32)
 8002760:	2820      	cmp	r0, #32
 8002762:	bf28      	it	cs
 8002764:	2020      	movcs	r0, #32
 8002766:	b2c5      	uxtb	r5, r0
		{
			DataCounter = 32; // Max Payload
		}

		for(i = 0; i < DataCounter; i++)
 8002768:	b2e3      	uxtb	r3, r4
 800276a:	429d      	cmp	r5, r3
 800276c:	d80d      	bhi.n	800278a <nRF24_CheckTXAndSend+0x4a>
		{
			RB_ReadFromBuffer(TXBuffer, &TXPacket[i]);
		}

		nRF24_SendPacket(TXPacket, DataCounter);
 800276e:	4629      	mov	r1, r5
 8002770:	4668      	mov	r0, sp
 8002772:	f7ff ffb0 	bl	80026d6 <nRF24_SendPacket>
		NRF24_CE_HIGH;
 8002776:	480a      	ldr	r0, [pc, #40]	; (80027a0 <nRF24_CheckTXAndSend+0x60>)
 8002778:	2201      	movs	r2, #1
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	f001 f8cc 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_Delay(Time);
 8002780:	2002      	movs	r0, #2
 8002782:	f000 f997 	bl	8002ab4 <HAL_Delay>
		nRF24_Delay_ms(2);
//		NRF24_CE_LOW;

	}
}
 8002786:	b008      	add	sp, #32
 8002788:	bd70      	pop	{r4, r5, r6, pc}
			RB_ReadFromBuffer(TXBuffer, &TXPacket[i]);
 800278a:	eb0d 0104 	add.w	r1, sp, r4
 800278e:	6830      	ldr	r0, [r6, #0]
 8002790:	f7ff f936 	bl	8001a00 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 8002794:	3401      	adds	r4, #1
 8002796:	e7e7      	b.n	8002768 <nRF24_CheckTXAndSend+0x28>
 8002798:	2000a645 	.word	0x2000a645
 800279c:	2000a64c 	.word	0x2000a64c
 80027a0:	48000400 	.word	0x48000400

080027a4 <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 80027a4:	b530      	push	{r4, r5, lr}
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(RXBuffer, RXPacket[i]);
 80027a6:	4d0e      	ldr	r5, [pc, #56]	; (80027e0 <nRF24_ReceiveData+0x3c>)
{
 80027a8:	b08b      	sub	sp, #44	; 0x2c
		nRF24_ReadRXPaylaod(Data, Size);
 80027aa:	f10d 0107 	add.w	r1, sp, #7
 80027ae:	a802      	add	r0, sp, #8
 80027b0:	f7ff ff77 	bl	80026a2 <nRF24_ReadRXPaylaod>
		for(i = 0; i < DataCounter; i++)
 80027b4:	2400      	movs	r4, #0
 80027b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80027ba:	b2e3      	uxtb	r3, r4
 80027bc:	429a      	cmp	r2, r3
 80027be:	d805      	bhi.n	80027cc <nRF24_ReceiveData+0x28>
		}

	}while(!nRF24_IsRxEmpty());
 80027c0:	f7ff fe10 	bl	80023e4 <nRF24_IsTxFull>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d0f0      	beq.n	80027aa <nRF24_ReceiveData+0x6>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 80027c8:	b00b      	add	sp, #44	; 0x2c
 80027ca:	bd30      	pop	{r4, r5, pc}
			RB_WriteToBuffer(RXBuffer, RXPacket[i]);
 80027cc:	3328      	adds	r3, #40	; 0x28
 80027ce:	446b      	add	r3, sp
 80027d0:	6828      	ldr	r0, [r5, #0]
 80027d2:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80027d6:	f7ff f8f8 	bl	80019ca <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 80027da:	3401      	adds	r4, #1
 80027dc:	e7eb      	b.n	80027b6 <nRF24_ReceiveData+0x12>
 80027de:	bf00      	nop
 80027e0:	2000a648 	.word	0x2000a648

080027e4 <nRF24_ReadData>:
#endif

nRF24_RX_Status nRF24_ReadData(uint8_t *Data, uint8_t *Size)
{
 80027e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*Size = 0;
	return NRF24_NO_RECEIVED_PACKET;
#endif
#if (NRF24_USE_INTERRUPT == 1)
	uint8_t i = 0;
	*Size = 0;
 80027e8:	2400      	movs	r4, #0
 80027ea:	700c      	strb	r4, [r1, #0]
{
 80027ec:	4606      	mov	r6, r0
 80027ee:	460d      	mov	r5, r1
	return nRF24_IsSomtehingToRead();
 80027f0:	f7ff ff7a 	bl	80026e8 <nRF24_IsSomtehingToRead>

	  if(nRF24_RXAvailable())
 80027f4:	b160      	cbz	r0, 8002810 <nRF24_ReadData+0x2c>
	  {
#if (NRF24_USE_RINGBUFFER == 1)
		while(RB_OK == RB_ReadFromBuffer(RXBuffer, &Data[i]))
 80027f6:	f8df 8024 	ldr.w	r8, [pc, #36]	; 800281c <nRF24_ReadData+0x38>
 80027fa:	f8d8 0000 	ldr.w	r0, [r8]
 80027fe:	fa56 f184 	uxtab	r1, r6, r4
 8002802:	f7ff f8fd 	bl	8001a00 <RB_ReadFromBuffer>
 8002806:	b2e7      	uxtb	r7, r4
 8002808:	3401      	adds	r4, #1
 800280a:	2800      	cmp	r0, #0
 800280c:	d0f5      	beq.n	80027fa <nRF24_ReadData+0x16>
		{
			i++;
		}
		*Size = i;
 800280e:	702f      	strb	r7, [r5, #0]
	  }
#if (NRF24_USE_RINGBUFFER == 0)
	*Size = RXDataCounter;
	RXDataCounter = 0;
#endif
	if(*Size == 0)
 8002810:	7828      	ldrb	r0, [r5, #0]
		return NRF24_NO_RECEIVED_PACKET;
	}

	return NRF24_RECEIVED_PACKET;
#endif
}
 8002812:	fab0 f080 	clz	r0, r0
 8002816:	0940      	lsrs	r0, r0, #5
 8002818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800281c:	2000a648 	.word	0x2000a648

08002820 <nRF24_IRQ_Handler>:

#if (NRF24_USE_INTERRUPT == 1)
void nRF24_IRQ_Handler(void)
{
	Nrf24InterruptFlag = 1;
 8002820:	4b01      	ldr	r3, [pc, #4]	; (8002828 <nRF24_IRQ_Handler+0x8>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]

}
 8002826:	4770      	bx	lr
 8002828:	2000a644 	.word	0x2000a644

0800282c <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 800282c:	b570      	push	{r4, r5, r6, lr}
	if(Nrf24InterruptFlag == 1)
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <nRF24_IRQ_Read+0x54>)
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	2a01      	cmp	r2, #1
 8002834:	b2d6      	uxtb	r6, r2
 8002836:	d122      	bne.n	800287e <nRF24_IRQ_Read+0x52>
	{
		Nrf24InterruptFlag = 0;
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 800283c:	f7ff fdc0 	bl	80023c0 <nRF24_ReadStatus>
		uint8_t ClearIrq = 0;
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8002840:	f010 0440 	ands.w	r4, r0, #64	; 0x40
		{
			nrf24_rx_flag = 1;
 8002844:	bf1e      	ittt	ne
 8002846:	4b0f      	ldrne	r3, [pc, #60]	; (8002884 <nRF24_IRQ_Read+0x58>)
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8002848:	2440      	movne	r4, #64	; 0x40
			nrf24_rx_flag = 1;
 800284a:	701e      	strbne	r6, [r3, #0]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 800284c:	0682      	lsls	r2, r0, #26
		uint8_t status = nRF24_ReadStatus();
 800284e:	4605      	mov	r5, r0
		if ((status & (1 << NRF24_TX_DS)))
 8002850:	d509      	bpl.n	8002866 <nRF24_IRQ_Read+0x3a>
		{
			NRF24_CE_LOW;
 8002852:	2200      	movs	r2, #0
 8002854:	480c      	ldr	r0, [pc, #48]	; (8002888 <nRF24_IRQ_Read+0x5c>)
 8002856:	2140      	movs	r1, #64	; 0x40
 8002858:	f001 f85e 	bl	8003918 <HAL_GPIO_WritePin>
			nrf24_tx_flag = 1;
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <nRF24_IRQ_Read+0x60>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002862:	f044 0420 	orr.w	r4, r4, #32
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8002866:	06eb      	lsls	r3, r5, #27
		{
			nrf24_mr_flag = 1;
 8002868:	bf41      	itttt	mi
 800286a:	4b09      	ldrmi	r3, [pc, #36]	; (8002890 <nRF24_IRQ_Read+0x64>)
 800286c:	2201      	movmi	r2, #1
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 800286e:	f044 0410 	orrmi.w	r4, r4, #16
			nrf24_mr_flag = 1;
 8002872:	701a      	strbmi	r2, [r3, #0]
		}

		nRF24_WriteStatus(ClearIrq);
 8002874:	4620      	mov	r0, r4
	}
}
 8002876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		nRF24_WriteStatus(ClearIrq);
 800287a:	f7ff bda4 	b.w	80023c6 <nRF24_WriteStatus>
}
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	2000a644 	.word	0x2000a644
 8002884:	2000a659 	.word	0x2000a659
 8002888:	48000400 	.word	0x48000400
 800288c:	2000a65a 	.word	0x2000a65a
 8002890:	2000a658 	.word	0x2000a658

08002894 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002894:	b510      	push	{r4, lr}

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
#endif

	if(nrf24_rx_flag)
 8002896:	4c14      	ldr	r4, [pc, #80]	; (80028e8 <nRF24_Event+0x54>)
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8002898:	f7ff ffc8 	bl	800282c <nRF24_IRQ_Read>
	nRF24_CheckTXAndSend();
 800289c:	f7ff ff50 	bl	8002740 <nRF24_CheckTXAndSend>
	if(nrf24_rx_flag)
 80028a0:	7823      	ldrb	r3, [r4, #0]
 80028a2:	b12b      	cbz	r3, 80028b0 <nRF24_Event+0x1c>
	{
#if (NRF24_USE_INTERRUPT == 1)
		nRF24_ReceiveData();
 80028a4:	f7ff ff7e 	bl	80027a4 <nRF24_ReceiveData>
#endif
		nRF24_EventRxCallback();
 80028a8:	f7fe ff5a 	bl	8001760 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	7023      	strb	r3, [r4, #0]
	}

	if(nrf24_tx_flag)
 80028b0:	4c0e      	ldr	r4, [pc, #56]	; (80028ec <nRF24_Event+0x58>)
 80028b2:	7823      	ldrb	r3, [r4, #0]
 80028b4:	b143      	cbz	r3, 80028c8 <nRF24_Event+0x34>
	{
#if (NRF24_USE_RINGBUFFER == 1)
		Nrf24TXFreeFlag = 1;
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <nRF24_Event+0x5c>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
#endif
		nRF24_EventTxCallback();
 80028bc:	f7fe ff20 	bl	8001700 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	7023      	strb	r3, [r4, #0]
//		if((SPI1->SR)&(1<<7)){
//			printf("busy");
//		}
		nRF24_RX_Mode();
 80028c4:	f7ff fe5a 	bl	800257c <nRF24_RX_Mode>
	}

	if(nrf24_mr_flag)
 80028c8:	4c0a      	ldr	r4, [pc, #40]	; (80028f4 <nRF24_Event+0x60>)
 80028ca:	7823      	ldrb	r3, [r4, #0]
 80028cc:	b153      	cbz	r3, 80028e4 <nRF24_Event+0x50>
	{
		Nrf24TXFreeFlag = 1;
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <nRF24_Event+0x5c>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
		nRF24_EventMrCallback();
 80028d4:	f7fe ff2c 	bl	8001730 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	7023      	strb	r3, [r4, #0]
		nRF24_RX_Mode();
	}
}
 80028dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		nRF24_RX_Mode();
 80028e0:	f7ff be4c 	b.w	800257c <nRF24_RX_Mode>
}
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	bf00      	nop
 80028e8:	2000a659 	.word	0x2000a659
 80028ec:	2000a65a 	.word	0x2000a65a
 80028f0:	2000a645 	.word	0x2000a645
 80028f4:	2000a658 	.word	0x2000a658

080028f8 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80028f8:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 80028fa:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <nRF24_Init+0xc0>)

	NRF24_CE_LOW;
 80028fc:	2200      	movs	r2, #0
	hspi_nrf = hspi;
 80028fe:	6018      	str	r0, [r3, #0]
	NRF24_CE_LOW;
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	482e      	ldr	r0, [pc, #184]	; (80029bc <nRF24_Init+0xc4>)
 8002904:	f001 f808 	bl	8003918 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002908:	2201      	movs	r2, #1
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	482c      	ldr	r0, [pc, #176]	; (80029c0 <nRF24_Init+0xc8>)
 800290e:	f001 f803 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_Delay(Time);
 8002912:	2005      	movs	r0, #5
 8002914:	f000 f8ce 	bl	8002ab4 <HAL_Delay>

	nRF24_Delay_ms(5); // Wait for radio power up

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002918:	2003      	movs	r0, #3
 800291a:	f7ff fd2c 	bl	8002376 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800291e:	2002      	movs	r0, #2
 8002920:	f7ff fd39 	bl	8002396 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002924:	2001      	movs	r0, #1
 8002926:	f7ff fdad 	bl	8002484 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff fdb9 	bl	80024a2 <nRF24_SetCRCLength>
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002930:	2147      	movs	r1, #71	; 0x47
 8002932:	2004      	movs	r0, #4
 8002934:	f7ff fc96 	bl	8002264 <nRF24_WriteRegister>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002938:	201d      	movs	r0, #29
 800293a:	f7ff fccd 	bl	80022d8 <nRF24_ReadRegister>
 800293e:	f040 0004 	orr.w	r0, r0, #4
 8002942:	b2c1      	uxtb	r1, r0
 8002944:	201d      	movs	r0, #29
 8002946:	f7ff fc8d 	bl	8002264 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 800294a:	213f      	movs	r1, #63	; 0x3f
 800294c:	201c      	movs	r0, #28
 800294e:	f7ff fc89 	bl	8002264 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8002952:	200a      	movs	r0, #10
 8002954:	f7ff fdb5 	bl	80024c2 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002958:	2101      	movs	r1, #1
 800295a:	2000      	movs	r0, #0
 800295c:	f7ff fdb6 	bl	80024cc <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002960:	2101      	movs	r1, #1
 8002962:	2000      	movs	r0, #0
 8002964:	f7ff fdca 	bl	80024fc <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002968:	2003      	movs	r0, #3
 800296a:	f7ff fddf 	bl	800252c <nRF24_SetAddressWidth>
	HAL_Delay(Time);
 800296e:	2001      	movs	r0, #1
 8002970:	f000 f8a0 	bl	8002ab4 <HAL_Delay>

	nRF24_Delay_ms(1);

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8002974:	2001      	movs	r0, #1
 8002976:	f7ff fe62 	bl	800263e <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(1);
 800297a:	2001      	movs	r0, #1
 800297c:	f7ff fe6e 	bl	800265c <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f7ff fe7a 	bl	800267a <nRF24_EnableMaxRetransmitIRQ>
	HAL_Delay(Time);
 8002986:	2001      	movs	r0, #1
 8002988:	f000 f894 	bl	8002ab4 <HAL_Delay>

	nRF24_Delay_ms(1);

	nRF24_ClearInterrupts();
 800298c:	f7ff fe40 	bl	8002610 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8002990:	2001      	movs	r0, #1
 8002992:	f7ff fe54 	bl	800263e <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff fe60 	bl	800265c <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <nRF24_Init+0xcc>)
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <nRF24_Init+0xd0>)
	Nrf24TXFreeFlag = 1;
 80029a0:	2201      	movs	r2, #1
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 80029a2:	2178      	movs	r1, #120	; 0x78
	Nrf24TXFreeFlag = 1;
 80029a4:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 80029a6:	f7ff f803 	bl	80019b0 <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
#endif
}
 80029aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 80029ae:	4807      	ldr	r0, [pc, #28]	; (80029cc <nRF24_Init+0xd4>)
 80029b0:	2178      	movs	r1, #120	; 0x78
 80029b2:	f7fe bffd 	b.w	80019b0 <RB_CreateBuffer>
 80029b6:	bf00      	nop
 80029b8:	2000a654 	.word	0x2000a654
 80029bc:	48000400 	.word	0x48000400
 80029c0:	48000800 	.word	0x48000800
 80029c4:	2000a645 	.word	0x2000a645
 80029c8:	2000a64c 	.word	0x2000a64c
 80029cc:	2000a648 	.word	0x2000a648

080029d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029d4:	f7ff f9ae 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d8:	480c      	ldr	r0, [pc, #48]	; (8002a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80029da:	490d      	ldr	r1, [pc, #52]	; (8002a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <LoopForever+0xe>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e0:	e002      	b.n	80029e8 <LoopCopyDataInit>

080029e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029e6:	3304      	adds	r3, #4

080029e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029ec:	d3f9      	bcc.n	80029e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f0:	4c0a      	ldr	r4, [pc, #40]	; (8002a1c <LoopForever+0x16>)
  movs r3, #0
 80029f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f4:	e001      	b.n	80029fa <LoopFillZerobss>

080029f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f8:	3204      	adds	r2, #4

080029fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029fc:	d3fb      	bcc.n	80029f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029fe:	f003 ff5d 	bl	80068bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a02:	f7fe ff19 	bl	8001838 <main>

08002a06 <LoopForever>:

LoopForever:
    b LoopForever
 8002a06:	e7fe      	b.n	8002a06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a10:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002a14:	0800ceb8 	.word	0x0800ceb8
  ldr r2, =_sbss
 8002a18:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002a1c:	2000a670 	.word	0x2000a670

08002a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a20:	e7fe      	b.n	8002a20 <ADC1_2_IRQHandler>
	...

08002a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a24:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_InitTick+0x40>)
{
 8002a28:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002a2a:	7818      	ldrb	r0, [r3, #0]
 8002a2c:	b908      	cbnz	r0, 8002a32 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a2e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a32:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <HAL_InitTick+0x44>)
 8002a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a38:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a3c:	6810      	ldr	r0, [r2, #0]
 8002a3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a42:	f000 fd39 	bl	80034b8 <HAL_SYSTICK_Config>
 8002a46:	4604      	mov	r4, r0
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4c:	2d0f      	cmp	r5, #15
 8002a4e:	d8ee      	bhi.n	8002a2e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	4602      	mov	r2, r0
 8002a52:	4629      	mov	r1, r5
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f000 fcee 	bl	8003438 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_InitTick+0x48>)
 8002a5e:	4620      	mov	r0, r4
 8002a60:	601d      	str	r5, [r3, #0]
  return status;
 8002a62:	e7e5      	b.n	8002a30 <HAL_InitTick+0xc>
 8002a64:	20000014 	.word	0x20000014
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000018 	.word	0x20000018

08002a70 <HAL_Init>:
{
 8002a70:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a72:	2003      	movs	r0, #3
 8002a74:	f000 fcce 	bl	8003414 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7ff ffd3 	bl	8002a24 <HAL_InitTick>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	b918      	cbnz	r0, 8002a8a <HAL_Init+0x1a>
    HAL_MspInit();
 8002a82:	f7ff f8c3 	bl	8001c0c <HAL_MspInit>
}
 8002a86:	4620      	mov	r0, r4
 8002a88:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002a8a:	2401      	movs	r4, #1
 8002a8c:	e7fb      	b.n	8002a86 <HAL_Init+0x16>
	...

08002a90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <HAL_IncTick+0x10>)
 8002a92:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_IncTick+0x14>)
 8002a94:	6811      	ldr	r1, [r2, #0]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	440b      	add	r3, r1
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000a65c 	.word	0x2000a65c
 8002aa4:	20000014 	.word	0x20000014

08002aa8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002aa8:	4b01      	ldr	r3, [pc, #4]	; (8002ab0 <HAL_GetTick+0x8>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	2000a65c 	.word	0x2000a65c

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff fff6 	bl	8002aa8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8002abe:	bf1c      	itt	ne
 8002ac0:	4b05      	ldrne	r3, [pc, #20]	; (8002ad8 <HAL_Delay+0x24>)
 8002ac2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8002ac6:	bf18      	it	ne
 8002ac8:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aca:	f7ff ffed 	bl	8002aa8 <HAL_GetTick>
 8002ace:	1b43      	subs	r3, r0, r5
 8002ad0:	42a3      	cmp	r3, r4
 8002ad2:	d3fa      	bcc.n	8002aca <HAL_Delay+0x16>
  {
  }
}
 8002ad4:	bd38      	pop	{r3, r4, r5, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000014 	.word	0x20000014

08002adc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002adc:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ade:	0dcc      	lsrs	r4, r1, #23
 8002ae0:	f004 0404 	and.w	r4, r4, #4
 8002ae4:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8002ae6:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002aea:	5823      	ldr	r3, [r4, r0]
 8002aec:	2507      	movs	r5, #7
 8002aee:	408d      	lsls	r5, r1
 8002af0:	ea23 0305 	bic.w	r3, r3, r5
 8002af4:	fa02 f101 	lsl.w	r1, r2, r1
 8002af8:	430b      	orrs	r3, r1
 8002afa:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002afc:	bd30      	pop	{r4, r5, pc}

08002afe <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002afe:	6880      	ldr	r0, [r0, #8]
}
 8002b00:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b0e:	4604      	mov	r4, r0
 8002b10:	2800      	cmp	r0, #0
 8002b12:	f000 80c6 	beq.w	8002ca2 <HAL_ADC_Init+0x19a>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b16:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002b18:	b925      	cbnz	r5, 8002b24 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1a:	f7fe fa79 	bl	8001010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1e:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b20:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b24:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b26:	6883      	ldr	r3, [r0, #8]
 8002b28:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b2a:	bf41      	itttt	mi
 8002b2c:	6883      	ldrmi	r3, [r0, #8]
 8002b2e:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 8002b32:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8002b36:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b38:	6883      	ldr	r3, [r0, #8]
 8002b3a:	00dd      	lsls	r5, r3, #3
 8002b3c:	f140 8091 	bpl.w	8002c62 <HAL_ADC_Init+0x15a>
 8002b40:	6883      	ldr	r3, [r0, #8]
 8002b42:	00d9      	lsls	r1, r3, #3
 8002b44:	f100 80a4 	bmi.w	8002c90 <HAL_ADC_Init+0x188>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b4a:	f043 0310 	orr.w	r3, r3, #16
 8002b4e:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b58:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b5a:	f7ff ffd0 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b66:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b68:	f040 8098 	bne.w	8002c9c <HAL_ADC_Init+0x194>
    ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b70:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b74:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002b76:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b78:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b7a:	07da      	lsls	r2, r3, #31
 8002b7c:	d411      	bmi.n	8002ba2 <HAL_ADC_Init+0x9a>
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <HAL_ADC_Init+0x1a0>)
 8002b80:	4a4a      	ldr	r2, [pc, #296]	; (8002cac <HAL_ADC_Init+0x1a4>)
 8002b82:	689d      	ldr	r5, [r3, #8]
 8002b84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	6892      	ldr	r2, [r2, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b8c:	432b      	orrs	r3, r5
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	07db      	lsls	r3, r3, #31
 8002b92:	d406      	bmi.n	8002ba2 <HAL_ADC_Init+0x9a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b94:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <HAL_ADC_Init+0x1a8>)
 8002b96:	6865      	ldr	r5, [r4, #4]
 8002b98:	6893      	ldr	r3, [r2, #8]
 8002b9a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002b9e:	432b      	orrs	r3, r5
 8002ba0:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8002ba2:	68e5      	ldr	r5, [r4, #12]
 8002ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ba6:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8002baa:	432b      	orrs	r3, r5
 8002bac:	68a5      	ldr	r5, [r4, #8]
 8002bae:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bb0:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bb2:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8002bb4:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bbc:	bf02      	ittt	eq
 8002bbe:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8002bc0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002bc4:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002bca:	b122      	cbz	r2, 8002bd6 <HAL_ADC_Init+0xce>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8002bcc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bce:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002bd2:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bd4:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bd6:	68c5      	ldr	r5, [r0, #12]
 8002bd8:	4a36      	ldr	r2, [pc, #216]	; (8002cb4 <HAL_ADC_Init+0x1ac>)
 8002bda:	402a      	ands	r2, r5
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002be0:	f7ff ff8d 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	f002 0208 	and.w	r2, r2, #8
 8002bec:	4302      	orrs	r2, r0
 8002bee:	d120      	bne.n	8002c32 <HAL_ADC_Init+0x12a>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bf0:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bf2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bf6:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bf8:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bfa:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bfe:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c02:	f020 0002 	bic.w	r0, r0, #2
 8002c06:	4302      	orrs	r2, r0
 8002c08:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c0a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002c0e:	2a01      	cmp	r2, #1
 8002c10:	d140      	bne.n	8002c94 <HAL_ADC_Init+0x18c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c12:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 8002c16:	6918      	ldr	r0, [r3, #16]
 8002c18:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8002c1c:	f020 0004 	bic.w	r0, r0, #4
 8002c20:	432a      	orrs	r2, r5
 8002c22:	4302      	orrs	r2, r0
 8002c24:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002c26:	4302      	orrs	r2, r0
 8002c28:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002c2a:	4302      	orrs	r2, r0
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c32:	6922      	ldr	r2, [r4, #16]
 8002c34:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c36:	bf05      	ittet	eq
 8002c38:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002c3a:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c3c:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c3e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002c42:	bf06      	itte	eq
 8002c44:	f020 000f 	biceq.w	r0, r0, #15
 8002c48:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c4a:	f022 020f 	bicne.w	r2, r2, #15
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	b003      	add	sp, #12
 8002c60:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002c62:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_ADC_Init+0x1b0>)
 8002c66:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6083      	str	r3, [r0, #8]
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_ADC_Init+0x1b4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 8002c80:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002c82:	9b01      	ldr	r3, [sp, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f43f af5b 	beq.w	8002b40 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002c8a:	9b01      	ldr	r3, [sp, #4]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	e7f7      	b.n	8002c80 <HAL_ADC_Init+0x178>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c90:	2100      	movs	r1, #0
 8002c92:	e762      	b.n	8002b5a <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	e7c9      	b.n	8002c30 <HAL_ADC_Init+0x128>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9c:	f043 0310 	orr.w	r3, r3, #16
 8002ca0:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	e7da      	b.n	8002c5c <HAL_ADC_Init+0x154>
 8002ca6:	bf00      	nop
 8002ca8:	50040000 	.word	0x50040000
 8002cac:	50040200 	.word	0x50040200
 8002cb0:	50040300 	.word	0x50040300
 8002cb4:	fff0c007 	.word	0xfff0c007
 8002cb8:	00030d40 	.word	0x00030d40
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_ADC_ConvCpltCallback>:
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_ADC_ConvHalfCpltCallback>:
 8002cc2:	4770      	bx	lr

08002cc4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cc6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002cc8:	f7ff fffb 	bl	8002cc2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ccc:	bd08      	pop	{r3, pc}

08002cce <HAL_ADC_ErrorCallback>:
 8002cce:	4770      	bx	lr

08002cd0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cd4:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8002cd8:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cdc:	d121      	bne.n	8002d22 <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	6811      	ldr	r1, [r2, #0]
 8002ce8:	0708      	lsls	r0, r1, #28
 8002cea:	d516      	bpl.n	8002d1a <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002cec:	68d1      	ldr	r1, [r2, #12]
 8002cee:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8002cf2:	d10e      	bne.n	8002d12 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002cfa:	d10a      	bne.n	8002d12 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d06:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d08:	bf5e      	ittt	pl
 8002d0a:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8002d0c:	f042 0201 	orrpl.w	r2, r2, #1
 8002d10:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ffd4 	bl	8002cc0 <HAL_ADC_ConvCpltCallback>
}
 8002d18:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d1a:	68d2      	ldr	r2, [r2, #12]
 8002d1c:	f012 0f02 	tst.w	r2, #2
 8002d20:	e7eb      	b.n	8002cfa <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d22:	06d2      	lsls	r2, r2, #27
 8002d24:	d503      	bpl.n	8002d2e <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ffd1 	bl	8002cce <HAL_ADC_ErrorCallback>
 8002d2c:	e7f4      	b.n	8002d18 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	4718      	bx	r3

08002d38 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d38:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002d3a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d3c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d42:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d44:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d4c:	f7ff ffbf 	bl	8002cce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d50:	bd08      	pop	{r3, pc}
	...

08002d54 <HAL_ADC_ConfigChannel>:
{
 8002d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002d5a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002d5e:	2b01      	cmp	r3, #1
{
 8002d60:	4605      	mov	r5, r0
 8002d62:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002d64:	f000 819c 	beq.w	80030a0 <HAL_ADC_ConfigChannel+0x34c>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d6e:	6800      	ldr	r0, [r0, #0]
 8002d70:	f7ff fec5 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	f040 818d 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x340>
    if (sConfig->Rank <= 5U)
 8002d7a:	684b      	ldr	r3, [r1, #4]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d809      	bhi.n	8002d94 <HAL_ADC_ConfigChannel+0x40>
      switch (sConfig->Rank)
 8002d80:	3b02      	subs	r3, #2
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	f200 808c 	bhi.w	8002ea0 <HAL_ADC_ConfigChannel+0x14c>
 8002d88:	e8df f003 	tbb	[pc, r3]
 8002d8c:	87858302 	.word	0x87858302
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002d90:	230c      	movs	r3, #12
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d92:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d94:	6862      	ldr	r2, [r4, #4]
 8002d96:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8002d98:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d9a:	0991      	lsrs	r1, r2, #6
 8002d9c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8002da0:	f001 010c 	and.w	r1, r1, #12
  MODIFY_REG(*preg,
 8002da4:	f002 021f 	and.w	r2, r2, #31
 8002da8:	59ce      	ldr	r6, [r1, r7]
 8002daa:	f04f 0c1f 	mov.w	ip, #31
 8002dae:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002db2:	4093      	lsls	r3, r2
 8002db4:	fa0c f202 	lsl.w	r2, ip, r2
 8002db8:	ea26 0202 	bic.w	r2, r6, r2
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc0:	f7ff fe9d 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc4:	682e      	ldr	r6, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dc6:	68b3      	ldr	r3, [r6, #8]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	4303      	orrs	r3, r0
 8002dce:	d11d      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0xb8>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	68a2      	ldr	r2, [r4, #8]
 8002dd4:	6821      	ldr	r1, [r4, #0]
 8002dd6:	f7ff fe81 	bl	8002adc <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dda:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ddc:	6829      	ldr	r1, [r5, #0]
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	68c8      	ldr	r0, [r1, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002de2:	2e04      	cmp	r6, #4
 8002de4:	f101 0260 	add.w	r2, r1, #96	; 0x60
 8002de8:	d05c      	beq.n	8002ea4 <HAL_ADC_ConfigChannel+0x150>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002dea:	f3c0 01c1 	ubfx	r1, r0, #3, #2
 8002dee:	0048      	lsls	r0, r1, #1
 8002df0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8002df2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8002df6:	4081      	lsls	r1, r0
 8002df8:	48aa      	ldr	r0, [pc, #680]	; (80030a4 <HAL_ADC_ConfigChannel+0x350>)
 8002dfa:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8002dfe:	4038      	ands	r0, r7
 8002e00:	4303      	orrs	r3, r0
 8002e02:	4319      	orrs	r1, r3
 8002e04:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002e08:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e0c:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e0e:	6883      	ldr	r3, [r0, #8]
 8002e10:	07de      	lsls	r6, r3, #31
 8002e12:	d433      	bmi.n	8002e7c <HAL_ADC_ConfigChannel+0x128>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e14:	68e7      	ldr	r7, [r4, #12]
 8002e16:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002e18:	4aa3      	ldr	r2, [pc, #652]	; (80030a8 <HAL_ADC_ConfigChannel+0x354>)
 8002e1a:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8002e1e:	f007 0c18 	and.w	ip, r7, #24
 8002e22:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8002e26:	fa22 f20c 	lsr.w	r2, r2, ip
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	ea21 0106 	bic.w	r1, r1, r6
 8002e30:	430a      	orrs	r2, r1
 8002e32:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e36:	4a9d      	ldr	r2, [pc, #628]	; (80030ac <HAL_ADC_ConfigChannel+0x358>)
 8002e38:	4297      	cmp	r7, r2
 8002e3a:	d11f      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x128>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e3c:	2e00      	cmp	r6, #0
 8002e3e:	f040 8086 	bne.w	8002f4e <HAL_ADC_ConfigChannel+0x1fa>
 8002e42:	0e9a      	lsrs	r2, r3, #26
 8002e44:	3201      	adds	r2, #1
 8002e46:	f002 071f 	and.w	r7, r2, #31
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4e:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e50:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002e54:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e58:	f200 80ab 	bhi.w	8002fb2 <HAL_ADC_ConfigChannel+0x25e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	2e00      	cmp	r6, #0
 8002e60:	f040 8091 	bne.w	8002f86 <HAL_ADC_ConfigChannel+0x232>
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	3301      	adds	r3, #1
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002e70:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e72:	ea42 0103 	orr.w	r1, r2, r3
 8002e76:	68a2      	ldr	r2, [r4, #8]
 8002e78:	f7ff fe30 	bl	8002adc <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e7c:	6821      	ldr	r1, [r4, #0]
 8002e7e:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_ADC_ConfigChannel+0x35c>)
 8002e80:	4219      	tst	r1, r3
 8002e82:	f040 80b1 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x294>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e86:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002e8e:	b003      	add	sp, #12
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e92:	2312      	movs	r3, #18
 8002e94:	e77d      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e96:	2318      	movs	r3, #24
 8002e98:	e77b      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9e:	e778      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002ea0:	2306      	movs	r3, #6
 8002ea2:	e776      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x3e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ea4:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8002ea6:	6e08      	ldr	r0, [r1, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ea8:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eac:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eb0:	2e00      	cmp	r6, #0
 8002eb2:	d138      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x1d2>
 8002eb4:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eb8:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 8002eba:	bf02      	ittt	eq
 8002ebc:	6e0b      	ldreq	r3, [r1, #96]	; 0x60
 8002ebe:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8002ec2:	660b      	streq	r3, [r1, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ec4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	6e48      	ldr	r0, [r1, #100]	; 0x64
 8002eca:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ece:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ed2:	bb6e      	cbnz	r6, 8002f30 <HAL_ADC_ConfigChannel+0x1dc>
 8002ed4:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ed8:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 8002eda:	bf02      	ittt	eq
 8002edc:	6e4b      	ldreq	r3, [r1, #100]	; 0x64
 8002ede:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8002ee2:	664b      	streq	r3, [r1, #100]	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ee4:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	6891      	ldr	r1, [r2, #8]
 8002eea:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002eee:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ef2:	bb10      	cbnz	r0, 8002f3a <HAL_ADC_ConfigChannel+0x1e6>
 8002ef4:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ef8:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8002efa:	bf02      	ittt	eq
 8002efc:	6893      	ldreq	r3, [r2, #8]
 8002efe:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8002f02:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f04:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	68d1      	ldr	r1, [r2, #12]
 8002f0a:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f0e:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f12:	b9b8      	cbnz	r0, 8002f44 <HAL_ADC_ConfigChannel+0x1f0>
 8002f14:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f18:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8002f1a:	bf02      	ittt	eq
 8002f1c:	68d3      	ldreq	r3, [r2, #12]
 8002f1e:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8002f22:	60d3      	streq	r3, [r2, #12]
}
 8002f24:	e772      	b.n	8002e0c <HAL_ADC_ConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	e7c3      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x164>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	e7ce      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	e7d9      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	e7e4      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002f52:	b132      	cbz	r2, 8002f62 <HAL_ADC_ConfigChannel+0x20e>
  return __builtin_clz(value);
 8002f54:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	3201      	adds	r2, #1
 8002f5a:	f002 021f 	and.w	r2, r2, #31
 8002f5e:	2a09      	cmp	r2, #9
 8002f60:	d816      	bhi.n	8002f90 <HAL_ADC_ConfigChannel+0x23c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002f66:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f6a:	3201      	adds	r2, #1
 8002f6c:	0692      	lsls	r2, r2, #26
 8002f6e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002f76:	fab1 f181 	clz	r1, r1
 8002f7a:	3101      	adds	r1, #1
 8002f7c:	f001 071f 	and.w	r7, r1, #31
 8002f80:	2101      	movs	r1, #1
 8002f82:	40b9      	lsls	r1, r7
 8002f84:	e76a      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x108>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	e76a      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x112>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	3201      	adds	r2, #1
 8002f9a:	0692      	lsls	r2, r2, #26
 8002f9c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002fa4:	fab1 f181 	clz	r1, r1
 8002fa8:	3101      	adds	r1, #1
 8002faa:	f001 071f 	and.w	r7, r1, #31
 8002fae:	2101      	movs	r1, #1
 8002fb0:	40b9      	lsls	r1, r7
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	b95e      	cbnz	r6, 8002fce <HAL_ADC_ConfigChannel+0x27a>
 8002fb6:	0e9e      	lsrs	r6, r3, #26
 8002fb8:	3601      	adds	r6, #1
 8002fba:	f006 061f 	and.w	r6, r6, #31
 8002fbe:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8002fc2:	391e      	subs	r1, #30
 8002fc4:	0509      	lsls	r1, r1, #20
 8002fc6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	e753      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002fd2:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fd6:	3101      	adds	r1, #1
 8002fd8:	f001 031f 	and.w	r3, r1, #31
 8002fdc:	f06f 061d 	mvn.w	r6, #29
 8002fe0:	2103      	movs	r1, #3
 8002fe2:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002fe6:	e7ed      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x270>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <HAL_ADC_ConfigChannel+0x360>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fea:	4a33      	ldr	r2, [pc, #204]	; (80030b8 <HAL_ADC_ConfigChannel+0x364>)
 8002fec:	6898      	ldr	r0, [r3, #8]
 8002fee:	4291      	cmp	r1, r2
 8002ff0:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8002ff4:	d122      	bne.n	800303c <HAL_ADC_ConfigChannel+0x2e8>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ff6:	0201      	lsls	r1, r0, #8
 8002ff8:	f53f af45 	bmi.w	8002e86 <HAL_ADC_ConfigChannel+0x132>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffc:	682a      	ldr	r2, [r5, #0]
 8002ffe:	492f      	ldr	r1, [pc, #188]	; (80030bc <HAL_ADC_ConfigChannel+0x368>)
 8003000:	428a      	cmp	r2, r1
 8003002:	d004      	beq.n	800300e <HAL_ADC_ConfigChannel+0x2ba>
 8003004:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8003008:	428a      	cmp	r2, r1
 800300a:	f47f af3c 	bne.w	8002e86 <HAL_ADC_ConfigChannel+0x132>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003014:	4322      	orrs	r2, r4
 8003016:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800301a:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_ADC_ConfigChannel+0x36c>)
 800301e:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_ADC_ConfigChannel+0x370>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fbb3 f2f2 	udiv	r2, r3, r2
 8003026:	230c      	movs	r3, #12
 8003028:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 800302c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800302e:	9b01      	ldr	r3, [sp, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f43f af28 	beq.w	8002e86 <HAL_ADC_ConfigChannel+0x132>
            wait_loop_index--;
 8003036:	9b01      	ldr	r3, [sp, #4]
 8003038:	3b01      	subs	r3, #1
 800303a:	e7f7      	b.n	800302c <HAL_ADC_ConfigChannel+0x2d8>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800303c:	4a22      	ldr	r2, [pc, #136]	; (80030c8 <HAL_ADC_ConfigChannel+0x374>)
 800303e:	4291      	cmp	r1, r2
 8003040:	d113      	bne.n	800306a <HAL_ADC_ConfigChannel+0x316>
 8003042:	01c2      	lsls	r2, r0, #7
 8003044:	f53f af1f 	bmi.w	8002e86 <HAL_ADC_ConfigChannel+0x132>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003048:	682a      	ldr	r2, [r5, #0]
 800304a:	491c      	ldr	r1, [pc, #112]	; (80030bc <HAL_ADC_ConfigChannel+0x368>)
 800304c:	428a      	cmp	r2, r1
 800304e:	d004      	beq.n	800305a <HAL_ADC_ConfigChannel+0x306>
 8003050:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8003054:	428a      	cmp	r2, r1
 8003056:	f47f af16 	bne.w	8002e86 <HAL_ADC_ConfigChannel+0x132>
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003060:	4322      	orrs	r2, r4
 8003062:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	e70d      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x132>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_ADC_ConfigChannel+0x378>)
 800306c:	4291      	cmp	r1, r2
 800306e:	f47f af0a 	bne.w	8002e86 <HAL_ADC_ConfigChannel+0x132>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003072:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003076:	f47f af06 	bne.w	8002e86 <HAL_ADC_ConfigChannel+0x132>
        if (ADC_VREFINT_INSTANCE(hadc))
 800307a:	6829      	ldr	r1, [r5, #0]
 800307c:	4a0f      	ldr	r2, [pc, #60]	; (80030bc <HAL_ADC_ConfigChannel+0x368>)
 800307e:	4291      	cmp	r1, r2
 8003080:	f47f af01 	bne.w	8002e86 <HAL_ADC_ConfigChannel+0x132>
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800308a:	4322      	orrs	r2, r4
 800308c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003090:	609a      	str	r2, [r3, #8]
}
 8003092:	e6f9      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x134>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003094:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8003096:	f042 0220 	orr.w	r2, r2, #32
 800309a:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800309c:	4618      	mov	r0, r3
 800309e:	e6f3      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 80030a0:	2002      	movs	r0, #2
 80030a2:	e6f4      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x13a>
 80030a4:	03fff000 	.word	0x03fff000
 80030a8:	0007ffff 	.word	0x0007ffff
 80030ac:	407f0000 	.word	0x407f0000
 80030b0:	80080000 	.word	0x80080000
 80030b4:	50040300 	.word	0x50040300
 80030b8:	c7520000 	.word	0xc7520000
 80030bc:	50040000 	.word	0x50040000
 80030c0:	20000000 	.word	0x20000000
 80030c4:	00030d40 	.word	0x00030d40
 80030c8:	cb840000 	.word	0xcb840000
 80030cc:	80000001 	.word	0x80000001

080030d0 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d0:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030d2:	6893      	ldr	r3, [r2, #8]
{
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d8:	07d8      	lsls	r0, r3, #31
 80030da:	d501      	bpl.n	80030e0 <ADC_Enable+0x10>
  return HAL_OK;
 80030dc:	2000      	movs	r0, #0
}
 80030de:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030e0:	6891      	ldr	r1, [r2, #8]
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <ADC_Enable+0x6c>)
 80030e4:	4219      	tst	r1, r3
 80030e6:	d009      	beq.n	80030fc <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030ea:	f043 0310 	orr.w	r3, r3, #16
 80030ee:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80030f8:	2001      	movs	r0, #1
 80030fa:	e7f0      	b.n	80030de <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80030fc:	6893      	ldr	r3, [r2, #8]
 80030fe:	4d10      	ldr	r5, [pc, #64]	; (8003140 <ADC_Enable+0x70>)
 8003100:	402b      	ands	r3, r5
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003108:	f7ff fcce 	bl	8002aa8 <HAL_GetTick>
 800310c:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	6813      	ldr	r3, [r2, #0]
 8003112:	07db      	lsls	r3, r3, #31
 8003114:	d4e2      	bmi.n	80030dc <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003116:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003118:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 800311a:	bf5f      	itttt	pl
 800311c:	6893      	ldrpl	r3, [r2, #8]
 800311e:	402b      	andpl	r3, r5
 8003120:	f043 0301 	orrpl.w	r3, r3, #1
 8003124:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003126:	f7ff fcbf 	bl	8002aa8 <HAL_GetTick>
 800312a:	1b80      	subs	r0, r0, r6
 800312c:	2802      	cmp	r0, #2
 800312e:	d9ee      	bls.n	800310e <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	07da      	lsls	r2, r3, #31
 8003136:	d4ea      	bmi.n	800310e <ADC_Enable+0x3e>
 8003138:	e7d6      	b.n	80030e8 <ADC_Enable+0x18>
 800313a:	bf00      	nop
 800313c:	8000003f 	.word	0x8000003f
 8003140:	7fffffc0 	.word	0x7fffffc0

08003144 <HAL_ADC_Start_DMA>:
{
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003146:	4b36      	ldr	r3, [pc, #216]	; (8003220 <HAL_ADC_Start_DMA+0xdc>)
 8003148:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800314a:	6800      	ldr	r0, [r0, #0]
 800314c:	689d      	ldr	r5, [r3, #8]
{
 800314e:	460e      	mov	r6, r1
 8003150:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003152:	f7ff fcd4 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 8003156:	2800      	cmp	r0, #0
 8003158:	d15c      	bne.n	8003214 <HAL_ADC_Start_DMA+0xd0>
    __HAL_LOCK(hadc);
 800315a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800315e:	2a01      	cmp	r2, #1
 8003160:	d058      	beq.n	8003214 <HAL_ADC_Start_DMA+0xd0>
 8003162:	2301      	movs	r3, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003164:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hadc);
 8003166:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_ADC_Start_DMA+0xe0>)
 800316c:	429a      	cmp	r2, r3
 800316e:	f005 051f 	and.w	r5, r5, #31
 8003172:	d006      	beq.n	8003182 <HAL_ADC_Start_DMA+0x3e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003174:	2d09      	cmp	r5, #9
 8003176:	d848      	bhi.n	800320a <HAL_ADC_Start_DMA+0xc6>
 8003178:	f240 2321 	movw	r3, #545	; 0x221
 800317c:	40eb      	lsrs	r3, r5
 800317e:	07db      	lsls	r3, r3, #31
 8003180:	d543      	bpl.n	800320a <HAL_ADC_Start_DMA+0xc6>
      tmp_hal_status = ADC_Enable(hadc);
 8003182:	4620      	mov	r0, r4
 8003184:	f7ff ffa4 	bl	80030d0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003188:	2800      	cmp	r0, #0
 800318a:	d13a      	bne.n	8003202 <HAL_ADC_Start_DMA+0xbe>
        ADC_STATE_CLR_SET(hadc->State,
 800318c:	6d60      	ldr	r0, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800318e:	6821      	ldr	r1, [r4, #0]
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_ADC_Start_DMA+0xe4>)
        ADC_STATE_CLR_SET(hadc->State,
 8003192:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8003196:	f020 0001 	bic.w	r0, r0, #1
 800319a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800319e:	4299      	cmp	r1, r3
        ADC_STATE_CLR_SET(hadc->State,
 80031a0:	6560      	str	r0, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031a2:	d039      	beq.n	8003218 <HAL_ADC_Start_DMA+0xd4>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031aa:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031ae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031b0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031b4:	bf1c      	itt	ne
 80031b6:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 80031b8:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80031bc:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_ADC_Start_DMA+0xe8>)
 80031c0:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_ADC_Start_DMA+0xec>)
 80031c4:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_ADC_Start_DMA+0xf0>)
 80031c8:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031ca:	231c      	movs	r3, #28
 80031cc:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 80031ce:	2300      	movs	r3, #0
 80031d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031d4:	684b      	ldr	r3, [r1, #4]
 80031d6:	f043 0310 	orr.w	r3, r3, #16
 80031da:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031dc:	68cb      	ldr	r3, [r1, #12]
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031e4:	4632      	mov	r2, r6
 80031e6:	463b      	mov	r3, r7
 80031e8:	3140      	adds	r1, #64	; 0x40
 80031ea:	f000 f9e5 	bl	80035b8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031ee:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80031f0:	6893      	ldr	r3, [r2, #8]
 80031f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6093      	str	r3, [r2, #8]
}
 8003200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8003202:	2300      	movs	r3, #0
 8003204:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003208:	e7fa      	b.n	8003200 <HAL_ADC_Start_DMA+0xbc>
      __HAL_UNLOCK(hadc);
 800320a:	2300      	movs	r3, #0
 800320c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8003210:	2001      	movs	r0, #1
 8003212:	e7f5      	b.n	8003200 <HAL_ADC_Start_DMA+0xbc>
    tmp_hal_status = HAL_BUSY;
 8003214:	2002      	movs	r0, #2
 8003216:	e7f3      	b.n	8003200 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003218:	2d00      	cmp	r5, #0
 800321a:	d0c3      	beq.n	80031a4 <HAL_ADC_Start_DMA+0x60>
 800321c:	e7c6      	b.n	80031ac <HAL_ADC_Start_DMA+0x68>
 800321e:	bf00      	nop
 8003220:	50040300 	.word	0x50040300
 8003224:	50040200 	.word	0x50040200
 8003228:	50040100 	.word	0x50040100
 800322c:	08002cd1 	.word	0x08002cd1
 8003230:	08002cc5 	.word	0x08002cc5
 8003234:	08002d39 	.word	0x08002d39

08003238 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003238:	6802      	ldr	r2, [r0, #0]
{
 800323a:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800323c:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800323e:	6891      	ldr	r1, [r2, #8]
 8003240:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003242:	07c8      	lsls	r0, r1, #31
 8003244:	d401      	bmi.n	800324a <ADC_Disable+0x12>
  return HAL_OK;
 8003246:	2000      	movs	r0, #0
}
 8003248:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 800324a:	0799      	lsls	r1, r3, #30
 800324c:	d4fb      	bmi.n	8003246 <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800324e:	6893      	ldr	r3, [r2, #8]
 8003250:	f003 030d 	and.w	r3, r3, #13
 8003254:	2b01      	cmp	r3, #1
 8003256:	d119      	bne.n	800328c <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8003258:	6893      	ldr	r3, [r2, #8]
 800325a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800325e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003268:	2303      	movs	r3, #3
 800326a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800326c:	f7ff fc1c 	bl	8002aa8 <HAL_GetTick>
 8003270:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	07db      	lsls	r3, r3, #31
 8003278:	d5e5      	bpl.n	8003246 <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800327a:	f7ff fc15 	bl	8002aa8 <HAL_GetTick>
 800327e:	1b40      	subs	r0, r0, r5
 8003280:	2802      	cmp	r0, #2
 8003282:	d9f6      	bls.n	8003272 <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	07da      	lsls	r2, r3, #31
 800328a:	d5f2      	bpl.n	8003272 <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800328e:	f043 0310 	orr.w	r3, r3, #16
 8003292:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003294:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 800329c:	2001      	movs	r0, #1
 800329e:	e7d3      	b.n	8003248 <ADC_Disable+0x10>

080032a0 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a0:	6880      	ldr	r0, [r0, #8]
}
 80032a2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80032a6:	4770      	bx	lr

080032a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80032a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ae:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80032b2:	2b01      	cmp	r3, #1
{
 80032b4:	4604      	mov	r4, r0
 80032b6:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 80032b8:	d03e      	beq.n	8003338 <HAL_ADCEx_Calibration_Start+0x90>
 80032ba:	2301      	movs	r3, #1
 80032bc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032c0:	f7ff ffba 	bl	8003238 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d133      	bne.n	8003330 <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80032ca:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80032cc:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80032d0:	f022 0202 	bic.w	r2, r2, #2
 80032d4:	f042 0202 	orr.w	r2, r2, #2
 80032d8:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80032da:	68b3      	ldr	r3, [r6, #8]
 80032dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80032e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032e4:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 80032e8:	432b      	orrs	r3, r5
 80032ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032f0:	68b3      	ldr	r3, [r6, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	da12      	bge.n	800331c <HAL_ADCEx_Calibration_Start+0x74>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 80032f6:	9b01      	ldr	r3, [sp, #4]
 80032f8:	3301      	adds	r3, #1
 80032fa:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032fc:	9b01      	ldr	r3, [sp, #4]
 80032fe:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003302:	d3f5      	bcc.n	80032f0 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003304:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003306:	f023 0312 	bic.w	r3, r3, #18
 800330a:	f043 0310 	orr.w	r3, r3, #16
 800330e:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003310:	2300      	movs	r3, #0
 8003312:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 8003316:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003318:	b002      	add	sp, #8
 800331a:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800331c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003326:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003328:	2300      	movs	r3, #0
 800332a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 800332e:	e7f3      	b.n	8003318 <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003330:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003332:	f043 0310 	orr.w	r3, r3, #16
 8003336:	e7f6      	b.n	8003326 <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 8003338:	2002      	movs	r0, #2
 800333a:	e7ed      	b.n	8003318 <HAL_ADCEx_Calibration_Start+0x70>

0800333c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800333e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003342:	2b01      	cmp	r3, #1
{
 8003344:	b09b      	sub	sp, #108	; 0x6c
 8003346:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003348:	d05a      	beq.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800334a:	2301      	movs	r3, #1
 800334c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003350:	6817      	ldr	r7, [r2, #0]
 8003352:	4c2c      	ldr	r4, [pc, #176]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003354:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003356:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003358:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800335a:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800335c:	d008      	beq.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335e:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003360:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003364:	f041 0120 	orr.w	r1, r1, #32
 8003368:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 800336a:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800336c:	b01b      	add	sp, #108	; 0x6c
 800336e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003370:	4e25      	ldr	r6, [pc, #148]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8003372:	4630      	mov	r0, r6
 8003374:	f7ff ff94 	bl	80032a0 <LL_ADC_REG_IsConversionOngoing>
 8003378:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800337a:	6810      	ldr	r0, [r2, #0]
 800337c:	f7ff ff90 	bl	80032a0 <LL_ADC_REG_IsConversionOngoing>
 8003380:	4320      	orrs	r0, r4
 8003382:	d138      	bne.n	80033f6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003384:	4c21      	ldr	r4, [pc, #132]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8003386:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003388:	68a3      	ldr	r3, [r4, #8]
 800338a:	f8df c084 	ldr.w	ip, [pc, #132]	; 8003410 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800338e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003392:	b1fd      	cbz	r5, 80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003394:	6848      	ldr	r0, [r1, #4]
 8003396:	4303      	orrs	r3, r0
 8003398:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 800339c:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80033a0:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a2:	68bf      	ldr	r7, [r7, #8]
 80033a4:	68b3      	ldr	r3, [r6, #8]
 80033a6:	f8dc 0008 	ldr.w	r0, [ip, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033aa:	433b      	orrs	r3, r7
 80033ac:	4303      	orrs	r3, r0
 80033ae:	f013 0301 	ands.w	r3, r3, #1
 80033b2:	d004      	beq.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80033b6:	2300      	movs	r3, #0
 80033b8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 80033bc:	e7d6      	b.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 80033be:	6889      	ldr	r1, [r1, #8]
 80033c0:	68a0      	ldr	r0, [r4, #8]
 80033c2:	430d      	orrs	r5, r1
 80033c4:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80033c8:	f021 010f 	bic.w	r1, r1, #15
 80033cc:	430d      	orrs	r5, r1
 80033ce:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 80033d0:	4618      	mov	r0, r3
 80033d2:	e7f0      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x7a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033d4:	60a3      	str	r3, [r4, #8]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68b3      	ldr	r3, [r6, #8]
 80033da:	f8dc 0008 	ldr.w	r0, [ip, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033de:	430b      	orrs	r3, r1
 80033e0:	4303      	orrs	r3, r0
 80033e2:	f013 0301 	ands.w	r3, r3, #1
 80033e6:	d1e5      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x78>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033e8:	68a1      	ldr	r1, [r4, #8]
 80033ea:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80033ee:	f021 010f 	bic.w	r1, r1, #15
 80033f2:	60a1      	str	r1, [r4, #8]
 80033f4:	e7ec      	b.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80033f8:	f041 0120 	orr.w	r1, r1, #32
 80033fc:	6551      	str	r1, [r2, #84]	; 0x54
 80033fe:	e7e7      	b.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
  __HAL_LOCK(hadc);
 8003400:	2002      	movs	r0, #2
 8003402:	e7b3      	b.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x30>
 8003404:	50040000 	.word	0x50040000
 8003408:	50040100 	.word	0x50040100
 800340c:	50040300 	.word	0x50040300
 8003410:	50040200 	.word	0x50040200

08003414 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003416:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003424:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800342c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003430:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343a:	b530      	push	{r4, r5, lr}
 800343c:	68dc      	ldr	r4, [r3, #12]
 800343e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003442:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003446:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	2d04      	cmp	r5, #4
 800344a:	bf28      	it	cs
 800344c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003454:	bf8c      	ite	hi
 8003456:	3c03      	subhi	r4, #3
 8003458:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345a:	fa03 f505 	lsl.w	r5, r3, r5
 800345e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003462:	40a3      	lsls	r3, r4
 8003464:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800346a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003470:	bfac      	ite	ge
 8003472:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	4a08      	ldrlt	r2, [pc, #32]	; (8003498 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347c:	bfb8      	it	lt
 800347e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003482:	b2db      	uxtb	r3, r3
 8003484:	bfaa      	itet	ge
 8003486:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003490:	bd30      	pop	{r4, r5, pc}
 8003492:	bf00      	nop
 8003494:	e000ed00 	.word	0xe000ed00
 8003498:	e000ed14 	.word	0xe000ed14

0800349c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800349c:	2800      	cmp	r0, #0
 800349e:	db08      	blt.n	80034b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a0:	2301      	movs	r3, #1
 80034a2:	0942      	lsrs	r2, r0, #5
 80034a4:	f000 001f 	and.w	r0, r0, #31
 80034a8:	fa03 f000 	lsl.w	r0, r3, r0
 80034ac:	4b01      	ldr	r3, [pc, #4]	; (80034b4 <HAL_NVIC_EnableIRQ+0x18>)
 80034ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80034b2:	4770      	bx	lr
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b8:	3801      	subs	r0, #1
 80034ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80034be:	d20b      	bcs.n	80034d8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	4a05      	ldr	r2, [pc, #20]	; (80034dc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	21f0      	movs	r1, #240	; 0xf0
 80034ca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ce:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80034d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e0:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d05b      	beq.n	800359e <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034e6:	6801      	ldr	r1, [r0, #0]
 80034e8:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_DMA_Init+0xc4>)
 80034ea:	4299      	cmp	r1, r3
 80034ec:	f04f 0414 	mov.w	r4, #20
 80034f0:	d842      	bhi.n	8003578 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034f2:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <HAL_DMA_Init+0xc8>)
 80034f4:	440a      	add	r2, r1
 80034f6:	fbb2 f2f4 	udiv	r2, r2, r4
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80034fe:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8003502:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003504:	2302      	movs	r3, #2
 8003506:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800350a:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003510:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8003512:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003514:	432b      	orrs	r3, r5
 8003516:	6945      	ldr	r5, [r0, #20]
 8003518:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351a:	6985      	ldr	r5, [r0, #24]
 800351c:	432b      	orrs	r3, r5
 800351e:	69c5      	ldr	r5, [r0, #28]
 8003520:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003522:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003524:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003528:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800352c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800352e:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003530:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8003534:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003536:	d016      	beq.n	8003566 <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003538:	6c44      	ldr	r4, [r0, #68]	; 0x44
    if (DMA1 == hdma->DmaBaseAddress)
 800353a:	6c01      	ldr	r1, [r0, #64]	; 0x40
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800353c:	f004 021c 	and.w	r2, r4, #28

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003540:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003542:	230f      	movs	r3, #15
 8003544:	4093      	lsls	r3, r2
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003546:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_DMA_Init+0xcc>)
 800354a:	4291      	cmp	r1, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800354c:	ea6f 0303 	mvn.w	r3, r3
    if (DMA1 == hdma->DmaBaseAddress)
 8003550:	d11a      	bne.n	8003588 <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003552:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 8003556:	4013      	ands	r3, r2
 8003558:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800355c:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 8003560:	431c      	orrs	r4, r3
 8003562:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003566:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003568:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356a:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800356c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003570:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8003574:	4618      	mov	r0, r3
}
 8003576:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <HAL_DMA_Init+0xd0>)
 800357a:	440b      	add	r3, r1
 800357c:	fbb3 f3f4 	udiv	r3, r3, r4
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_DMA_Init+0xd4>)
 8003586:	e7bc      	b.n	8003502 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003588:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 800358c:	400b      	ands	r3, r1
 800358e:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003592:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 8003596:	431c      	orrs	r4, r3
 8003598:	f8c2 44a8 	str.w	r4, [r2, #1192]	; 0x4a8
 800359c:	e7e3      	b.n	8003566 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800359e:	2001      	movs	r0, #1
 80035a0:	e7e9      	b.n	8003576 <HAL_DMA_Init+0x96>
 80035a2:	bf00      	nop
 80035a4:	40020407 	.word	0x40020407
 80035a8:	bffdfff8 	.word	0xbffdfff8
 80035ac:	40020000 	.word	0x40020000
 80035b0:	bffdfbf8 	.word	0xbffdfbf8
 80035b4:	40020400 	.word	0x40020400

080035b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035ba:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80035be:	2c01      	cmp	r4, #1
 80035c0:	d037      	beq.n	8003632 <HAL_DMA_Start_IT+0x7a>
 80035c2:	2401      	movs	r4, #1
 80035c4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80035c8:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80035cc:	2c01      	cmp	r4, #1
 80035ce:	b2e5      	uxtb	r5, r4
 80035d0:	f04f 0600 	mov.w	r6, #0
 80035d4:	f04f 0402 	mov.w	r4, #2
 80035d8:	d129      	bne.n	800362e <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035da:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035de:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e0:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80035e2:	6826      	ldr	r6, [r4, #0]
 80035e4:	f026 0601 	bic.w	r6, r6, #1
 80035e8:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035ea:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 80035ee:	f007 071c 	and.w	r7, r7, #28
 80035f2:	40bd      	lsls	r5, r7
 80035f4:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035f6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035f8:	6883      	ldr	r3, [r0, #8]
 80035fa:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80035fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035fe:	bf0b      	itete	eq
 8003600:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003602:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003604:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003606:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003608:	b14b      	cbz	r3, 800361e <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003610:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2000      	movs	r0, #0
}
 800361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	f043 030a 	orr.w	r3, r3, #10
 800362c:	e7f0      	b.n	8003610 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 800362e:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8003632:	2002      	movs	r0, #2
 8003634:	e7f2      	b.n	800361c <HAL_DMA_Start_IT+0x64>

08003636 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003636:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800363a:	2b02      	cmp	r3, #2
 800363c:	d006      	beq.n	800364c <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363e:	2304      	movs	r3, #4
 8003640:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003642:	2300      	movs	r3, #0
 8003644:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003648:	2001      	movs	r0, #1
 800364a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364c:	6803      	ldr	r3, [r0, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	f022 020e 	bic.w	r2, r2, #14
 8003654:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800365e:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8003662:	2201      	movs	r2, #1
 8003664:	f003 031c 	and.w	r3, r3, #28
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800366e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003670:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003674:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8003678:	4618      	mov	r0, r3
}
 800367a:	4770      	bx	lr

0800367c <HAL_DMA_Abort_IT>:
{
 800367c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800367e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003682:	2a02      	cmp	r2, #2
 8003684:	d003      	beq.n	800368e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003686:	2204      	movs	r2, #4
 8003688:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800368a:	2001      	movs	r0, #1
}
 800368c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800368e:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8003690:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003692:	6811      	ldr	r1, [r2, #0]
 8003694:	f021 010e 	bic.w	r1, r1, #14
 8003698:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800369a:	6811      	ldr	r1, [r2, #0]
 800369c:	f021 0101 	bic.w	r1, r1, #1
 80036a0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036a2:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 80036a6:	2101      	movs	r1, #1
 80036a8:	f002 021c 	and.w	r2, r2, #28
 80036ac:	fa01 f202 	lsl.w	r2, r1, r2
 80036b0:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80036b2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80036b4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80036b8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80036bc:	b113      	cbz	r3, 80036c4 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80036be:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	4620      	mov	r0, r4
 80036c2:	e7e3      	b.n	800368c <HAL_DMA_Abort_IT+0x10>
 80036c4:	4618      	mov	r0, r3
 80036c6:	e7e1      	b.n	800368c <HAL_DMA_Abort_IT+0x10>

080036c8 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80036cc:	6803      	ldr	r3, [r0, #0]
{
 80036ce:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036d0:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036d4:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80036d6:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036d8:	2404      	movs	r4, #4
 80036da:	4094      	lsls	r4, r2
 80036dc:	4234      	tst	r4, r6
 80036de:	d00e      	beq.n	80036fe <HAL_DMA_IRQHandler+0x36>
 80036e0:	f015 0f04 	tst.w	r5, #4
 80036e4:	d00b      	beq.n	80036fe <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036ea:	bf5e      	ittt	pl
 80036ec:	681a      	ldrpl	r2, [r3, #0]
 80036ee:	f022 0204 	bicpl.w	r2, r2, #4
 80036f2:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80036f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036f6:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80036f8:	b373      	cbz	r3, 8003758 <HAL_DMA_IRQHandler+0x90>
}
 80036fa:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80036fc:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036fe:	2402      	movs	r4, #2
 8003700:	4094      	lsls	r4, r2
 8003702:	4234      	tst	r4, r6
 8003704:	d012      	beq.n	800372c <HAL_DMA_IRQHandler+0x64>
 8003706:	f015 0f02 	tst.w	r5, #2
 800370a:	d00f      	beq.n	800372c <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	0695      	lsls	r5, r2, #26
 8003710:	d406      	bmi.n	8003720 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	f022 020a 	bic.w	r2, r2, #10
 8003718:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800371a:	2301      	movs	r3, #1
 800371c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003720:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003722:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003724:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003728:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800372a:	e7e5      	b.n	80036f8 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800372c:	2408      	movs	r4, #8
 800372e:	4094      	lsls	r4, r2
 8003730:	4234      	tst	r4, r6
 8003732:	d011      	beq.n	8003758 <HAL_DMA_IRQHandler+0x90>
 8003734:	072c      	lsls	r4, r5, #28
 8003736:	d50f      	bpl.n	8003758 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003738:	681c      	ldr	r4, [r3, #0]
 800373a:	f024 040e 	bic.w	r4, r4, #14
 800373e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003740:	2301      	movs	r3, #1
 8003742:	fa03 f202 	lsl.w	r2, r3, r2
 8003746:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003748:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800374a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800374e:	2300      	movs	r3, #0
 8003750:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003754:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003756:	e7cf      	b.n	80036f8 <HAL_DMA_IRQHandler+0x30>
}
 8003758:	bc70      	pop	{r4, r5, r6}
 800375a:	4770      	bx	lr

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003760:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8003914 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003764:	4c69      	ldr	r4, [pc, #420]	; (800390c <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8003766:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003768:	680a      	ldr	r2, [r1, #0]
 800376a:	fa32 f503 	lsrs.w	r5, r2, r3
 800376e:	d102      	bne.n	8003776 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003770:	b003      	add	sp, #12
 8003772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003776:	f04f 0e01 	mov.w	lr, #1
 800377a:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800377e:	ea1e 0202 	ands.w	r2, lr, r2
 8003782:	f000 8090 	beq.w	80038a6 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003786:	684d      	ldr	r5, [r1, #4]
 8003788:	f005 0603 	and.w	r6, r5, #3
 800378c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003790:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003794:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003796:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800379a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800379c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037a0:	f200 8083 	bhi.w	80038aa <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 80037a4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037a6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037aa:	68cf      	ldr	r7, [r1, #12]
 80037ac:	fa07 f708 	lsl.w	r7, r7, r8
 80037b0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80037b4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80037b6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037b8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037bc:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80037c0:	409f      	lsls	r7, r3
 80037c2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80037c6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80037c8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037ca:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ce:	688f      	ldr	r7, [r1, #8]
 80037d0:	fa07 f708 	lsl.w	r7, r7, r8
 80037d4:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d8:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 80037da:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037dc:	d071      	beq.n	80038c2 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 80037de:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037e0:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037e4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037e8:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ea:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80037ee:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037f0:	d059      	beq.n	80038a6 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80037f6:	f046 0601 	orr.w	r6, r6, #1
 80037fa:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80037fe:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8003802:	f023 0703 	bic.w	r7, r3, #3
 8003806:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800380a:	f006 0601 	and.w	r6, r6, #1
 800380e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003812:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003814:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003818:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800381a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800381c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003820:	f04f 0c0f 	mov.w	ip, #15
 8003824:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003828:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800382c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003830:	d05f      	beq.n	80038f2 <HAL_GPIO_Init+0x196>
 8003832:	4e37      	ldr	r6, [pc, #220]	; (8003910 <HAL_GPIO_Init+0x1b4>)
 8003834:	42b0      	cmp	r0, r6
 8003836:	d05e      	beq.n	80038f6 <HAL_GPIO_Init+0x19a>
 8003838:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800383c:	42b0      	cmp	r0, r6
 800383e:	d05c      	beq.n	80038fa <HAL_GPIO_Init+0x19e>
 8003840:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003844:	42b0      	cmp	r0, r6
 8003846:	d05a      	beq.n	80038fe <HAL_GPIO_Init+0x1a2>
 8003848:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800384c:	42b0      	cmp	r0, r6
 800384e:	d058      	beq.n	8003902 <HAL_GPIO_Init+0x1a6>
 8003850:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003854:	42b0      	cmp	r0, r6
 8003856:	d056      	beq.n	8003906 <HAL_GPIO_Init+0x1aa>
 8003858:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800385c:	42b0      	cmp	r0, r6
 800385e:	bf0c      	ite	eq
 8003860:	2606      	moveq	r6, #6
 8003862:	2607      	movne	r6, #7
 8003864:	fa06 f60e 	lsl.w	r6, r6, lr
 8003868:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800386c:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 800386e:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8003870:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003872:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8003876:	bf0c      	ite	eq
 8003878:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800387a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800387c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 800387e:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003880:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8003884:	bf0c      	ite	eq
 8003886:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003888:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800388a:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 800388c:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800388e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003892:	bf0c      	ite	eq
 8003894:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003896:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8003898:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800389a:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800389c:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 800389e:	bf54      	ite	pl
 80038a0:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80038a2:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 80038a4:	6026      	str	r6, [r4, #0]
    position++;
 80038a6:	3301      	adds	r3, #1
 80038a8:	e75e      	b.n	8003768 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038aa:	2e03      	cmp	r6, #3
 80038ac:	d18c      	bne.n	80037c8 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 80038ae:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038b0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038b4:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 80038b8:	409f      	lsls	r7, r3
 80038ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 80038be:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c0:	e78d      	b.n	80037de <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 80038c2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80038c6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038ca:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80038ce:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038d2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80038d6:	f04f 0e0f 	mov.w	lr, #15
 80038da:	fa0e fe0b 	lsl.w	lr, lr, fp
 80038de:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038e2:	690f      	ldr	r7, [r1, #16]
 80038e4:	fa07 f70b 	lsl.w	r7, r7, fp
 80038e8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80038ec:	f8ca 7020 	str.w	r7, [sl, #32]
 80038f0:	e775      	b.n	80037de <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038f2:	2600      	movs	r6, #0
 80038f4:	e7b6      	b.n	8003864 <HAL_GPIO_Init+0x108>
 80038f6:	2601      	movs	r6, #1
 80038f8:	e7b4      	b.n	8003864 <HAL_GPIO_Init+0x108>
 80038fa:	2602      	movs	r6, #2
 80038fc:	e7b2      	b.n	8003864 <HAL_GPIO_Init+0x108>
 80038fe:	2603      	movs	r6, #3
 8003900:	e7b0      	b.n	8003864 <HAL_GPIO_Init+0x108>
 8003902:	2604      	movs	r6, #4
 8003904:	e7ae      	b.n	8003864 <HAL_GPIO_Init+0x108>
 8003906:	2605      	movs	r6, #5
 8003908:	e7ac      	b.n	8003864 <HAL_GPIO_Init+0x108>
 800390a:	bf00      	nop
 800390c:	40010400 	.word	0x40010400
 8003910:	48000400 	.word	0x48000400
 8003914:	40021000 	.word	0x40021000

08003918 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003918:	b10a      	cbz	r2, 800391e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800391a:	6181      	str	r1, [r0, #24]
 800391c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800391e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003920:	4770      	bx	lr

08003922 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003922:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003924:	ea01 0203 	and.w	r2, r1, r3
 8003928:	ea21 0103 	bic.w	r1, r1, r3
 800392c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003930:	6181      	str	r1, [r0, #24]
}
 8003932:	4770      	bx	lr

08003934 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003936:	6951      	ldr	r1, [r2, #20]
 8003938:	4201      	tst	r1, r0
{
 800393a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800393c:	d002      	beq.n	8003944 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800393e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003940:	f7fe f824 	bl	800198c <HAL_GPIO_EXTI_Callback>
  }
}
 8003944:	bd08      	pop	{r3, pc}
 8003946:	bf00      	nop
 8003948:	40010400 	.word	0x40010400

0800394c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800394c:	4b02      	ldr	r3, [pc, #8]	; (8003958 <HAL_PWREx_GetVoltageRange+0xc>)
 800394e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003950:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40007000 	.word	0x40007000

0800395c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800395e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003960:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003968:	d11d      	bne.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800396a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396e:	d101      	bne.n	8003974 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003970:	2000      	movs	r0, #0
 8003972:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800397a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2132      	movs	r1, #50	; 0x32
 8003986:	434b      	muls	r3, r1
 8003988:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800398a:	fbb3 f3f1 	udiv	r3, r3, r1
 800398e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003990:	6951      	ldr	r1, [r2, #20]
 8003992:	0549      	lsls	r1, r1, #21
 8003994:	d500      	bpl.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8003996:	b923      	cbnz	r3, 80039a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003998:	6953      	ldr	r3, [r2, #20]
 800399a:	055b      	lsls	r3, r3, #21
 800399c:	d5e8      	bpl.n	8003970 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 800399e:	2003      	movs	r0, #3
}
 80039a0:	4770      	bx	lr
        wait_loop_index--;
 80039a2:	3b01      	subs	r3, #1
 80039a4:	e7f4      	b.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039aa:	bf1f      	itttt	ne
 80039ac:	6813      	ldrne	r3, [r2, #0]
 80039ae:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80039b2:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80039b6:	6013      	strne	r3, [r2, #0]
 80039b8:	e7da      	b.n	8003970 <HAL_PWREx_ControlVoltageScaling+0x14>
 80039ba:	bf00      	nop
 80039bc:	40007000 	.word	0x40007000
 80039c0:	20000000 	.word	0x20000000
 80039c4:	000f4240 	.word	0x000f4240

080039c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039ca:	4d1e      	ldr	r5, [pc, #120]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80039cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80039ce:	00da      	lsls	r2, r3, #3
{
 80039d0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039d2:	d518      	bpl.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039d4:	f7ff ffba 	bl	800394c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80039dc:	d123      	bne.n	8003a26 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039de:	2c80      	cmp	r4, #128	; 0x80
 80039e0:	d929      	bls.n	8003a36 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039e2:	2ca0      	cmp	r4, #160	; 0xa0
 80039e4:	bf8c      	ite	hi
 80039e6:	2002      	movhi	r0, #2
 80039e8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039ea:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80039ec:	6813      	ldr	r3, [r2, #0]
 80039ee:	f023 0307 	bic.w	r3, r3, #7
 80039f2:	4303      	orrs	r3, r0
 80039f4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80039fc:	1a18      	subs	r0, r3, r0
 80039fe:	bf18      	it	ne
 8003a00:	2001      	movne	r0, #1
 8003a02:	b003      	add	sp, #12
 8003a04:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003a18:	f7ff ff98 	bl	800394c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a24:	e7d8      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003a26:	2c80      	cmp	r4, #128	; 0x80
 8003a28:	d807      	bhi.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003a2a:	d008      	beq.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003a2c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003a30:	4258      	negs	r0, r3
 8003a32:	4158      	adcs	r0, r3
 8003a34:	e7d9      	b.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a36:	2000      	movs	r0, #0
 8003a38:	e7d7      	b.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	e7d5      	b.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a3e:	2002      	movs	r0, #2
 8003a40:	e7d3      	b.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003a4e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a50:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a52:	f012 020c 	ands.w	r2, r2, #12
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x18>
 8003a58:	2a0c      	cmp	r2, #12
 8003a5a:	d115      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a5c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a60:	2901      	cmp	r1, #1
 8003a62:	d118      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a64:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003a66:	481d      	ldr	r0, [pc, #116]	; (8003adc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a68:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a6a:	bf55      	itete	pl
 8003a6c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a70:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a72:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a76:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003a7a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a7e:	b34a      	cbz	r2, 8003ad4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a80:	2a0c      	cmp	r2, #12
 8003a82:	d009      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x4c>
 8003a84:	2000      	movs	r0, #0
  return sysclockfreq;
 8003a86:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a88:	2a04      	cmp	r2, #4
 8003a8a:	d022      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a8c:	2a08      	cmp	r2, #8
 8003a8e:	4814      	ldr	r0, [pc, #80]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a90:	bf18      	it	ne
 8003a92:	2000      	movne	r0, #0
 8003a94:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a96:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003a9e:	2a02      	cmp	r2, #2
 8003aa0:	d015      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x82>
 8003aa2:	490f      	ldr	r1, [pc, #60]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003aa4:	2a03      	cmp	r2, #3
 8003aa6:	bf08      	it	eq
 8003aa8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aaa:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003ab2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab4:	68d8      	ldr	r0, [r3, #12]
 8003ab6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aba:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003abe:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac2:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ac4:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003ac8:	fbb2 f0f0 	udiv	r0, r2, r0
 8003acc:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003ace:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ad0:	e7eb      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003ad2:	4804      	ldr	r0, [pc, #16]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	0800ca48 	.word	0x0800ca48
 8003ae0:	007a1200 	.word	0x007a1200
 8003ae4:	00f42400 	.word	0x00f42400

08003ae8 <HAL_RCC_OscConfig>:
{
 8003ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003aec:	4605      	mov	r5, r0
 8003aee:	b918      	cbnz	r0, 8003af8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003af0:	2001      	movs	r0, #1
}
 8003af2:	b003      	add	sp, #12
 8003af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af8:	4c92      	ldr	r4, [pc, #584]	; (8003d44 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003afa:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afc:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afe:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b00:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b02:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b06:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b0a:	d53d      	bpl.n	8003b88 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b0c:	b11e      	cbz	r6, 8003b16 <HAL_RCC_OscConfig+0x2e>
 8003b0e:	2e0c      	cmp	r6, #12
 8003b10:	d166      	bne.n	8003be0 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b12:	2f01      	cmp	r7, #1
 8003b14:	d164      	bne.n	8003be0 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	0799      	lsls	r1, r3, #30
 8003b1a:	d502      	bpl.n	8003b22 <HAL_RCC_OscConfig+0x3a>
 8003b1c:	69ab      	ldr	r3, [r5, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0e6      	beq.n	8003af0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	6a28      	ldr	r0, [r5, #32]
 8003b26:	071a      	lsls	r2, r3, #28
 8003b28:	bf56      	itet	pl
 8003b2a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003b2e:	6823      	ldrmi	r3, [r4, #0]
 8003b30:	091b      	lsrpl	r3, r3, #4
 8003b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b36:	4298      	cmp	r0, r3
 8003b38:	d93b      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b3a:	f7ff ff45 	bl	80039c8 <RCC_SetFlashLatencyFromMSIRange>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d1d6      	bne.n	8003af0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	f043 0308 	orr.w	r3, r3, #8
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	6a2a      	ldr	r2, [r5, #32]
 8003b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b52:	4313      	orrs	r3, r2
 8003b54:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b56:	6863      	ldr	r3, [r4, #4]
 8003b58:	69ea      	ldr	r2, [r5, #28]
 8003b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b62:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b64:	f7ff ff72 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003b68:	68a3      	ldr	r3, [r4, #8]
 8003b6a:	4a77      	ldr	r2, [pc, #476]	; (8003d48 <HAL_RCC_OscConfig+0x260>)
 8003b6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b70:	5cd3      	ldrb	r3, [r2, r3]
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	40d8      	lsrs	r0, r3
 8003b78:	4b74      	ldr	r3, [pc, #464]	; (8003d4c <HAL_RCC_OscConfig+0x264>)
 8003b7a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003b7c:	4b74      	ldr	r3, [pc, #464]	; (8003d50 <HAL_RCC_OscConfig+0x268>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	f7fe ff50 	bl	8002a24 <HAL_InitTick>
        if(status != HAL_OK)
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d1b4      	bne.n	8003af2 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	07d9      	lsls	r1, r3, #31
 8003b8c:	d45f      	bmi.n	8003c4e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	079a      	lsls	r2, r3, #30
 8003b92:	f100 809e 	bmi.w	8003cd2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	0719      	lsls	r1, r3, #28
 8003b9a:	f100 80db 	bmi.w	8003d54 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9e:	682b      	ldr	r3, [r5, #0]
 8003ba0:	075a      	lsls	r2, r3, #29
 8003ba2:	f100 8101 	bmi.w	8003da8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ba6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f040 816a 	bne.w	8003e82 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003bae:	2000      	movs	r0, #0
 8003bb0:	e79f      	b.n	8003af2 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	f043 0308 	orr.w	r3, r3, #8
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bc0:	4303      	orrs	r3, r0
 8003bc2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	69ea      	ldr	r2, [r5, #28]
 8003bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003bd0:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	d1c6      	bne.n	8003b64 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bd6:	f7ff fef7 	bl	80039c8 <RCC_SetFlashLatencyFromMSIRange>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d0c2      	beq.n	8003b64 <HAL_RCC_OscConfig+0x7c>
 8003bde:	e787      	b.n	8003af0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003be0:	69ab      	ldr	r3, [r5, #24]
 8003be2:	b31b      	cbz	r3, 8003c2c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003bec:	f7fe ff5c 	bl	8002aa8 <HAL_GetTick>
 8003bf0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	079b      	lsls	r3, r3, #30
 8003bf6:	d511      	bpl.n	8003c1c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	f043 0308 	orr.w	r3, r3, #8
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	6a2a      	ldr	r2, [r5, #32]
 8003c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c0c:	6863      	ldr	r3, [r4, #4]
 8003c0e:	69ea      	ldr	r2, [r5, #28]
 8003c10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c18:	6063      	str	r3, [r4, #4]
 8003c1a:	e7b5      	b.n	8003b88 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c1c:	f7fe ff44 	bl	8002aa8 <HAL_GetTick>
 8003c20:	eba0 0008 	sub.w	r0, r0, r8
 8003c24:	2802      	cmp	r0, #2
 8003c26:	d9e4      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003c28:	2003      	movs	r0, #3
 8003c2a:	e762      	b.n	8003af2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c34:	f7fe ff38 	bl	8002aa8 <HAL_GetTick>
 8003c38:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	0798      	lsls	r0, r3, #30
 8003c3e:	d5a3      	bpl.n	8003b88 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c40:	f7fe ff32 	bl	8002aa8 <HAL_GetTick>
 8003c44:	eba0 0008 	sub.w	r0, r0, r8
 8003c48:	2802      	cmp	r0, #2
 8003c4a:	d9f6      	bls.n	8003c3a <HAL_RCC_OscConfig+0x152>
 8003c4c:	e7ec      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c4e:	2e08      	cmp	r6, #8
 8003c50:	d003      	beq.n	8003c5a <HAL_RCC_OscConfig+0x172>
 8003c52:	2e0c      	cmp	r6, #12
 8003c54:	d108      	bne.n	8003c68 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c56:	2f03      	cmp	r7, #3
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	039b      	lsls	r3, r3, #14
 8003c5e:	d596      	bpl.n	8003b8e <HAL_RCC_OscConfig+0xa6>
 8003c60:	686b      	ldr	r3, [r5, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d193      	bne.n	8003b8e <HAL_RCC_OscConfig+0xa6>
 8003c66:	e743      	b.n	8003af0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c68:	686b      	ldr	r3, [r5, #4]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d110      	bne.n	8003c92 <HAL_RCC_OscConfig+0x1aa>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c76:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c78:	f7fe ff16 	bl	8002aa8 <HAL_GetTick>
 8003c7c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	0398      	lsls	r0, r3, #14
 8003c82:	d484      	bmi.n	8003b8e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe ff10 	bl	8002aa8 <HAL_GetTick>
 8003c88:	eba0 0008 	sub.w	r0, r0, r8
 8003c8c:	2864      	cmp	r0, #100	; 0x64
 8003c8e:	d9f6      	bls.n	8003c7e <HAL_RCC_OscConfig+0x196>
 8003c90:	e7ca      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c96:	d104      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x1ba>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	e7e6      	b.n	8003c70 <HAL_RCC_OscConfig+0x188>
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ca8:	6022      	str	r2, [r4, #0]
 8003caa:	6822      	ldr	r2, [r4, #0]
 8003cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fef7 	bl	8002aa8 <HAL_GetTick>
 8003cba:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	0399      	lsls	r1, r3, #14
 8003cc0:	f57f af65 	bpl.w	8003b8e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fe fef0 	bl	8002aa8 <HAL_GetTick>
 8003cc8:	eba0 0008 	sub.w	r0, r0, r8
 8003ccc:	2864      	cmp	r0, #100	; 0x64
 8003cce:	d9f5      	bls.n	8003cbc <HAL_RCC_OscConfig+0x1d4>
 8003cd0:	e7aa      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cd2:	2e04      	cmp	r6, #4
 8003cd4:	d003      	beq.n	8003cde <HAL_RCC_OscConfig+0x1f6>
 8003cd6:	2e0c      	cmp	r6, #12
 8003cd8:	d110      	bne.n	8003cfc <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cda:	2f02      	cmp	r7, #2
 8003cdc:	d10e      	bne.n	8003cfc <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	055a      	lsls	r2, r3, #21
 8003ce2:	d503      	bpl.n	8003cec <HAL_RCC_OscConfig+0x204>
 8003ce4:	68eb      	ldr	r3, [r5, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f43f af02 	beq.w	8003af0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cec:	6863      	ldr	r3, [r4, #4]
 8003cee:	692a      	ldr	r2, [r5, #16]
 8003cf0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003cf4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003cf8:	6063      	str	r3, [r4, #4]
 8003cfa:	e74c      	b.n	8003b96 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cfc:	68eb      	ldr	r3, [r5, #12]
 8003cfe:	b17b      	cbz	r3, 8003d20 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d08:	f7fe fece 	bl	8002aa8 <HAL_GetTick>
 8003d0c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	055b      	lsls	r3, r3, #21
 8003d12:	d4eb      	bmi.n	8003cec <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fe fec8 	bl	8002aa8 <HAL_GetTick>
 8003d18:	1bc0      	subs	r0, r0, r7
 8003d1a:	2802      	cmp	r0, #2
 8003d1c:	d9f7      	bls.n	8003d0e <HAL_RCC_OscConfig+0x226>
 8003d1e:	e783      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d28:	f7fe febe 	bl	8002aa8 <HAL_GetTick>
 8003d2c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	0558      	lsls	r0, r3, #21
 8003d32:	f57f af30 	bpl.w	8003b96 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fe feb7 	bl	8002aa8 <HAL_GetTick>
 8003d3a:	1bc0      	subs	r0, r0, r7
 8003d3c:	2802      	cmp	r0, #2
 8003d3e:	d9f6      	bls.n	8003d2e <HAL_RCC_OscConfig+0x246>
 8003d40:	e772      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	0800ca30 	.word	0x0800ca30
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	20000018 	.word	0x20000018
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d54:	696b      	ldr	r3, [r5, #20]
 8003d56:	b19b      	cbz	r3, 8003d80 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8003d58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003d64:	f7fe fea0 	bl	8002aa8 <HAL_GetTick>
 8003d68:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d6a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d6e:	079b      	lsls	r3, r3, #30
 8003d70:	f53f af15 	bmi.w	8003b9e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fe fe98 	bl	8002aa8 <HAL_GetTick>
 8003d78:	1bc0      	subs	r0, r0, r7
 8003d7a:	2802      	cmp	r0, #2
 8003d7c:	d9f5      	bls.n	8003d6a <HAL_RCC_OscConfig+0x282>
 8003d7e:	e753      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8003d80:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003d8c:	f7fe fe8c 	bl	8002aa8 <HAL_GetTick>
 8003d90:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d96:	0798      	lsls	r0, r3, #30
 8003d98:	f57f af01 	bpl.w	8003b9e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fe fe84 	bl	8002aa8 <HAL_GetTick>
 8003da0:	1bc0      	subs	r0, r0, r7
 8003da2:	2802      	cmp	r0, #2
 8003da4:	d9f5      	bls.n	8003d92 <HAL_RCC_OscConfig+0x2aa>
 8003da6:	e73f      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003daa:	00d9      	lsls	r1, r3, #3
 8003dac:	d429      	bmi.n	8003e02 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db4:	65a3      	str	r3, [r4, #88]	; 0x58
 8003db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003dc0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc4:	4f89      	ldr	r7, [pc, #548]	; (8003fec <HAL_RCC_OscConfig+0x504>)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	05da      	lsls	r2, r3, #23
 8003dca:	d51d      	bpl.n	8003e08 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	68ab      	ldr	r3, [r5, #8]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d12b      	bne.n	8003e2a <HAL_RCC_OscConfig+0x342>
 8003dd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003dde:	f7fe fe63 	bl	8002aa8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003de6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003dec:	0798      	lsls	r0, r3, #30
 8003dee:	d542      	bpl.n	8003e76 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8003df0:	f1b8 0f00 	cmp.w	r8, #0
 8003df4:	f43f aed7 	beq.w	8003ba6 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e00:	e6d1      	b.n	8003ba6 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8003e02:	f04f 0800 	mov.w	r8, #0
 8003e06:	e7dd      	b.n	8003dc4 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003e10:	f7fe fe4a 	bl	8002aa8 <HAL_GetTick>
 8003e14:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	05db      	lsls	r3, r3, #23
 8003e1a:	d4d7      	bmi.n	8003dcc <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1c:	f7fe fe44 	bl	8002aa8 <HAL_GetTick>
 8003e20:	eba0 0009 	sub.w	r0, r0, r9
 8003e24:	2802      	cmp	r0, #2
 8003e26:	d9f6      	bls.n	8003e16 <HAL_RCC_OscConfig+0x32e>
 8003e28:	e6fe      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCC_OscConfig+0x354>
 8003e2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003e3a:	e7ca      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2ea>
 8003e3c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8003e48:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003e4c:	f022 0204 	bic.w	r2, r2, #4
 8003e50:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1c2      	bne.n	8003dde <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8003e58:	f7fe fe26 	bl	8002aa8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003e60:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e62:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003e66:	0799      	lsls	r1, r3, #30
 8003e68:	d5c2      	bpl.n	8003df0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe fe1d 	bl	8002aa8 <HAL_GetTick>
 8003e6e:	1bc0      	subs	r0, r0, r7
 8003e70:	4548      	cmp	r0, r9
 8003e72:	d9f6      	bls.n	8003e62 <HAL_RCC_OscConfig+0x37a>
 8003e74:	e6d8      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fe fe17 	bl	8002aa8 <HAL_GetTick>
 8003e7a:	1bc0      	subs	r0, r0, r7
 8003e7c:	4548      	cmp	r0, r9
 8003e7e:	d9b3      	bls.n	8003de8 <HAL_RCC_OscConfig+0x300>
 8003e80:	e6d2      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	f040 808f 	bne.w	8003fa6 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8003e88:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003e8c:	f003 0103 	and.w	r1, r3, #3
 8003e90:	4291      	cmp	r1, r2
 8003e92:	d124      	bne.n	8003ede <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e94:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003e96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e9a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003ea0:	d11d      	bne.n	8003ede <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003ea4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003eac:	d117      	bne.n	8003ede <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eae:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003eb0:	3a07      	subs	r2, #7
 8003eb2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8003eb6:	bf18      	it	ne
 8003eb8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	d10f      	bne.n	8003ede <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ebe:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003ec0:	0852      	lsrs	r2, r2, #1
 8003ec2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003ec6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ec8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ece:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003ed0:	0852      	lsrs	r2, r2, #1
 8003ed2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003ed6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003edc:	d04a      	beq.n	8003f74 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ede:	2e0c      	cmp	r6, #12
 8003ee0:	f43f ae06 	beq.w	8003af0 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	f53f ae02 	bmi.w	8003af0 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	f53f adfe 	bmi.w	8003af0 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efa:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003efc:	f7fe fdd4 	bl	8002aa8 <HAL_GetTick>
 8003f00:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	019f      	lsls	r7, r3, #6
 8003f06:	d42f      	bmi.n	8003f68 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f08:	68e2      	ldr	r2, [r4, #12]
 8003f0a:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003f10:	4313      	orrs	r3, r2
 8003f12:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003f14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f18:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003f1a:	3a01      	subs	r2, #1
 8003f1c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003f20:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003f22:	0912      	lsrs	r2, r2, #4
 8003f24:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003f28:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003f2a:	0852      	lsrs	r2, r2, #1
 8003f2c:	3a01      	subs	r2, #1
 8003f2e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003f32:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003f34:	0852      	lsrs	r2, r2, #1
 8003f36:	3a01      	subs	r2, #1
 8003f38:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003f3c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f44:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8003f4e:	f7fe fdab 	bl	8002aa8 <HAL_GetTick>
 8003f52:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	0198      	lsls	r0, r3, #6
 8003f58:	f53f ae29 	bmi.w	8003bae <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fe fda4 	bl	8002aa8 <HAL_GetTick>
 8003f60:	1b40      	subs	r0, r0, r5
 8003f62:	2802      	cmp	r0, #2
 8003f64:	d9f6      	bls.n	8003f54 <HAL_RCC_OscConfig+0x46c>
 8003f66:	e65f      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe fd9e 	bl	8002aa8 <HAL_GetTick>
 8003f6c:	1b80      	subs	r0, r0, r6
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	d9c7      	bls.n	8003f02 <HAL_RCC_OscConfig+0x41a>
 8003f72:	e659      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	0199      	lsls	r1, r3, #6
 8003f78:	f53f ae19 	bmi.w	8003bae <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f82:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f84:	68e3      	ldr	r3, [r4, #12]
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8003f8c:	f7fe fd8c 	bl	8002aa8 <HAL_GetTick>
 8003f90:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	019a      	lsls	r2, r3, #6
 8003f96:	f53f ae0a 	bmi.w	8003bae <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fe fd85 	bl	8002aa8 <HAL_GetTick>
 8003f9e:	1b40      	subs	r0, r0, r5
 8003fa0:	2802      	cmp	r0, #2
 8003fa2:	d9f6      	bls.n	8003f92 <HAL_RCC_OscConfig+0x4aa>
 8003fa4:	e640      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa6:	2e0c      	cmp	r6, #12
 8003fa8:	f43f ada2 	beq.w	8003af0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003fba:	bf02      	ittt	eq
 8003fbc:	68e3      	ldreq	r3, [r4, #12]
 8003fbe:	f023 0303 	biceq.w	r3, r3, #3
 8003fc2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fc4:	68e3      	ldr	r3, [r4, #12]
 8003fc6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fd6a 	bl	8002aa8 <HAL_GetTick>
 8003fd4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	019b      	lsls	r3, r3, #6
 8003fda:	f57f ade8 	bpl.w	8003bae <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe fd63 	bl	8002aa8 <HAL_GetTick>
 8003fe2:	1b40      	subs	r0, r0, r5
 8003fe4:	2802      	cmp	r0, #2
 8003fe6:	d9f6      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x4ee>
 8003fe8:	e61e      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
 8003fea:	bf00      	nop
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	f99d808c 	.word	0xf99d808c

08003ff4 <HAL_RCC_ClockConfig>:
{
 8003ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	b910      	cbnz	r0, 8004004 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003ffe:	2001      	movs	r0, #1
}
 8004000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004004:	4a40      	ldr	r2, [pc, #256]	; (8004108 <HAL_RCC_ClockConfig+0x114>)
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	428b      	cmp	r3, r1
 800400e:	d32a      	bcc.n	8004066 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	07d9      	lsls	r1, r3, #31
 8004014:	d432      	bmi.n	800407c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004016:	6821      	ldr	r1, [r4, #0]
 8004018:	078a      	lsls	r2, r1, #30
 800401a:	d45b      	bmi.n	80040d4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <HAL_RCC_ClockConfig+0x114>)
 800401e:	6813      	ldr	r3, [r2, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	42ab      	cmp	r3, r5
 8004026:	d85d      	bhi.n	80040e4 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004028:	f011 0f04 	tst.w	r1, #4
 800402c:	4d37      	ldr	r5, [pc, #220]	; (800410c <HAL_RCC_ClockConfig+0x118>)
 800402e:	d164      	bne.n	80040fa <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	070b      	lsls	r3, r1, #28
 8004032:	d506      	bpl.n	8004042 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004034:	68ab      	ldr	r3, [r5, #8]
 8004036:	6922      	ldr	r2, [r4, #16]
 8004038:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800403c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004040:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004042:	f7ff fd03 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8004046:	68ab      	ldr	r3, [r5, #8]
 8004048:	4a31      	ldr	r2, [pc, #196]	; (8004110 <HAL_RCC_ClockConfig+0x11c>)
 800404a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800404e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	40d8      	lsrs	r0, r3
 800405a:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <HAL_RCC_ClockConfig+0x120>)
 800405c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800405e:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <HAL_RCC_ClockConfig+0x124>)
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	f7fe bcdf 	b.w	8002a24 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	f023 0307 	bic.w	r3, r3, #7
 800406c:	430b      	orrs	r3, r1
 800406e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	428b      	cmp	r3, r1
 8004078:	d1c1      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xa>
 800407a:	e7c9      	b.n	8004010 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800407c:	6862      	ldr	r2, [r4, #4]
 800407e:	4e23      	ldr	r6, [pc, #140]	; (800410c <HAL_RCC_ClockConfig+0x118>)
 8004080:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004084:	d11a      	bne.n	80040bc <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004086:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408a:	d0b8      	beq.n	8003ffe <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800408c:	68b3      	ldr	r3, [r6, #8]
 800408e:	f023 0303 	bic.w	r3, r3, #3
 8004092:	4313      	orrs	r3, r2
 8004094:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004096:	f7fe fd07 	bl	8002aa8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800409e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a0:	68b3      	ldr	r3, [r6, #8]
 80040a2:	6862      	ldr	r2, [r4, #4]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80040ac:	d0b3      	beq.n	8004016 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ae:	f7fe fcfb 	bl	8002aa8 <HAL_GetTick>
 80040b2:	1bc0      	subs	r0, r0, r7
 80040b4:	4540      	cmp	r0, r8
 80040b6:	d9f3      	bls.n	80040a0 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80040b8:	2003      	movs	r0, #3
 80040ba:	e7a1      	b.n	8004000 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040bc:	2a02      	cmp	r2, #2
 80040be:	d102      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80040c4:	e7e1      	b.n	800408a <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040c6:	b912      	cbnz	r2, 80040ce <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040c8:	f013 0f02 	tst.w	r3, #2
 80040cc:	e7dd      	b.n	800408a <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80040d2:	e7da      	b.n	800408a <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4a0d      	ldr	r2, [pc, #52]	; (800410c <HAL_RCC_ClockConfig+0x118>)
 80040d6:	68a0      	ldr	r0, [r4, #8]
 80040d8:	6893      	ldr	r3, [r2, #8]
 80040da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040de:	4303      	orrs	r3, r0
 80040e0:	6093      	str	r3, [r2, #8]
 80040e2:	e79b      	b.n	800401c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e4:	6813      	ldr	r3, [r2, #0]
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	432b      	orrs	r3, r5
 80040ec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	6813      	ldr	r3, [r2, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	42ab      	cmp	r3, r5
 80040f6:	d182      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xa>
 80040f8:	e796      	b.n	8004028 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040fa:	68ab      	ldr	r3, [r5, #8]
 80040fc:	68e2      	ldr	r2, [r4, #12]
 80040fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004102:	4313      	orrs	r3, r2
 8004104:	60ab      	str	r3, [r5, #8]
 8004106:	e793      	b.n	8004030 <HAL_RCC_ClockConfig+0x3c>
 8004108:	40022000 	.word	0x40022000
 800410c:	40021000 	.word	0x40021000
 8004110:	0800ca30 	.word	0x0800ca30
 8004114:	20000000 	.word	0x20000000
 8004118:	20000018 	.word	0x20000018

0800411c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x18>)
 800411e:	4a06      	ldr	r2, [pc, #24]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004126:	5cd3      	ldrb	r3, [r2, r3]
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_RCC_GetPCLK1Freq+0x20>)
 800412a:	6810      	ldr	r0, [r2, #0]
 800412c:	f003 031f 	and.w	r3, r3, #31
}
 8004130:	40d8      	lsrs	r0, r3
 8004132:	4770      	bx	lr
 8004134:	40021000 	.word	0x40021000
 8004138:	0800ca40 	.word	0x0800ca40
 800413c:	20000000 	.word	0x20000000

08004140 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004142:	4a06      	ldr	r2, [pc, #24]	; (800415c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800414a:	5cd3      	ldrb	r3, [r2, r3]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800414e:	6810      	ldr	r0, [r2, #0]
 8004150:	f003 031f 	and.w	r3, r3, #31
}
 8004154:	40d8      	lsrs	r0, r3
 8004156:	4770      	bx	lr
 8004158:	40021000 	.word	0x40021000
 800415c:	0800ca40 	.word	0x0800ca40
 8004160:	20000000 	.word	0x20000000

08004164 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004166:	4c43      	ldr	r4, [pc, #268]	; (8004274 <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004168:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800416a:	68e2      	ldr	r2, [r4, #12]
{
 800416c:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800416e:	0790      	lsls	r0, r2, #30
{
 8004170:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004172:	d029      	beq.n	80041c8 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004174:	68e2      	ldr	r2, [r4, #12]
 8004176:	f002 0203 	and.w	r2, r2, #3
 800417a:	429a      	cmp	r2, r3
 800417c:	d178      	bne.n	8004270 <RCCEx_PLLSAI1_Config+0x10c>
       ||
 800417e:	2a00      	cmp	r2, #0
 8004180:	d076      	beq.n	8004270 <RCCEx_PLLSAI1_Config+0x10c>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004182:	68e3      	ldr	r3, [r4, #12]
       ||
 8004184:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004186:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800418a:	3301      	adds	r3, #1
       ||
 800418c:	4293      	cmp	r3, r2
 800418e:	d16f      	bne.n	8004270 <RCCEx_PLLSAI1_Config+0x10c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004196:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fe fc86 	bl	8002aa8 <HAL_GetTick>
 800419c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	011a      	lsls	r2, r3, #4
 80041a2:	d430      	bmi.n	8004206 <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a4:	68ab      	ldr	r3, [r5, #8]
 80041a6:	021f      	lsls	r7, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80041a8:	b3a6      	cbz	r6, 8004214 <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041aa:	2e01      	cmp	r6, #1
 80041ac:	d14d      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ae:	692a      	ldr	r2, [r5, #16]
 80041b0:	6921      	ldr	r1, [r4, #16]
 80041b2:	0852      	lsrs	r2, r2, #1
 80041b4:	1e53      	subs	r3, r2, #1
 80041b6:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80041ba:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80041be:	433a      	orrs	r2, r7
 80041c0:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80041c4:	6122      	str	r2, [r4, #16]
 80041c6:	e030      	b.n	800422a <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d011      	beq.n	80041f0 <RCCEx_PLLSAI1_Config+0x8c>
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d013      	beq.n	80041f8 <RCCEx_PLLSAI1_Config+0x94>
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d14d      	bne.n	8004270 <RCCEx_PLLSAI1_Config+0x10c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041da:	d049      	beq.n	8004270 <RCCEx_PLLSAI1_Config+0x10c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041dc:	68e0      	ldr	r0, [r4, #12]
 80041de:	686a      	ldr	r2, [r5, #4]
 80041e0:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80041e4:	3a01      	subs	r2, #1
 80041e6:	4318      	orrs	r0, r3
 80041e8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80041ec:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80041ee:	e7cf      	b.n	8004190 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80041f6:	e7f0      	b.n	80041da <RCCEx_PLLSAI1_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	0391      	lsls	r1, r2, #14
 80041fc:	d4ee      	bmi.n	80041dc <RCCEx_PLLSAI1_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004204:	e7e9      	b.n	80041da <RCCEx_PLLSAI1_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004206:	f7fe fc4f 	bl	8002aa8 <HAL_GetTick>
 800420a:	1bc0      	subs	r0, r0, r7
 800420c:	2802      	cmp	r0, #2
 800420e:	d9c6      	bls.n	800419e <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8004210:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8004212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004214:	6921      	ldr	r1, [r4, #16]
 8004216:	68eb      	ldr	r3, [r5, #12]
 8004218:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800421c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	4339      	orrs	r1, r7
 8004224:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8004228:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004230:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8004232:	f7fe fc39 	bl	8002aa8 <HAL_GetTick>
 8004236:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	d512      	bpl.n	8004264 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	69aa      	ldr	r2, [r5, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	2000      	movs	r0, #0
  return status;
 8004248:	e7e3      	b.n	8004212 <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800424a:	696b      	ldr	r3, [r5, #20]
 800424c:	6922      	ldr	r2, [r4, #16]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	1e59      	subs	r1, r3, #1
 8004252:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8004256:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800425a:	433b      	orrs	r3, r7
 800425c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	e7e2      	b.n	800422a <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004264:	f7fe fc20 	bl	8002aa8 <HAL_GetTick>
 8004268:	1b80      	subs	r0, r0, r6
 800426a:	2802      	cmp	r0, #2
 800426c:	d9e4      	bls.n	8004238 <RCCEx_PLLSAI1_Config+0xd4>
 800426e:	e7cf      	b.n	8004210 <RCCEx_PLLSAI1_Config+0xac>
      status = HAL_ERROR;
 8004270:	2001      	movs	r0, #1
 8004272:	e7ce      	b.n	8004212 <RCCEx_PLLSAI1_Config+0xae>
 8004274:	40021000 	.word	0x40021000

08004278 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800427a:	4c3c      	ldr	r4, [pc, #240]	; (800436c <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800427c:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800427e:	68e2      	ldr	r2, [r4, #12]
{
 8004280:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004282:	0790      	lsls	r0, r2, #30
{
 8004284:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004286:	d027      	beq.n	80042d8 <RCCEx_PLLSAI2_Config+0x60>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004288:	68e2      	ldr	r2, [r4, #12]
 800428a:	f002 0203 	and.w	r2, r2, #3
 800428e:	429a      	cmp	r2, r3
 8004290:	d169      	bne.n	8004366 <RCCEx_PLLSAI2_Config+0xee>
       ||
 8004292:	2a00      	cmp	r2, #0
 8004294:	d067      	beq.n	8004366 <RCCEx_PLLSAI2_Config+0xee>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004296:	68e3      	ldr	r3, [r4, #12]
       ||
 8004298:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800429a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800429e:	3301      	adds	r3, #1
       ||
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d160      	bne.n	8004366 <RCCEx_PLLSAI2_Config+0xee>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042aa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fe fbfc 	bl	8002aa8 <HAL_GetTick>
 80042b0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	009a      	lsls	r2, r3, #2
 80042b6:	d42e      	bmi.n	8004316 <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042b8:	68ab      	ldr	r3, [r5, #8]
 80042ba:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80042bc:	b396      	cbz	r6, 8004324 <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042be:	6963      	ldr	r3, [r4, #20]
 80042c0:	6929      	ldr	r1, [r5, #16]
 80042c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042c6:	0849      	lsrs	r1, r1, #1
 80042c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042cc:	3901      	subs	r1, #1
 80042ce:	4303      	orrs	r3, r0
 80042d0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80042d4:	6163      	str	r3, [r4, #20]
 80042d6:	e030      	b.n	800433a <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d011      	beq.n	8004300 <RCCEx_PLLSAI2_Config+0x88>
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d013      	beq.n	8004308 <RCCEx_PLLSAI2_Config+0x90>
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d140      	bne.n	8004366 <RCCEx_PLLSAI2_Config+0xee>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ea:	d03c      	beq.n	8004366 <RCCEx_PLLSAI2_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ec:	68e0      	ldr	r0, [r4, #12]
 80042ee:	686a      	ldr	r2, [r5, #4]
 80042f0:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80042f4:	3a01      	subs	r2, #1
 80042f6:	4318      	orrs	r0, r3
 80042f8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80042fc:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80042fe:	e7d1      	b.n	80042a4 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004300:	6822      	ldr	r2, [r4, #0]
 8004302:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004306:	e7f0      	b.n	80042ea <RCCEx_PLLSAI2_Config+0x72>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004308:	6822      	ldr	r2, [r4, #0]
 800430a:	0391      	lsls	r1, r2, #14
 800430c:	d4ee      	bmi.n	80042ec <RCCEx_PLLSAI2_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004314:	e7e9      	b.n	80042ea <RCCEx_PLLSAI2_Config+0x72>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004316:	f7fe fbc7 	bl	8002aa8 <HAL_GetTick>
 800431a:	1bc0      	subs	r0, r0, r7
 800431c:	2802      	cmp	r0, #2
 800431e:	d9c8      	bls.n	80042b2 <RCCEx_PLLSAI2_Config+0x3a>
        status = HAL_TIMEOUT;
 8004320:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8004322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004324:	6962      	ldr	r2, [r4, #20]
 8004326:	68eb      	ldr	r3, [r5, #12]
 8004328:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800432c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	4302      	orrs	r2, r0
 8004334:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8004338:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8004342:	f7fe fbb1 	bl	8002aa8 <HAL_GetTick>
 8004346:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	d505      	bpl.n	800435a <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800434e:	6963      	ldr	r3, [r4, #20]
 8004350:	696a      	ldr	r2, [r5, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	6163      	str	r3, [r4, #20]
 8004356:	2000      	movs	r0, #0
  return status;
 8004358:	e7e3      	b.n	8004322 <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800435a:	f7fe fba5 	bl	8002aa8 <HAL_GetTick>
 800435e:	1b80      	subs	r0, r0, r6
 8004360:	2802      	cmp	r0, #2
 8004362:	d9f1      	bls.n	8004348 <RCCEx_PLLSAI2_Config+0xd0>
 8004364:	e7dc      	b.n	8004320 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 8004366:	2001      	movs	r0, #1
 8004368:	e7db      	b.n	8004322 <RCCEx_PLLSAI2_Config+0xaa>
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000

08004370 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004370:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004374:	6806      	ldr	r6, [r0, #0]
 8004376:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800437a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800437c:	d009      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800437e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8004380:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004384:	d022      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004386:	d813      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004388:	b331      	cbz	r1, 80043d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800438a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800438e:	d02a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004390:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	04d8      	lsls	r0, r3, #19
 8004396:	d509      	bpl.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004398:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800439a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800439e:	d02c      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80043a0:	d826      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80043a2:	b381      	cbz	r1, 8004406 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80043a4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80043a8:	d070      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80043aa:	2601      	movs	r6, #1
 80043ac:	4635      	mov	r5, r6
 80043ae:	e039      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80043b0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80043b4:	d1ec      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b6:	4a3b      	ldr	r2, [pc, #236]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80043ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80043c2:	430b      	orrs	r3, r1
 80043c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80043c8:	2600      	movs	r6, #0
 80043ca:	e7e2      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043cc:	4a35      	ldr	r2, [pc, #212]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043ce:	68d3      	ldr	r3, [r2, #12]
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d4:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80043d6:	e7ee      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043d8:	3004      	adds	r0, #4
 80043da:	f7ff fec3 	bl	8004164 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043de:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d1d6      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x22>
 80043e4:	e7e7      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043e6:	2100      	movs	r1, #0
 80043e8:	3020      	adds	r0, #32
 80043ea:	f7ff ff45 	bl	8004278 <RCCEx_PLLSAI2_Config>
 80043ee:	e7f6      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80043f0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80043f4:	d1d9      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80043f6:	4635      	mov	r5, r6
 80043f8:	e009      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043fc:	68d3      	ldr	r3, [r2, #12]
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	60d3      	str	r3, [r2, #12]
      break;
 8004404:	e7f7      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004406:	1d20      	adds	r0, r4, #4
 8004408:	f7ff feac 	bl	8004164 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800440c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800440e:	2d00      	cmp	r5, #0
 8004410:	d142      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004412:	4a24      	ldr	r2, [pc, #144]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004414:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004416:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800441a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800441e:	430b      	orrs	r3, r1
 8004420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	0399      	lsls	r1, r3, #14
 8004428:	f140 815e 	bpl.w	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800442c:	4f1d      	ldr	r7, [pc, #116]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800442e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004430:	00da      	lsls	r2, r3, #3
 8004432:	d433      	bmi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443a:	65bb      	str	r3, [r7, #88]	; 0x58
 800443c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004446:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800444a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80044a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800444e:	f8d9 3000 	ldr.w	r3, [r9]
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800445a:	f7fe fb25 	bl	8002aa8 <HAL_GetTick>
 800445e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004460:	f8d9 3000 	ldr.w	r3, [r9]
 8004464:	05db      	lsls	r3, r3, #23
 8004466:	d521      	bpl.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 8004468:	bb3d      	cbnz	r5, 80044ba <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800446a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800446e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004472:	f040 810f 	bne.w	8004694 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004476:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800447e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004488:	4635      	mov	r5, r6
 800448a:	e016      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800448c:	2100      	movs	r1, #0
 800448e:	f104 0020 	add.w	r0, r4, #32
 8004492:	f7ff fef1 	bl	8004278 <RCCEx_PLLSAI2_Config>
 8004496:	e7b9      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004498:	462e      	mov	r6, r5
 800449a:	e7c3      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800449c:	f04f 0800 	mov.w	r8, #0
 80044a0:	e7d3      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ac:	f7fe fafc 	bl	8002aa8 <HAL_GetTick>
 80044b0:	eba0 000a 	sub.w	r0, r0, sl
 80044b4:	2802      	cmp	r0, #2
 80044b6:	d9d3      	bls.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80044b8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80044ba:	f1b8 0f00 	cmp.w	r8, #0
 80044be:	d003      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c6:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	07da      	lsls	r2, r3, #31
 80044cc:	d508      	bpl.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ce:	499d      	ldr	r1, [pc, #628]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80044d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80044d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80044d6:	f022 0203 	bic.w	r2, r2, #3
 80044da:	4302      	orrs	r2, r0
 80044dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e0:	079f      	lsls	r7, r3, #30
 80044e2:	d508      	bpl.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e4:	4997      	ldr	r1, [pc, #604]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80044e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80044ec:	f022 020c 	bic.w	r2, r2, #12
 80044f0:	4302      	orrs	r2, r0
 80044f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044f6:	075e      	lsls	r6, r3, #29
 80044f8:	d508      	bpl.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044fa:	4992      	ldr	r1, [pc, #584]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80044fc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80044fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004502:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004506:	4302      	orrs	r2, r0
 8004508:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800450c:	0718      	lsls	r0, r3, #28
 800450e:	d508      	bpl.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004510:	498c      	ldr	r1, [pc, #560]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004512:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004514:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004518:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800451c:	4302      	orrs	r2, r0
 800451e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004522:	06d9      	lsls	r1, r3, #27
 8004524:	d508      	bpl.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004526:	4987      	ldr	r1, [pc, #540]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004528:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800452a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800452e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004532:	4302      	orrs	r2, r0
 8004534:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004538:	069a      	lsls	r2, r3, #26
 800453a:	d508      	bpl.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800453c:	4981      	ldr	r1, [pc, #516]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800453e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004540:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004544:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004548:	4302      	orrs	r2, r0
 800454a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800454e:	059f      	lsls	r7, r3, #22
 8004550:	d508      	bpl.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004552:	497c      	ldr	r1, [pc, #496]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004554:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004556:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800455a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800455e:	4302      	orrs	r2, r0
 8004560:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004564:	055e      	lsls	r6, r3, #21
 8004566:	d508      	bpl.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004568:	4976      	ldr	r1, [pc, #472]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800456a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800456c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004570:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004574:	4302      	orrs	r2, r0
 8004576:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800457a:	0658      	lsls	r0, r3, #25
 800457c:	d508      	bpl.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800457e:	4971      	ldr	r1, [pc, #452]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004580:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004582:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004586:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800458a:	4302      	orrs	r2, r0
 800458c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004590:	0619      	lsls	r1, r3, #24
 8004592:	d508      	bpl.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004594:	496b      	ldr	r1, [pc, #428]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004598:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800459c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80045a0:	4302      	orrs	r2, r0
 80045a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045a6:	05da      	lsls	r2, r3, #23
 80045a8:	d508      	bpl.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045aa:	4966      	ldr	r1, [pc, #408]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80045ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80045b2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80045b6:	4302      	orrs	r2, r0
 80045b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045bc:	049b      	lsls	r3, r3, #18
 80045be:	d510      	bpl.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c0:	4a60      	ldr	r2, [pc, #384]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80045c2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80045c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045c8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80045cc:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045ce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045d6:	f040 8089 	bne.w	80046ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045da:	68d3      	ldr	r3, [r2, #12]
 80045dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	031f      	lsls	r7, r3, #12
 80045e6:	d510      	bpl.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045e8:	4a56      	ldr	r2, [pc, #344]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80045ea:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80045ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045f0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80045f4:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045fe:	f040 8081 	bne.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004602:	68d3      	ldr	r3, [r2, #12]
 8004604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004608:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	035e      	lsls	r6, r3, #13
 800460e:	d50f      	bpl.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004610:	4a4c      	ldr	r2, [pc, #304]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004612:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004614:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004618:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800461c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800461e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004622:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004626:	d179      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004628:	68d3      	ldr	r3, [r2, #12]
 800462a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	0458      	lsls	r0, r3, #17
 8004634:	d512      	bpl.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004636:	4943      	ldr	r1, [pc, #268]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004638:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800463a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800463e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004642:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004644:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800464c:	d171      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800464e:	2102      	movs	r1, #2
 8004650:	1d20      	adds	r0, r4, #4
 8004652:	f7ff fd87 	bl	8004164 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004656:	2800      	cmp	r0, #0
 8004658:	bf18      	it	ne
 800465a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	0411      	lsls	r1, r2, #16
 8004660:	d508      	bpl.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004662:	4938      	ldr	r1, [pc, #224]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004664:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004666:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800466a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800466e:	4303      	orrs	r3, r0
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004674:	03d3      	lsls	r3, r2, #15
 8004676:	d509      	bpl.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004678:	4a32      	ldr	r2, [pc, #200]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800467a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800467e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004686:	430b      	orrs	r3, r1
 8004688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800468c:	4628      	mov	r0, r5
 800468e:	b002      	add	sp, #8
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004694:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004698:	4293      	cmp	r3, r2
 800469a:	f43f aeec 	beq.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800469e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046b2:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046ba:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80046c0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046c4:	f57f aed7 	bpl.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80046c8:	f7fe f9ee 	bl	8002aa8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80046d0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046d6:	0799      	lsls	r1, r3, #30
 80046d8:	f53f aecd 	bmi.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fe f9e4 	bl	8002aa8 <HAL_GetTick>
 80046e0:	1b40      	subs	r0, r0, r5
 80046e2:	4548      	cmp	r0, r9
 80046e4:	d9f5      	bls.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80046e6:	e6e7      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80046e8:	4635      	mov	r5, r6
 80046ea:	e6ed      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ec:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80046f0:	f47f af77 	bne.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f4:	2101      	movs	r1, #1
 80046f6:	1d20      	adds	r0, r4, #4
 80046f8:	f7ff fd34 	bl	8004164 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80046fc:	2800      	cmp	r0, #0
 80046fe:	bf18      	it	ne
 8004700:	4605      	movne	r5, r0
 8004702:	e76e      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004704:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004708:	f47f af7f 	bne.w	800460a <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800470c:	2101      	movs	r1, #1
 800470e:	1d20      	adds	r0, r4, #4
 8004710:	f7ff fd28 	bl	8004164 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004714:	2800      	cmp	r0, #0
 8004716:	bf18      	it	ne
 8004718:	4605      	movne	r5, r0
 800471a:	e776      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800471c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004720:	d186      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004722:	2101      	movs	r1, #1
 8004724:	1d20      	adds	r0, r4, #4
 8004726:	f7ff fd1d 	bl	8004164 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800472a:	2800      	cmp	r0, #0
 800472c:	bf18      	it	ne
 800472e:	4605      	movne	r5, r0
 8004730:	e77e      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004732:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004736:	d191      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004738:	2102      	movs	r1, #2
 800473a:	f104 0020 	add.w	r0, r4, #32
 800473e:	f7ff fd9b 	bl	8004278 <RCCEx_PLLSAI2_Config>
 8004742:	e788      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004744:	40021000 	.word	0x40021000

08004748 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800474c:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800474e:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004750:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004752:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004756:	4605      	mov	r5, r0
 8004758:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800475a:	f7fe f9a5 	bl	8002aa8 <HAL_GetTick>
 800475e:	44b8      	add	r8, r7
 8004760:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 8004764:	f7fe f9a0 	bl	8002aa8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800476a:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2223      	movs	r2, #35	; 0x23
 8004772:	4353      	muls	r3, r2
 8004774:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 8004776:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004778:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 800477a:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800477c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800477e:	6893      	ldr	r3, [r2, #8]
 8004780:	4033      	ands	r3, r6
 8004782:	d101      	bne.n	8004788 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
    }
  }

  return HAL_OK;
 8004784:	4618      	mov	r0, r3
 8004786:	e038      	b.n	80047fa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004788:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 800478c:	bf01      	itttt	eq
 800478e:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8004792:	b2db      	uxtbeq	r3, r3
 8004794:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004798:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 800479c:	1c7b      	adds	r3, r7, #1
 800479e:	d0ee      	beq.n	800477e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047a0:	f7fe f982 	bl	8002aa8 <HAL_GetTick>
 80047a4:	eba0 0008 	sub.w	r0, r0, r8
 80047a8:	42a0      	cmp	r0, r4
 80047aa:	d329      	bcc.n	8004800 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047b4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b6:	686a      	ldr	r2, [r5, #4]
 80047b8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80047bc:	d10a      	bne.n	80047d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
 80047be:	68aa      	ldr	r2, [r5, #8]
 80047c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80047c4:	d002      	beq.n	80047cc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047c6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80047ca:	d103      	bne.n	80047d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
          __HAL_SPI_DISABLE(hspi);
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80047d6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80047da:	d107      	bne.n	80047ec <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          SPI_RESET_CRC(hspi);
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ea:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80047f2:	2300      	movs	r3, #0
 80047f4:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80047f8:	2003      	movs	r0, #3
}
 80047fa:	b003      	add	sp, #12
 80047fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8004800:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004802:	2b00      	cmp	r3, #0
      count--;
 8004804:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004806:	bf08      	it	eq
 8004808:	2400      	moveq	r4, #0
      count--;
 800480a:	3b01      	subs	r3, #1
 800480c:	e7b5      	b.n	800477a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 800480e:	bf00      	nop
 8004810:	20000000 	.word	0x20000000

08004814 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004816:	460e      	mov	r6, r1
 8004818:	4617      	mov	r7, r2
 800481a:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800481c:	f7fe f944 	bl	8002aa8 <HAL_GetTick>
 8004820:	4437      	add	r7, r6
 8004822:	1a3c      	subs	r4, r7, r0
  tmp_tickstart = HAL_GetTick();
 8004824:	f7fe f940 	bl	8002aa8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004828:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8004830:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004832:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004834:	682a      	ldr	r2, [r5, #0]
      count--;
 8004836:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004838:	6893      	ldr	r3, [r2, #8]
 800483a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800483e:	d101      	bne.n	8004844 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 8004840:	4618      	mov	r0, r3
 8004842:	e02d      	b.n	80048a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8004844:	1c73      	adds	r3, r6, #1
 8004846:	d0f7      	beq.n	8004838 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004848:	f7fe f92e 	bl	8002aa8 <HAL_GetTick>
 800484c:	1bc0      	subs	r0, r0, r7
 800484e:	42a0      	cmp	r0, r4
 8004850:	d328      	bcc.n	80048a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800485a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800485c:	686a      	ldr	r2, [r5, #4]
 800485e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004862:	d10a      	bne.n	800487a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 8004864:	68aa      	ldr	r2, [r5, #8]
 8004866:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800486a:	d002      	beq.n	8004872 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004870:	d103      	bne.n	800487a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004878:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800487a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800487c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004880:	d107      	bne.n	8004892 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004890:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004892:	2301      	movs	r3, #1
 8004894:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004898:	2300      	movs	r3, #0
 800489a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800489e:	2003      	movs	r0, #3
}
 80048a0:	b003      	add	sp, #12
 80048a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80048a4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80048a6:	2b00      	cmp	r3, #0
      count--;
 80048a8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80048aa:	bf08      	it	eq
 80048ac:	2400      	moveq	r4, #0
      count--;
 80048ae:	3b01      	subs	r3, #1
 80048b0:	e7c0      	b.n	8004834 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 80048b2:	bf00      	nop
 80048b4:	20000000 	.word	0x20000000

080048b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ba:	6842      	ldr	r2, [r0, #4]
 80048bc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80048c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	460e      	mov	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c6:	d10b      	bne.n	80048e0 <SPI_EndRxTransaction+0x28>
 80048c8:	6882      	ldr	r2, [r0, #8]
 80048ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80048ce:	d002      	beq.n	80048d6 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048d0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80048d4:	d104      	bne.n	80048e0 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	6802      	ldr	r2, [r0, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	6002      	str	r2, [r0, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048e0:	461a      	mov	r2, r3
 80048e2:	4631      	mov	r1, r6
 80048e4:	4620      	mov	r0, r4
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	f7ff ff94 	bl	8004814 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80048ec:	9b01      	ldr	r3, [sp, #4]
 80048ee:	4605      	mov	r5, r0
 80048f0:	b128      	cbz	r0, 80048fe <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80048f4:	f043 0320 	orr.w	r3, r3, #32
 80048f8:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80048fa:	2503      	movs	r5, #3
 80048fc:	e012      	b.n	8004924 <SPI_EndRxTransaction+0x6c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fe:	6862      	ldr	r2, [r4, #4]
 8004900:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004904:	d10e      	bne.n	8004924 <SPI_EndRxTransaction+0x6c>
 8004906:	68a2      	ldr	r2, [r4, #8]
 8004908:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800490c:	d002      	beq.n	8004914 <SPI_EndRxTransaction+0x5c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800490e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004912:	d107      	bne.n	8004924 <SPI_EndRxTransaction+0x6c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004914:	4632      	mov	r2, r6
 8004916:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800491a:	4620      	mov	r0, r4
 800491c:	f7ff ff14 	bl	8004748 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004920:	2800      	cmp	r0, #0
 8004922:	d1e6      	bne.n	80048f2 <SPI_EndRxTransaction+0x3a>
    }
  }
  return HAL_OK;
}
 8004924:	4628      	mov	r0, r5
 8004926:	b002      	add	sp, #8
 8004928:	bd70      	pop	{r4, r5, r6, pc}

0800492a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800492a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800492c:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800492e:	9201      	str	r2, [sp, #4]
{
 8004930:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004932:	460a      	mov	r2, r1
 8004934:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8004938:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800493a:	f7ff ff05 	bl	8004748 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	b128      	cbz	r0, 800494e <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004942:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004944:	f043 0320 	orr.w	r3, r3, #32
 8004948:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800494a:	2003      	movs	r0, #3
 800494c:	e010      	b.n	8004970 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800494e:	461a      	mov	r2, r3
 8004950:	4629      	mov	r1, r5
 8004952:	4620      	mov	r0, r4
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	f7ff ff5d 	bl	8004814 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800495a:	9b01      	ldr	r3, [sp, #4]
 800495c:	2800      	cmp	r0, #0
 800495e:	d1f0      	bne.n	8004942 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004960:	462a      	mov	r2, r5
 8004962:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004966:	4620      	mov	r0, r4
 8004968:	f7ff feee 	bl	8004748 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800496c:	2800      	cmp	r0, #0
 800496e:	d1e8      	bne.n	8004942 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8004970:	b003      	add	sp, #12
 8004972:	bd30      	pop	{r4, r5, pc}

08004974 <HAL_SPI_Init>:
{
 8004974:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004976:	4604      	mov	r4, r0
 8004978:	2800      	cmp	r0, #0
 800497a:	d05f      	beq.n	8004a3c <HAL_SPI_Init+0xc8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d158      	bne.n	8004a34 <HAL_SPI_Init+0xc0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004982:	6842      	ldr	r2, [r0, #4]
 8004984:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004988:	d000      	beq.n	800498c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800498a:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498c:	2300      	movs	r3, #0
 800498e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004990:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004994:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004998:	b923      	cbnz	r3, 80049a4 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800499a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800499e:	4620      	mov	r0, r4
 80049a0:	f7fd f896 	bl	8001ad0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80049a4:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049a6:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80049a8:	2302      	movs	r3, #2
 80049aa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80049ae:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80049b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b8:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	d83f      	bhi.n	8004a40 <HAL_SPI_Init+0xcc>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049c4:	d000      	beq.n	80049c8 <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049c6:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	68a6      	ldr	r6, [r4, #8]
 80049cc:	69a2      	ldr	r2, [r4, #24]
 80049ce:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 80049d2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80049d6:	4333      	orrs	r3, r6
 80049d8:	6926      	ldr	r6, [r4, #16]
 80049da:	f006 0602 	and.w	r6, r6, #2
 80049de:	4333      	orrs	r3, r6
 80049e0:	6966      	ldr	r6, [r4, #20]
 80049e2:	f006 0601 	and.w	r6, r6, #1
 80049e6:	4333      	orrs	r3, r6
 80049e8:	f402 7600 	and.w	r6, r2, #512	; 0x200
 80049ec:	4333      	orrs	r3, r6
 80049ee:	69e6      	ldr	r6, [r4, #28]
 80049f0:	f006 0638 	and.w	r6, r6, #56	; 0x38
 80049f4:	4333      	orrs	r3, r6
 80049f6:	6a26      	ldr	r6, [r4, #32]
 80049f8:	f006 0680 	and.w	r6, r6, #128	; 0x80
 80049fc:	4333      	orrs	r3, r6
 80049fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a00:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8004a04:	4333      	orrs	r3, r6
 8004a06:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a08:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8004a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a0c:	f006 0608 	and.w	r6, r6, #8
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	4333      	orrs	r3, r6
 8004a16:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004a1a:	0c12      	lsrs	r2, r2, #16
 8004a1c:	4319      	orrs	r1, r3
 8004a1e:	f002 0204 	and.w	r2, r2, #4
 8004a22:	430a      	orrs	r2, r1
 8004a24:	4310      	orrs	r0, r2
 8004a26:	6068      	str	r0, [r5, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 8004a28:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a2e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a34:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a3a:	e7a7      	b.n	800498c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	e7f8      	b.n	8004a32 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a40:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a42:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8004a46:	e7bd      	b.n	80049c4 <HAL_SPI_Init+0x50>

08004a48 <HAL_SPI_Transmit>:
{
 8004a48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a4c:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004a4e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004a52:	2b01      	cmp	r3, #1
{
 8004a54:	4604      	mov	r4, r0
 8004a56:	460d      	mov	r5, r1
 8004a58:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004a5a:	f000 80bc 	beq.w	8004bd6 <HAL_SPI_Transmit+0x18e>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004a64:	f7fe f820 	bl	8002aa8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a68:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004a6c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004a6e:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a70:	b2d8      	uxtb	r0, r3
 8004a72:	f040 80ae 	bne.w	8004bd2 <HAL_SPI_Transmit+0x18a>
  if ((pData == NULL) || (Size == 0U))
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	d063      	beq.n	8004b42 <HAL_SPI_Transmit+0xfa>
 8004a7a:	f1b8 0f00 	cmp.w	r8, #0
 8004a7e:	d060      	beq.n	8004b42 <HAL_SPI_Transmit+0xfa>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a80:	2303      	movs	r3, #3
 8004a82:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8004a8a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8004a8e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a92:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a94:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a98:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9c:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004a9e:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aa0:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 8004aa6:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aaa:	d107      	bne.n	8004abc <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8004aac:	6833      	ldr	r3, [r6, #0]
 8004aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab2:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8004ab4:	6833      	ldr	r3, [r6, #0]
 8004ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aba:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004abc:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004abe:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004ac2:	bf5e      	ittt	pl
 8004ac4:	6833      	ldrpl	r3, [r6, #0]
 8004ac6:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004aca:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004acc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad0:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ad2:	d942      	bls.n	8004b5a <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad4:	b113      	cbz	r3, 8004adc <HAL_SPI_Transmit+0x94>
 8004ad6:	f1b8 0f01 	cmp.w	r8, #1
 8004ada:	d107      	bne.n	8004aec <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004adc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ae0:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae2:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004ae4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004aec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b9a3      	cbnz	r3, 8004b1c <HAL_SPI_Transmit+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004af2:	464a      	mov	r2, r9
 8004af4:	4639      	mov	r1, r7
 8004af6:	4620      	mov	r0, r4
 8004af8:	f7ff ff17 	bl	800492a <SPI_EndRxTxTransaction>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d165      	bne.n	8004bcc <HAL_SPI_Transmit+0x184>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	b933      	cbnz	r3, 8004b12 <HAL_SPI_Transmit+0xca>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	9201      	str	r2, [sp, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b12:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004b14:	3800      	subs	r0, #0
 8004b16:	bf18      	it	ne
 8004b18:	2001      	movne	r0, #1
error:
 8004b1a:	e012      	b.n	8004b42 <HAL_SPI_Transmit+0xfa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b1c:	6822      	ldr	r2, [r4, #0]
 8004b1e:	6893      	ldr	r3, [r2, #8]
 8004b20:	079d      	lsls	r5, r3, #30
 8004b22:	d505      	bpl.n	8004b30 <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b26:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004b2a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b2e:	e7d9      	b.n	8004ae4 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b30:	f7fd ffba 	bl	8002aa8 <HAL_GetTick>
 8004b34:	eba0 0009 	sub.w	r0, r0, r9
 8004b38:	42b8      	cmp	r0, r7
 8004b3a:	d30b      	bcc.n	8004b54 <HAL_SPI_Transmit+0x10c>
 8004b3c:	1c78      	adds	r0, r7, #1
 8004b3e:	d0d5      	beq.n	8004aec <HAL_SPI_Transmit+0xa4>
          errorcode = HAL_TIMEOUT;
 8004b40:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004b4e:	b003      	add	sp, #12
 8004b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	d1c9      	bne.n	8004aec <HAL_SPI_Transmit+0xa4>
 8004b58:	e7f2      	b.n	8004b40 <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5a:	b113      	cbz	r3, 8004b62 <HAL_SPI_Transmit+0x11a>
 8004b5c:	f1b8 0f01 	cmp.w	r8, #1
 8004b60:	d113      	bne.n	8004b8a <HAL_SPI_Transmit+0x142>
      if (hspi->TxXferCount > 1U)
 8004b62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d906      	bls.n	8004b78 <HAL_SPI_Transmit+0x130>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004b6e:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b70:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b74:	3b02      	subs	r3, #2
 8004b76:	e006      	b.n	8004b86 <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b78:	782b      	ldrb	r3, [r5, #0]
 8004b7a:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8004b7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b7e:	3301      	adds	r3, #1
 8004b80:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004b82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004b8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0af      	beq.n	8004af2 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	6893      	ldr	r3, [r2, #8]
 8004b96:	0799      	lsls	r1, r3, #30
 8004b98:	d50c      	bpl.n	8004bb4 <HAL_SPI_Transmit+0x16c>
        if (hspi->TxXferCount > 1U)
 8004b9a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8004b9e:	b289      	uxth	r1, r1
 8004ba0:	2901      	cmp	r1, #1
 8004ba2:	d904      	bls.n	8004bae <HAL_SPI_Transmit+0x166>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba4:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004ba8:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004baa:	63a3      	str	r3, [r4, #56]	; 0x38
 8004bac:	e7e1      	b.n	8004b72 <HAL_SPI_Transmit+0x12a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004bb2:	e7e3      	b.n	8004b7c <HAL_SPI_Transmit+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb4:	f7fd ff78 	bl	8002aa8 <HAL_GetTick>
 8004bb8:	eba0 0009 	sub.w	r0, r0, r9
 8004bbc:	42b8      	cmp	r0, r7
 8004bbe:	d302      	bcc.n	8004bc6 <HAL_SPI_Transmit+0x17e>
 8004bc0:	1c7b      	adds	r3, r7, #1
 8004bc2:	d0e2      	beq.n	8004b8a <HAL_SPI_Transmit+0x142>
 8004bc4:	e7bc      	b.n	8004b40 <HAL_SPI_Transmit+0xf8>
 8004bc6:	2f00      	cmp	r7, #0
 8004bc8:	d1df      	bne.n	8004b8a <HAL_SPI_Transmit+0x142>
 8004bca:	e7b9      	b.n	8004b40 <HAL_SPI_Transmit+0xf8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bcc:	2320      	movs	r3, #32
 8004bce:	6623      	str	r3, [r4, #96]	; 0x60
 8004bd0:	e796      	b.n	8004b00 <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 8004bd2:	2002      	movs	r0, #2
 8004bd4:	e7b5      	b.n	8004b42 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 8004bd6:	2002      	movs	r0, #2
 8004bd8:	e7b9      	b.n	8004b4e <HAL_SPI_Transmit+0x106>

08004bda <HAL_SPI_TransmitReceive>:
{
 8004bda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bde:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004be0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8004be8:	2b01      	cmp	r3, #1
{
 8004bea:	4604      	mov	r4, r0
 8004bec:	460d      	mov	r5, r1
 8004bee:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8004bf0:	f000 811d 	beq.w	8004e2e <HAL_SPI_TransmitReceive+0x254>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004bfa:	f7fd ff55 	bl	8002aa8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004bfe:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004c02:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c04:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004c06:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8004c08:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c0a:	d00a      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x48>
 8004c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c10:	f040 810b 	bne.w	8004e2a <HAL_SPI_TransmitReceive+0x250>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c14:	68a2      	ldr	r2, [r4, #8]
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	f040 8107 	bne.w	8004e2a <HAL_SPI_TransmitReceive+0x250>
 8004c1c:	2904      	cmp	r1, #4
 8004c1e:	f040 8104 	bne.w	8004e2a <HAL_SPI_TransmitReceive+0x250>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	d047      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0xdc>
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	d045      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0xdc>
 8004c2a:	2f00      	cmp	r7, #0
 8004c2c:	d043      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c2e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c32:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c34:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c36:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c38:	bf1c      	itt	ne
 8004c3a:	2205      	movne	r2, #5
 8004c3c:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c40:	6826      	ldr	r6, [r4, #0]
  hspi->RxXferSize  = Size;
 8004c42:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c46:	2200      	movs	r2, #0
 8004c48:	6622      	str	r2, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->RxXferCount = Size;
 8004c4e:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8004c52:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c54:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c58:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c5a:	6872      	ldr	r2, [r6, #4]
  hspi->TxXferSize  = Size;
 8004c5c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c5e:	d801      	bhi.n	8004c64 <HAL_SPI_TransmitReceive+0x8a>
 8004c60:	2f01      	cmp	r7, #1
 8004c62:	d02a      	beq.n	8004cba <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c68:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c6a:	6832      	ldr	r2, [r6, #0]
 8004c6c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004c6e:	bf5e      	ittt	pl
 8004c70:	6832      	ldrpl	r2, [r6, #0]
 8004c72:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004c76:	6032      	strpl	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004c7c:	d958      	bls.n	8004d30 <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7e:	b10b      	cbz	r3, 8004c84 <HAL_SPI_TransmitReceive+0xaa>
 8004c80:	2f01      	cmp	r7, #1
 8004c82:	d107      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c84:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004c88:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 8004c8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8c:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004c94:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	b98b      	cbnz	r3, 8004cc0 <HAL_SPI_TransmitReceive+0xe6>
 8004c9c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	b96b      	cbnz	r3, 8004cc0 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca4:	464a      	mov	r2, r9
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7ff fe3e 	bl	800492a <SPI_EndRxTxTransaction>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d036      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	e032      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cbe:	e7d3      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cc0:	6821      	ldr	r1, [r4, #0]
 8004cc2:	688b      	ldr	r3, [r1, #8]
 8004cc4:	079a      	lsls	r2, r3, #30
 8004cc6:	d50d      	bpl.n	8004ce4 <HAL_SPI_TransmitReceive+0x10a>
 8004cc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	b153      	cbz	r3, 8004ce4 <HAL_SPI_TransmitReceive+0x10a>
 8004cce:	b14d      	cbz	r5, 8004ce4 <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cd2:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004cd6:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004cda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004ce2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ce4:	688a      	ldr	r2, [r1, #8]
 8004ce6:	f012 0201 	ands.w	r2, r2, #1
 8004cea:	d00f      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x132>
 8004cec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	b15b      	cbz	r3, 8004d0c <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cf6:	68c9      	ldr	r1, [r1, #12]
 8004cf8:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cfc:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004cfe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8004d0a:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d0c:	f7fd fecc 	bl	8002aa8 <HAL_GetTick>
 8004d10:	eba0 0009 	sub.w	r0, r0, r9
 8004d14:	4540      	cmp	r0, r8
 8004d16:	d3be      	bcc.n	8004c96 <HAL_SPI_TransmitReceive+0xbc>
 8004d18:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004d1c:	d0bb      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 8004d1e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d26:	2300      	movs	r3, #0
 8004d28:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d30:	b10b      	cbz	r3, 8004d36 <HAL_SPI_TransmitReceive+0x15c>
 8004d32:	2f01      	cmp	r7, #1
 8004d34:	d10b      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 8004d36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d909      	bls.n	8004d52 <HAL_SPI_TransmitReceive+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004d42:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 8004d44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d46:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d48:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004d4e:	2501      	movs	r5, #1
 8004d50:	e049      	b.n	8004de6 <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d52:	782b      	ldrb	r3, [r5, #0]
 8004d54:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 8004d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d58:	3301      	adds	r3, #1
 8004d5a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004d5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	e7f3      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	6893      	ldr	r3, [r2, #8]
 8004d66:	079b      	lsls	r3, r3, #30
 8004d68:	d511      	bpl.n	8004d8e <HAL_SPI_TransmitReceive+0x1b4>
 8004d6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	b173      	cbz	r3, 8004d8e <HAL_SPI_TransmitReceive+0x1b4>
 8004d70:	b16d      	cbz	r5, 8004d8e <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 8004d72:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8004d76:	b289      	uxth	r1, r1
 8004d78:	2901      	cmp	r1, #1
 8004d7a:	d93e      	bls.n	8004dfa <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004d80:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d82:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d86:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004d8c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	6893      	ldr	r3, [r2, #8]
 8004d92:	f013 0301 	ands.w	r3, r3, #1
 8004d96:	d01d      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x1fa>
 8004d98:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8004d9c:	b289      	uxth	r1, r1
 8004d9e:	b1c9      	cbz	r1, 8004dd4 <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->RxXferCount > 1U)
 8004da0:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da4:	6c21      	ldr	r1, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 8004da6:	b280      	uxth	r0, r0
 8004da8:	2801      	cmp	r0, #1
 8004daa:	d92e      	bls.n	8004e0a <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dac:	68d0      	ldr	r0, [r2, #12]
 8004dae:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db2:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004db4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8004db8:	3902      	subs	r1, #2
 8004dba:	b289      	uxth	r1, r1
 8004dbc:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004dc0:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8004dc4:	b289      	uxth	r1, r1
 8004dc6:	2901      	cmp	r1, #1
 8004dc8:	d803      	bhi.n	8004dd2 <HAL_SPI_TransmitReceive+0x1f8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dca:	6851      	ldr	r1, [r2, #4]
 8004dcc:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004dd0:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8004dd2:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004dd4:	f7fd fe68 	bl	8002aa8 <HAL_GetTick>
 8004dd8:	eba0 0009 	sub.w	r0, r0, r9
 8004ddc:	4540      	cmp	r0, r8
 8004dde:	d320      	bcc.n	8004e22 <HAL_SPI_TransmitReceive+0x248>
 8004de0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004de4:	d19b      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x144>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1b9      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x188>
 8004dee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1b4      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x188>
 8004df8:	e754      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0xca>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004dfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e00:	3301      	adds	r3, #1
 8004e02:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004e04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e06:	3b01      	subs	r3, #1
 8004e08:	e7be      	b.n	8004d88 <HAL_SPI_TransmitReceive+0x1ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e0a:	7b12      	ldrb	r2, [r2, #12]
 8004e0c:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8004e0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e10:	3201      	adds	r2, #1
 8004e12:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8004e14:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004e18:	3a01      	subs	r2, #1
 8004e1a:	b292      	uxth	r2, r2
 8004e1c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8004e20:	e7d7      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x1f8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e22:	f1b8 0f00 	cmp.w	r8, #0
 8004e26:	d1de      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x20c>
 8004e28:	e779      	b.n	8004d1e <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_BUSY;
 8004e2a:	2002      	movs	r0, #2
 8004e2c:	e778      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8004e2e:	2002      	movs	r0, #2
 8004e30:	e77c      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x152>

08004e32 <HAL_SPI_Receive>:
{
 8004e32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e36:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e38:	6843      	ldr	r3, [r0, #4]
 8004e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4689      	mov	r9, r1
 8004e42:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e44:	d10c      	bne.n	8004e60 <HAL_SPI_Receive+0x2e>
 8004e46:	6883      	ldr	r3, [r0, #8]
 8004e48:	b953      	cbnz	r3, 8004e60 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e50:	4613      	mov	r3, r2
 8004e52:	9600      	str	r6, [sp, #0]
 8004e54:	460a      	mov	r2, r1
 8004e56:	f7ff fec0 	bl	8004bda <HAL_SPI_TransmitReceive>
}
 8004e5a:	b003      	add	sp, #12
 8004e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8004e60:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f000 809a 	beq.w	8004f9e <HAL_SPI_Receive+0x16c>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004e70:	f7fd fe1a 	bl	8002aa8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e74:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004e78:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004e7a:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e7c:	b2d8      	uxtb	r0, r3
 8004e7e:	f040 808c 	bne.w	8004f9a <HAL_SPI_Receive+0x168>
  if ((pData == NULL) || (Size == 0U))
 8004e82:	f1b9 0f00 	cmp.w	r9, #0
 8004e86:	d06f      	beq.n	8004f68 <HAL_SPI_Receive+0x136>
 8004e88:	2f00      	cmp	r7, #0
 8004e8a:	d06d      	beq.n	8004f68 <HAL_SPI_Receive+0x136>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e8c:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e8e:	2304      	movs	r3, #4
 8004e90:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->TxISR       = NULL;
 8004e94:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e98:	6625      	str	r5, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e9a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e9c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8004ea0:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004ea2:	87e5      	strh	r5, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ea4:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ea6:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ea8:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004eaa:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eae:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eb2:	bf8c      	ite	hi
 8004eb4:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eb8:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
  hspi->RxXferSize  = Size;
 8004ebc:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ec0:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec2:	68a3      	ldr	r3, [r4, #8]
 8004ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec8:	d107      	bne.n	8004eda <HAL_SPI_Receive+0xa8>
    __HAL_SPI_DISABLE(hspi);
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed0:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8004ed2:	682b      	ldr	r3, [r5, #0]
 8004ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed8:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eda:	682b      	ldr	r3, [r5, #0]
 8004edc:	065f      	lsls	r7, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004ede:	bf5e      	ittt	pl
 8004ee0:	682b      	ldrpl	r3, [r5, #0]
 8004ee2:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004ee6:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004ee8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004eec:	d923      	bls.n	8004f36 <HAL_SPI_Receive+0x104>
    while (hspi->RxXferCount > 0U)
 8004eee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	b323      	cbz	r3, 8004f40 <HAL_SPI_Receive+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	07d2      	lsls	r2, r2, #31
 8004efc:	d53e      	bpl.n	8004f7c <HAL_SPI_Receive+0x14a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f02:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f06:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004f08:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004f14:	e7eb      	b.n	8004eee <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	07d0      	lsls	r0, r2, #31
 8004f1c:	d51b      	bpl.n	8004f56 <HAL_SPI_Receive+0x124>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f20:	7b1b      	ldrb	r3, [r3, #12]
 8004f22:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f26:	3301      	adds	r3, #1
 8004f28:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004f2a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8004f36:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1ea      	bne.n	8004f16 <HAL_SPI_Receive+0xe4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f40:	4642      	mov	r2, r8
 8004f42:	4631      	mov	r1, r6
 8004f44:	4620      	mov	r0, r4
 8004f46:	f7ff fcb7 	bl	80048b8 <SPI_EndRxTransaction>
 8004f4a:	bb18      	cbnz	r0, 8004f94 <HAL_SPI_Receive+0x162>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f4c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004f4e:	3800      	subs	r0, #0
 8004f50:	bf18      	it	ne
 8004f52:	2001      	movne	r0, #1
error :
 8004f54:	e008      	b.n	8004f68 <HAL_SPI_Receive+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f56:	f7fd fda7 	bl	8002aa8 <HAL_GetTick>
 8004f5a:	eba0 0008 	sub.w	r0, r0, r8
 8004f5e:	42b0      	cmp	r0, r6
 8004f60:	d309      	bcc.n	8004f76 <HAL_SPI_Receive+0x144>
 8004f62:	1c71      	adds	r1, r6, #1
 8004f64:	d0e7      	beq.n	8004f36 <HAL_SPI_Receive+0x104>
          errorcode = HAL_TIMEOUT;
 8004f66:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8004f74:	e771      	b.n	8004e5a <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	d1dd      	bne.n	8004f36 <HAL_SPI_Receive+0x104>
 8004f7a:	e7f4      	b.n	8004f66 <HAL_SPI_Receive+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f7c:	f7fd fd94 	bl	8002aa8 <HAL_GetTick>
 8004f80:	eba0 0008 	sub.w	r0, r0, r8
 8004f84:	42b0      	cmp	r0, r6
 8004f86:	d302      	bcc.n	8004f8e <HAL_SPI_Receive+0x15c>
 8004f88:	1c73      	adds	r3, r6, #1
 8004f8a:	d0b0      	beq.n	8004eee <HAL_SPI_Receive+0xbc>
 8004f8c:	e7eb      	b.n	8004f66 <HAL_SPI_Receive+0x134>
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	d1ad      	bne.n	8004eee <HAL_SPI_Receive+0xbc>
 8004f92:	e7e8      	b.n	8004f66 <HAL_SPI_Receive+0x134>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f94:	2320      	movs	r3, #32
 8004f96:	6623      	str	r3, [r4, #96]	; 0x60
 8004f98:	e7d8      	b.n	8004f4c <HAL_SPI_Receive+0x11a>
    errorcode = HAL_BUSY;
 8004f9a:	2002      	movs	r0, #2
 8004f9c:	e7e4      	b.n	8004f68 <HAL_SPI_Receive+0x136>
  __HAL_LOCK(hspi);
 8004f9e:	2002      	movs	r0, #2
 8004fa0:	e75b      	b.n	8004e5a <HAL_SPI_Receive+0x28>
	...

08004fa4 <HAL_SPI_Transmit_DMA>:
{
 8004fa4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8004fa6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004faa:	2b01      	cmp	r3, #1
{
 8004fac:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004fae:	d076      	beq.n	800509e <HAL_SPI_Transmit_DMA+0xfa>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8004fb6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	b2dd      	uxtb	r5, r3
 8004fbe:	d16c      	bne.n	800509a <HAL_SPI_Transmit_DMA+0xf6>
  if ((pData == NULL) || (Size == 0U))
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d04b      	beq.n	800505c <HAL_SPI_Transmit_DMA+0xb8>
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	d049      	beq.n	800505c <HAL_SPI_Transmit_DMA+0xb8>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->RxISR       = NULL;
 8004fd2:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8004fd6:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fd8:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004fda:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004fde:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe2:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8004fe4:	8782      	strh	r2, [r0, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8004fea:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fec:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fee:	d107      	bne.n	8005000 <HAL_SPI_Transmit_DMA+0x5c>
    __HAL_SPI_DISABLE(hspi);
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004ff8:	6813      	ldr	r3, [r2, #0]
 8004ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ffe:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005000:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005002:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <HAL_SPI_Transmit_DMA+0x100>)
 8005004:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005006:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <HAL_SPI_Transmit_DMA+0x104>)
 8005008:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800500a:	4b28      	ldr	r3, [pc, #160]	; (80050ac <HAL_SPI_Transmit_DMA+0x108>)
 800500c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	6383      	str	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005012:	6853      	ldr	r3, [r2, #4]
 8005014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005018:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800501a:	68e3      	ldr	r3, [r4, #12]
 800501c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005020:	d80f      	bhi.n	8005042 <HAL_SPI_Transmit_DMA+0x9e>
 8005022:	6983      	ldr	r3, [r0, #24]
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005028:	d10b      	bne.n	8005042 <HAL_SPI_Transmit_DMA+0x9e>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800502a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800502c:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005030:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005032:	d118      	bne.n	8005066 <HAL_SPI_Transmit_DMA+0xc2>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005038:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800503a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800503c:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005040:	87e3      	strh	r3, [r4, #62]	; 0x3e
                                 hspi->TxXferCount))
 8005042:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005044:	320c      	adds	r2, #12
 8005046:	b29b      	uxth	r3, r3
 8005048:	f7fe fab6 	bl	80035b8 <HAL_DMA_Start_IT>
 800504c:	b198      	cbz	r0, 8005076 <HAL_SPI_Transmit_DMA+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800504e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005050:	f043 0310 	orr.w	r3, r3, #16
 8005054:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8005056:	2301      	movs	r3, #1
 8005058:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800505c:	2300      	movs	r3, #0
 800505e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005062:	4628      	mov	r0, r5
 8005064:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800506a:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800506c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800506e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8005072:	3301      	adds	r3, #1
 8005074:	e7e4      	b.n	8005040 <HAL_SPI_Transmit_DMA+0x9c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800507c:	bf5e      	ittt	pl
 800507e:	681a      	ldrpl	r2, [r3, #0]
 8005080:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8005084:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	f042 0220 	orr.w	r2, r2, #32
 800508c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	f042 0202 	orr.w	r2, r2, #2
 8005094:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005096:	2500      	movs	r5, #0
 8005098:	e7e0      	b.n	800505c <HAL_SPI_Transmit_DMA+0xb8>
    errorcode = HAL_BUSY;
 800509a:	2502      	movs	r5, #2
 800509c:	e7de      	b.n	800505c <HAL_SPI_Transmit_DMA+0xb8>
  __HAL_LOCK(hspi);
 800509e:	2502      	movs	r5, #2
 80050a0:	e7df      	b.n	8005062 <HAL_SPI_Transmit_DMA+0xbe>
 80050a2:	bf00      	nop
 80050a4:	080050b3 	.word	0x080050b3
 80050a8:	080050e1 	.word	0x080050e1
 80050ac:	080050bf 	.word	0x080050bf

080050b0 <HAL_SPI_TxHalfCpltCallback>:
 80050b0:	4770      	bx	lr

080050b2 <SPI_DMAHalfTransmitCplt>:
{
 80050b2:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80050b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050b6:	f7ff fffb 	bl	80050b0 <HAL_SPI_TxHalfCpltCallback>
}
 80050ba:	bd08      	pop	{r3, pc}

080050bc <HAL_SPI_ErrorCallback>:
 80050bc:	4770      	bx	lr

080050be <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050be:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050c0:	6802      	ldr	r2, [r0, #0]
{
 80050c2:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050c4:	6853      	ldr	r3, [r2, #4]
 80050c6:	f023 0303 	bic.w	r3, r3, #3
 80050ca:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050cc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80050ce:	f043 0310 	orr.w	r3, r3, #16
 80050d2:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80050da:	f7ff ffef 	bl	80050bc <HAL_SPI_ErrorCallback>
}
 80050de:	bd08      	pop	{r3, pc}

080050e0 <SPI_DMATransmitCplt>:
{
 80050e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050e2:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050e4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80050e6:	f7fd fcdf 	bl	8002aa8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80050ea:	682b      	ldr	r3, [r5, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 80050f0:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80050f2:	d426      	bmi.n	8005142 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	f021 0120 	bic.w	r1, r1, #32
 80050fc:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	f021 0102 	bic.w	r1, r1, #2
 8005104:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005106:	4620      	mov	r0, r4
 8005108:	2164      	movs	r1, #100	; 0x64
 800510a:	f7ff fc0e 	bl	800492a <SPI_EndRxTxTransaction>
 800510e:	b118      	cbz	r0, 8005118 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005112:	f043 0320 	orr.w	r3, r3, #32
 8005116:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	b933      	cbnz	r3, 800512a <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	9201      	str	r2, [sp, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800512e:	2301      	movs	r3, #1
 8005130:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005134:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005136:	b123      	cbz	r3, 8005142 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8005138:	4620      	mov	r0, r4
 800513a:	f7ff ffbf 	bl	80050bc <HAL_SPI_ErrorCallback>
}
 800513e:	b003      	add	sp, #12
 8005140:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8005142:	4620      	mov	r0, r4
 8005144:	f7fc fb26 	bl	8001794 <HAL_SPI_TxCpltCallback>
 8005148:	e7f9      	b.n	800513e <SPI_DMATransmitCplt+0x5e>

0800514a <HAL_SPI_GetState>:
  return hspi->State;
 800514a:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 800514e:	4770      	bx	lr

08005150 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005150:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005154:	2b01      	cmp	r3, #1
 8005156:	d12f      	bne.n	80051b8 <HAL_TIM_Base_Start_IT+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	2302      	movs	r3, #2
 800515a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800515e:	6803      	ldr	r3, [r0, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005168:	4a14      	ldr	r2, [pc, #80]	; (80051bc <HAL_TIM_Base_Start_IT+0x6c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d016      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x4c>
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d013      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x4c>
 8005174:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005178:	4293      	cmp	r3, r2
 800517a:	d00f      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x4c>
 800517c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005180:	4293      	cmp	r3, r2
 8005182:	d00b      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x4c>
 8005184:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005188:	4293      	cmp	r3, r2
 800518a:	d007      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x4c>
 800518c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x4c>
 8005194:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005198:	4293      	cmp	r3, r2
 800519a:	d107      	bne.n	80051ac <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <HAL_TIM_Base_Start_IT+0x70>)
 80051a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	2a06      	cmp	r2, #6
 80051a4:	d006      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x64>
 80051a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80051aa:	d003      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b4:	2000      	movs	r0, #0
}
 80051b6:	4770      	bx	lr
    return HAL_ERROR;
 80051b8:	2001      	movs	r0, #1
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	00010007 	.word	0x00010007

080051c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_IC_CaptureCallback>:
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80051c8:	4770      	bx	lr

080051ca <HAL_TIM_TriggerCallback>:
 80051ca:	4770      	bx	lr

080051cc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051cc:	6803      	ldr	r3, [r0, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	0791      	lsls	r1, r2, #30
{
 80051d2:	b510      	push	{r4, lr}
 80051d4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051d6:	d50f      	bpl.n	80051f8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	0792      	lsls	r2, r2, #30
 80051dc:	d50c      	bpl.n	80051f8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051de:	f06f 0202 	mvn.w	r2, #2
 80051e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e4:	2201      	movs	r2, #1
 80051e6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	0799      	lsls	r1, r3, #30
 80051ec:	f000 8085 	beq.w	80052fa <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f0:	f7ff ffe9 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f4:	2300      	movs	r3, #0
 80051f6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	0752      	lsls	r2, r2, #29
 80051fe:	d510      	bpl.n	8005222 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	0750      	lsls	r0, r2, #29
 8005204:	d50d      	bpl.n	8005222 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005206:	f06f 0204 	mvn.w	r2, #4
 800520a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800520c:	2202      	movs	r2, #2
 800520e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005218:	d075      	beq.n	8005306 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	f7ff ffd4 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	2300      	movs	r3, #0
 8005220:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	0711      	lsls	r1, r2, #28
 8005228:	d50f      	bpl.n	800524a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	0712      	lsls	r2, r2, #28
 800522e:	d50c      	bpl.n	800524a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005230:	f06f 0208 	mvn.w	r2, #8
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	2204      	movs	r2, #4
 8005238:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005240:	d067      	beq.n	8005312 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005242:	f7ff ffc0 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	2300      	movs	r3, #0
 8005248:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	06d0      	lsls	r0, r2, #27
 8005250:	d510      	bpl.n	8005274 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	06d1      	lsls	r1, r2, #27
 8005256:	d50d      	bpl.n	8005274 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005258:	f06f 0210 	mvn.w	r2, #16
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525e:	2208      	movs	r2, #8
 8005260:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005268:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800526a:	d058      	beq.n	800531e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800526c:	f7ff ffab 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005270:	2300      	movs	r3, #0
 8005272:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	07d2      	lsls	r2, r2, #31
 800527a:	d508      	bpl.n	800528e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	07d0      	lsls	r0, r2, #31
 8005280:	d505      	bpl.n	800528e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005282:	f06f 0201 	mvn.w	r2, #1
 8005286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005288:	4620      	mov	r0, r4
 800528a:	f7fc fa8b 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	0611      	lsls	r1, r2, #24
 8005294:	d508      	bpl.n	80052a8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	0612      	lsls	r2, r2, #24
 800529a:	d505      	bpl.n	80052a8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800529c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 f9c5 	bl	8005632 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	05d0      	lsls	r0, r2, #23
 80052ae:	d508      	bpl.n	80052c2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	0611      	lsls	r1, r2, #24
 80052b4:	d505      	bpl.n	80052c2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 f9b9 	bl	8005634 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	0652      	lsls	r2, r2, #25
 80052c8:	d508      	bpl.n	80052dc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	0650      	lsls	r0, r2, #25
 80052ce:	d505      	bpl.n	80052dc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d6:	4620      	mov	r0, r4
 80052d8:	f7ff ff77 	bl	80051ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	0691      	lsls	r1, r2, #26
 80052e2:	d522      	bpl.n	800532a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	0692      	lsls	r2, r2, #26
 80052e8:	d51f      	bpl.n	800532a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052ea:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80052f6:	f000 b99b 	b.w	8005630 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	f7ff ff63 	bl	80051c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fe:	4620      	mov	r0, r4
 8005300:	f7ff ff62 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005304:	e776      	b.n	80051f4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	f7ff ff5d 	bl	80051c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530a:	4620      	mov	r0, r4
 800530c:	f7ff ff5c 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005310:	e785      	b.n	800521e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	f7ff ff57 	bl	80051c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005316:	4620      	mov	r0, r4
 8005318:	f7ff ff56 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800531c:	e793      	b.n	8005246 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	f7ff ff51 	bl	80051c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005322:	4620      	mov	r0, r4
 8005324:	f7ff ff50 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005328:	e7a2      	b.n	8005270 <HAL_TIM_IRQHandler+0xa4>
}
 800532a:	bd10      	pop	{r4, pc}

0800532c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800532c:	4a30      	ldr	r2, [pc, #192]	; (80053f0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800532e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005330:	4290      	cmp	r0, r2
 8005332:	d012      	beq.n	800535a <TIM_Base_SetConfig+0x2e>
 8005334:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005338:	d00f      	beq.n	800535a <TIM_Base_SetConfig+0x2e>
 800533a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800533e:	4290      	cmp	r0, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0x2e>
 8005342:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005346:	4290      	cmp	r0, r2
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0x2e>
 800534a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800534e:	4290      	cmp	r0, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0x2e>
 8005352:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005356:	4290      	cmp	r0, r2
 8005358:	d119      	bne.n	800538e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800535a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005360:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005362:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <TIM_Base_SetConfig+0xc4>)
 8005364:	4290      	cmp	r0, r2
 8005366:	d01d      	beq.n	80053a4 <TIM_Base_SetConfig+0x78>
 8005368:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800536c:	d01a      	beq.n	80053a4 <TIM_Base_SetConfig+0x78>
 800536e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005372:	4290      	cmp	r0, r2
 8005374:	d016      	beq.n	80053a4 <TIM_Base_SetConfig+0x78>
 8005376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800537a:	4290      	cmp	r0, r2
 800537c:	d012      	beq.n	80053a4 <TIM_Base_SetConfig+0x78>
 800537e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005382:	4290      	cmp	r0, r2
 8005384:	d00e      	beq.n	80053a4 <TIM_Base_SetConfig+0x78>
 8005386:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800538a:	4290      	cmp	r0, r2
 800538c:	d00a      	beq.n	80053a4 <TIM_Base_SetConfig+0x78>
 800538e:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <TIM_Base_SetConfig+0xc8>)
 8005390:	4290      	cmp	r0, r2
 8005392:	d007      	beq.n	80053a4 <TIM_Base_SetConfig+0x78>
 8005394:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005398:	4290      	cmp	r0, r2
 800539a:	d003      	beq.n	80053a4 <TIM_Base_SetConfig+0x78>
 800539c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053a0:	4290      	cmp	r0, r2
 80053a2:	d103      	bne.n	80053ac <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ac:	694a      	ldr	r2, [r1, #20]
 80053ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80053b4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b6:	688b      	ldr	r3, [r1, #8]
 80053b8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ba:	680b      	ldr	r3, [r1, #0]
 80053bc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <TIM_Base_SetConfig+0xc4>)
 80053c0:	4298      	cmp	r0, r3
 80053c2:	d00f      	beq.n	80053e4 <TIM_Base_SetConfig+0xb8>
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	4298      	cmp	r0, r3
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0xb8>
 80053cc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80053d0:	4298      	cmp	r0, r3
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0xb8>
 80053d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d8:	4298      	cmp	r0, r3
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0xb8>
 80053dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e0:	4298      	cmp	r0, r3
 80053e2:	d101      	bne.n	80053e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e4:	690b      	ldr	r3, [r1, #16]
 80053e6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e8:	2301      	movs	r3, #1
 80053ea:	6143      	str	r3, [r0, #20]
}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40014000 	.word	0x40014000

080053f8 <HAL_TIM_Base_Init>:
{
 80053f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80053fa:	4604      	mov	r4, r0
 80053fc:	b350      	cbz	r0, 8005454 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80053fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005402:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005406:	b91b      	cbnz	r3, 8005410 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005408:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800540c:	f7fc fcd4 	bl	8001db8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005412:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005418:	1d21      	adds	r1, r4, #4
 800541a:	f7ff ff87 	bl	800532c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800541e:	2301      	movs	r3, #1
 8005420:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8005424:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800542a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800542e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005432:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005436:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800543a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005446:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800544a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800544e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005452:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005454:	2001      	movs	r0, #1
 8005456:	e7fc      	b.n	8005452 <HAL_TIM_Base_Init+0x5a>

08005458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005458:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800545a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800545c:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800545e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005462:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8005466:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005468:	6083      	str	r3, [r0, #8]
}
 800546a:	bd10      	pop	{r4, pc}

0800546c <HAL_TIM_ConfigClockSource>:
{
 800546c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800546e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005472:	2b01      	cmp	r3, #1
{
 8005474:	4604      	mov	r4, r0
 8005476:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800547a:	f000 808f 	beq.w	800559c <HAL_TIM_ConfigClockSource+0x130>
 800547e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005484:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005488:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548a:	4b45      	ldr	r3, [pc, #276]	; (80055a0 <HAL_TIM_ConfigClockSource+0x134>)
  tmpsmcr = htim->Instance->SMCR;
 800548c:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005490:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005492:	680b      	ldr	r3, [r1, #0]
 8005494:	2b60      	cmp	r3, #96	; 0x60
 8005496:	d052      	beq.n	800553e <HAL_TIM_ConfigClockSource+0xd2>
 8005498:	d833      	bhi.n	8005502 <HAL_TIM_ConfigClockSource+0x96>
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d067      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x102>
 800549e:	d816      	bhi.n	80054ce <HAL_TIM_ConfigClockSource+0x62>
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d00d      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0x54>
 80054a4:	d80a      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x50>
 80054a6:	f033 0110 	bics.w	r1, r3, #16
 80054aa:	d009      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80054b2:	2300      	movs	r3, #0
 80054b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80054b8:	4610      	mov	r0, r2
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80054bc:	2b30      	cmp	r3, #48	; 0x30
 80054be:	d1f5      	bne.n	80054ac <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 80054c0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f043 0307 	orr.w	r3, r3, #7
 80054cc:	e017      	b.n	80054fe <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80054ce:	2b50      	cmp	r3, #80	; 0x50
 80054d0:	d1ec      	bne.n	80054ac <HAL_TIM_ConfigClockSource+0x40>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	684a      	ldr	r2, [r1, #4]
 80054d4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80054d6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d8:	6a05      	ldr	r5, [r0, #32]
 80054da:	f025 0501 	bic.w	r5, r5, #1
 80054de:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ea:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80054ee:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80054f0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80054f2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80054f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054fa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80054fe:	6083      	str	r3, [r0, #8]
 8005500:	e011      	b.n	8005526 <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005506:	d00e      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0xba>
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550c:	d00d      	beq.n	800552a <HAL_TIM_ConfigClockSource+0xbe>
 800550e:	2b70      	cmp	r3, #112	; 0x70
 8005510:	d1cc      	bne.n	80054ac <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8005512:	68cb      	ldr	r3, [r1, #12]
 8005514:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005518:	f7ff ff9e 	bl	8005458 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800551c:	6822      	ldr	r2, [r4, #0]
 800551e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005520:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005524:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005526:	2200      	movs	r2, #0
 8005528:	e7c0      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 800552a:	68cb      	ldr	r3, [r1, #12]
 800552c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005530:	f7ff ff92 	bl	8005458 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	6893      	ldr	r3, [r2, #8]
 8005538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800553c:	e7f2      	b.n	8005524 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800553e:	684d      	ldr	r5, [r1, #4]
 8005540:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005542:	6a01      	ldr	r1, [r0, #32]
 8005544:	f021 0110 	bic.w	r1, r1, #16
 8005548:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800554c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800554e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005556:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800555a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800555e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005560:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005562:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005568:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800556c:	e7c7      	b.n	80054fe <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	684a      	ldr	r2, [r1, #4]
 8005570:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005572:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005574:	6a05      	ldr	r5, [r0, #32]
 8005576:	f025 0501 	bic.w	r5, r5, #1
 800557a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005586:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800558a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800558c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800558e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005590:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005596:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800559a:	e7b0      	b.n	80054fe <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 800559c:	461a      	mov	r2, r3
 800559e:	e78b      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x4c>
 80055a0:	fffe0088 	.word	0xfffe0088

080055a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	f04f 0302 	mov.w	r3, #2
 80055b0:	d039      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x82>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055b6:	4d1d      	ldr	r5, [pc, #116]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 80055b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055ba:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80055bc:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80055be:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055c0:	d003      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80055c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80055c6:	42ab      	cmp	r3, r5
 80055c8:	d103      	bne.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055ca:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055cc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055d0:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d8:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055dc:	4a13      	ldr	r2, [pc, #76]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d016      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e6:	d013      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80055e8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00f      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80055f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80055f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8005600:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8005608:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800560c:	4293      	cmp	r3, r2
 800560e:	d104      	bne.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x76>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005610:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005612:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005616:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800561a:	2301      	movs	r3, #1
 800561c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005620:	2300      	movs	r3, #0
 8005622:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005626:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005628:	bd30      	pop	{r4, r5, pc}
 800562a:	bf00      	nop
 800562c:	40012c00 	.word	0x40012c00

08005630 <HAL_TIMEx_CommutCallback>:
 8005630:	4770      	bx	lr

08005632 <HAL_TIMEx_BreakCallback>:
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_Break2Callback>:
 8005634:	4770      	bx	lr

08005636 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005636:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	e852 3f00 	ldrex	r3, [r2]
 800563c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005644:	6802      	ldr	r2, [r0, #0]
 8005646:	2900      	cmp	r1, #0
 8005648:	d1f5      	bne.n	8005636 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	f102 0308 	add.w	r3, r2, #8
 800564e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005652:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f102 0c08 	add.w	ip, r2, #8
 800565a:	e84c 3100 	strex	r1, r3, [ip]
 800565e:	2900      	cmp	r1, #0
 8005660:	d1f3      	bne.n	800564a <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005662:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005664:	2b01      	cmp	r3, #1
 8005666:	d107      	bne.n	8005678 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	e842 3100 	strex	r1, r3, [r2]
 8005674:	2900      	cmp	r1, #0
 8005676:	d1f7      	bne.n	8005668 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005678:	2320      	movs	r3, #32
 800567a:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567c:	2300      	movs	r3, #0
 800567e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005680:	6643      	str	r3, [r0, #100]	; 0x64
}
 8005682:	4770      	bx	lr

08005684 <UART_TxISR_16BIT.part.0>:
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005684:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	e852 3f00 	ldrex	r3, [r2]
 800568a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005692:	6802      	ldr	r2, [r0, #0]
 8005694:	2900      	cmp	r1, #0
 8005696:	d1f5      	bne.n	8005684 <UART_TxISR_16BIT.part.0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	e852 3f00 	ldrex	r3, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800569c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	e842 3100 	strex	r1, r3, [r2]
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d1f7      	bne.n	8005698 <UART_TxISR_16BIT.part.0+0x14>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80056a8:	4770      	bx	lr

080056aa <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056aa:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80056ac:	2a21      	cmp	r2, #33	; 0x21
{
 80056ae:	4603      	mov	r3, r0
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056b0:	d111      	bne.n	80056d6 <UART_TxISR_8BIT+0x2c>
    if (huart->TxXferCount == 0U)
 80056b2:	f8b0 2052 	ldrh.w	r2, [r0, #82]	; 0x52
 80056b6:	b292      	uxth	r2, r2
 80056b8:	b90a      	cbnz	r2, 80056be <UART_TxISR_8BIT+0x14>
 80056ba:	f7ff bfe3 	b.w	8005684 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80056be:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80056c0:	6801      	ldr	r1, [r0, #0]
 80056c2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80056c6:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 80056c8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80056ca:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80056ce:	3a01      	subs	r2, #1
 80056d0:	b292      	uxth	r2, r2
 80056d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80056d6:	4770      	bx	lr

080056d8 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056d8:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80056da:	2a21      	cmp	r2, #33	; 0x21
{
 80056dc:	4603      	mov	r3, r0
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056de:	d113      	bne.n	8005708 <UART_TxISR_16BIT+0x30>
  {
    if (huart->TxXferCount == 0U)
 80056e0:	f8b0 2052 	ldrh.w	r2, [r0, #82]	; 0x52
 80056e4:	b292      	uxth	r2, r2
 80056e6:	b90a      	cbnz	r2, 80056ec <UART_TxISR_16BIT+0x14>
 80056e8:	f7ff bfcc 	b.w	8005684 <UART_TxISR_16BIT.part.0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80056ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056ee:	6800      	ldr	r0, [r0, #0]
 80056f0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80056f4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80056f8:	8501      	strh	r1, [r0, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80056fa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80056fc:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8005700:	3a01      	subs	r2, #1
 8005702:	b292      	uxth	r2, r2
 8005704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    }
  }
}
 8005708:	4770      	bx	lr
	...

0800570c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800570c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800570e:	2b20      	cmp	r3, #32
 8005710:	d12c      	bne.n	800576c <HAL_UART_Transmit_IT+0x60>
    if ((pData == NULL) || (Size == 0U))
 8005712:	b349      	cbz	r1, 8005768 <HAL_UART_Transmit_IT+0x5c>
 8005714:	b342      	cbz	r2, 8005768 <HAL_UART_Transmit_IT+0x5c>
    __HAL_LOCK(huart);
 8005716:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800571a:	2b01      	cmp	r3, #1
 800571c:	d026      	beq.n	800576c <HAL_UART_Transmit_IT+0x60>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 8005720:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005728:	2321      	movs	r3, #33	; 0x21
 800572a:	6783      	str	r3, [r0, #120]	; 0x78
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800572c:	6883      	ldr	r3, [r0, #8]
    huart->pTxBuffPtr  = pData;
 800572e:	64c1      	str	r1, [r0, #76]	; 0x4c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8005734:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005738:	d114      	bne.n	8005764 <HAL_UART_Transmit_IT+0x58>
 800573a:	6901      	ldr	r1, [r0, #16]
      huart->TxISR = UART_TxISR_16BIT;
 800573c:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <HAL_UART_Transmit_IT+0x64>)
 800573e:	4a0d      	ldr	r2, [pc, #52]	; (8005774 <HAL_UART_Transmit_IT+0x68>)
 8005740:	2900      	cmp	r1, #0
 8005742:	bf08      	it	eq
 8005744:	4613      	moveq	r3, r2
 8005746:	6683      	str	r3, [r0, #104]	; 0x68
    __HAL_UNLOCK(huart);
 8005748:	2300      	movs	r3, #0
 800574a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800574e:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	e851 2f00 	ldrex	r2, [r1]
 8005754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f6      	bne.n	800574e <HAL_UART_Transmit_IT+0x42>
    return HAL_OK;
 8005760:	4618      	mov	r0, r3
 8005762:	4770      	bx	lr
      huart->TxISR = UART_TxISR_8BIT;
 8005764:	4b02      	ldr	r3, [pc, #8]	; (8005770 <HAL_UART_Transmit_IT+0x64>)
 8005766:	e7ee      	b.n	8005746 <HAL_UART_Transmit_IT+0x3a>
      return HAL_ERROR;
 8005768:	2001      	movs	r0, #1
 800576a:	4770      	bx	lr
    return HAL_BUSY;
 800576c:	2002      	movs	r0, #2
}
 800576e:	4770      	bx	lr
 8005770:	080056ab 	.word	0x080056ab
 8005774:	080056d9 	.word	0x080056d9

08005778 <HAL_UART_TxCpltCallback>:
 8005778:	4770      	bx	lr

0800577a <HAL_UART_ErrorCallback>:
 800577a:	4770      	bx	lr

0800577c <UART_DMAAbortOnError>:
{
 800577c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800577e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005786:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800578a:	f7ff fff6 	bl	800577a <HAL_UART_ErrorCallback>
}
 800578e:	bd08      	pop	{r3, pc}

08005790 <HAL_UARTEx_RxEventCallback>:
}
 8005790:	4770      	bx	lr
	...

08005794 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005794:	6803      	ldr	r3, [r0, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005798:	6819      	ldr	r1, [r3, #0]
{
 800579a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800579c:	f640 060f 	movw	r6, #2063	; 0x80f
 80057a0:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057a2:	689d      	ldr	r5, [r3, #8]
{
 80057a4:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80057a6:	d10b      	bne.n	80057c0 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057a8:	0696      	lsls	r6, r2, #26
 80057aa:	f140 8088 	bpl.w	80058be <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057ae:	068e      	lsls	r6, r1, #26
 80057b0:	f140 8085 	bpl.w	80058be <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 80057b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d07b      	beq.n	80058b2 <HAL_UART_IRQHandler+0x11e>
}
 80057ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80057be:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057c0:	4e95      	ldr	r6, [pc, #596]	; (8005a18 <HAL_UART_IRQHandler+0x284>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057c2:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057c6:	400e      	ands	r6, r1
 80057c8:	4306      	orrs	r6, r0
 80057ca:	d078      	beq.n	80058be <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057cc:	07d5      	lsls	r5, r2, #31
 80057ce:	d509      	bpl.n	80057e4 <HAL_UART_IRQHandler+0x50>
 80057d0:	05ce      	lsls	r6, r1, #23
 80057d2:	d507      	bpl.n	80057e4 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057d4:	2501      	movs	r5, #1
 80057d6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057d8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80057dc:	f045 0501 	orr.w	r5, r5, #1
 80057e0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057e4:	0795      	lsls	r5, r2, #30
 80057e6:	d508      	bpl.n	80057fa <HAL_UART_IRQHandler+0x66>
 80057e8:	b138      	cbz	r0, 80057fa <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057ea:	2502      	movs	r5, #2
 80057ec:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057ee:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80057f2:	f045 0504 	orr.w	r5, r5, #4
 80057f6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057fa:	0756      	lsls	r6, r2, #29
 80057fc:	d508      	bpl.n	8005810 <HAL_UART_IRQHandler+0x7c>
 80057fe:	b138      	cbz	r0, 8005810 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005800:	2504      	movs	r5, #4
 8005802:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005804:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005808:	f045 0502 	orr.w	r5, r5, #2
 800580c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005810:	0715      	lsls	r5, r2, #28
 8005812:	d50b      	bpl.n	800582c <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005814:	f001 0520 	and.w	r5, r1, #32
 8005818:	4328      	orrs	r0, r5
 800581a:	d007      	beq.n	800582c <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800581c:	2008      	movs	r0, #8
 800581e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005820:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005824:	f040 0008 	orr.w	r0, r0, #8
 8005828:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800582c:	0516      	lsls	r6, r2, #20
 800582e:	d50a      	bpl.n	8005846 <HAL_UART_IRQHandler+0xb2>
 8005830:	014d      	lsls	r5, r1, #5
 8005832:	d508      	bpl.n	8005846 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005834:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005838:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800583a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800583e:	f043 0320 	orr.w	r3, r3, #32
 8005842:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005846:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d031      	beq.n	80058b2 <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800584e:	0690      	lsls	r0, r2, #26
 8005850:	d505      	bpl.n	800585e <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005852:	068a      	lsls	r2, r1, #26
 8005854:	d503      	bpl.n	800585e <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8005856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005858:	b10b      	cbz	r3, 800585e <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 800585a:	4620      	mov	r0, r4
 800585c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800585e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005860:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005864:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005866:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8005870:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005872:	d01f      	beq.n	80058b4 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 8005874:	f7ff fedf 	bl	8005636 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	6893      	ldr	r3, [r2, #8]
 800587c:	065b      	lsls	r3, r3, #25
 800587e:	d515      	bpl.n	80058ac <HAL_UART_IRQHandler+0x118>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	f102 0308 	add.w	r3, r2, #8
 8005884:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	f102 0008 	add.w	r0, r2, #8
 8005890:	e840 3100 	strex	r1, r3, [r0]
 8005894:	2900      	cmp	r1, #0
 8005896:	d1f3      	bne.n	8005880 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 8005898:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800589a:	b138      	cbz	r0, 80058ac <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800589c:	4b5f      	ldr	r3, [pc, #380]	; (8005a1c <HAL_UART_IRQHandler+0x288>)
 800589e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058a0:	f7fd feec 	bl	800367c <HAL_DMA_Abort_IT>
 80058a4:	b128      	cbz	r0, 80058b2 <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80058a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80058aa:	e786      	b.n	80057ba <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 80058ac:	4620      	mov	r0, r4
 80058ae:	f7ff ff64 	bl	800577a <HAL_UART_ErrorCallback>
}
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80058b4:	f7ff ff61 	bl	800577a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80058bc:	e7f9      	b.n	80058b2 <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058be:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80058c0:	2801      	cmp	r0, #1
 80058c2:	d17e      	bne.n	80059c2 <HAL_UART_IRQHandler+0x22e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058c4:	06d6      	lsls	r6, r2, #27
 80058c6:	d57c      	bpl.n	80059c2 <HAL_UART_IRQHandler+0x22e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058c8:	06c8      	lsls	r0, r1, #27
 80058ca:	d57a      	bpl.n	80059c2 <HAL_UART_IRQHandler+0x22e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058cc:	2210      	movs	r2, #16
 80058ce:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	0651      	lsls	r1, r2, #25
 80058d4:	d546      	bpl.n	8005964 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058d6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80058d8:	6811      	ldr	r1, [r2, #0]
 80058da:	684a      	ldr	r2, [r1, #4]
 80058dc:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80058de:	2a00      	cmp	r2, #0
 80058e0:	d0e7      	beq.n	80058b2 <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058e2:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 80058e6:	4290      	cmp	r0, r2
 80058e8:	d9e3      	bls.n	80058b2 <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 80058ea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058ee:	680a      	ldr	r2, [r1, #0]
 80058f0:	0692      	lsls	r2, r2, #26
 80058f2:	d42d      	bmi.n	8005950 <HAL_UART_IRQHandler+0x1bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	e843 2100 	strex	r1, r2, [r3]
 8005900:	2900      	cmp	r1, #0
 8005902:	d1f7      	bne.n	80058f4 <HAL_UART_IRQHandler+0x160>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	f103 0208 	add.w	r2, r3, #8
 8005908:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	f103 0008 	add.w	r0, r3, #8
 8005914:	e840 2100 	strex	r1, r2, [r0]
 8005918:	2900      	cmp	r1, #0
 800591a:	d1f3      	bne.n	8005904 <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	f103 0208 	add.w	r2, r3, #8
 8005920:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	f103 0008 	add.w	r0, r3, #8
 800592c:	e840 2100 	strex	r1, r2, [r0]
 8005930:	2900      	cmp	r1, #0
 8005932:	d1f3      	bne.n	800591c <HAL_UART_IRQHandler+0x188>
          huart->RxState = HAL_UART_STATE_READY;
 8005934:	2220      	movs	r2, #32
 8005936:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005938:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800593e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	e843 2100 	strex	r1, r2, [r3]
 8005946:	2900      	cmp	r1, #0
 8005948:	d1f7      	bne.n	800593a <HAL_UART_IRQHandler+0x1a6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800594a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800594c:	f7fd fe73 	bl	8003636 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005950:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005954:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005958:	1ac9      	subs	r1, r1, r3
 800595a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800595c:	4620      	mov	r0, r4
 800595e:	f7ff ff17 	bl	8005790 <HAL_UARTEx_RxEventCallback>
 8005962:	e7a6      	b.n	80058b2 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005964:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8005968:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 800596a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 800596e:	b289      	uxth	r1, r1
 8005970:	2900      	cmp	r1, #0
 8005972:	d09e      	beq.n	80058b2 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005974:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005978:	1a89      	subs	r1, r1, r2
 800597a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800597c:	2900      	cmp	r1, #0
 800597e:	d098      	beq.n	80058b2 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005984:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	e843 2000 	strex	r0, r2, [r3]
 800598c:	2800      	cmp	r0, #0
 800598e:	d1f7      	bne.n	8005980 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	f103 0208 	add.w	r2, r3, #8
 8005994:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005998:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	f103 0508 	add.w	r5, r3, #8
 80059a0:	e845 2000 	strex	r0, r2, [r5]
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d1f3      	bne.n	8005990 <HAL_UART_IRQHandler+0x1fc>
        huart->RxState = HAL_UART_STATE_READY;
 80059a8:	2220      	movs	r2, #32
 80059aa:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 80059ac:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ae:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	e843 2000 	strex	r0, r2, [r3]
 80059bc:	2800      	cmp	r0, #0
 80059be:	d1f7      	bne.n	80059b0 <HAL_UART_IRQHandler+0x21c>
 80059c0:	e7cc      	b.n	800595c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059c2:	02d6      	lsls	r6, r2, #11
 80059c4:	d509      	bpl.n	80059da <HAL_UART_IRQHandler+0x246>
 80059c6:	0268      	lsls	r0, r5, #9
 80059c8:	d507      	bpl.n	80059da <HAL_UART_IRQHandler+0x246>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80059ce:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80059d6:	f000 bad2 	b.w	8005f7e <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059da:	0616      	lsls	r6, r2, #24
 80059dc:	d507      	bpl.n	80059ee <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059de:	060d      	lsls	r5, r1, #24
 80059e0:	d505      	bpl.n	80059ee <HAL_UART_IRQHandler+0x25a>
    if (huart->TxISR != NULL)
 80059e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f43f af64 	beq.w	80058b2 <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 80059ea:	4620      	mov	r0, r4
 80059ec:	e6e5      	b.n	80057ba <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059ee:	0650      	lsls	r0, r2, #25
 80059f0:	f57f af5f 	bpl.w	80058b2 <HAL_UART_IRQHandler+0x11e>
 80059f4:	064a      	lsls	r2, r1, #25
 80059f6:	f57f af5c 	bpl.w	80058b2 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	e843 2100 	strex	r1, r2, [r3]
 8005a06:	2900      	cmp	r1, #0
 8005a08:	d1f7      	bne.n	80059fa <HAL_UART_IRQHandler+0x266>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	2320      	movs	r3, #32
 8005a0c:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a0e:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a10:	4620      	mov	r0, r4
 8005a12:	f7ff feb1 	bl	8005778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a16:	e74c      	b.n	80058b2 <HAL_UART_IRQHandler+0x11e>
 8005a18:	04000120 	.word	0x04000120
 8005a1c:	0800577d 	.word	0x0800577d

08005a20 <UART_SetConfig>:
{
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a24:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a26:	6921      	ldr	r1, [r4, #16]
 8005a28:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a2a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a2c:	69c0      	ldr	r0, [r0, #28]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	6961      	ldr	r1, [r4, #20]
 8005a32:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a34:	498f      	ldr	r1, [pc, #572]	; (8005c74 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a36:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a38:	4029      	ands	r1, r5
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68e1      	ldr	r1, [r4, #12]
 8005a42:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4a:	4a8b      	ldr	r2, [pc, #556]	; (8005c78 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a4c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8005a50:	bf1c      	itt	ne
 8005a52:	6a22      	ldrne	r2, [r4, #32]
 8005a54:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a60:	4a86      	ldr	r2, [pc, #536]	; (8005c7c <UART_SetConfig+0x25c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d117      	bne.n	8005a96 <UART_SetConfig+0x76>
 8005a66:	4b86      	ldr	r3, [pc, #536]	; (8005c80 <UART_SetConfig+0x260>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	f200 80cf 	bhi.w	8005c16 <UART_SetConfig+0x1f6>
 8005a78:	4a82      	ldr	r2, [pc, #520]	; (8005c84 <UART_SetConfig+0x264>)
 8005a7a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005a80:	f040 8099 	bne.w	8005bb6 <UART_SetConfig+0x196>
    switch (clocksource)
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d822      	bhi.n	8005ace <UART_SetConfig+0xae>
 8005a88:	e8df f003 	tbb	[pc, r3]
 8005a8c:	2193c8d9 	.word	0x2193c8d9
 8005a90:	212121ce 	.word	0x212121ce
 8005a94:	dd          	.byte	0xdd
 8005a95:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a96:	4a7c      	ldr	r2, [pc, #496]	; (8005c88 <UART_SetConfig+0x268>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d106      	bne.n	8005aaa <UART_SetConfig+0x8a>
 8005a9c:	4b78      	ldr	r3, [pc, #480]	; (8005c80 <UART_SetConfig+0x260>)
 8005a9e:	4a7b      	ldr	r2, [pc, #492]	; (8005c8c <UART_SetConfig+0x26c>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	e7e7      	b.n	8005a7a <UART_SetConfig+0x5a>
 8005aaa:	4a79      	ldr	r2, [pc, #484]	; (8005c90 <UART_SetConfig+0x270>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d119      	bne.n	8005ae4 <UART_SetConfig+0xc4>
 8005ab0:	4b73      	ldr	r3, [pc, #460]	; (8005c80 <UART_SetConfig+0x260>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	f000 80b7 	beq.w	8005c2e <UART_SetConfig+0x20e>
 8005ac0:	d807      	bhi.n	8005ad2 <UART_SetConfig+0xb2>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 80b8 	beq.w	8005c38 <UART_SetConfig+0x218>
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	f000 80aa 	beq.w	8005c22 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e04e      	b.n	8005b70 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad2:	2b30      	cmp	r3, #48	; 0x30
 8005ad4:	d1fb      	bne.n	8005ace <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005ada:	f000 80b4 	beq.w	8005c46 <UART_SetConfig+0x226>
 8005ade:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005ae2:	e083      	b.n	8005bec <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ae4:	4a6b      	ldr	r2, [pc, #428]	; (8005c94 <UART_SetConfig+0x274>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10f      	bne.n	8005b0a <UART_SetConfig+0xea>
 8005aea:	4b65      	ldr	r3, [pc, #404]	; (8005c80 <UART_SetConfig+0x260>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005af4:	2b80      	cmp	r3, #128	; 0x80
 8005af6:	f000 809a 	beq.w	8005c2e <UART_SetConfig+0x20e>
 8005afa:	d804      	bhi.n	8005b06 <UART_SetConfig+0xe6>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 809b 	beq.w	8005c38 <UART_SetConfig+0x218>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	e7e1      	b.n	8005aca <UART_SetConfig+0xaa>
 8005b06:	2bc0      	cmp	r3, #192	; 0xc0
 8005b08:	e7e4      	b.n	8005ad4 <UART_SetConfig+0xb4>
 8005b0a:	4a63      	ldr	r2, [pc, #396]	; (8005c98 <UART_SetConfig+0x278>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d112      	bne.n	8005b36 <UART_SetConfig+0x116>
 8005b10:	4b5b      	ldr	r3, [pc, #364]	; (8005c80 <UART_SetConfig+0x260>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b1e:	f000 8086 	beq.w	8005c2e <UART_SetConfig+0x20e>
 8005b22:	d805      	bhi.n	8005b30 <UART_SetConfig+0x110>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8087 	beq.w	8005c38 <UART_SetConfig+0x218>
 8005b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2e:	e7cc      	b.n	8005aca <UART_SetConfig+0xaa>
 8005b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b34:	e7ce      	b.n	8005ad4 <UART_SetConfig+0xb4>
 8005b36:	4a50      	ldr	r2, [pc, #320]	; (8005c78 <UART_SetConfig+0x258>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d1c8      	bne.n	8005ace <UART_SetConfig+0xae>
 8005b3c:	4b50      	ldr	r3, [pc, #320]	; (8005c80 <UART_SetConfig+0x260>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4a:	d015      	beq.n	8005b78 <UART_SetConfig+0x158>
 8005b4c:	d806      	bhi.n	8005b5c <UART_SetConfig+0x13c>
 8005b4e:	b15b      	cbz	r3, 8005b68 <UART_SetConfig+0x148>
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b54:	d1bb      	bne.n	8005ace <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8005b56:	f7fd ff79 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
        break;
 8005b5a:	e007      	b.n	8005b6c <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b60:	d1b5      	bne.n	8005ace <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8005b62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005b66:	e008      	b.n	8005b7a <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fe fad8 	bl	800411c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005b6c:	b928      	cbnz	r0, 8005b7a <UART_SetConfig+0x15a>
 8005b6e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005b70:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005b72:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8005b78:	4848      	ldr	r0, [pc, #288]	; (8005c9c <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b7a:	6862      	ldr	r2, [r4, #4]
 8005b7c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005b80:	4283      	cmp	r3, r0
 8005b82:	d8a4      	bhi.n	8005ace <UART_SetConfig+0xae>
 8005b84:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005b88:	d8a1      	bhi.n	8005ace <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b8a:	0851      	lsrs	r1, r2, #1
 8005b8c:	2500      	movs	r5, #0
 8005b8e:	468c      	mov	ip, r1
 8005b90:	f44f 7680 	mov.w	r6, #256	; 0x100
 8005b94:	4629      	mov	r1, r5
 8005b96:	fbe0 c106 	umlal	ip, r1, r0, r6
 8005b9a:	462b      	mov	r3, r5
 8005b9c:	4660      	mov	r0, ip
 8005b9e:	f7fb f853 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ba2:	4b3f      	ldr	r3, [pc, #252]	; (8005ca0 <UART_SetConfig+0x280>)
 8005ba4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d890      	bhi.n	8005ace <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	60d8      	str	r0, [r3, #12]
 8005bb0:	e7dd      	b.n	8005b6e <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8005bb2:	483a      	ldr	r0, [pc, #232]	; (8005c9c <UART_SetConfig+0x27c>)
 8005bb4:	e047      	b.n	8005c46 <UART_SetConfig+0x226>
    switch (clocksource)
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d889      	bhi.n	8005ace <UART_SetConfig+0xae>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x1a0>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005be5 	.word	0x08005be5
 8005bc4:	08005c0b 	.word	0x08005c0b
 8005bc8:	08005c35 	.word	0x08005c35
 8005bcc:	08005acf 	.word	0x08005acf
 8005bd0:	08005c11 	.word	0x08005c11
 8005bd4:	08005acf 	.word	0x08005acf
 8005bd8:	08005acf 	.word	0x08005acf
 8005bdc:	08005acf 	.word	0x08005acf
 8005be0:	08005adf 	.word	0x08005adf
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be4:	f7fe fa9a 	bl	800411c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d0c0      	beq.n	8005b6e <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bec:	6862      	ldr	r2, [r4, #4]
 8005bee:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005bf2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005bfa:	f1a3 0110 	sub.w	r1, r3, #16
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	f63f af65 	bhi.w	8005ace <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	60d3      	str	r3, [r2, #12]
 8005c08:	e7b1      	b.n	8005b6e <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0a:	f7fe fa99 	bl	8004140 <HAL_RCC_GetPCLK2Freq>
        break;
 8005c0e:	e7eb      	b.n	8005be8 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c10:	f7fd ff1c 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
        break;
 8005c14:	e7e8      	b.n	8005be8 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c16:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c1a:	d1f6      	bne.n	8005c0a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7fe fa90 	bl	8004140 <HAL_RCC_GetPCLK2Freq>
        break;
 8005c20:	e00f      	b.n	8005c42 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c22:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c26:	d1f3      	bne.n	8005c10 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c28:	f7fd ff10 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
        break;
 8005c2c:	e009      	b.n	8005c42 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c2e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c32:	d0be      	beq.n	8005bb2 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8005c34:	4819      	ldr	r0, [pc, #100]	; (8005c9c <UART_SetConfig+0x27c>)
 8005c36:	e7d9      	b.n	8005bec <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c38:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c3c:	d1d2      	bne.n	8005be4 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c3e:	f7fe fa6d 	bl	800411c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d093      	beq.n	8005b6e <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c46:	6862      	ldr	r2, [r4, #4]
 8005c48:	0853      	lsrs	r3, r2, #1
 8005c4a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c52:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c56:	f1a0 0210 	sub.w	r2, r0, #16
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	f63f af37 	bhi.w	8005ace <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c60:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8005c64:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c66:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c68:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8005c6c:	4318      	orrs	r0, r3
 8005c6e:	60d0      	str	r0, [r2, #12]
 8005c70:	e77d      	b.n	8005b6e <UART_SetConfig+0x14e>
 8005c72:	bf00      	nop
 8005c74:	efff69f3 	.word	0xefff69f3
 8005c78:	40008000 	.word	0x40008000
 8005c7c:	40013800 	.word	0x40013800
 8005c80:	40021000 	.word	0x40021000
 8005c84:	0800ca78 	.word	0x0800ca78
 8005c88:	40004400 	.word	0x40004400
 8005c8c:	0800ca7b 	.word	0x0800ca7b
 8005c90:	40004800 	.word	0x40004800
 8005c94:	40004c00 	.word	0x40004c00
 8005c98:	40005000 	.word	0x40005000
 8005c9c:	00f42400 	.word	0x00f42400
 8005ca0:	000ffcff 	.word	0x000ffcff

08005ca4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ca6:	07da      	lsls	r2, r3, #31
{
 8005ca8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005caa:	d506      	bpl.n	8005cba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cac:	6801      	ldr	r1, [r0, #0]
 8005cae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005cb0:	684a      	ldr	r2, [r1, #4]
 8005cb2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005cb6:	4322      	orrs	r2, r4
 8005cb8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cba:	079c      	lsls	r4, r3, #30
 8005cbc:	d506      	bpl.n	8005ccc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cbe:	6801      	ldr	r1, [r0, #0]
 8005cc0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005cc2:	684a      	ldr	r2, [r1, #4]
 8005cc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cc8:	4322      	orrs	r2, r4
 8005cca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ccc:	0759      	lsls	r1, r3, #29
 8005cce:	d506      	bpl.n	8005cde <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd0:	6801      	ldr	r1, [r0, #0]
 8005cd2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005cd4:	684a      	ldr	r2, [r1, #4]
 8005cd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cda:	4322      	orrs	r2, r4
 8005cdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cde:	071a      	lsls	r2, r3, #28
 8005ce0:	d506      	bpl.n	8005cf0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce2:	6801      	ldr	r1, [r0, #0]
 8005ce4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005ce6:	684a      	ldr	r2, [r1, #4]
 8005ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cec:	4322      	orrs	r2, r4
 8005cee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cf0:	06dc      	lsls	r4, r3, #27
 8005cf2:	d506      	bpl.n	8005d02 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf4:	6801      	ldr	r1, [r0, #0]
 8005cf6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005cf8:	688a      	ldr	r2, [r1, #8]
 8005cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cfe:	4322      	orrs	r2, r4
 8005d00:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d02:	0699      	lsls	r1, r3, #26
 8005d04:	d506      	bpl.n	8005d14 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d06:	6801      	ldr	r1, [r0, #0]
 8005d08:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005d0a:	688a      	ldr	r2, [r1, #8]
 8005d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d10:	4322      	orrs	r2, r4
 8005d12:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d14:	065a      	lsls	r2, r3, #25
 8005d16:	d50f      	bpl.n	8005d38 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d18:	6801      	ldr	r1, [r0, #0]
 8005d1a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005d1c:	684a      	ldr	r2, [r1, #4]
 8005d1e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005d22:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d28:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2a:	d105      	bne.n	8005d38 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d2c:	684a      	ldr	r2, [r1, #4]
 8005d2e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005d30:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005d34:	4322      	orrs	r2, r4
 8005d36:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d38:	061b      	lsls	r3, r3, #24
 8005d3a:	d506      	bpl.n	8005d4a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d3c:	6802      	ldr	r2, [r0, #0]
 8005d3e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005d40:	6853      	ldr	r3, [r2, #4]
 8005d42:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005d46:	430b      	orrs	r3, r1
 8005d48:	6053      	str	r3, [r2, #4]
}
 8005d4a:	bd10      	pop	{r4, pc}

08005d4c <UART_WaitOnFlagUntilTimeout>:
{
 8005d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d50:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005d54:	4604      	mov	r4, r0
 8005d56:	460e      	mov	r6, r1
 8005d58:	4615      	mov	r5, r2
 8005d5a:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	69d3      	ldr	r3, [r2, #28]
 8005d60:	ea36 0303 	bics.w	r3, r6, r3
 8005d64:	bf0c      	ite	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	2300      	movne	r3, #0
 8005d6a:	42ab      	cmp	r3, r5
 8005d6c:	d001      	beq.n	8005d72 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005d6e:	2000      	movs	r0, #0
 8005d70:	e025      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8005d72:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d76:	d0f2      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d78:	f7fc fe96 	bl	8002aa8 <HAL_GetTick>
 8005d7c:	1bc0      	subs	r0, r0, r7
 8005d7e:	4540      	cmp	r0, r8
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	d802      	bhi.n	8005d8a <UART_WaitOnFlagUntilTimeout+0x3e>
 8005d84:	f1b8 0f00 	cmp.w	r8, #0
 8005d88:	d11b      	bne.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	e840 3200 	strex	r2, r3, [r0]
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	d1f7      	bne.n	8005d8a <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	f100 0308 	add.w	r3, r0, #8
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	f100 0108 	add.w	r1, r0, #8
 8005daa:	e841 3200 	strex	r2, r3, [r1]
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	d1f3      	bne.n	8005d9a <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8005db2:	2320      	movs	r3, #32
 8005db4:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005db6:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005db8:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8005dbc:	2003      	movs	r0, #3
}
 8005dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dc2:	6803      	ldr	r3, [r0, #0]
 8005dc4:	075a      	lsls	r2, r3, #29
 8005dc6:	d5c9      	bpl.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dc8:	69c3      	ldr	r3, [r0, #28]
 8005dca:	051b      	lsls	r3, r3, #20
 8005dcc:	d5c6      	bpl.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dd2:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	e840 3200 	strex	r2, r3, [r0]
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	d1f7      	bne.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	f100 0308 	add.w	r3, r0, #8
 8005de8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	f100 0108 	add.w	r1, r0, #8
 8005df4:	e841 3200 	strex	r2, r3, [r1]
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	d1f3      	bne.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e00:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e02:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8005e06:	e7d7      	b.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x6c>

08005e08 <HAL_UART_Transmit>:
{
 8005e08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005e0c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005e0e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005e10:	2b20      	cmp	r3, #32
{
 8005e12:	4604      	mov	r4, r0
 8005e14:	460e      	mov	r6, r1
 8005e16:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005e18:	d14e      	bne.n	8005eb8 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8005e1a:	2900      	cmp	r1, #0
 8005e1c:	d04a      	beq.n	8005eb4 <HAL_UART_Transmit+0xac>
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	d048      	beq.n	8005eb4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8005e22:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d046      	beq.n	8005eb8 <HAL_UART_Transmit+0xb0>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e30:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e32:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e34:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e38:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005e3a:	f7fc fe35 	bl	8002aa8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3e:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8005e40:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005e48:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8005e4a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4e:	d103      	bne.n	8005e58 <HAL_UART_Transmit+0x50>
 8005e50:	6922      	ldr	r2, [r4, #16]
 8005e52:	b90a      	cbnz	r2, 8005e58 <HAL_UART_Transmit+0x50>
 8005e54:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005e56:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005e5e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e62:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005e66:	b292      	uxth	r2, r2
 8005e68:	b93a      	cbnz	r2, 8005e7a <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e6a:	2140      	movs	r1, #64	; 0x40
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f7ff ff6d 	bl	8005d4c <UART_WaitOnFlagUntilTimeout>
 8005e72:	b950      	cbnz	r0, 8005e8a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8005e74:	2320      	movs	r3, #32
 8005e76:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005e78:	e008      	b.n	8005e8c <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	4620      	mov	r0, r4
 8005e80:	9303      	str	r3, [sp, #12]
 8005e82:	f7ff ff63 	bl	8005d4c <UART_WaitOnFlagUntilTimeout>
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	b118      	cbz	r0, 8005e92 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8005e8a:	2003      	movs	r0, #3
}
 8005e8c:	b004      	add	sp, #16
 8005e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e92:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8005e94:	b95e      	cbnz	r6, 8005eae <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e96:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e9e:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8005ea0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005ea4:	3a01      	subs	r2, #1
 8005ea6:	b292      	uxth	r2, r2
 8005ea8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8005eac:	e7d7      	b.n	8005e5e <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eae:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005eb2:	e7f4      	b.n	8005e9e <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	e7e9      	b.n	8005e8c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005eb8:	2002      	movs	r0, #2
 8005eba:	e7e7      	b.n	8005e8c <HAL_UART_Transmit+0x84>

08005ebc <UART_CheckIdleState>:
{
 8005ebc:	b530      	push	{r4, r5, lr}
 8005ebe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	2500      	movs	r5, #0
{
 8005ec2:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec4:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005ec8:	f7fc fdee 	bl	8002aa8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8005ed2:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ed4:	d415      	bmi.n	8005f02 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	0752      	lsls	r2, r2, #29
 8005edc:	d509      	bpl.n	8005ef2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ede:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005ee2:	9200      	str	r2, [sp, #0]
 8005ee4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ee8:	2200      	movs	r2, #0
 8005eea:	4620      	mov	r0, r4
 8005eec:	f7ff ff2e 	bl	8005d4c <UART_WaitOnFlagUntilTimeout>
 8005ef0:	b9a0      	cbnz	r0, 8005f1c <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005ef6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005ef8:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8005f00:	e00d      	b.n	8005f1e <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f02:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005f06:	9200      	str	r2, [sp, #0]
 8005f08:	9003      	str	r0, [sp, #12]
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff ff1b 	bl	8005d4c <UART_WaitOnFlagUntilTimeout>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d0dc      	beq.n	8005ed6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8005f1c:	2003      	movs	r0, #3
}
 8005f1e:	b005      	add	sp, #20
 8005f20:	bd30      	pop	{r4, r5, pc}

08005f22 <HAL_UART_Init>:
{
 8005f22:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005f24:	4604      	mov	r4, r0
 8005f26:	b340      	cbz	r0, 8005f7a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f28:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005f2a:	b91b      	cbnz	r3, 8005f34 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005f2c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8005f30:	f7fc f944 	bl	80021bc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005f34:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f36:	2324      	movs	r3, #36	; 0x24
 8005f38:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005f3a:	6813      	ldr	r3, [r2, #0]
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7ff fd6c 	bl	8005a20 <UART_SetConfig>
 8005f48:	2801      	cmp	r0, #1
 8005f4a:	d016      	beq.n	8005f7a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f4e:	b113      	cbz	r3, 8005f56 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005f50:	4620      	mov	r0, r4
 8005f52:	f7ff fea7 	bl	8005ca4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f66:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005f6e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005f70:	601a      	str	r2, [r3, #0]
}
 8005f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005f76:	f7ff bfa1 	b.w	8005ebc <UART_CheckIdleState>
}
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f7e:	4770      	bx	lr

08005f80 <bitmap_init>:
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005f80:	7983      	ldrb	r3, [r0, #6]
 8005f82:	8802      	ldrh	r2, [r0, #0]
 8005f84:	08db      	lsrs	r3, r3, #3
 8005f86:	fb13 f302 	smulbb	r3, r3, r2
    bitmap->size = bitmap->pitch * bitmap->height;
 8005f8a:	8842      	ldrh	r2, [r0, #2]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8083      	strh	r3, [r0, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8005f90:	4353      	muls	r3, r2
    bitmap->buffer = buffer;
 8005f92:	e9c0 3102 	strd	r3, r1, [r0, #8]
}
 8005f96:	4770      	bx	lr

08005f98 <clip_line>:

    return code;
}

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	b089      	sub	sp, #36	; 0x24
    if (x0 < window.x0) {
 8005f9e:	f9b0 6000 	ldrsh.w	r6, [r0]
 8005fa2:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
 8005fa6:	f8bd 404e 	ldrh.w	r4, [sp, #78]	; 0x4e
 8005faa:	9401      	str	r4, [sp, #4]
 8005fac:	4566      	cmp	r6, ip
 8005fae:	f8bd e04a 	ldrh.w	lr, [sp, #74]	; 0x4a
 8005fb2:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
    uint8_t code0 = code(*x0, *y0, window);
 8005fb6:	f9b1 4000 	ldrsh.w	r4, [r1]
{
 8005fba:	9302      	str	r3, [sp, #8]
    if (x0 < window.x0) {
 8005fbc:	db67      	blt.n	800608e <clip_line+0xf6>
        code |= RIGHT;
 8005fbe:	4546      	cmp	r6, r8
 8005fc0:	bfcc      	ite	gt
 8005fc2:	2602      	movgt	r6, #2
 8005fc4:	2600      	movle	r6, #0
    } if (y0 < window.y0) {
 8005fc6:	4574      	cmp	r4, lr
 8005fc8:	da63      	bge.n	8006092 <clip_line+0xfa>
        code |= BOTTOM;
 8005fca:	f046 0604 	orr.w	r6, r6, #4
        code |= TOP;
 8005fce:	b2f6      	uxtb	r6, r6
    if (x0 < window.x0) {
 8005fd0:	f9b2 7000 	ldrsh.w	r7, [r2]
    uint8_t code1 = code(*x1, *y1, window);
 8005fd4:	9b02      	ldr	r3, [sp, #8]
    if (x0 < window.x0) {
 8005fd6:	4567      	cmp	r7, ip
    uint8_t code1 = code(*x1, *y1, window);
 8005fd8:	f9b3 4000 	ldrsh.w	r4, [r3]
    if (x0 < window.x0) {
 8005fdc:	db5f      	blt.n	800609e <clip_line+0x106>
        code |= RIGHT;
 8005fde:	4547      	cmp	r7, r8
 8005fe0:	bfcc      	ite	gt
 8005fe2:	2702      	movgt	r7, #2
 8005fe4:	2700      	movle	r7, #0
    } if (y0 < window.y0) {
 8005fe6:	4574      	cmp	r4, lr
 8005fe8:	da5b      	bge.n	80060a2 <clip_line+0x10a>
        code |= BOTTOM;
 8005fea:	f047 0704 	orr.w	r7, r7, #4
        code |= TOP;
 8005fee:	b2ff      	uxtb	r7, r7
            } else if (code3 & RIGHT) {
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
                x = window.x1;
            }  else if (code3 & LEFT) {
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
                x = window.x0;
 8005ff0:	fa0f f48c 	sxth.w	r4, ip
 8005ff4:	9404      	str	r4, [sp, #16]
                x = window.x1;
 8005ff6:	fa0f f488 	sxth.w	r4, r8
 8005ffa:	9405      	str	r4, [sp, #20]
                y = window.y0;
 8005ffc:	fa0f f48e 	sxth.w	r4, lr
 8006000:	9406      	str	r4, [sp, #24]
                y = window.y1;
 8006002:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8006006:	9407      	str	r4, [sp, #28]
        if (!(code0 | code1)) {
 8006008:	ea46 0407 	orr.w	r4, r6, r7
 800600c:	b2e4      	uxtb	r4, r4
 800600e:	2c00      	cmp	r4, #0
 8006010:	f000 80c7 	beq.w	80061a2 <clip_line+0x20a>
        } else if (code0 & code1) {
 8006014:	ea06 0507 	and.w	r5, r6, r7
 8006018:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800601c:	f040 80c5 	bne.w	80061aa <clip_line+0x212>
            uint8_t code3 = code0 ? code0 : code1;
 8006020:	2e00      	cmp	r6, #0
 8006022:	bf14      	ite	ne
 8006024:	4634      	movne	r4, r6
 8006026:	463c      	moveq	r4, r7
 8006028:	4623      	mov	r3, r4
            if (code3 & TOP) {
 800602a:	0724      	lsls	r4, r4, #28
 800602c:	d53f      	bpl.n	80060ae <clip_line+0x116>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800602e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8006032:	f9b2 4000 	ldrsh.w	r4, [r2]
 8006036:	f9b1 a000 	ldrsh.w	sl, [r1]
 800603a:	eba4 0409 	sub.w	r4, r4, r9
 800603e:	9403      	str	r4, [sp, #12]
 8006040:	9c01      	ldr	r4, [sp, #4]
 8006042:	eba4 0b0a 	sub.w	fp, r4, sl
 8006046:	9c03      	ldr	r4, [sp, #12]
 8006048:	fb0b f404 	mul.w	r4, fp, r4
 800604c:	9403      	str	r4, [sp, #12]
 800604e:	9c02      	ldr	r4, [sp, #8]
 8006050:	f9b4 b000 	ldrsh.w	fp, [r4]
 8006054:	9c03      	ldr	r4, [sp, #12]
 8006056:	ebab 0a0a 	sub.w	sl, fp, sl
 800605a:	fb94 fafa 	sdiv	sl, r4, sl
                y = window.y1;
 800605e:	9c07      	ldr	r4, [sp, #28]
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006060:	44d1      	add	r9, sl
 8006062:	fa0f f989 	sxth.w	r9, r9
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006066:	429e      	cmp	r6, r3
 8006068:	f040 8081 	bne.w	800616e <clip_line+0x1d6>
                *x0 = x;
 800606c:	f8a0 9000 	strh.w	r9, [r0]
                *y0 = y;
 8006070:	800c      	strh	r4, [r1, #0]
    if (x0 < window.x0) {
 8006072:	f9b0 6000 	ldrsh.w	r6, [r0]
 8006076:	45b4      	cmp	ip, r6
 8006078:	dc71      	bgt.n	800615e <clip_line+0x1c6>
        code |= RIGHT;
 800607a:	4546      	cmp	r6, r8
 800607c:	bfc8      	it	gt
 800607e:	2502      	movgt	r5, #2
    } if (y0 < window.y0) {
 8006080:	45a6      	cmp	lr, r4
 8006082:	dd6e      	ble.n	8006162 <clip_line+0x1ca>
        code |= BOTTOM;
 8006084:	f045 0504 	orr.w	r5, r5, #4
        code |= TOP;
 8006088:	b2ed      	uxtb	r5, r5
                code0 = code(*x0, *y0, window);
 800608a:	462e      	mov	r6, r5
 800608c:	e7bc      	b.n	8006008 <clip_line+0x70>
        code |= LEFT;
 800608e:	2601      	movs	r6, #1
 8006090:	e799      	b.n	8005fc6 <clip_line+0x2e>
    } else if (y0 > window.y1) {
 8006092:	9d01      	ldr	r5, [sp, #4]
 8006094:	42ac      	cmp	r4, r5
 8006096:	dd9b      	ble.n	8005fd0 <clip_line+0x38>
        code |= TOP;
 8006098:	f046 0608 	orr.w	r6, r6, #8
 800609c:	e797      	b.n	8005fce <clip_line+0x36>
        code |= LEFT;
 800609e:	2701      	movs	r7, #1
 80060a0:	e7a1      	b.n	8005fe6 <clip_line+0x4e>
    } else if (y0 > window.y1) {
 80060a2:	9d01      	ldr	r5, [sp, #4]
 80060a4:	42ac      	cmp	r4, r5
 80060a6:	dda3      	ble.n	8005ff0 <clip_line+0x58>
        code |= TOP;
 80060a8:	f047 0708 	orr.w	r7, r7, #8
 80060ac:	e79f      	b.n	8005fee <clip_line+0x56>
            } else if (code3 & BOTTOM) {
 80060ae:	461c      	mov	r4, r3
 80060b0:	0764      	lsls	r4, r4, #29
 80060b2:	d519      	bpl.n	80060e8 <clip_line+0x150>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80060b4:	f9b0 9000 	ldrsh.w	r9, [r0]
 80060b8:	f9b1 a000 	ldrsh.w	sl, [r1]
 80060bc:	f9b2 4000 	ldrsh.w	r4, [r2]
 80060c0:	ebae 0b0a 	sub.w	fp, lr, sl
 80060c4:	eba4 0409 	sub.w	r4, r4, r9
 80060c8:	fb0b f404 	mul.w	r4, fp, r4
 80060cc:	9403      	str	r4, [sp, #12]
 80060ce:	9c02      	ldr	r4, [sp, #8]
 80060d0:	f9b4 b000 	ldrsh.w	fp, [r4]
 80060d4:	9c03      	ldr	r4, [sp, #12]
 80060d6:	ebab 0a0a 	sub.w	sl, fp, sl
 80060da:	fb94 fafa 	sdiv	sl, r4, sl
 80060de:	44d1      	add	r9, sl
                y = window.y0;
 80060e0:	9c06      	ldr	r4, [sp, #24]
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80060e2:	fa0f f989 	sxth.w	r9, r9
                y = window.y0;
 80060e6:	e7be      	b.n	8006066 <clip_line+0xce>
            } else if (code3 & RIGHT) {
 80060e8:	461c      	mov	r4, r3
 80060ea:	07a4      	lsls	r4, r4, #30
 80060ec:	d518      	bpl.n	8006120 <clip_line+0x188>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 80060ee:	9c02      	ldr	r4, [sp, #8]
 80060f0:	f9b1 9000 	ldrsh.w	r9, [r1]
 80060f4:	f9b0 a000 	ldrsh.w	sl, [r0]
 80060f8:	f9b4 4000 	ldrsh.w	r4, [r4]
 80060fc:	eba8 0b0a 	sub.w	fp, r8, sl
 8006100:	eba4 0409 	sub.w	r4, r4, r9
 8006104:	fb0b f404 	mul.w	r4, fp, r4
 8006108:	f9b2 b000 	ldrsh.w	fp, [r2]
 800610c:	ebab 0a0a 	sub.w	sl, fp, sl
 8006110:	fb94 fafa 	sdiv	sl, r4, sl
 8006114:	44ca      	add	sl, r9
 8006116:	fa0f f48a 	sxth.w	r4, sl
                x = window.x1;
 800611a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800611e:	e7a2      	b.n	8006066 <clip_line+0xce>
            }  else if (code3 & LEFT) {
 8006120:	461c      	mov	r4, r3
 8006122:	07e4      	lsls	r4, r4, #31
 8006124:	d518      	bpl.n	8006158 <clip_line+0x1c0>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006126:	9c02      	ldr	r4, [sp, #8]
 8006128:	f9b1 9000 	ldrsh.w	r9, [r1]
 800612c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8006130:	f9b4 4000 	ldrsh.w	r4, [r4]
 8006134:	ebac 0b0a 	sub.w	fp, ip, sl
 8006138:	eba4 0409 	sub.w	r4, r4, r9
 800613c:	fb0b f404 	mul.w	r4, fp, r4
 8006140:	f9b2 b000 	ldrsh.w	fp, [r2]
 8006144:	ebab 0a0a 	sub.w	sl, fp, sl
 8006148:	fb94 fafa 	sdiv	sl, r4, sl
 800614c:	44ca      	add	sl, r9
 800614e:	fa0f f48a 	sxth.w	r4, sl
                x = window.x0;
 8006152:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006156:	e786      	b.n	8006066 <clip_line+0xce>
            int16_t y = 0;
 8006158:	462c      	mov	r4, r5
            int16_t x = 0;
 800615a:	46a9      	mov	r9, r5
 800615c:	e783      	b.n	8006066 <clip_line+0xce>
        code |= LEFT;
 800615e:	2501      	movs	r5, #1
 8006160:	e78e      	b.n	8006080 <clip_line+0xe8>
    } else if (y0 > window.y1) {
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	429c      	cmp	r4, r3
 8006166:	dd90      	ble.n	800608a <clip_line+0xf2>
        code |= TOP;
 8006168:	f045 0508 	orr.w	r5, r5, #8
 800616c:	e78c      	b.n	8006088 <clip_line+0xf0>
            } else {
                *x1 = x;
                *y1 = y;
 800616e:	9b02      	ldr	r3, [sp, #8]
                *x1 = x;
 8006170:	f8a2 9000 	strh.w	r9, [r2]
                *y1 = y;
 8006174:	801c      	strh	r4, [r3, #0]
    if (x0 < window.x0) {
 8006176:	f9b2 7000 	ldrsh.w	r7, [r2]
 800617a:	45bc      	cmp	ip, r7
 800617c:	dc09      	bgt.n	8006192 <clip_line+0x1fa>
        code |= RIGHT;
 800617e:	4547      	cmp	r7, r8
 8006180:	bfc8      	it	gt
 8006182:	2502      	movgt	r5, #2
    } if (y0 < window.y0) {
 8006184:	45a6      	cmp	lr, r4
 8006186:	dd06      	ble.n	8006196 <clip_line+0x1fe>
        code |= BOTTOM;
 8006188:	f045 0504 	orr.w	r5, r5, #4
        code |= TOP;
 800618c:	b2ed      	uxtb	r5, r5
                code1 = code(*x1, *y1, window);
 800618e:	462f      	mov	r7, r5
 8006190:	e73a      	b.n	8006008 <clip_line+0x70>
        code |= LEFT;
 8006192:	2501      	movs	r5, #1
 8006194:	e7f6      	b.n	8006184 <clip_line+0x1ec>
    } else if (y0 > window.y1) {
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	429c      	cmp	r4, r3
 800619a:	ddf8      	ble.n	800618e <clip_line+0x1f6>
        code |= TOP;
 800619c:	f045 0508 	orr.w	r5, r5, #8
 80061a0:	e7f4      	b.n	800618c <clip_line+0x1f4>
            accept = true;
 80061a2:	2001      	movs	r0, #1
            }
        }
    }

    return accept;
 80061a4:	b009      	add	sp, #36	; 0x24
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool accept = false;
 80061aa:	2000      	movs	r0, #0
 80061ac:	e7fa      	b.n	80061a4 <clip_line+0x20c>

080061ae <fontx_meta>:

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80061ae:	f8d1 3006 	ldr.w	r3, [r1, #6]
 80061b2:	6003      	str	r3, [r0, #0]
 80061b4:	f8d1 300a 	ldr.w	r3, [r1, #10]
 80061b8:	6043      	str	r3, [r0, #4]
    meta->width = font[FONTX_WIDTH];
 80061ba:	7b8b      	ldrb	r3, [r1, #14]
 80061bc:	7243      	strb	r3, [r0, #9]
    meta->height = font[FONTX_HEIGHT];
 80061be:	7bcb      	ldrb	r3, [r1, #15]
 80061c0:	7283      	strb	r3, [r0, #10]
    meta->type = font[FONTX_TYPE];
 80061c2:	7c0b      	ldrb	r3, [r1, #16]
 80061c4:	72c3      	strb	r3, [r0, #11]

    return 0;
}
 80061c6:	2000      	movs	r0, #0
 80061c8:	4770      	bx	lr

080061ca <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80061ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061ce:	b085      	sub	sp, #20
 80061d0:	4604      	mov	r4, r0
 80061d2:	460f      	mov	r7, r1
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80061d4:	a801      	add	r0, sp, #4
 80061d6:	4611      	mov	r1, r2
 80061d8:	f7ff ffe9 	bl	80061ae <fontx_meta>
    if (0 != status) {
 80061dc:	b9a8      	cbnz	r0, 800620a <fontx_glyph+0x40>
        return status;
    }

    glyph->width = meta.width;
 80061de:	f89d 300d 	ldrb.w	r3, [sp, #13]
    glyph->height = meta.height;
 80061e2:	f89d 100e 	ldrb.w	r1, [sp, #14]
    glyph->width = meta.width;
 80061e6:	7023      	strb	r3, [r4, #0]
    glyph->pitch = (meta.width + 7) / 8;
 80061e8:	3307      	adds	r3, #7
 80061ea:	08db      	lsrs	r3, r3, #3
    glyph->height = meta.height;
 80061ec:	7061      	strb	r1, [r4, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80061ee:	70e3      	strb	r3, [r4, #3]
    glyph->size = glyph->pitch * meta.height;
 80061f0:	fb11 f303 	smulbb	r3, r1, r3

    if (FONTX_TYPE_SBCS == meta.type) {
 80061f4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    glyph->size = glyph->pitch * meta.height;
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	70a3      	strb	r3, [r4, #2]
    if (FONTX_TYPE_SBCS == meta.type) {
 80061fc:	b941      	cbnz	r1, 8006210 <fontx_glyph+0x46>
        if (code < 0x100) {
 80061fe:	2fff      	cmp	r7, #255	; 0xff
 8006200:	d80e      	bhi.n	8006220 <fontx_glyph+0x56>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006202:	fb07 2203 	mla	r2, r7, r3, r2
 8006206:	3211      	adds	r2, #17
 8006208:	6062      	str	r2, [r4, #4]
            block_table += 4;
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800620a:	b005      	add	sp, #20
 800620c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006210:	7c51      	ldrb	r1, [r2, #17]
 8006212:	f102 0c16 	add.w	ip, r2, #22
 8006216:	4688      	mov	r8, r1
        nc = 0;
 8006218:	4606      	mov	r6, r0
        while (bc--) {
 800621a:	f1b8 0f00 	cmp.w	r8, #0
 800621e:	d101      	bne.n	8006224 <fontx_glyph+0x5a>
    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006220:	2001      	movs	r0, #1
 8006222:	e7f2      	b.n	800620a <fontx_glyph+0x40>
            sb = block_table[0] + block_table[1] * 0x100;
 8006224:	f81c 5c04 	ldrb.w	r5, [ip, #-4]
 8006228:	f81c ec03 	ldrb.w	lr, [ip, #-3]
            eb = block_table[2] + block_table[3] * 0x100;
 800622c:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
            sb = block_table[0] + block_table[1] * 0x100;
 8006230:	eb05 2e0e 	add.w	lr, r5, lr, lsl #8
            eb = block_table[2] + block_table[3] * 0x100;
 8006234:	f81c 5c02 	ldrb.w	r5, [ip, #-2]
            if (code >= sb && code <= eb) {
 8006238:	45be      	cmp	lr, r7
            eb = block_table[2] + block_table[3] * 0x100;
 800623a:	eb05 2509 	add.w	r5, r5, r9, lsl #8
            if (code >= sb && code <= eb) {
 800623e:	d80d      	bhi.n	800625c <fontx_glyph+0x92>
 8006240:	42bd      	cmp	r5, r7
 8006242:	d30b      	bcc.n	800625c <fontx_glyph+0x92>
                nc += code - sb;
 8006244:	19f5      	adds	r5, r6, r7
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006246:	f04f 0c12 	mov.w	ip, #18
                nc += code - sb;
 800624a:	eba5 050e 	sub.w	r5, r5, lr
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800624e:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 8006252:	fb03 c305 	mla	r3, r3, r5, ip
                glyph->buffer = &font[
 8006256:	4413      	add	r3, r2
 8006258:	6063      	str	r3, [r4, #4]
                return FONTX_OK;
 800625a:	e7d6      	b.n	800620a <fontx_glyph+0x40>
            nc += eb - sb + 1;
 800625c:	3501      	adds	r5, #1
 800625e:	4435      	add	r5, r6
 8006260:	eba5 060e 	sub.w	r6, r5, lr
            block_table += 4;
 8006264:	f108 38ff 	add.w	r8, r8, #4294967295
 8006268:	f10c 0c04 	add.w	ip, ip, #4
 800626c:	e7d5      	b.n	800621a <fontx_glyph+0x50>
	...

08006270 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006270:	b470      	push	{r4, r5, r6}
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006272:	4c09      	ldr	r4, [pc, #36]	; (8006298 <hagl_put_pixel+0x28>)
 8006274:	8826      	ldrh	r6, [r4, #0]
 8006276:	42b0      	cmp	r0, r6
 8006278:	db0b      	blt.n	8006292 <hagl_put_pixel+0x22>
 800627a:	8866      	ldrh	r6, [r4, #2]
 800627c:	42b1      	cmp	r1, r6
 800627e:	db08      	blt.n	8006292 <hagl_put_pixel+0x22>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006280:	88a6      	ldrh	r6, [r4, #4]
 8006282:	42b0      	cmp	r0, r6
 8006284:	dc05      	bgt.n	8006292 <hagl_put_pixel+0x22>
 8006286:	88e4      	ldrh	r4, [r4, #6]
 8006288:	42a1      	cmp	r1, r4
 800628a:	dc02      	bgt.n	8006292 <hagl_put_pixel+0x22>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
}
 800628c:	bc70      	pop	{r4, r5, r6}
    hagl_hal_put_pixel(x0, y0, color);
 800628e:	f7fb b98d 	b.w	80015ac <lcd_put_pixel>
}
 8006292:	bc70      	pop	{r4, r5, r6}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	2000001c 	.word	0x2000001c

0800629c <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a0:	b085      	sub	sp, #20
 80062a2:	f8ad 200a 	strh.w	r2, [sp, #10]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80062a6:	4a37      	ldr	r2, [pc, #220]	; (8006384 <hagl_draw_line+0xe8>)
{
 80062a8:	f8ad 000e 	strh.w	r0, [sp, #14]
 80062ac:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80062b0:	6810      	ldr	r0, [r2, #0]
 80062b2:	6851      	ldr	r1, [r2, #4]
{
 80062b4:	f8ad 3008 	strh.w	r3, [sp, #8]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80062b8:	466b      	mov	r3, sp
{
 80062ba:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80062be:	f10d 020a 	add.w	r2, sp, #10
 80062c2:	c303      	stmia	r3!, {r0, r1}
 80062c4:	a903      	add	r1, sp, #12
 80062c6:	f10d 000e 	add.w	r0, sp, #14
 80062ca:	f7ff fe65 	bl	8005f98 <clip_line>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d055      	beq.n	800637e <hagl_draw_line+0xe2>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80062d2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80062d6:	f9bd 900a 	ldrsh.w	r9, [sp, #10]
    sx = x0 < x1 ? 1 : -1;
    dy = ABS(y1 - y0);
 80062da:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
    dx = ABS(x1 - x0);
 80062de:	eba9 0703 	sub.w	r7, r9, r3
 80062e2:	2f00      	cmp	r7, #0
 80062e4:	bfb8      	it	lt
 80062e6:	427f      	neglt	r7, r7
    sx = x0 < x1 ? 1 : -1;
 80062e8:	4599      	cmp	r9, r3
 80062ea:	bfcc      	ite	gt
 80062ec:	f04f 0901 	movgt.w	r9, #1
 80062f0:	f04f 39ff 	movle.w	r9, #4294967295
    dy = ABS(y1 - y0);
 80062f4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80062f8:	eba6 0803 	sub.w	r8, r6, r3
 80062fc:	f1b8 0f00 	cmp.w	r8, #0
 8006300:	bfb8      	it	lt
 8006302:	f1c8 0800 	rsblt	r8, r8, #0
    dx = ABS(x1 - x0);
 8006306:	b23d      	sxth	r5, r7
    dy = ABS(y1 - y0);
 8006308:	fa0f fb88 	sxth.w	fp, r8
    sy = y0 < y1 ? 1 : -1;
 800630c:	429e      	cmp	r6, r3
 800630e:	bfcc      	ite	gt
 8006310:	2601      	movgt	r6, #1
 8006312:	f04f 36ff 	movle.w	r6, #4294967295
    err = (dx > dy ? dx : -dy) / 2;
 8006316:	455d      	cmp	r5, fp
 8006318:	dd2b      	ble.n	8006372 <hagl_draw_line+0xd6>
 800631a:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 800631e:	1064      	asrs	r4, r4, #1
            break;
        };

        e2 = err + err;

        if (e2 > -dx) {
 8006320:	426d      	negs	r5, r5
        hagl_put_pixel(x0, y0, color);
 8006322:	4652      	mov	r2, sl
 8006324:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8006328:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 800632c:	f7ff ffa0 	bl	8006270 <hagl_put_pixel>
        if (x0 == x1 && y0 == y1) {
 8006330:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8006334:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8006338:	4293      	cmp	r3, r2
 800633a:	d105      	bne.n	8006348 <hagl_draw_line+0xac>
 800633c:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8006340:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8006344:	4299      	cmp	r1, r3
 8006346:	d01a      	beq.n	800637e <hagl_draw_line+0xe2>
        e2 = err + err;
 8006348:	b2a1      	uxth	r1, r4
 800634a:	004b      	lsls	r3, r1, #1
 800634c:	b21b      	sxth	r3, r3
        if (e2 > -dx) {
 800634e:	42ab      	cmp	r3, r5
            err -= dy;
 8006350:	bfc1      	itttt	gt
 8006352:	eba1 0108 	subgt.w	r1, r1, r8
            x0 += sx;
 8006356:	444a      	addgt	r2, r9
            err -= dy;
 8006358:	b20c      	sxthgt	r4, r1
            x0 += sx;
 800635a:	f8ad 200e 	strhgt.w	r2, [sp, #14]
        }

        if (e2 < dy) {
 800635e:	459b      	cmp	fp, r3
 8006360:	dddf      	ble.n	8006322 <hagl_draw_line+0x86>
            err += dx;
            y0 += sy;
 8006362:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            err += dx;
 8006366:	443c      	add	r4, r7
            y0 += sy;
 8006368:	4433      	add	r3, r6
            err += dx;
 800636a:	b224      	sxth	r4, r4
            y0 += sy;
 800636c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006370:	e7d7      	b.n	8006322 <hagl_draw_line+0x86>
    err = (dx > dy ? dx : -dy) / 2;
 8006372:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8006376:	1064      	asrs	r4, r4, #1
 8006378:	4264      	negs	r4, r4
 800637a:	b224      	sxth	r4, r4
 800637c:	e7d0      	b.n	8006320 <hagl_draw_line+0x84>
        }
    }
}
 800637e:	b005      	add	sp, #20
 8006380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006384:	2000001c 	.word	0x2000001c

08006388 <hagl_draw_hline>:
void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006388:	b507      	push	{r0, r1, r2, lr}
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800638a:	4402      	add	r2, r0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	b212      	sxth	r2, r2
 8006390:	460b      	mov	r3, r1
 8006392:	f7ff ff83 	bl	800629c <hagl_draw_line>
}
 8006396:	b003      	add	sp, #12
 8006398:	f85d fb04 	ldr.w	pc, [sp], #4

0800639c <hagl_fill_rectangle>:
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800639c:	4290      	cmp	r0, r2
{
 800639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (x0 > x1) {
 80063a2:	bfc8      	it	gt
 80063a4:	4604      	movgt	r4, r0
        y1 = y0 - y1;
        y0 = y0 - y1;
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80063a6:	4e1e      	ldr	r6, [pc, #120]	; (8006420 <hagl_fill_rectangle+0x84>)
{
 80063a8:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    if (x0 > x1) {
 80063ac:	bfc4      	itt	gt
 80063ae:	4610      	movgt	r0, r2
 80063b0:	4622      	movgt	r2, r4
    if (y0 > y1) {
 80063b2:	4299      	cmp	r1, r3
 80063b4:	bfc2      	ittt	gt
 80063b6:	460c      	movgt	r4, r1
 80063b8:	4619      	movgt	r1, r3
 80063ba:	4623      	movgt	r3, r4
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80063bc:	8834      	ldrh	r4, [r6, #0]
 80063be:	42a2      	cmp	r2, r4
 80063c0:	db22      	blt.n	8006408 <hagl_fill_rectangle+0x6c>
 80063c2:	8875      	ldrh	r5, [r6, #2]
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	db1f      	blt.n	8006408 <hagl_fill_rectangle+0x6c>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80063c8:	f8b6 e004 	ldrh.w	lr, [r6, #4]
 80063cc:	4570      	cmp	r0, lr
 80063ce:	dc1b      	bgt.n	8006408 <hagl_fill_rectangle+0x6c>
 80063d0:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 80063d4:	4561      	cmp	r1, ip
 80063d6:	dc17      	bgt.n	8006408 <hagl_fill_rectangle+0x6c>
    };
    return a;
}

static inline int max(int a, int b) {
    if (a > b) {
 80063d8:	42a0      	cmp	r0, r4
 80063da:	bfb8      	it	lt
 80063dc:	4620      	movlt	r0, r4
    x0 = max(x0, clip_window.x0);
    y0 = max(y0, clip_window.y0);
    x1 = min(x1, clip_window.x1);
    y1 = min(y1, clip_window.y1);

    uint16_t width = x1 - x0 + 1;
 80063de:	4572      	cmp	r2, lr
 80063e0:	bfa8      	it	ge
 80063e2:	4672      	movge	r2, lr
    uint16_t height = y1 - y0 + 1;
 80063e4:	42a9      	cmp	r1, r5
 80063e6:	bfb8      	it	lt
 80063e8:	4629      	movlt	r1, r5
 80063ea:	4563      	cmp	r3, ip
 80063ec:	bfa8      	it	ge
 80063ee:	4663      	movge	r3, ip
 80063f0:	fa13 f581 	uxtah	r5, r3, r1
    uint16_t width = x1 - x0 + 1;
 80063f4:	1c54      	adds	r4, r2, #1
    uint16_t height = y1 - y0 + 1;
 80063f6:	b28e      	uxth	r6, r1
 80063f8:	3501      	adds	r5, #1
    uint16_t width = x1 - x0 + 1;
 80063fa:	1a24      	subs	r4, r4, r0
 80063fc:	1bad      	subs	r5, r5, r6
    x0 = max(x0, clip_window.x0);
 80063fe:	b207      	sxth	r7, r0
    uint16_t width = x1 - x0 + 1;
 8006400:	b2a4      	uxth	r4, r4

    for (uint16_t i = 0; i < height; i++) {
 8006402:	b2ad      	uxth	r5, r5
 8006404:	42ae      	cmp	r6, r5
 8006406:	d101      	bne.n	800640c <hagl_fill_rectangle+0x70>
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
#endif
    }
}
 8006408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hagl_draw_hline(x0, y0 + i, width, color);
 800640c:	b231      	sxth	r1, r6
 800640e:	4643      	mov	r3, r8
 8006410:	4622      	mov	r2, r4
 8006412:	4638      	mov	r0, r7
 8006414:	3601      	adds	r6, #1
 8006416:	f7ff ffb7 	bl	8006388 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800641a:	b2b6      	uxth	r6, r6
 800641c:	e7f2      	b.n	8006404 <hagl_fill_rectangle+0x68>
 800641e:	bf00      	nop
 8006420:	2000001c 	.word	0x2000001c

08006424 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8006424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8006428:	f8d2 a00c 	ldr.w	sl, [r2, #12]
void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800642c:	4607      	mov	r7, r0
 800642e:	4688      	mov	r8, r1
 8006430:	4615      	mov	r5, r2

    for (uint16_t y = 0; y < source->height; y++) {
 8006432:	2600      	movs	r6, #0
 8006434:	886a      	ldrh	r2, [r5, #2]
 8006436:	b2b3      	uxth	r3, r6
 8006438:	429a      	cmp	r2, r3
 800643a:	d811      	bhi.n	8006460 <hagl_blit+0x3c>
            color = *(ptr++);
            hagl_put_pixel(x0 + x, y0 + y, color);
        }
    }
#endif
};
 800643c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hagl_put_pixel(x0 + x, y0 + y, color);
 8006440:	4438      	add	r0, r7
 8006442:	f83a 2b02 	ldrh.w	r2, [sl], #2
 8006446:	4621      	mov	r1, r4
 8006448:	b200      	sxth	r0, r0
 800644a:	f7ff ff11 	bl	8006270 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800644e:	f109 0901 	add.w	r9, r9, #1
 8006452:	882b      	ldrh	r3, [r5, #0]
 8006454:	fa1f f089 	uxth.w	r0, r9
 8006458:	4283      	cmp	r3, r0
 800645a:	d8f1      	bhi.n	8006440 <hagl_blit+0x1c>
    for (uint16_t y = 0; y < source->height; y++) {
 800645c:	3601      	adds	r6, #1
 800645e:	e7e9      	b.n	8006434 <hagl_blit+0x10>
            hagl_put_pixel(x0 + x, y0 + y, color);
 8006460:	4443      	add	r3, r8
 8006462:	f04f 0900 	mov.w	r9, #0
 8006466:	b21c      	sxth	r4, r3
 8006468:	e7f3      	b.n	8006452 <hagl_blit+0x2e>

0800646a <hagl_put_char>:
{
 800646a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8006472:	b083      	sub	sp, #12
 8006474:	469a      	mov	sl, r3
    status = fontx_glyph(&glyph, code, font);
 8006476:	f50d 5382 	add.w	r3, sp, #4160	; 0x1040
 800647a:	3310      	adds	r3, #16
 800647c:	ac0a      	add	r4, sp, #40	; 0x28
{
 800647e:	4688      	mov	r8, r1
 8006480:	4691      	mov	r9, r2
    status = fontx_glyph(&glyph, code, font);
 8006482:	4601      	mov	r1, r0
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	f1a4 0018 	sub.w	r0, r4, #24
 800648a:	f7ff fe9e 	bl	80061ca <fontx_glyph>
    if (0 != status) {
 800648e:	4605      	mov	r5, r0
 8006490:	2800      	cmp	r0, #0
 8006492:	d14e      	bne.n	8006532 <hagl_put_char+0xc8>
    bitmap.width = glyph.width,
 8006494:	f814 3c18 	ldrb.w	r3, [r4, #-24]
 8006498:	f824 3c10 	strh.w	r3, [r4, #-16]
    bitmap.height = glyph.height,
 800649c:	f814 3c17 	ldrb.w	r3, [r4, #-23]
 80064a0:	f824 3c0e 	strh.w	r3, [r4, #-14]
    bitmap_init(&bitmap, (uint8_t *)buffer);
 80064a4:	4621      	mov	r1, r4
    bitmap.depth = DISPLAY_DEPTH,
 80064a6:	2310      	movs	r3, #16
    bitmap_init(&bitmap, (uint8_t *)buffer);
 80064a8:	a806      	add	r0, sp, #24
    bitmap.depth = DISPLAY_DEPTH,
 80064aa:	f804 3c0a 	strb.w	r3, [r4, #-10]
    bitmap_init(&bitmap, (uint8_t *)buffer);
 80064ae:	f7ff fd67 	bl	8005f80 <bitmap_init>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80064b2:	f814 2c18 	ldrb.w	r2, [r4, #-24]
 80064b6:	9201      	str	r2, [sp, #4]
        glyph.buffer += glyph.pitch;
 80064b8:	f814 2c15 	ldrb.w	r2, [r4, #-21]
 80064bc:	9202      	str	r2, [sp, #8]
 80064be:	f814 2c18 	ldrb.w	r2, [r4, #-24]
    color_t *ptr = (color_t *) bitmap.buffer;
 80064c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80064c6:	f814 cc17 	ldrb.w	ip, [r4, #-23]
 80064ca:	0052      	lsls	r2, r2, #1
 80064cc:	9203      	str	r2, [sp, #12]
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 80064ce:	4621      	mov	r1, r4
 80064d0:	f04f 0e80 	mov.w	lr, #128	; 0x80
    for (uint8_t y = 0; y < glyph.height; y++) {
 80064d4:	b2e8      	uxtb	r0, r5
 80064d6:	4584      	cmp	ip, r0
 80064d8:	d91f      	bls.n	800651a <hagl_put_char+0xb0>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 80064da:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80064de:	2700      	movs	r7, #0
 80064e0:	e00f      	b.n	8006502 <hagl_put_char+0x98>
 80064e2:	ea4f 0bd6 	mov.w	fp, r6, lsr #3
 80064e6:	f006 0607 	and.w	r6, r6, #7
 80064ea:	f810 b00b 	ldrb.w	fp, [r0, fp]
 80064ee:	fa4e f606 	asr.w	r6, lr, r6
                *(ptr++) = color;
 80064f2:	ea1b 0f06 	tst.w	fp, r6
 80064f6:	bf14      	ite	ne
 80064f8:	4656      	movne	r6, sl
 80064fa:	2600      	moveq	r6, #0
 80064fc:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006500:	3701      	adds	r7, #1
 8006502:	9a01      	ldr	r2, [sp, #4]
 8006504:	b2fe      	uxtb	r6, r7
 8006506:	42b2      	cmp	r2, r6
 8006508:	d8eb      	bhi.n	80064e2 <hagl_put_char+0x78>
 800650a:	9a03      	ldr	r2, [sp, #12]
 800650c:	4413      	add	r3, r2
        glyph.buffer += glyph.pitch;
 800650e:	9a02      	ldr	r2, [sp, #8]
 8006510:	4410      	add	r0, r2
 8006512:	f841 0c14 	str.w	r0, [r1, #-20]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8006516:	3501      	adds	r5, #1
 8006518:	e7dc      	b.n	80064d4 <hagl_put_char+0x6a>
    hagl_blit(x0, y0, &bitmap);
 800651a:	4640      	mov	r0, r8
 800651c:	aa06      	add	r2, sp, #24
 800651e:	4649      	mov	r1, r9
 8006520:	f7ff ff80 	bl	8006424 <hagl_blit>
    return bitmap.width;
 8006524:	f814 0c10 	ldrb.w	r0, [r4, #-16]
}
 8006528:	f50d 5d81 	add.w	sp, sp, #4128	; 0x1020
 800652c:	b003      	add	sp, #12
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8006532:	2000      	movs	r0, #0
 8006534:	e7f8      	b.n	8006528 <hagl_put_char+0xbe>

08006536 <atoi>:
 8006536:	220a      	movs	r2, #10
 8006538:	2100      	movs	r1, #0
 800653a:	f001 b8b1 	b.w	80076a0 <strtol>
	...

08006540 <__errno>:
 8006540:	4b01      	ldr	r3, [pc, #4]	; (8006548 <__errno+0x8>)
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	20000024 	.word	0x20000024

0800654c <__sflush_r>:
 800654c:	898a      	ldrh	r2, [r1, #12]
 800654e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006552:	4605      	mov	r5, r0
 8006554:	0710      	lsls	r0, r2, #28
 8006556:	460c      	mov	r4, r1
 8006558:	d458      	bmi.n	800660c <__sflush_r+0xc0>
 800655a:	684b      	ldr	r3, [r1, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	dc05      	bgt.n	800656c <__sflush_r+0x20>
 8006560:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	dc02      	bgt.n	800656c <__sflush_r+0x20>
 8006566:	2000      	movs	r0, #0
 8006568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800656e:	2e00      	cmp	r6, #0
 8006570:	d0f9      	beq.n	8006566 <__sflush_r+0x1a>
 8006572:	2300      	movs	r3, #0
 8006574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006578:	682f      	ldr	r7, [r5, #0]
 800657a:	602b      	str	r3, [r5, #0]
 800657c:	d032      	beq.n	80065e4 <__sflush_r+0x98>
 800657e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	075a      	lsls	r2, r3, #29
 8006584:	d505      	bpl.n	8006592 <__sflush_r+0x46>
 8006586:	6863      	ldr	r3, [r4, #4]
 8006588:	1ac0      	subs	r0, r0, r3
 800658a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800658c:	b10b      	cbz	r3, 8006592 <__sflush_r+0x46>
 800658e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006590:	1ac0      	subs	r0, r0, r3
 8006592:	2300      	movs	r3, #0
 8006594:	4602      	mov	r2, r0
 8006596:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006598:	6a21      	ldr	r1, [r4, #32]
 800659a:	4628      	mov	r0, r5
 800659c:	47b0      	blx	r6
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	d106      	bne.n	80065b2 <__sflush_r+0x66>
 80065a4:	6829      	ldr	r1, [r5, #0]
 80065a6:	291d      	cmp	r1, #29
 80065a8:	d82c      	bhi.n	8006604 <__sflush_r+0xb8>
 80065aa:	4a2a      	ldr	r2, [pc, #168]	; (8006654 <__sflush_r+0x108>)
 80065ac:	40ca      	lsrs	r2, r1
 80065ae:	07d6      	lsls	r6, r2, #31
 80065b0:	d528      	bpl.n	8006604 <__sflush_r+0xb8>
 80065b2:	2200      	movs	r2, #0
 80065b4:	6062      	str	r2, [r4, #4]
 80065b6:	04d9      	lsls	r1, r3, #19
 80065b8:	6922      	ldr	r2, [r4, #16]
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	d504      	bpl.n	80065c8 <__sflush_r+0x7c>
 80065be:	1c42      	adds	r2, r0, #1
 80065c0:	d101      	bne.n	80065c6 <__sflush_r+0x7a>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	b903      	cbnz	r3, 80065c8 <__sflush_r+0x7c>
 80065c6:	6560      	str	r0, [r4, #84]	; 0x54
 80065c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ca:	602f      	str	r7, [r5, #0]
 80065cc:	2900      	cmp	r1, #0
 80065ce:	d0ca      	beq.n	8006566 <__sflush_r+0x1a>
 80065d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d002      	beq.n	80065de <__sflush_r+0x92>
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 fa19 	bl	8006a10 <_free_r>
 80065de:	2000      	movs	r0, #0
 80065e0:	6360      	str	r0, [r4, #52]	; 0x34
 80065e2:	e7c1      	b.n	8006568 <__sflush_r+0x1c>
 80065e4:	6a21      	ldr	r1, [r4, #32]
 80065e6:	2301      	movs	r3, #1
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b0      	blx	r6
 80065ec:	1c41      	adds	r1, r0, #1
 80065ee:	d1c7      	bne.n	8006580 <__sflush_r+0x34>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0c4      	beq.n	8006580 <__sflush_r+0x34>
 80065f6:	2b1d      	cmp	r3, #29
 80065f8:	d001      	beq.n	80065fe <__sflush_r+0xb2>
 80065fa:	2b16      	cmp	r3, #22
 80065fc:	d101      	bne.n	8006602 <__sflush_r+0xb6>
 80065fe:	602f      	str	r7, [r5, #0]
 8006600:	e7b1      	b.n	8006566 <__sflush_r+0x1a>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	e7ad      	b.n	8006568 <__sflush_r+0x1c>
 800660c:	690f      	ldr	r7, [r1, #16]
 800660e:	2f00      	cmp	r7, #0
 8006610:	d0a9      	beq.n	8006566 <__sflush_r+0x1a>
 8006612:	0793      	lsls	r3, r2, #30
 8006614:	680e      	ldr	r6, [r1, #0]
 8006616:	bf08      	it	eq
 8006618:	694b      	ldreq	r3, [r1, #20]
 800661a:	600f      	str	r7, [r1, #0]
 800661c:	bf18      	it	ne
 800661e:	2300      	movne	r3, #0
 8006620:	eba6 0807 	sub.w	r8, r6, r7
 8006624:	608b      	str	r3, [r1, #8]
 8006626:	f1b8 0f00 	cmp.w	r8, #0
 800662a:	dd9c      	ble.n	8006566 <__sflush_r+0x1a>
 800662c:	6a21      	ldr	r1, [r4, #32]
 800662e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006630:	4643      	mov	r3, r8
 8006632:	463a      	mov	r2, r7
 8006634:	4628      	mov	r0, r5
 8006636:	47b0      	blx	r6
 8006638:	2800      	cmp	r0, #0
 800663a:	dc06      	bgt.n	800664a <__sflush_r+0xfe>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	e78e      	b.n	8006568 <__sflush_r+0x1c>
 800664a:	4407      	add	r7, r0
 800664c:	eba8 0800 	sub.w	r8, r8, r0
 8006650:	e7e9      	b.n	8006626 <__sflush_r+0xda>
 8006652:	bf00      	nop
 8006654:	20400001 	.word	0x20400001

08006658 <_fflush_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	690b      	ldr	r3, [r1, #16]
 800665c:	4605      	mov	r5, r0
 800665e:	460c      	mov	r4, r1
 8006660:	b913      	cbnz	r3, 8006668 <_fflush_r+0x10>
 8006662:	2500      	movs	r5, #0
 8006664:	4628      	mov	r0, r5
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	b118      	cbz	r0, 8006672 <_fflush_r+0x1a>
 800666a:	6983      	ldr	r3, [r0, #24]
 800666c:	b90b      	cbnz	r3, 8006672 <_fflush_r+0x1a>
 800666e:	f000 f887 	bl	8006780 <__sinit>
 8006672:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <_fflush_r+0x6c>)
 8006674:	429c      	cmp	r4, r3
 8006676:	d11b      	bne.n	80066b0 <_fflush_r+0x58>
 8006678:	686c      	ldr	r4, [r5, #4]
 800667a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ef      	beq.n	8006662 <_fflush_r+0xa>
 8006682:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006684:	07d0      	lsls	r0, r2, #31
 8006686:	d404      	bmi.n	8006692 <_fflush_r+0x3a>
 8006688:	0599      	lsls	r1, r3, #22
 800668a:	d402      	bmi.n	8006692 <_fflush_r+0x3a>
 800668c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668e:	f000 f93a 	bl	8006906 <__retarget_lock_acquire_recursive>
 8006692:	4628      	mov	r0, r5
 8006694:	4621      	mov	r1, r4
 8006696:	f7ff ff59 	bl	800654c <__sflush_r>
 800669a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800669c:	07da      	lsls	r2, r3, #31
 800669e:	4605      	mov	r5, r0
 80066a0:	d4e0      	bmi.n	8006664 <_fflush_r+0xc>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	059b      	lsls	r3, r3, #22
 80066a6:	d4dd      	bmi.n	8006664 <_fflush_r+0xc>
 80066a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066aa:	f000 f92d 	bl	8006908 <__retarget_lock_release_recursive>
 80066ae:	e7d9      	b.n	8006664 <_fflush_r+0xc>
 80066b0:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <_fflush_r+0x70>)
 80066b2:	429c      	cmp	r4, r3
 80066b4:	d101      	bne.n	80066ba <_fflush_r+0x62>
 80066b6:	68ac      	ldr	r4, [r5, #8]
 80066b8:	e7df      	b.n	800667a <_fflush_r+0x22>
 80066ba:	4b04      	ldr	r3, [pc, #16]	; (80066cc <_fflush_r+0x74>)
 80066bc:	429c      	cmp	r4, r3
 80066be:	bf08      	it	eq
 80066c0:	68ec      	ldreq	r4, [r5, #12]
 80066c2:	e7da      	b.n	800667a <_fflush_r+0x22>
 80066c4:	0800caa8 	.word	0x0800caa8
 80066c8:	0800cac8 	.word	0x0800cac8
 80066cc:	0800ca88 	.word	0x0800ca88

080066d0 <std>:
 80066d0:	2300      	movs	r3, #0
 80066d2:	b510      	push	{r4, lr}
 80066d4:	4604      	mov	r4, r0
 80066d6:	e9c0 3300 	strd	r3, r3, [r0]
 80066da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066de:	6083      	str	r3, [r0, #8]
 80066e0:	8181      	strh	r1, [r0, #12]
 80066e2:	6643      	str	r3, [r0, #100]	; 0x64
 80066e4:	81c2      	strh	r2, [r0, #14]
 80066e6:	6183      	str	r3, [r0, #24]
 80066e8:	4619      	mov	r1, r3
 80066ea:	2208      	movs	r2, #8
 80066ec:	305c      	adds	r0, #92	; 0x5c
 80066ee:	f000 f987 	bl	8006a00 <memset>
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <std+0x38>)
 80066f4:	6263      	str	r3, [r4, #36]	; 0x24
 80066f6:	4b05      	ldr	r3, [pc, #20]	; (800670c <std+0x3c>)
 80066f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <std+0x40>)
 80066fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066fe:	4b05      	ldr	r3, [pc, #20]	; (8006714 <std+0x44>)
 8006700:	6224      	str	r4, [r4, #32]
 8006702:	6323      	str	r3, [r4, #48]	; 0x30
 8006704:	bd10      	pop	{r4, pc}
 8006706:	bf00      	nop
 8006708:	08007505 	.word	0x08007505
 800670c:	08007527 	.word	0x08007527
 8006710:	0800755f 	.word	0x0800755f
 8006714:	08007583 	.word	0x08007583

08006718 <_cleanup_r>:
 8006718:	4901      	ldr	r1, [pc, #4]	; (8006720 <_cleanup_r+0x8>)
 800671a:	f000 b8af 	b.w	800687c <_fwalk_reent>
 800671e:	bf00      	nop
 8006720:	08006659 	.word	0x08006659

08006724 <__sfmoreglue>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	2268      	movs	r2, #104	; 0x68
 8006728:	1e4d      	subs	r5, r1, #1
 800672a:	4355      	muls	r5, r2
 800672c:	460e      	mov	r6, r1
 800672e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006732:	f000 f9d9 	bl	8006ae8 <_malloc_r>
 8006736:	4604      	mov	r4, r0
 8006738:	b140      	cbz	r0, 800674c <__sfmoreglue+0x28>
 800673a:	2100      	movs	r1, #0
 800673c:	e9c0 1600 	strd	r1, r6, [r0]
 8006740:	300c      	adds	r0, #12
 8006742:	60a0      	str	r0, [r4, #8]
 8006744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006748:	f000 f95a 	bl	8006a00 <memset>
 800674c:	4620      	mov	r0, r4
 800674e:	bd70      	pop	{r4, r5, r6, pc}

08006750 <__sfp_lock_acquire>:
 8006750:	4801      	ldr	r0, [pc, #4]	; (8006758 <__sfp_lock_acquire+0x8>)
 8006752:	f000 b8d8 	b.w	8006906 <__retarget_lock_acquire_recursive>
 8006756:	bf00      	nop
 8006758:	2000a661 	.word	0x2000a661

0800675c <__sfp_lock_release>:
 800675c:	4801      	ldr	r0, [pc, #4]	; (8006764 <__sfp_lock_release+0x8>)
 800675e:	f000 b8d3 	b.w	8006908 <__retarget_lock_release_recursive>
 8006762:	bf00      	nop
 8006764:	2000a661 	.word	0x2000a661

08006768 <__sinit_lock_acquire>:
 8006768:	4801      	ldr	r0, [pc, #4]	; (8006770 <__sinit_lock_acquire+0x8>)
 800676a:	f000 b8cc 	b.w	8006906 <__retarget_lock_acquire_recursive>
 800676e:	bf00      	nop
 8006770:	2000a662 	.word	0x2000a662

08006774 <__sinit_lock_release>:
 8006774:	4801      	ldr	r0, [pc, #4]	; (800677c <__sinit_lock_release+0x8>)
 8006776:	f000 b8c7 	b.w	8006908 <__retarget_lock_release_recursive>
 800677a:	bf00      	nop
 800677c:	2000a662 	.word	0x2000a662

08006780 <__sinit>:
 8006780:	b510      	push	{r4, lr}
 8006782:	4604      	mov	r4, r0
 8006784:	f7ff fff0 	bl	8006768 <__sinit_lock_acquire>
 8006788:	69a3      	ldr	r3, [r4, #24]
 800678a:	b11b      	cbz	r3, 8006794 <__sinit+0x14>
 800678c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006790:	f7ff bff0 	b.w	8006774 <__sinit_lock_release>
 8006794:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006798:	6523      	str	r3, [r4, #80]	; 0x50
 800679a:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <__sinit+0x68>)
 800679c:	4a13      	ldr	r2, [pc, #76]	; (80067ec <__sinit+0x6c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	bf04      	itt	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	61a3      	streq	r3, [r4, #24]
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 f820 	bl	80067f0 <__sfp>
 80067b0:	6060      	str	r0, [r4, #4]
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 f81c 	bl	80067f0 <__sfp>
 80067b8:	60a0      	str	r0, [r4, #8]
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 f818 	bl	80067f0 <__sfp>
 80067c0:	2200      	movs	r2, #0
 80067c2:	60e0      	str	r0, [r4, #12]
 80067c4:	2104      	movs	r1, #4
 80067c6:	6860      	ldr	r0, [r4, #4]
 80067c8:	f7ff ff82 	bl	80066d0 <std>
 80067cc:	68a0      	ldr	r0, [r4, #8]
 80067ce:	2201      	movs	r2, #1
 80067d0:	2109      	movs	r1, #9
 80067d2:	f7ff ff7d 	bl	80066d0 <std>
 80067d6:	68e0      	ldr	r0, [r4, #12]
 80067d8:	2202      	movs	r2, #2
 80067da:	2112      	movs	r1, #18
 80067dc:	f7ff ff78 	bl	80066d0 <std>
 80067e0:	2301      	movs	r3, #1
 80067e2:	61a3      	str	r3, [r4, #24]
 80067e4:	e7d2      	b.n	800678c <__sinit+0xc>
 80067e6:	bf00      	nop
 80067e8:	0800cae8 	.word	0x0800cae8
 80067ec:	08006719 	.word	0x08006719

080067f0 <__sfp>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	4607      	mov	r7, r0
 80067f4:	f7ff ffac 	bl	8006750 <__sfp_lock_acquire>
 80067f8:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <__sfp+0x84>)
 80067fa:	681e      	ldr	r6, [r3, #0]
 80067fc:	69b3      	ldr	r3, [r6, #24]
 80067fe:	b913      	cbnz	r3, 8006806 <__sfp+0x16>
 8006800:	4630      	mov	r0, r6
 8006802:	f7ff ffbd 	bl	8006780 <__sinit>
 8006806:	3648      	adds	r6, #72	; 0x48
 8006808:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800680c:	3b01      	subs	r3, #1
 800680e:	d503      	bpl.n	8006818 <__sfp+0x28>
 8006810:	6833      	ldr	r3, [r6, #0]
 8006812:	b30b      	cbz	r3, 8006858 <__sfp+0x68>
 8006814:	6836      	ldr	r6, [r6, #0]
 8006816:	e7f7      	b.n	8006808 <__sfp+0x18>
 8006818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800681c:	b9d5      	cbnz	r5, 8006854 <__sfp+0x64>
 800681e:	4b16      	ldr	r3, [pc, #88]	; (8006878 <__sfp+0x88>)
 8006820:	60e3      	str	r3, [r4, #12]
 8006822:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006826:	6665      	str	r5, [r4, #100]	; 0x64
 8006828:	f000 f86c 	bl	8006904 <__retarget_lock_init_recursive>
 800682c:	f7ff ff96 	bl	800675c <__sfp_lock_release>
 8006830:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006834:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006838:	6025      	str	r5, [r4, #0]
 800683a:	61a5      	str	r5, [r4, #24]
 800683c:	2208      	movs	r2, #8
 800683e:	4629      	mov	r1, r5
 8006840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006844:	f000 f8dc 	bl	8006a00 <memset>
 8006848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800684c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006850:	4620      	mov	r0, r4
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006854:	3468      	adds	r4, #104	; 0x68
 8006856:	e7d9      	b.n	800680c <__sfp+0x1c>
 8006858:	2104      	movs	r1, #4
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff ff62 	bl	8006724 <__sfmoreglue>
 8006860:	4604      	mov	r4, r0
 8006862:	6030      	str	r0, [r6, #0]
 8006864:	2800      	cmp	r0, #0
 8006866:	d1d5      	bne.n	8006814 <__sfp+0x24>
 8006868:	f7ff ff78 	bl	800675c <__sfp_lock_release>
 800686c:	230c      	movs	r3, #12
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	e7ee      	b.n	8006850 <__sfp+0x60>
 8006872:	bf00      	nop
 8006874:	0800cae8 	.word	0x0800cae8
 8006878:	ffff0001 	.word	0xffff0001

0800687c <_fwalk_reent>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	4606      	mov	r6, r0
 8006882:	4688      	mov	r8, r1
 8006884:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006888:	2700      	movs	r7, #0
 800688a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800688e:	f1b9 0901 	subs.w	r9, r9, #1
 8006892:	d505      	bpl.n	80068a0 <_fwalk_reent+0x24>
 8006894:	6824      	ldr	r4, [r4, #0]
 8006896:	2c00      	cmp	r4, #0
 8006898:	d1f7      	bne.n	800688a <_fwalk_reent+0xe>
 800689a:	4638      	mov	r0, r7
 800689c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a0:	89ab      	ldrh	r3, [r5, #12]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d907      	bls.n	80068b6 <_fwalk_reent+0x3a>
 80068a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068aa:	3301      	adds	r3, #1
 80068ac:	d003      	beq.n	80068b6 <_fwalk_reent+0x3a>
 80068ae:	4629      	mov	r1, r5
 80068b0:	4630      	mov	r0, r6
 80068b2:	47c0      	blx	r8
 80068b4:	4307      	orrs	r7, r0
 80068b6:	3568      	adds	r5, #104	; 0x68
 80068b8:	e7e9      	b.n	800688e <_fwalk_reent+0x12>
	...

080068bc <__libc_init_array>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4d0d      	ldr	r5, [pc, #52]	; (80068f4 <__libc_init_array+0x38>)
 80068c0:	4c0d      	ldr	r4, [pc, #52]	; (80068f8 <__libc_init_array+0x3c>)
 80068c2:	1b64      	subs	r4, r4, r5
 80068c4:	10a4      	asrs	r4, r4, #2
 80068c6:	2600      	movs	r6, #0
 80068c8:	42a6      	cmp	r6, r4
 80068ca:	d109      	bne.n	80068e0 <__libc_init_array+0x24>
 80068cc:	4d0b      	ldr	r5, [pc, #44]	; (80068fc <__libc_init_array+0x40>)
 80068ce:	4c0c      	ldr	r4, [pc, #48]	; (8006900 <__libc_init_array+0x44>)
 80068d0:	f003 f866 	bl	80099a0 <_init>
 80068d4:	1b64      	subs	r4, r4, r5
 80068d6:	10a4      	asrs	r4, r4, #2
 80068d8:	2600      	movs	r6, #0
 80068da:	42a6      	cmp	r6, r4
 80068dc:	d105      	bne.n	80068ea <__libc_init_array+0x2e>
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e4:	4798      	blx	r3
 80068e6:	3601      	adds	r6, #1
 80068e8:	e7ee      	b.n	80068c8 <__libc_init_array+0xc>
 80068ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ee:	4798      	blx	r3
 80068f0:	3601      	adds	r6, #1
 80068f2:	e7f2      	b.n	80068da <__libc_init_array+0x1e>
 80068f4:	0800ceb0 	.word	0x0800ceb0
 80068f8:	0800ceb0 	.word	0x0800ceb0
 80068fc:	0800ceb0 	.word	0x0800ceb0
 8006900:	0800ceb4 	.word	0x0800ceb4

08006904 <__retarget_lock_init_recursive>:
 8006904:	4770      	bx	lr

08006906 <__retarget_lock_acquire_recursive>:
 8006906:	4770      	bx	lr

08006908 <__retarget_lock_release_recursive>:
 8006908:	4770      	bx	lr

0800690a <__swhatbuf_r>:
 800690a:	b570      	push	{r4, r5, r6, lr}
 800690c:	460e      	mov	r6, r1
 800690e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006912:	2900      	cmp	r1, #0
 8006914:	b096      	sub	sp, #88	; 0x58
 8006916:	4614      	mov	r4, r2
 8006918:	461d      	mov	r5, r3
 800691a:	da08      	bge.n	800692e <__swhatbuf_r+0x24>
 800691c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	602a      	str	r2, [r5, #0]
 8006924:	061a      	lsls	r2, r3, #24
 8006926:	d410      	bmi.n	800694a <__swhatbuf_r+0x40>
 8006928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800692c:	e00e      	b.n	800694c <__swhatbuf_r+0x42>
 800692e:	466a      	mov	r2, sp
 8006930:	f001 fd5c 	bl	80083ec <_fstat_r>
 8006934:	2800      	cmp	r0, #0
 8006936:	dbf1      	blt.n	800691c <__swhatbuf_r+0x12>
 8006938:	9a01      	ldr	r2, [sp, #4]
 800693a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800693e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006942:	425a      	negs	r2, r3
 8006944:	415a      	adcs	r2, r3
 8006946:	602a      	str	r2, [r5, #0]
 8006948:	e7ee      	b.n	8006928 <__swhatbuf_r+0x1e>
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	2000      	movs	r0, #0
 800694e:	6023      	str	r3, [r4, #0]
 8006950:	b016      	add	sp, #88	; 0x58
 8006952:	bd70      	pop	{r4, r5, r6, pc}

08006954 <__smakebuf_r>:
 8006954:	898b      	ldrh	r3, [r1, #12]
 8006956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006958:	079d      	lsls	r5, r3, #30
 800695a:	4606      	mov	r6, r0
 800695c:	460c      	mov	r4, r1
 800695e:	d507      	bpl.n	8006970 <__smakebuf_r+0x1c>
 8006960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	2301      	movs	r3, #1
 800696a:	6163      	str	r3, [r4, #20]
 800696c:	b002      	add	sp, #8
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	ab01      	add	r3, sp, #4
 8006972:	466a      	mov	r2, sp
 8006974:	f7ff ffc9 	bl	800690a <__swhatbuf_r>
 8006978:	9900      	ldr	r1, [sp, #0]
 800697a:	4605      	mov	r5, r0
 800697c:	4630      	mov	r0, r6
 800697e:	f000 f8b3 	bl	8006ae8 <_malloc_r>
 8006982:	b948      	cbnz	r0, 8006998 <__smakebuf_r+0x44>
 8006984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006988:	059a      	lsls	r2, r3, #22
 800698a:	d4ef      	bmi.n	800696c <__smakebuf_r+0x18>
 800698c:	f023 0303 	bic.w	r3, r3, #3
 8006990:	f043 0302 	orr.w	r3, r3, #2
 8006994:	81a3      	strh	r3, [r4, #12]
 8006996:	e7e3      	b.n	8006960 <__smakebuf_r+0xc>
 8006998:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <__smakebuf_r+0x7c>)
 800699a:	62b3      	str	r3, [r6, #40]	; 0x28
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	6020      	str	r0, [r4, #0]
 80069a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	9b00      	ldr	r3, [sp, #0]
 80069a8:	6163      	str	r3, [r4, #20]
 80069aa:	9b01      	ldr	r3, [sp, #4]
 80069ac:	6120      	str	r0, [r4, #16]
 80069ae:	b15b      	cbz	r3, 80069c8 <__smakebuf_r+0x74>
 80069b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b4:	4630      	mov	r0, r6
 80069b6:	f001 fd2b 	bl	8008410 <_isatty_r>
 80069ba:	b128      	cbz	r0, 80069c8 <__smakebuf_r+0x74>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	89a0      	ldrh	r0, [r4, #12]
 80069ca:	4305      	orrs	r5, r0
 80069cc:	81a5      	strh	r5, [r4, #12]
 80069ce:	e7cd      	b.n	800696c <__smakebuf_r+0x18>
 80069d0:	08006719 	.word	0x08006719

080069d4 <malloc>:
 80069d4:	4b02      	ldr	r3, [pc, #8]	; (80069e0 <malloc+0xc>)
 80069d6:	4601      	mov	r1, r0
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	f000 b885 	b.w	8006ae8 <_malloc_r>
 80069de:	bf00      	nop
 80069e0:	20000024 	.word	0x20000024

080069e4 <memcpy>:
 80069e4:	440a      	add	r2, r1
 80069e6:	4291      	cmp	r1, r2
 80069e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069ec:	d100      	bne.n	80069f0 <memcpy+0xc>
 80069ee:	4770      	bx	lr
 80069f0:	b510      	push	{r4, lr}
 80069f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069fa:	4291      	cmp	r1, r2
 80069fc:	d1f9      	bne.n	80069f2 <memcpy+0xe>
 80069fe:	bd10      	pop	{r4, pc}

08006a00 <memset>:
 8006a00:	4402      	add	r2, r0
 8006a02:	4603      	mov	r3, r0
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d100      	bne.n	8006a0a <memset+0xa>
 8006a08:	4770      	bx	lr
 8006a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0e:	e7f9      	b.n	8006a04 <memset+0x4>

08006a10 <_free_r>:
 8006a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a12:	2900      	cmp	r1, #0
 8006a14:	d044      	beq.n	8006aa0 <_free_r+0x90>
 8006a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1a:	9001      	str	r0, [sp, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a22:	bfb8      	it	lt
 8006a24:	18e4      	addlt	r4, r4, r3
 8006a26:	f001 fd19 	bl	800845c <__malloc_lock>
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <_free_r+0x94>)
 8006a2c:	9801      	ldr	r0, [sp, #4]
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	b933      	cbnz	r3, 8006a40 <_free_r+0x30>
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	6014      	str	r4, [r2, #0]
 8006a36:	b003      	add	sp, #12
 8006a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a3c:	f001 bd14 	b.w	8008468 <__malloc_unlock>
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	d908      	bls.n	8006a56 <_free_r+0x46>
 8006a44:	6825      	ldr	r5, [r4, #0]
 8006a46:	1961      	adds	r1, r4, r5
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	bf01      	itttt	eq
 8006a4c:	6819      	ldreq	r1, [r3, #0]
 8006a4e:	685b      	ldreq	r3, [r3, #4]
 8006a50:	1949      	addeq	r1, r1, r5
 8006a52:	6021      	streq	r1, [r4, #0]
 8006a54:	e7ed      	b.n	8006a32 <_free_r+0x22>
 8006a56:	461a      	mov	r2, r3
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	b10b      	cbz	r3, 8006a60 <_free_r+0x50>
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	d9fa      	bls.n	8006a56 <_free_r+0x46>
 8006a60:	6811      	ldr	r1, [r2, #0]
 8006a62:	1855      	adds	r5, r2, r1
 8006a64:	42a5      	cmp	r5, r4
 8006a66:	d10b      	bne.n	8006a80 <_free_r+0x70>
 8006a68:	6824      	ldr	r4, [r4, #0]
 8006a6a:	4421      	add	r1, r4
 8006a6c:	1854      	adds	r4, r2, r1
 8006a6e:	42a3      	cmp	r3, r4
 8006a70:	6011      	str	r1, [r2, #0]
 8006a72:	d1e0      	bne.n	8006a36 <_free_r+0x26>
 8006a74:	681c      	ldr	r4, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	6053      	str	r3, [r2, #4]
 8006a7a:	4421      	add	r1, r4
 8006a7c:	6011      	str	r1, [r2, #0]
 8006a7e:	e7da      	b.n	8006a36 <_free_r+0x26>
 8006a80:	d902      	bls.n	8006a88 <_free_r+0x78>
 8006a82:	230c      	movs	r3, #12
 8006a84:	6003      	str	r3, [r0, #0]
 8006a86:	e7d6      	b.n	8006a36 <_free_r+0x26>
 8006a88:	6825      	ldr	r5, [r4, #0]
 8006a8a:	1961      	adds	r1, r4, r5
 8006a8c:	428b      	cmp	r3, r1
 8006a8e:	bf04      	itt	eq
 8006a90:	6819      	ldreq	r1, [r3, #0]
 8006a92:	685b      	ldreq	r3, [r3, #4]
 8006a94:	6063      	str	r3, [r4, #4]
 8006a96:	bf04      	itt	eq
 8006a98:	1949      	addeq	r1, r1, r5
 8006a9a:	6021      	streq	r1, [r4, #0]
 8006a9c:	6054      	str	r4, [r2, #4]
 8006a9e:	e7ca      	b.n	8006a36 <_free_r+0x26>
 8006aa0:	b003      	add	sp, #12
 8006aa2:	bd30      	pop	{r4, r5, pc}
 8006aa4:	2000a664 	.word	0x2000a664

08006aa8 <sbrk_aligned>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	4e0e      	ldr	r6, [pc, #56]	; (8006ae4 <sbrk_aligned+0x3c>)
 8006aac:	460c      	mov	r4, r1
 8006aae:	6831      	ldr	r1, [r6, #0]
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	b911      	cbnz	r1, 8006aba <sbrk_aligned+0x12>
 8006ab4:	f000 fcf6 	bl	80074a4 <_sbrk_r>
 8006ab8:	6030      	str	r0, [r6, #0]
 8006aba:	4621      	mov	r1, r4
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 fcf1 	bl	80074a4 <_sbrk_r>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d00a      	beq.n	8006adc <sbrk_aligned+0x34>
 8006ac6:	1cc4      	adds	r4, r0, #3
 8006ac8:	f024 0403 	bic.w	r4, r4, #3
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d007      	beq.n	8006ae0 <sbrk_aligned+0x38>
 8006ad0:	1a21      	subs	r1, r4, r0
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 fce6 	bl	80074a4 <_sbrk_r>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d101      	bne.n	8006ae0 <sbrk_aligned+0x38>
 8006adc:	f04f 34ff 	mov.w	r4, #4294967295
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	2000a668 	.word	0x2000a668

08006ae8 <_malloc_r>:
 8006ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aec:	1ccd      	adds	r5, r1, #3
 8006aee:	f025 0503 	bic.w	r5, r5, #3
 8006af2:	3508      	adds	r5, #8
 8006af4:	2d0c      	cmp	r5, #12
 8006af6:	bf38      	it	cc
 8006af8:	250c      	movcc	r5, #12
 8006afa:	2d00      	cmp	r5, #0
 8006afc:	4607      	mov	r7, r0
 8006afe:	db01      	blt.n	8006b04 <_malloc_r+0x1c>
 8006b00:	42a9      	cmp	r1, r5
 8006b02:	d905      	bls.n	8006b10 <_malloc_r+0x28>
 8006b04:	230c      	movs	r3, #12
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	2600      	movs	r6, #0
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	4e2e      	ldr	r6, [pc, #184]	; (8006bcc <_malloc_r+0xe4>)
 8006b12:	f001 fca3 	bl	800845c <__malloc_lock>
 8006b16:	6833      	ldr	r3, [r6, #0]
 8006b18:	461c      	mov	r4, r3
 8006b1a:	bb34      	cbnz	r4, 8006b6a <_malloc_r+0x82>
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f7ff ffc2 	bl	8006aa8 <sbrk_aligned>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	4604      	mov	r4, r0
 8006b28:	d14d      	bne.n	8006bc6 <_malloc_r+0xde>
 8006b2a:	6834      	ldr	r4, [r6, #0]
 8006b2c:	4626      	mov	r6, r4
 8006b2e:	2e00      	cmp	r6, #0
 8006b30:	d140      	bne.n	8006bb4 <_malloc_r+0xcc>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	4631      	mov	r1, r6
 8006b36:	4638      	mov	r0, r7
 8006b38:	eb04 0803 	add.w	r8, r4, r3
 8006b3c:	f000 fcb2 	bl	80074a4 <_sbrk_r>
 8006b40:	4580      	cmp	r8, r0
 8006b42:	d13a      	bne.n	8006bba <_malloc_r+0xd2>
 8006b44:	6821      	ldr	r1, [r4, #0]
 8006b46:	3503      	adds	r5, #3
 8006b48:	1a6d      	subs	r5, r5, r1
 8006b4a:	f025 0503 	bic.w	r5, r5, #3
 8006b4e:	3508      	adds	r5, #8
 8006b50:	2d0c      	cmp	r5, #12
 8006b52:	bf38      	it	cc
 8006b54:	250c      	movcc	r5, #12
 8006b56:	4629      	mov	r1, r5
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff ffa5 	bl	8006aa8 <sbrk_aligned>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d02b      	beq.n	8006bba <_malloc_r+0xd2>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	442b      	add	r3, r5
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	e00e      	b.n	8006b88 <_malloc_r+0xa0>
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	1b52      	subs	r2, r2, r5
 8006b6e:	d41e      	bmi.n	8006bae <_malloc_r+0xc6>
 8006b70:	2a0b      	cmp	r2, #11
 8006b72:	d916      	bls.n	8006ba2 <_malloc_r+0xba>
 8006b74:	1961      	adds	r1, r4, r5
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	6025      	str	r5, [r4, #0]
 8006b7a:	bf18      	it	ne
 8006b7c:	6059      	strne	r1, [r3, #4]
 8006b7e:	6863      	ldr	r3, [r4, #4]
 8006b80:	bf08      	it	eq
 8006b82:	6031      	streq	r1, [r6, #0]
 8006b84:	5162      	str	r2, [r4, r5]
 8006b86:	604b      	str	r3, [r1, #4]
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f104 060b 	add.w	r6, r4, #11
 8006b8e:	f001 fc6b 	bl	8008468 <__malloc_unlock>
 8006b92:	f026 0607 	bic.w	r6, r6, #7
 8006b96:	1d23      	adds	r3, r4, #4
 8006b98:	1af2      	subs	r2, r6, r3
 8006b9a:	d0b6      	beq.n	8006b0a <_malloc_r+0x22>
 8006b9c:	1b9b      	subs	r3, r3, r6
 8006b9e:	50a3      	str	r3, [r4, r2]
 8006ba0:	e7b3      	b.n	8006b0a <_malloc_r+0x22>
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	bf0c      	ite	eq
 8006ba8:	6032      	streq	r2, [r6, #0]
 8006baa:	605a      	strne	r2, [r3, #4]
 8006bac:	e7ec      	b.n	8006b88 <_malloc_r+0xa0>
 8006bae:	4623      	mov	r3, r4
 8006bb0:	6864      	ldr	r4, [r4, #4]
 8006bb2:	e7b2      	b.n	8006b1a <_malloc_r+0x32>
 8006bb4:	4634      	mov	r4, r6
 8006bb6:	6876      	ldr	r6, [r6, #4]
 8006bb8:	e7b9      	b.n	8006b2e <_malloc_r+0x46>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f001 fc52 	bl	8008468 <__malloc_unlock>
 8006bc4:	e7a1      	b.n	8006b0a <_malloc_r+0x22>
 8006bc6:	6025      	str	r5, [r4, #0]
 8006bc8:	e7de      	b.n	8006b88 <_malloc_r+0xa0>
 8006bca:	bf00      	nop
 8006bcc:	2000a664 	.word	0x2000a664

08006bd0 <__cvt>:
 8006bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd4:	ec55 4b10 	vmov	r4, r5, d0
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	460e      	mov	r6, r1
 8006bdc:	4619      	mov	r1, r3
 8006bde:	462b      	mov	r3, r5
 8006be0:	bfbb      	ittet	lt
 8006be2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006be6:	461d      	movlt	r5, r3
 8006be8:	2300      	movge	r3, #0
 8006bea:	232d      	movlt	r3, #45	; 0x2d
 8006bec:	700b      	strb	r3, [r1, #0]
 8006bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bf4:	4691      	mov	r9, r2
 8006bf6:	f023 0820 	bic.w	r8, r3, #32
 8006bfa:	bfbc      	itt	lt
 8006bfc:	4622      	movlt	r2, r4
 8006bfe:	4614      	movlt	r4, r2
 8006c00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c04:	d005      	beq.n	8006c12 <__cvt+0x42>
 8006c06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c0a:	d100      	bne.n	8006c0e <__cvt+0x3e>
 8006c0c:	3601      	adds	r6, #1
 8006c0e:	2102      	movs	r1, #2
 8006c10:	e000      	b.n	8006c14 <__cvt+0x44>
 8006c12:	2103      	movs	r1, #3
 8006c14:	ab03      	add	r3, sp, #12
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	ab02      	add	r3, sp, #8
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	ec45 4b10 	vmov	d0, r4, r5
 8006c20:	4653      	mov	r3, sl
 8006c22:	4632      	mov	r2, r6
 8006c24:	f000 fdf4 	bl	8007810 <_dtoa_r>
 8006c28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	d102      	bne.n	8006c36 <__cvt+0x66>
 8006c30:	f019 0f01 	tst.w	r9, #1
 8006c34:	d022      	beq.n	8006c7c <__cvt+0xac>
 8006c36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c3a:	eb07 0906 	add.w	r9, r7, r6
 8006c3e:	d110      	bne.n	8006c62 <__cvt+0x92>
 8006c40:	783b      	ldrb	r3, [r7, #0]
 8006c42:	2b30      	cmp	r3, #48	; 0x30
 8006c44:	d10a      	bne.n	8006c5c <__cvt+0x8c>
 8006c46:	2200      	movs	r2, #0
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	f7f9 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c52:	b918      	cbnz	r0, 8006c5c <__cvt+0x8c>
 8006c54:	f1c6 0601 	rsb	r6, r6, #1
 8006c58:	f8ca 6000 	str.w	r6, [sl]
 8006c5c:	f8da 3000 	ldr.w	r3, [sl]
 8006c60:	4499      	add	r9, r3
 8006c62:	2200      	movs	r2, #0
 8006c64:	2300      	movs	r3, #0
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7f9 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c6e:	b108      	cbz	r0, 8006c74 <__cvt+0xa4>
 8006c70:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c74:	2230      	movs	r2, #48	; 0x30
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	454b      	cmp	r3, r9
 8006c7a:	d307      	bcc.n	8006c8c <__cvt+0xbc>
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c80:	1bdb      	subs	r3, r3, r7
 8006c82:	4638      	mov	r0, r7
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	b004      	add	sp, #16
 8006c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8c:	1c59      	adds	r1, r3, #1
 8006c8e:	9103      	str	r1, [sp, #12]
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e7f0      	b.n	8006c76 <__cvt+0xa6>

08006c94 <__exponent>:
 8006c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c96:	4603      	mov	r3, r0
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	bfb8      	it	lt
 8006c9c:	4249      	neglt	r1, r1
 8006c9e:	f803 2b02 	strb.w	r2, [r3], #2
 8006ca2:	bfb4      	ite	lt
 8006ca4:	222d      	movlt	r2, #45	; 0x2d
 8006ca6:	222b      	movge	r2, #43	; 0x2b
 8006ca8:	2909      	cmp	r1, #9
 8006caa:	7042      	strb	r2, [r0, #1]
 8006cac:	dd2a      	ble.n	8006d04 <__exponent+0x70>
 8006cae:	f10d 0407 	add.w	r4, sp, #7
 8006cb2:	46a4      	mov	ip, r4
 8006cb4:	270a      	movs	r7, #10
 8006cb6:	46a6      	mov	lr, r4
 8006cb8:	460a      	mov	r2, r1
 8006cba:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cbe:	fb07 1516 	mls	r5, r7, r6, r1
 8006cc2:	3530      	adds	r5, #48	; 0x30
 8006cc4:	2a63      	cmp	r2, #99	; 0x63
 8006cc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006cca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cce:	4631      	mov	r1, r6
 8006cd0:	dcf1      	bgt.n	8006cb6 <__exponent+0x22>
 8006cd2:	3130      	adds	r1, #48	; 0x30
 8006cd4:	f1ae 0502 	sub.w	r5, lr, #2
 8006cd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cdc:	1c44      	adds	r4, r0, #1
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4561      	cmp	r1, ip
 8006ce2:	d30a      	bcc.n	8006cfa <__exponent+0x66>
 8006ce4:	f10d 0209 	add.w	r2, sp, #9
 8006ce8:	eba2 020e 	sub.w	r2, r2, lr
 8006cec:	4565      	cmp	r5, ip
 8006cee:	bf88      	it	hi
 8006cf0:	2200      	movhi	r2, #0
 8006cf2:	4413      	add	r3, r2
 8006cf4:	1a18      	subs	r0, r3, r0
 8006cf6:	b003      	add	sp, #12
 8006cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d02:	e7ed      	b.n	8006ce0 <__exponent+0x4c>
 8006d04:	2330      	movs	r3, #48	; 0x30
 8006d06:	3130      	adds	r1, #48	; 0x30
 8006d08:	7083      	strb	r3, [r0, #2]
 8006d0a:	70c1      	strb	r1, [r0, #3]
 8006d0c:	1d03      	adds	r3, r0, #4
 8006d0e:	e7f1      	b.n	8006cf4 <__exponent+0x60>

08006d10 <_printf_float>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	ed2d 8b02 	vpush	{d8}
 8006d18:	b08d      	sub	sp, #52	; 0x34
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d20:	4616      	mov	r6, r2
 8006d22:	461f      	mov	r7, r3
 8006d24:	4605      	mov	r5, r0
 8006d26:	f001 fb83 	bl	8008430 <_localeconv_r>
 8006d2a:	f8d0 a000 	ldr.w	sl, [r0]
 8006d2e:	4650      	mov	r0, sl
 8006d30:	f7f9 fa4e 	bl	80001d0 <strlen>
 8006d34:	2300      	movs	r3, #0
 8006d36:	930a      	str	r3, [sp, #40]	; 0x28
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d44:	3307      	adds	r3, #7
 8006d46:	f023 0307 	bic.w	r3, r3, #7
 8006d4a:	f103 0208 	add.w	r2, r3, #8
 8006d4e:	f8c8 2000 	str.w	r2, [r8]
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d62:	9307      	str	r3, [sp, #28]
 8006d64:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d68:	ee08 0a10 	vmov	s16, r0
 8006d6c:	4b9f      	ldr	r3, [pc, #636]	; (8006fec <_printf_float+0x2dc>)
 8006d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d72:	f04f 32ff 	mov.w	r2, #4294967295
 8006d76:	f7f9 fed9 	bl	8000b2c <__aeabi_dcmpun>
 8006d7a:	bb88      	cbnz	r0, 8006de0 <_printf_float+0xd0>
 8006d7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d80:	4b9a      	ldr	r3, [pc, #616]	; (8006fec <_printf_float+0x2dc>)
 8006d82:	f04f 32ff 	mov.w	r2, #4294967295
 8006d86:	f7f9 feb3 	bl	8000af0 <__aeabi_dcmple>
 8006d8a:	bb48      	cbnz	r0, 8006de0 <_printf_float+0xd0>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4640      	mov	r0, r8
 8006d92:	4649      	mov	r1, r9
 8006d94:	f7f9 fea2 	bl	8000adc <__aeabi_dcmplt>
 8006d98:	b110      	cbz	r0, 8006da0 <_printf_float+0x90>
 8006d9a:	232d      	movs	r3, #45	; 0x2d
 8006d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da0:	4b93      	ldr	r3, [pc, #588]	; (8006ff0 <_printf_float+0x2e0>)
 8006da2:	4894      	ldr	r0, [pc, #592]	; (8006ff4 <_printf_float+0x2e4>)
 8006da4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006da8:	bf94      	ite	ls
 8006daa:	4698      	movls	r8, r3
 8006dac:	4680      	movhi	r8, r0
 8006dae:	2303      	movs	r3, #3
 8006db0:	6123      	str	r3, [r4, #16]
 8006db2:	9b05      	ldr	r3, [sp, #20]
 8006db4:	f023 0204 	bic.w	r2, r3, #4
 8006db8:	6022      	str	r2, [r4, #0]
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	9700      	str	r7, [sp, #0]
 8006dc0:	4633      	mov	r3, r6
 8006dc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f9d8 	bl	800717c <_printf_common>
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f040 8090 	bne.w	8006ef2 <_printf_float+0x1e2>
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	b00d      	add	sp, #52	; 0x34
 8006dd8:	ecbd 8b02 	vpop	{d8}
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	4640      	mov	r0, r8
 8006de6:	4649      	mov	r1, r9
 8006de8:	f7f9 fea0 	bl	8000b2c <__aeabi_dcmpun>
 8006dec:	b140      	cbz	r0, 8006e00 <_printf_float+0xf0>
 8006dee:	464b      	mov	r3, r9
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bfbc      	itt	lt
 8006df4:	232d      	movlt	r3, #45	; 0x2d
 8006df6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dfa:	487f      	ldr	r0, [pc, #508]	; (8006ff8 <_printf_float+0x2e8>)
 8006dfc:	4b7f      	ldr	r3, [pc, #508]	; (8006ffc <_printf_float+0x2ec>)
 8006dfe:	e7d1      	b.n	8006da4 <_printf_float+0x94>
 8006e00:	6863      	ldr	r3, [r4, #4]
 8006e02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e06:	9206      	str	r2, [sp, #24]
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	d13f      	bne.n	8006e8c <_printf_float+0x17c>
 8006e0c:	2306      	movs	r3, #6
 8006e0e:	6063      	str	r3, [r4, #4]
 8006e10:	9b05      	ldr	r3, [sp, #20]
 8006e12:	6861      	ldr	r1, [r4, #4]
 8006e14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9303      	str	r3, [sp, #12]
 8006e1c:	ab0a      	add	r3, sp, #40	; 0x28
 8006e1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e22:	ab09      	add	r3, sp, #36	; 0x24
 8006e24:	ec49 8b10 	vmov	d0, r8, r9
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	6022      	str	r2, [r4, #0]
 8006e2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e30:	4628      	mov	r0, r5
 8006e32:	f7ff fecd 	bl	8006bd0 <__cvt>
 8006e36:	9b06      	ldr	r3, [sp, #24]
 8006e38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e3a:	2b47      	cmp	r3, #71	; 0x47
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	d108      	bne.n	8006e52 <_printf_float+0x142>
 8006e40:	1cc8      	adds	r0, r1, #3
 8006e42:	db02      	blt.n	8006e4a <_printf_float+0x13a>
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	4299      	cmp	r1, r3
 8006e48:	dd41      	ble.n	8006ece <_printf_float+0x1be>
 8006e4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e4e:	fa5f fb8b 	uxtb.w	fp, fp
 8006e52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e56:	d820      	bhi.n	8006e9a <_printf_float+0x18a>
 8006e58:	3901      	subs	r1, #1
 8006e5a:	465a      	mov	r2, fp
 8006e5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e60:	9109      	str	r1, [sp, #36]	; 0x24
 8006e62:	f7ff ff17 	bl	8006c94 <__exponent>
 8006e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e68:	1813      	adds	r3, r2, r0
 8006e6a:	2a01      	cmp	r2, #1
 8006e6c:	4681      	mov	r9, r0
 8006e6e:	6123      	str	r3, [r4, #16]
 8006e70:	dc02      	bgt.n	8006e78 <_printf_float+0x168>
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	07d2      	lsls	r2, r2, #31
 8006e76:	d501      	bpl.n	8006e7c <_printf_float+0x16c>
 8006e78:	3301      	adds	r3, #1
 8006e7a:	6123      	str	r3, [r4, #16]
 8006e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d09c      	beq.n	8006dbe <_printf_float+0xae>
 8006e84:	232d      	movs	r3, #45	; 0x2d
 8006e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e8a:	e798      	b.n	8006dbe <_printf_float+0xae>
 8006e8c:	9a06      	ldr	r2, [sp, #24]
 8006e8e:	2a47      	cmp	r2, #71	; 0x47
 8006e90:	d1be      	bne.n	8006e10 <_printf_float+0x100>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1bc      	bne.n	8006e10 <_printf_float+0x100>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7b9      	b.n	8006e0e <_printf_float+0xfe>
 8006e9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e9e:	d118      	bne.n	8006ed2 <_printf_float+0x1c2>
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	dd0b      	ble.n	8006ebe <_printf_float+0x1ae>
 8006ea6:	6121      	str	r1, [r4, #16]
 8006ea8:	b913      	cbnz	r3, 8006eb0 <_printf_float+0x1a0>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	07d0      	lsls	r0, r2, #31
 8006eae:	d502      	bpl.n	8006eb6 <_printf_float+0x1a6>
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	440b      	add	r3, r1
 8006eb4:	6123      	str	r3, [r4, #16]
 8006eb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006eb8:	f04f 0900 	mov.w	r9, #0
 8006ebc:	e7de      	b.n	8006e7c <_printf_float+0x16c>
 8006ebe:	b913      	cbnz	r3, 8006ec6 <_printf_float+0x1b6>
 8006ec0:	6822      	ldr	r2, [r4, #0]
 8006ec2:	07d2      	lsls	r2, r2, #31
 8006ec4:	d501      	bpl.n	8006eca <_printf_float+0x1ba>
 8006ec6:	3302      	adds	r3, #2
 8006ec8:	e7f4      	b.n	8006eb4 <_printf_float+0x1a4>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e7f2      	b.n	8006eb4 <_printf_float+0x1a4>
 8006ece:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	db05      	blt.n	8006ee4 <_printf_float+0x1d4>
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	6121      	str	r1, [r4, #16]
 8006edc:	07d8      	lsls	r0, r3, #31
 8006ede:	d5ea      	bpl.n	8006eb6 <_printf_float+0x1a6>
 8006ee0:	1c4b      	adds	r3, r1, #1
 8006ee2:	e7e7      	b.n	8006eb4 <_printf_float+0x1a4>
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	bfd4      	ite	le
 8006ee8:	f1c1 0202 	rsble	r2, r1, #2
 8006eec:	2201      	movgt	r2, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	e7e0      	b.n	8006eb4 <_printf_float+0x1a4>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	055a      	lsls	r2, r3, #21
 8006ef6:	d407      	bmi.n	8006f08 <_printf_float+0x1f8>
 8006ef8:	6923      	ldr	r3, [r4, #16]
 8006efa:	4642      	mov	r2, r8
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	d12c      	bne.n	8006f60 <_printf_float+0x250>
 8006f06:	e764      	b.n	8006dd2 <_printf_float+0xc2>
 8006f08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f0c:	f240 80e0 	bls.w	80070d0 <_printf_float+0x3c0>
 8006f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f14:	2200      	movs	r2, #0
 8006f16:	2300      	movs	r3, #0
 8006f18:	f7f9 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d034      	beq.n	8006f8a <_printf_float+0x27a>
 8006f20:	4a37      	ldr	r2, [pc, #220]	; (8007000 <_printf_float+0x2f0>)
 8006f22:	2301      	movs	r3, #1
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b8      	blx	r7
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	f43f af51 	beq.w	8006dd2 <_printf_float+0xc2>
 8006f30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f34:	429a      	cmp	r2, r3
 8006f36:	db02      	blt.n	8006f3e <_printf_float+0x22e>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	07d8      	lsls	r0, r3, #31
 8006f3c:	d510      	bpl.n	8006f60 <_printf_float+0x250>
 8006f3e:	ee18 3a10 	vmov	r3, s16
 8006f42:	4652      	mov	r2, sl
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af41 	beq.w	8006dd2 <_printf_float+0xc2>
 8006f50:	f04f 0800 	mov.w	r8, #0
 8006f54:	f104 091a 	add.w	r9, r4, #26
 8006f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	4543      	cmp	r3, r8
 8006f5e:	dc09      	bgt.n	8006f74 <_printf_float+0x264>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	079b      	lsls	r3, r3, #30
 8006f64:	f100 8105 	bmi.w	8007172 <_printf_float+0x462>
 8006f68:	68e0      	ldr	r0, [r4, #12]
 8006f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f6c:	4298      	cmp	r0, r3
 8006f6e:	bfb8      	it	lt
 8006f70:	4618      	movlt	r0, r3
 8006f72:	e730      	b.n	8006dd6 <_printf_float+0xc6>
 8006f74:	2301      	movs	r3, #1
 8006f76:	464a      	mov	r2, r9
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	47b8      	blx	r7
 8006f7e:	3001      	adds	r0, #1
 8006f80:	f43f af27 	beq.w	8006dd2 <_printf_float+0xc2>
 8006f84:	f108 0801 	add.w	r8, r8, #1
 8006f88:	e7e6      	b.n	8006f58 <_printf_float+0x248>
 8006f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	dc39      	bgt.n	8007004 <_printf_float+0x2f4>
 8006f90:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <_printf_float+0x2f0>)
 8006f92:	2301      	movs	r3, #1
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f43f af19 	beq.w	8006dd2 <_printf_float+0xc2>
 8006fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	d102      	bne.n	8006fae <_printf_float+0x29e>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	07d9      	lsls	r1, r3, #31
 8006fac:	d5d8      	bpl.n	8006f60 <_printf_float+0x250>
 8006fae:	ee18 3a10 	vmov	r3, s16
 8006fb2:	4652      	mov	r2, sl
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f43f af09 	beq.w	8006dd2 <_printf_float+0xc2>
 8006fc0:	f04f 0900 	mov.w	r9, #0
 8006fc4:	f104 0a1a 	add.w	sl, r4, #26
 8006fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fca:	425b      	negs	r3, r3
 8006fcc:	454b      	cmp	r3, r9
 8006fce:	dc01      	bgt.n	8006fd4 <_printf_float+0x2c4>
 8006fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd2:	e792      	b.n	8006efa <_printf_float+0x1ea>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4652      	mov	r2, sl
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	47b8      	blx	r7
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f43f aef7 	beq.w	8006dd2 <_printf_float+0xc2>
 8006fe4:	f109 0901 	add.w	r9, r9, #1
 8006fe8:	e7ee      	b.n	8006fc8 <_printf_float+0x2b8>
 8006fea:	bf00      	nop
 8006fec:	7fefffff 	.word	0x7fefffff
 8006ff0:	0800caec 	.word	0x0800caec
 8006ff4:	0800caf0 	.word	0x0800caf0
 8006ff8:	0800caf8 	.word	0x0800caf8
 8006ffc:	0800caf4 	.word	0x0800caf4
 8007000:	0800cafc 	.word	0x0800cafc
 8007004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007008:	429a      	cmp	r2, r3
 800700a:	bfa8      	it	ge
 800700c:	461a      	movge	r2, r3
 800700e:	2a00      	cmp	r2, #0
 8007010:	4691      	mov	r9, r2
 8007012:	dc37      	bgt.n	8007084 <_printf_float+0x374>
 8007014:	f04f 0b00 	mov.w	fp, #0
 8007018:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800701c:	f104 021a 	add.w	r2, r4, #26
 8007020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007022:	9305      	str	r3, [sp, #20]
 8007024:	eba3 0309 	sub.w	r3, r3, r9
 8007028:	455b      	cmp	r3, fp
 800702a:	dc33      	bgt.n	8007094 <_printf_float+0x384>
 800702c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007030:	429a      	cmp	r2, r3
 8007032:	db3b      	blt.n	80070ac <_printf_float+0x39c>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	07da      	lsls	r2, r3, #31
 8007038:	d438      	bmi.n	80070ac <_printf_float+0x39c>
 800703a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703c:	9a05      	ldr	r2, [sp, #20]
 800703e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007040:	1a9a      	subs	r2, r3, r2
 8007042:	eba3 0901 	sub.w	r9, r3, r1
 8007046:	4591      	cmp	r9, r2
 8007048:	bfa8      	it	ge
 800704a:	4691      	movge	r9, r2
 800704c:	f1b9 0f00 	cmp.w	r9, #0
 8007050:	dc35      	bgt.n	80070be <_printf_float+0x3ae>
 8007052:	f04f 0800 	mov.w	r8, #0
 8007056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800705a:	f104 0a1a 	add.w	sl, r4, #26
 800705e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	eba3 0309 	sub.w	r3, r3, r9
 8007068:	4543      	cmp	r3, r8
 800706a:	f77f af79 	ble.w	8006f60 <_printf_float+0x250>
 800706e:	2301      	movs	r3, #1
 8007070:	4652      	mov	r2, sl
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	f43f aeaa 	beq.w	8006dd2 <_printf_float+0xc2>
 800707e:	f108 0801 	add.w	r8, r8, #1
 8007082:	e7ec      	b.n	800705e <_printf_float+0x34e>
 8007084:	4613      	mov	r3, r2
 8007086:	4631      	mov	r1, r6
 8007088:	4642      	mov	r2, r8
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	d1c0      	bne.n	8007014 <_printf_float+0x304>
 8007092:	e69e      	b.n	8006dd2 <_printf_float+0xc2>
 8007094:	2301      	movs	r3, #1
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	9205      	str	r2, [sp, #20]
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	f43f ae97 	beq.w	8006dd2 <_printf_float+0xc2>
 80070a4:	9a05      	ldr	r2, [sp, #20]
 80070a6:	f10b 0b01 	add.w	fp, fp, #1
 80070aa:	e7b9      	b.n	8007020 <_printf_float+0x310>
 80070ac:	ee18 3a10 	vmov	r3, s16
 80070b0:	4652      	mov	r2, sl
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	d1be      	bne.n	800703a <_printf_float+0x32a>
 80070bc:	e689      	b.n	8006dd2 <_printf_float+0xc2>
 80070be:	9a05      	ldr	r2, [sp, #20]
 80070c0:	464b      	mov	r3, r9
 80070c2:	4442      	add	r2, r8
 80070c4:	4631      	mov	r1, r6
 80070c6:	4628      	mov	r0, r5
 80070c8:	47b8      	blx	r7
 80070ca:	3001      	adds	r0, #1
 80070cc:	d1c1      	bne.n	8007052 <_printf_float+0x342>
 80070ce:	e680      	b.n	8006dd2 <_printf_float+0xc2>
 80070d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070d2:	2a01      	cmp	r2, #1
 80070d4:	dc01      	bgt.n	80070da <_printf_float+0x3ca>
 80070d6:	07db      	lsls	r3, r3, #31
 80070d8:	d538      	bpl.n	800714c <_printf_float+0x43c>
 80070da:	2301      	movs	r3, #1
 80070dc:	4642      	mov	r2, r8
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f ae74 	beq.w	8006dd2 <_printf_float+0xc2>
 80070ea:	ee18 3a10 	vmov	r3, s16
 80070ee:	4652      	mov	r2, sl
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	47b8      	blx	r7
 80070f6:	3001      	adds	r0, #1
 80070f8:	f43f ae6b 	beq.w	8006dd2 <_printf_float+0xc2>
 80070fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007100:	2200      	movs	r2, #0
 8007102:	2300      	movs	r3, #0
 8007104:	f7f9 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007108:	b9d8      	cbnz	r0, 8007142 <_printf_float+0x432>
 800710a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710c:	f108 0201 	add.w	r2, r8, #1
 8007110:	3b01      	subs	r3, #1
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	d10e      	bne.n	800713a <_printf_float+0x42a>
 800711c:	e659      	b.n	8006dd2 <_printf_float+0xc2>
 800711e:	2301      	movs	r3, #1
 8007120:	4652      	mov	r2, sl
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f ae52 	beq.w	8006dd2 <_printf_float+0xc2>
 800712e:	f108 0801 	add.w	r8, r8, #1
 8007132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007134:	3b01      	subs	r3, #1
 8007136:	4543      	cmp	r3, r8
 8007138:	dcf1      	bgt.n	800711e <_printf_float+0x40e>
 800713a:	464b      	mov	r3, r9
 800713c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007140:	e6dc      	b.n	8006efc <_printf_float+0x1ec>
 8007142:	f04f 0800 	mov.w	r8, #0
 8007146:	f104 0a1a 	add.w	sl, r4, #26
 800714a:	e7f2      	b.n	8007132 <_printf_float+0x422>
 800714c:	2301      	movs	r3, #1
 800714e:	4642      	mov	r2, r8
 8007150:	e7df      	b.n	8007112 <_printf_float+0x402>
 8007152:	2301      	movs	r3, #1
 8007154:	464a      	mov	r2, r9
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f ae38 	beq.w	8006dd2 <_printf_float+0xc2>
 8007162:	f108 0801 	add.w	r8, r8, #1
 8007166:	68e3      	ldr	r3, [r4, #12]
 8007168:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800716a:	1a5b      	subs	r3, r3, r1
 800716c:	4543      	cmp	r3, r8
 800716e:	dcf0      	bgt.n	8007152 <_printf_float+0x442>
 8007170:	e6fa      	b.n	8006f68 <_printf_float+0x258>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	f104 0919 	add.w	r9, r4, #25
 800717a:	e7f4      	b.n	8007166 <_printf_float+0x456>

0800717c <_printf_common>:
 800717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	4616      	mov	r6, r2
 8007182:	4699      	mov	r9, r3
 8007184:	688a      	ldr	r2, [r1, #8]
 8007186:	690b      	ldr	r3, [r1, #16]
 8007188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800718c:	4293      	cmp	r3, r2
 800718e:	bfb8      	it	lt
 8007190:	4613      	movlt	r3, r2
 8007192:	6033      	str	r3, [r6, #0]
 8007194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007198:	4607      	mov	r7, r0
 800719a:	460c      	mov	r4, r1
 800719c:	b10a      	cbz	r2, 80071a2 <_printf_common+0x26>
 800719e:	3301      	adds	r3, #1
 80071a0:	6033      	str	r3, [r6, #0]
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	0699      	lsls	r1, r3, #26
 80071a6:	bf42      	ittt	mi
 80071a8:	6833      	ldrmi	r3, [r6, #0]
 80071aa:	3302      	addmi	r3, #2
 80071ac:	6033      	strmi	r3, [r6, #0]
 80071ae:	6825      	ldr	r5, [r4, #0]
 80071b0:	f015 0506 	ands.w	r5, r5, #6
 80071b4:	d106      	bne.n	80071c4 <_printf_common+0x48>
 80071b6:	f104 0a19 	add.w	sl, r4, #25
 80071ba:	68e3      	ldr	r3, [r4, #12]
 80071bc:	6832      	ldr	r2, [r6, #0]
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	dc26      	bgt.n	8007212 <_printf_common+0x96>
 80071c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071c8:	1e13      	subs	r3, r2, #0
 80071ca:	6822      	ldr	r2, [r4, #0]
 80071cc:	bf18      	it	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	0692      	lsls	r2, r2, #26
 80071d2:	d42b      	bmi.n	800722c <_printf_common+0xb0>
 80071d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071d8:	4649      	mov	r1, r9
 80071da:	4638      	mov	r0, r7
 80071dc:	47c0      	blx	r8
 80071de:	3001      	adds	r0, #1
 80071e0:	d01e      	beq.n	8007220 <_printf_common+0xa4>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	68e5      	ldr	r5, [r4, #12]
 80071e6:	6832      	ldr	r2, [r6, #0]
 80071e8:	f003 0306 	and.w	r3, r3, #6
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	bf08      	it	eq
 80071f0:	1aad      	subeq	r5, r5, r2
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	6922      	ldr	r2, [r4, #16]
 80071f6:	bf0c      	ite	eq
 80071f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071fc:	2500      	movne	r5, #0
 80071fe:	4293      	cmp	r3, r2
 8007200:	bfc4      	itt	gt
 8007202:	1a9b      	subgt	r3, r3, r2
 8007204:	18ed      	addgt	r5, r5, r3
 8007206:	2600      	movs	r6, #0
 8007208:	341a      	adds	r4, #26
 800720a:	42b5      	cmp	r5, r6
 800720c:	d11a      	bne.n	8007244 <_printf_common+0xc8>
 800720e:	2000      	movs	r0, #0
 8007210:	e008      	b.n	8007224 <_printf_common+0xa8>
 8007212:	2301      	movs	r3, #1
 8007214:	4652      	mov	r2, sl
 8007216:	4649      	mov	r1, r9
 8007218:	4638      	mov	r0, r7
 800721a:	47c0      	blx	r8
 800721c:	3001      	adds	r0, #1
 800721e:	d103      	bne.n	8007228 <_printf_common+0xac>
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007228:	3501      	adds	r5, #1
 800722a:	e7c6      	b.n	80071ba <_printf_common+0x3e>
 800722c:	18e1      	adds	r1, r4, r3
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	2030      	movs	r0, #48	; 0x30
 8007232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007236:	4422      	add	r2, r4
 8007238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800723c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007240:	3302      	adds	r3, #2
 8007242:	e7c7      	b.n	80071d4 <_printf_common+0x58>
 8007244:	2301      	movs	r3, #1
 8007246:	4622      	mov	r2, r4
 8007248:	4649      	mov	r1, r9
 800724a:	4638      	mov	r0, r7
 800724c:	47c0      	blx	r8
 800724e:	3001      	adds	r0, #1
 8007250:	d0e6      	beq.n	8007220 <_printf_common+0xa4>
 8007252:	3601      	adds	r6, #1
 8007254:	e7d9      	b.n	800720a <_printf_common+0x8e>
	...

08007258 <_printf_i>:
 8007258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	7e0f      	ldrb	r7, [r1, #24]
 800725e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007260:	2f78      	cmp	r7, #120	; 0x78
 8007262:	4691      	mov	r9, r2
 8007264:	4680      	mov	r8, r0
 8007266:	460c      	mov	r4, r1
 8007268:	469a      	mov	sl, r3
 800726a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800726e:	d807      	bhi.n	8007280 <_printf_i+0x28>
 8007270:	2f62      	cmp	r7, #98	; 0x62
 8007272:	d80a      	bhi.n	800728a <_printf_i+0x32>
 8007274:	2f00      	cmp	r7, #0
 8007276:	f000 80d8 	beq.w	800742a <_printf_i+0x1d2>
 800727a:	2f58      	cmp	r7, #88	; 0x58
 800727c:	f000 80a3 	beq.w	80073c6 <_printf_i+0x16e>
 8007280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007288:	e03a      	b.n	8007300 <_printf_i+0xa8>
 800728a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800728e:	2b15      	cmp	r3, #21
 8007290:	d8f6      	bhi.n	8007280 <_printf_i+0x28>
 8007292:	a101      	add	r1, pc, #4	; (adr r1, 8007298 <_printf_i+0x40>)
 8007294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007298:	080072f1 	.word	0x080072f1
 800729c:	08007305 	.word	0x08007305
 80072a0:	08007281 	.word	0x08007281
 80072a4:	08007281 	.word	0x08007281
 80072a8:	08007281 	.word	0x08007281
 80072ac:	08007281 	.word	0x08007281
 80072b0:	08007305 	.word	0x08007305
 80072b4:	08007281 	.word	0x08007281
 80072b8:	08007281 	.word	0x08007281
 80072bc:	08007281 	.word	0x08007281
 80072c0:	08007281 	.word	0x08007281
 80072c4:	08007411 	.word	0x08007411
 80072c8:	08007335 	.word	0x08007335
 80072cc:	080073f3 	.word	0x080073f3
 80072d0:	08007281 	.word	0x08007281
 80072d4:	08007281 	.word	0x08007281
 80072d8:	08007433 	.word	0x08007433
 80072dc:	08007281 	.word	0x08007281
 80072e0:	08007335 	.word	0x08007335
 80072e4:	08007281 	.word	0x08007281
 80072e8:	08007281 	.word	0x08007281
 80072ec:	080073fb 	.word	0x080073fb
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	1d1a      	adds	r2, r3, #4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	602a      	str	r2, [r5, #0]
 80072f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007300:	2301      	movs	r3, #1
 8007302:	e0a3      	b.n	800744c <_printf_i+0x1f4>
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	6829      	ldr	r1, [r5, #0]
 8007308:	0606      	lsls	r6, r0, #24
 800730a:	f101 0304 	add.w	r3, r1, #4
 800730e:	d50a      	bpl.n	8007326 <_printf_i+0xce>
 8007310:	680e      	ldr	r6, [r1, #0]
 8007312:	602b      	str	r3, [r5, #0]
 8007314:	2e00      	cmp	r6, #0
 8007316:	da03      	bge.n	8007320 <_printf_i+0xc8>
 8007318:	232d      	movs	r3, #45	; 0x2d
 800731a:	4276      	negs	r6, r6
 800731c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007320:	485e      	ldr	r0, [pc, #376]	; (800749c <_printf_i+0x244>)
 8007322:	230a      	movs	r3, #10
 8007324:	e019      	b.n	800735a <_printf_i+0x102>
 8007326:	680e      	ldr	r6, [r1, #0]
 8007328:	602b      	str	r3, [r5, #0]
 800732a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800732e:	bf18      	it	ne
 8007330:	b236      	sxthne	r6, r6
 8007332:	e7ef      	b.n	8007314 <_printf_i+0xbc>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	6820      	ldr	r0, [r4, #0]
 8007338:	1d19      	adds	r1, r3, #4
 800733a:	6029      	str	r1, [r5, #0]
 800733c:	0601      	lsls	r1, r0, #24
 800733e:	d501      	bpl.n	8007344 <_printf_i+0xec>
 8007340:	681e      	ldr	r6, [r3, #0]
 8007342:	e002      	b.n	800734a <_printf_i+0xf2>
 8007344:	0646      	lsls	r6, r0, #25
 8007346:	d5fb      	bpl.n	8007340 <_printf_i+0xe8>
 8007348:	881e      	ldrh	r6, [r3, #0]
 800734a:	4854      	ldr	r0, [pc, #336]	; (800749c <_printf_i+0x244>)
 800734c:	2f6f      	cmp	r7, #111	; 0x6f
 800734e:	bf0c      	ite	eq
 8007350:	2308      	moveq	r3, #8
 8007352:	230a      	movne	r3, #10
 8007354:	2100      	movs	r1, #0
 8007356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800735a:	6865      	ldr	r5, [r4, #4]
 800735c:	60a5      	str	r5, [r4, #8]
 800735e:	2d00      	cmp	r5, #0
 8007360:	bfa2      	ittt	ge
 8007362:	6821      	ldrge	r1, [r4, #0]
 8007364:	f021 0104 	bicge.w	r1, r1, #4
 8007368:	6021      	strge	r1, [r4, #0]
 800736a:	b90e      	cbnz	r6, 8007370 <_printf_i+0x118>
 800736c:	2d00      	cmp	r5, #0
 800736e:	d04d      	beq.n	800740c <_printf_i+0x1b4>
 8007370:	4615      	mov	r5, r2
 8007372:	fbb6 f1f3 	udiv	r1, r6, r3
 8007376:	fb03 6711 	mls	r7, r3, r1, r6
 800737a:	5dc7      	ldrb	r7, [r0, r7]
 800737c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007380:	4637      	mov	r7, r6
 8007382:	42bb      	cmp	r3, r7
 8007384:	460e      	mov	r6, r1
 8007386:	d9f4      	bls.n	8007372 <_printf_i+0x11a>
 8007388:	2b08      	cmp	r3, #8
 800738a:	d10b      	bne.n	80073a4 <_printf_i+0x14c>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	07de      	lsls	r6, r3, #31
 8007390:	d508      	bpl.n	80073a4 <_printf_i+0x14c>
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4299      	cmp	r1, r3
 8007398:	bfde      	ittt	le
 800739a:	2330      	movle	r3, #48	; 0x30
 800739c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073a4:	1b52      	subs	r2, r2, r5
 80073a6:	6122      	str	r2, [r4, #16]
 80073a8:	f8cd a000 	str.w	sl, [sp]
 80073ac:	464b      	mov	r3, r9
 80073ae:	aa03      	add	r2, sp, #12
 80073b0:	4621      	mov	r1, r4
 80073b2:	4640      	mov	r0, r8
 80073b4:	f7ff fee2 	bl	800717c <_printf_common>
 80073b8:	3001      	adds	r0, #1
 80073ba:	d14c      	bne.n	8007456 <_printf_i+0x1fe>
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	b004      	add	sp, #16
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c6:	4835      	ldr	r0, [pc, #212]	; (800749c <_printf_i+0x244>)
 80073c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073cc:	6829      	ldr	r1, [r5, #0]
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80073d4:	6029      	str	r1, [r5, #0]
 80073d6:	061d      	lsls	r5, r3, #24
 80073d8:	d514      	bpl.n	8007404 <_printf_i+0x1ac>
 80073da:	07df      	lsls	r7, r3, #31
 80073dc:	bf44      	itt	mi
 80073de:	f043 0320 	orrmi.w	r3, r3, #32
 80073e2:	6023      	strmi	r3, [r4, #0]
 80073e4:	b91e      	cbnz	r6, 80073ee <_printf_i+0x196>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	f023 0320 	bic.w	r3, r3, #32
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	2310      	movs	r3, #16
 80073f0:	e7b0      	b.n	8007354 <_printf_i+0xfc>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	f043 0320 	orr.w	r3, r3, #32
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	2378      	movs	r3, #120	; 0x78
 80073fc:	4828      	ldr	r0, [pc, #160]	; (80074a0 <_printf_i+0x248>)
 80073fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007402:	e7e3      	b.n	80073cc <_printf_i+0x174>
 8007404:	0659      	lsls	r1, r3, #25
 8007406:	bf48      	it	mi
 8007408:	b2b6      	uxthmi	r6, r6
 800740a:	e7e6      	b.n	80073da <_printf_i+0x182>
 800740c:	4615      	mov	r5, r2
 800740e:	e7bb      	b.n	8007388 <_printf_i+0x130>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	6826      	ldr	r6, [r4, #0]
 8007414:	6961      	ldr	r1, [r4, #20]
 8007416:	1d18      	adds	r0, r3, #4
 8007418:	6028      	str	r0, [r5, #0]
 800741a:	0635      	lsls	r5, r6, #24
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	d501      	bpl.n	8007424 <_printf_i+0x1cc>
 8007420:	6019      	str	r1, [r3, #0]
 8007422:	e002      	b.n	800742a <_printf_i+0x1d2>
 8007424:	0670      	lsls	r0, r6, #25
 8007426:	d5fb      	bpl.n	8007420 <_printf_i+0x1c8>
 8007428:	8019      	strh	r1, [r3, #0]
 800742a:	2300      	movs	r3, #0
 800742c:	6123      	str	r3, [r4, #16]
 800742e:	4615      	mov	r5, r2
 8007430:	e7ba      	b.n	80073a8 <_printf_i+0x150>
 8007432:	682b      	ldr	r3, [r5, #0]
 8007434:	1d1a      	adds	r2, r3, #4
 8007436:	602a      	str	r2, [r5, #0]
 8007438:	681d      	ldr	r5, [r3, #0]
 800743a:	6862      	ldr	r2, [r4, #4]
 800743c:	2100      	movs	r1, #0
 800743e:	4628      	mov	r0, r5
 8007440:	f7f8 fece 	bl	80001e0 <memchr>
 8007444:	b108      	cbz	r0, 800744a <_printf_i+0x1f2>
 8007446:	1b40      	subs	r0, r0, r5
 8007448:	6060      	str	r0, [r4, #4]
 800744a:	6863      	ldr	r3, [r4, #4]
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	2300      	movs	r3, #0
 8007450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007454:	e7a8      	b.n	80073a8 <_printf_i+0x150>
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	462a      	mov	r2, r5
 800745a:	4649      	mov	r1, r9
 800745c:	4640      	mov	r0, r8
 800745e:	47d0      	blx	sl
 8007460:	3001      	adds	r0, #1
 8007462:	d0ab      	beq.n	80073bc <_printf_i+0x164>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	079b      	lsls	r3, r3, #30
 8007468:	d413      	bmi.n	8007492 <_printf_i+0x23a>
 800746a:	68e0      	ldr	r0, [r4, #12]
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	4298      	cmp	r0, r3
 8007470:	bfb8      	it	lt
 8007472:	4618      	movlt	r0, r3
 8007474:	e7a4      	b.n	80073c0 <_printf_i+0x168>
 8007476:	2301      	movs	r3, #1
 8007478:	4632      	mov	r2, r6
 800747a:	4649      	mov	r1, r9
 800747c:	4640      	mov	r0, r8
 800747e:	47d0      	blx	sl
 8007480:	3001      	adds	r0, #1
 8007482:	d09b      	beq.n	80073bc <_printf_i+0x164>
 8007484:	3501      	adds	r5, #1
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	9903      	ldr	r1, [sp, #12]
 800748a:	1a5b      	subs	r3, r3, r1
 800748c:	42ab      	cmp	r3, r5
 800748e:	dcf2      	bgt.n	8007476 <_printf_i+0x21e>
 8007490:	e7eb      	b.n	800746a <_printf_i+0x212>
 8007492:	2500      	movs	r5, #0
 8007494:	f104 0619 	add.w	r6, r4, #25
 8007498:	e7f5      	b.n	8007486 <_printf_i+0x22e>
 800749a:	bf00      	nop
 800749c:	0800cafe 	.word	0x0800cafe
 80074a0:	0800cb0f 	.word	0x0800cb0f

080074a4 <_sbrk_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d06      	ldr	r5, [pc, #24]	; (80074c0 <_sbrk_r+0x1c>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	602b      	str	r3, [r5, #0]
 80074b0:	f7fa fc20 	bl	8001cf4 <_sbrk>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_sbrk_r+0x1a>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_sbrk_r+0x1a>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	2000a66c 	.word	0x2000a66c

080074c4 <siprintf>:
 80074c4:	b40e      	push	{r1, r2, r3}
 80074c6:	b500      	push	{lr}
 80074c8:	b09c      	sub	sp, #112	; 0x70
 80074ca:	ab1d      	add	r3, sp, #116	; 0x74
 80074cc:	9002      	str	r0, [sp, #8]
 80074ce:	9006      	str	r0, [sp, #24]
 80074d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074d4:	4809      	ldr	r0, [pc, #36]	; (80074fc <siprintf+0x38>)
 80074d6:	9107      	str	r1, [sp, #28]
 80074d8:	9104      	str	r1, [sp, #16]
 80074da:	4909      	ldr	r1, [pc, #36]	; (8007500 <siprintf+0x3c>)
 80074dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e0:	9105      	str	r1, [sp, #20]
 80074e2:	6800      	ldr	r0, [r0, #0]
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	a902      	add	r1, sp, #8
 80074e8:	f001 fbba 	bl	8008c60 <_svfiprintf_r>
 80074ec:	9b02      	ldr	r3, [sp, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	b01c      	add	sp, #112	; 0x70
 80074f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074f8:	b003      	add	sp, #12
 80074fa:	4770      	bx	lr
 80074fc:	20000024 	.word	0x20000024
 8007500:	ffff0208 	.word	0xffff0208

08007504 <__sread>:
 8007504:	b510      	push	{r4, lr}
 8007506:	460c      	mov	r4, r1
 8007508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750c:	f001 fca8 	bl	8008e60 <_read_r>
 8007510:	2800      	cmp	r0, #0
 8007512:	bfab      	itete	ge
 8007514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007516:	89a3      	ldrhlt	r3, [r4, #12]
 8007518:	181b      	addge	r3, r3, r0
 800751a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800751e:	bfac      	ite	ge
 8007520:	6563      	strge	r3, [r4, #84]	; 0x54
 8007522:	81a3      	strhlt	r3, [r4, #12]
 8007524:	bd10      	pop	{r4, pc}

08007526 <__swrite>:
 8007526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752a:	461f      	mov	r7, r3
 800752c:	898b      	ldrh	r3, [r1, #12]
 800752e:	05db      	lsls	r3, r3, #23
 8007530:	4605      	mov	r5, r0
 8007532:	460c      	mov	r4, r1
 8007534:	4616      	mov	r6, r2
 8007536:	d505      	bpl.n	8007544 <__swrite+0x1e>
 8007538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753c:	2302      	movs	r3, #2
 800753e:	2200      	movs	r2, #0
 8007540:	f000 ff7a 	bl	8008438 <_lseek_r>
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800754e:	81a3      	strh	r3, [r4, #12]
 8007550:	4632      	mov	r2, r6
 8007552:	463b      	mov	r3, r7
 8007554:	4628      	mov	r0, r5
 8007556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800755a:	f000 b8ab 	b.w	80076b4 <_write_r>

0800755e <__sseek>:
 800755e:	b510      	push	{r4, lr}
 8007560:	460c      	mov	r4, r1
 8007562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007566:	f000 ff67 	bl	8008438 <_lseek_r>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	bf15      	itete	ne
 8007570:	6560      	strne	r0, [r4, #84]	; 0x54
 8007572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800757a:	81a3      	strheq	r3, [r4, #12]
 800757c:	bf18      	it	ne
 800757e:	81a3      	strhne	r3, [r4, #12]
 8007580:	bd10      	pop	{r4, pc}

08007582 <__sclose>:
 8007582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007586:	f000 b8a7 	b.w	80076d8 <_close_r>

0800758a <strcpy>:
 800758a:	4603      	mov	r3, r0
 800758c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007590:	f803 2b01 	strb.w	r2, [r3], #1
 8007594:	2a00      	cmp	r2, #0
 8007596:	d1f9      	bne.n	800758c <strcpy+0x2>
 8007598:	4770      	bx	lr
	...

0800759c <_strtol_l.constprop.0>:
 800759c:	2b01      	cmp	r3, #1
 800759e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a2:	d001      	beq.n	80075a8 <_strtol_l.constprop.0+0xc>
 80075a4:	2b24      	cmp	r3, #36	; 0x24
 80075a6:	d906      	bls.n	80075b6 <_strtol_l.constprop.0+0x1a>
 80075a8:	f7fe ffca 	bl	8006540 <__errno>
 80075ac:	2316      	movs	r3, #22
 80075ae:	6003      	str	r3, [r0, #0]
 80075b0:	2000      	movs	r0, #0
 80075b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800769c <_strtol_l.constprop.0+0x100>
 80075ba:	460d      	mov	r5, r1
 80075bc:	462e      	mov	r6, r5
 80075be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80075c6:	f017 0708 	ands.w	r7, r7, #8
 80075ca:	d1f7      	bne.n	80075bc <_strtol_l.constprop.0+0x20>
 80075cc:	2c2d      	cmp	r4, #45	; 0x2d
 80075ce:	d132      	bne.n	8007636 <_strtol_l.constprop.0+0x9a>
 80075d0:	782c      	ldrb	r4, [r5, #0]
 80075d2:	2701      	movs	r7, #1
 80075d4:	1cb5      	adds	r5, r6, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d05b      	beq.n	8007692 <_strtol_l.constprop.0+0xf6>
 80075da:	2b10      	cmp	r3, #16
 80075dc:	d109      	bne.n	80075f2 <_strtol_l.constprop.0+0x56>
 80075de:	2c30      	cmp	r4, #48	; 0x30
 80075e0:	d107      	bne.n	80075f2 <_strtol_l.constprop.0+0x56>
 80075e2:	782c      	ldrb	r4, [r5, #0]
 80075e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80075e8:	2c58      	cmp	r4, #88	; 0x58
 80075ea:	d14d      	bne.n	8007688 <_strtol_l.constprop.0+0xec>
 80075ec:	786c      	ldrb	r4, [r5, #1]
 80075ee:	2310      	movs	r3, #16
 80075f0:	3502      	adds	r5, #2
 80075f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80075f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80075fa:	f04f 0c00 	mov.w	ip, #0
 80075fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8007602:	4666      	mov	r6, ip
 8007604:	fb03 8a19 	mls	sl, r3, r9, r8
 8007608:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800760c:	f1be 0f09 	cmp.w	lr, #9
 8007610:	d816      	bhi.n	8007640 <_strtol_l.constprop.0+0xa4>
 8007612:	4674      	mov	r4, lr
 8007614:	42a3      	cmp	r3, r4
 8007616:	dd24      	ble.n	8007662 <_strtol_l.constprop.0+0xc6>
 8007618:	f1bc 0f00 	cmp.w	ip, #0
 800761c:	db1e      	blt.n	800765c <_strtol_l.constprop.0+0xc0>
 800761e:	45b1      	cmp	r9, r6
 8007620:	d31c      	bcc.n	800765c <_strtol_l.constprop.0+0xc0>
 8007622:	d101      	bne.n	8007628 <_strtol_l.constprop.0+0x8c>
 8007624:	45a2      	cmp	sl, r4
 8007626:	db19      	blt.n	800765c <_strtol_l.constprop.0+0xc0>
 8007628:	fb06 4603 	mla	r6, r6, r3, r4
 800762c:	f04f 0c01 	mov.w	ip, #1
 8007630:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007634:	e7e8      	b.n	8007608 <_strtol_l.constprop.0+0x6c>
 8007636:	2c2b      	cmp	r4, #43	; 0x2b
 8007638:	bf04      	itt	eq
 800763a:	782c      	ldrbeq	r4, [r5, #0]
 800763c:	1cb5      	addeq	r5, r6, #2
 800763e:	e7ca      	b.n	80075d6 <_strtol_l.constprop.0+0x3a>
 8007640:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007644:	f1be 0f19 	cmp.w	lr, #25
 8007648:	d801      	bhi.n	800764e <_strtol_l.constprop.0+0xb2>
 800764a:	3c37      	subs	r4, #55	; 0x37
 800764c:	e7e2      	b.n	8007614 <_strtol_l.constprop.0+0x78>
 800764e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007652:	f1be 0f19 	cmp.w	lr, #25
 8007656:	d804      	bhi.n	8007662 <_strtol_l.constprop.0+0xc6>
 8007658:	3c57      	subs	r4, #87	; 0x57
 800765a:	e7db      	b.n	8007614 <_strtol_l.constprop.0+0x78>
 800765c:	f04f 3cff 	mov.w	ip, #4294967295
 8007660:	e7e6      	b.n	8007630 <_strtol_l.constprop.0+0x94>
 8007662:	f1bc 0f00 	cmp.w	ip, #0
 8007666:	da05      	bge.n	8007674 <_strtol_l.constprop.0+0xd8>
 8007668:	2322      	movs	r3, #34	; 0x22
 800766a:	6003      	str	r3, [r0, #0]
 800766c:	4646      	mov	r6, r8
 800766e:	b942      	cbnz	r2, 8007682 <_strtol_l.constprop.0+0xe6>
 8007670:	4630      	mov	r0, r6
 8007672:	e79e      	b.n	80075b2 <_strtol_l.constprop.0+0x16>
 8007674:	b107      	cbz	r7, 8007678 <_strtol_l.constprop.0+0xdc>
 8007676:	4276      	negs	r6, r6
 8007678:	2a00      	cmp	r2, #0
 800767a:	d0f9      	beq.n	8007670 <_strtol_l.constprop.0+0xd4>
 800767c:	f1bc 0f00 	cmp.w	ip, #0
 8007680:	d000      	beq.n	8007684 <_strtol_l.constprop.0+0xe8>
 8007682:	1e69      	subs	r1, r5, #1
 8007684:	6011      	str	r1, [r2, #0]
 8007686:	e7f3      	b.n	8007670 <_strtol_l.constprop.0+0xd4>
 8007688:	2430      	movs	r4, #48	; 0x30
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1b1      	bne.n	80075f2 <_strtol_l.constprop.0+0x56>
 800768e:	2308      	movs	r3, #8
 8007690:	e7af      	b.n	80075f2 <_strtol_l.constprop.0+0x56>
 8007692:	2c30      	cmp	r4, #48	; 0x30
 8007694:	d0a5      	beq.n	80075e2 <_strtol_l.constprop.0+0x46>
 8007696:	230a      	movs	r3, #10
 8007698:	e7ab      	b.n	80075f2 <_strtol_l.constprop.0+0x56>
 800769a:	bf00      	nop
 800769c:	0800cb21 	.word	0x0800cb21

080076a0 <strtol>:
 80076a0:	4613      	mov	r3, r2
 80076a2:	460a      	mov	r2, r1
 80076a4:	4601      	mov	r1, r0
 80076a6:	4802      	ldr	r0, [pc, #8]	; (80076b0 <strtol+0x10>)
 80076a8:	6800      	ldr	r0, [r0, #0]
 80076aa:	f7ff bf77 	b.w	800759c <_strtol_l.constprop.0>
 80076ae:	bf00      	nop
 80076b0:	20000024 	.word	0x20000024

080076b4 <_write_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	; (80076d4 <_write_r+0x20>)
 80076b8:	4604      	mov	r4, r0
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	602a      	str	r2, [r5, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7fa fafc 	bl	8001cc0 <_write>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_write_r+0x1e>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_write_r+0x1e>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	2000a66c 	.word	0x2000a66c

080076d8 <_close_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d06      	ldr	r5, [pc, #24]	; (80076f4 <_close_r+0x1c>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f7fa fafa 	bl	8001cdc <_close>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_close_r+0x1a>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_close_r+0x1a>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	2000a66c 	.word	0x2000a66c

080076f8 <quorem>:
 80076f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	6903      	ldr	r3, [r0, #16]
 80076fe:	690c      	ldr	r4, [r1, #16]
 8007700:	42a3      	cmp	r3, r4
 8007702:	4607      	mov	r7, r0
 8007704:	f2c0 8081 	blt.w	800780a <quorem+0x112>
 8007708:	3c01      	subs	r4, #1
 800770a:	f101 0814 	add.w	r8, r1, #20
 800770e:	f100 0514 	add.w	r5, r0, #20
 8007712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800771c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007720:	3301      	adds	r3, #1
 8007722:	429a      	cmp	r2, r3
 8007724:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007728:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800772c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007730:	d331      	bcc.n	8007796 <quorem+0x9e>
 8007732:	f04f 0e00 	mov.w	lr, #0
 8007736:	4640      	mov	r0, r8
 8007738:	46ac      	mov	ip, r5
 800773a:	46f2      	mov	sl, lr
 800773c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007740:	b293      	uxth	r3, r2
 8007742:	fb06 e303 	mla	r3, r6, r3, lr
 8007746:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800774a:	b29b      	uxth	r3, r3
 800774c:	ebaa 0303 	sub.w	r3, sl, r3
 8007750:	f8dc a000 	ldr.w	sl, [ip]
 8007754:	0c12      	lsrs	r2, r2, #16
 8007756:	fa13 f38a 	uxtah	r3, r3, sl
 800775a:	fb06 e202 	mla	r2, r6, r2, lr
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	9b00      	ldr	r3, [sp, #0]
 8007762:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007766:	b292      	uxth	r2, r2
 8007768:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800776c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007770:	f8bd 3000 	ldrh.w	r3, [sp]
 8007774:	4581      	cmp	r9, r0
 8007776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800777a:	f84c 3b04 	str.w	r3, [ip], #4
 800777e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007782:	d2db      	bcs.n	800773c <quorem+0x44>
 8007784:	f855 300b 	ldr.w	r3, [r5, fp]
 8007788:	b92b      	cbnz	r3, 8007796 <quorem+0x9e>
 800778a:	9b01      	ldr	r3, [sp, #4]
 800778c:	3b04      	subs	r3, #4
 800778e:	429d      	cmp	r5, r3
 8007790:	461a      	mov	r2, r3
 8007792:	d32e      	bcc.n	80077f2 <quorem+0xfa>
 8007794:	613c      	str	r4, [r7, #16]
 8007796:	4638      	mov	r0, r7
 8007798:	f001 f8ee 	bl	8008978 <__mcmp>
 800779c:	2800      	cmp	r0, #0
 800779e:	db24      	blt.n	80077ea <quorem+0xf2>
 80077a0:	3601      	adds	r6, #1
 80077a2:	4628      	mov	r0, r5
 80077a4:	f04f 0c00 	mov.w	ip, #0
 80077a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80077ac:	f8d0 e000 	ldr.w	lr, [r0]
 80077b0:	b293      	uxth	r3, r2
 80077b2:	ebac 0303 	sub.w	r3, ip, r3
 80077b6:	0c12      	lsrs	r2, r2, #16
 80077b8:	fa13 f38e 	uxtah	r3, r3, lr
 80077bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077ca:	45c1      	cmp	r9, r8
 80077cc:	f840 3b04 	str.w	r3, [r0], #4
 80077d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077d4:	d2e8      	bcs.n	80077a8 <quorem+0xb0>
 80077d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077de:	b922      	cbnz	r2, 80077ea <quorem+0xf2>
 80077e0:	3b04      	subs	r3, #4
 80077e2:	429d      	cmp	r5, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	d30a      	bcc.n	80077fe <quorem+0x106>
 80077e8:	613c      	str	r4, [r7, #16]
 80077ea:	4630      	mov	r0, r6
 80077ec:	b003      	add	sp, #12
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	d1cc      	bne.n	8007794 <quorem+0x9c>
 80077fa:	3c01      	subs	r4, #1
 80077fc:	e7c7      	b.n	800778e <quorem+0x96>
 80077fe:	6812      	ldr	r2, [r2, #0]
 8007800:	3b04      	subs	r3, #4
 8007802:	2a00      	cmp	r2, #0
 8007804:	d1f0      	bne.n	80077e8 <quorem+0xf0>
 8007806:	3c01      	subs	r4, #1
 8007808:	e7eb      	b.n	80077e2 <quorem+0xea>
 800780a:	2000      	movs	r0, #0
 800780c:	e7ee      	b.n	80077ec <quorem+0xf4>
	...

08007810 <_dtoa_r>:
 8007810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	ed2d 8b04 	vpush	{d8-d9}
 8007818:	ec57 6b10 	vmov	r6, r7, d0
 800781c:	b093      	sub	sp, #76	; 0x4c
 800781e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007820:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007824:	9106      	str	r1, [sp, #24]
 8007826:	ee10 aa10 	vmov	sl, s0
 800782a:	4604      	mov	r4, r0
 800782c:	9209      	str	r2, [sp, #36]	; 0x24
 800782e:	930c      	str	r3, [sp, #48]	; 0x30
 8007830:	46bb      	mov	fp, r7
 8007832:	b975      	cbnz	r5, 8007852 <_dtoa_r+0x42>
 8007834:	2010      	movs	r0, #16
 8007836:	f7ff f8cd 	bl	80069d4 <malloc>
 800783a:	4602      	mov	r2, r0
 800783c:	6260      	str	r0, [r4, #36]	; 0x24
 800783e:	b920      	cbnz	r0, 800784a <_dtoa_r+0x3a>
 8007840:	4ba7      	ldr	r3, [pc, #668]	; (8007ae0 <_dtoa_r+0x2d0>)
 8007842:	21ea      	movs	r1, #234	; 0xea
 8007844:	48a7      	ldr	r0, [pc, #668]	; (8007ae4 <_dtoa_r+0x2d4>)
 8007846:	f001 fb1d 	bl	8008e84 <__assert_func>
 800784a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800784e:	6005      	str	r5, [r0, #0]
 8007850:	60c5      	str	r5, [r0, #12]
 8007852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007854:	6819      	ldr	r1, [r3, #0]
 8007856:	b151      	cbz	r1, 800786e <_dtoa_r+0x5e>
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	604a      	str	r2, [r1, #4]
 800785c:	2301      	movs	r3, #1
 800785e:	4093      	lsls	r3, r2
 8007860:	608b      	str	r3, [r1, #8]
 8007862:	4620      	mov	r0, r4
 8007864:	f000 fe46 	bl	80084f4 <_Bfree>
 8007868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	1e3b      	subs	r3, r7, #0
 8007870:	bfaa      	itet	ge
 8007872:	2300      	movge	r3, #0
 8007874:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007878:	f8c8 3000 	strge.w	r3, [r8]
 800787c:	4b9a      	ldr	r3, [pc, #616]	; (8007ae8 <_dtoa_r+0x2d8>)
 800787e:	bfbc      	itt	lt
 8007880:	2201      	movlt	r2, #1
 8007882:	f8c8 2000 	strlt.w	r2, [r8]
 8007886:	ea33 030b 	bics.w	r3, r3, fp
 800788a:	d11b      	bne.n	80078c4 <_dtoa_r+0xb4>
 800788c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800788e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007898:	4333      	orrs	r3, r6
 800789a:	f000 8592 	beq.w	80083c2 <_dtoa_r+0xbb2>
 800789e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078a0:	b963      	cbnz	r3, 80078bc <_dtoa_r+0xac>
 80078a2:	4b92      	ldr	r3, [pc, #584]	; (8007aec <_dtoa_r+0x2dc>)
 80078a4:	e022      	b.n	80078ec <_dtoa_r+0xdc>
 80078a6:	4b92      	ldr	r3, [pc, #584]	; (8007af0 <_dtoa_r+0x2e0>)
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	3308      	adds	r3, #8
 80078ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	9801      	ldr	r0, [sp, #4]
 80078b2:	b013      	add	sp, #76	; 0x4c
 80078b4:	ecbd 8b04 	vpop	{d8-d9}
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	4b8b      	ldr	r3, [pc, #556]	; (8007aec <_dtoa_r+0x2dc>)
 80078be:	9301      	str	r3, [sp, #4]
 80078c0:	3303      	adds	r3, #3
 80078c2:	e7f3      	b.n	80078ac <_dtoa_r+0x9c>
 80078c4:	2200      	movs	r2, #0
 80078c6:	2300      	movs	r3, #0
 80078c8:	4650      	mov	r0, sl
 80078ca:	4659      	mov	r1, fp
 80078cc:	f7f9 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80078d0:	ec4b ab19 	vmov	d9, sl, fp
 80078d4:	4680      	mov	r8, r0
 80078d6:	b158      	cbz	r0, 80078f0 <_dtoa_r+0xe0>
 80078d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078da:	2301      	movs	r3, #1
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 856b 	beq.w	80083bc <_dtoa_r+0xbac>
 80078e6:	4883      	ldr	r0, [pc, #524]	; (8007af4 <_dtoa_r+0x2e4>)
 80078e8:	6018      	str	r0, [r3, #0]
 80078ea:	1e43      	subs	r3, r0, #1
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	e7df      	b.n	80078b0 <_dtoa_r+0xa0>
 80078f0:	ec4b ab10 	vmov	d0, sl, fp
 80078f4:	aa10      	add	r2, sp, #64	; 0x40
 80078f6:	a911      	add	r1, sp, #68	; 0x44
 80078f8:	4620      	mov	r0, r4
 80078fa:	f001 f8e3 	bl	8008ac4 <__d2b>
 80078fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007902:	ee08 0a10 	vmov	s16, r0
 8007906:	2d00      	cmp	r5, #0
 8007908:	f000 8084 	beq.w	8007a14 <_dtoa_r+0x204>
 800790c:	ee19 3a90 	vmov	r3, s19
 8007910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007914:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007918:	4656      	mov	r6, sl
 800791a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800791e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007922:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007926:	4b74      	ldr	r3, [pc, #464]	; (8007af8 <_dtoa_r+0x2e8>)
 8007928:	2200      	movs	r2, #0
 800792a:	4630      	mov	r0, r6
 800792c:	4639      	mov	r1, r7
 800792e:	f7f8 fcab 	bl	8000288 <__aeabi_dsub>
 8007932:	a365      	add	r3, pc, #404	; (adr r3, 8007ac8 <_dtoa_r+0x2b8>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f7f8 fe5e 	bl	80005f8 <__aeabi_dmul>
 800793c:	a364      	add	r3, pc, #400	; (adr r3, 8007ad0 <_dtoa_r+0x2c0>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f8 fca3 	bl	800028c <__adddf3>
 8007946:	4606      	mov	r6, r0
 8007948:	4628      	mov	r0, r5
 800794a:	460f      	mov	r7, r1
 800794c:	f7f8 fdea 	bl	8000524 <__aeabi_i2d>
 8007950:	a361      	add	r3, pc, #388	; (adr r3, 8007ad8 <_dtoa_r+0x2c8>)
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f8 fe4f 	bl	80005f8 <__aeabi_dmul>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4630      	mov	r0, r6
 8007960:	4639      	mov	r1, r7
 8007962:	f7f8 fc93 	bl	800028c <__adddf3>
 8007966:	4606      	mov	r6, r0
 8007968:	460f      	mov	r7, r1
 800796a:	f7f9 f8f5 	bl	8000b58 <__aeabi_d2iz>
 800796e:	2200      	movs	r2, #0
 8007970:	9000      	str	r0, [sp, #0]
 8007972:	2300      	movs	r3, #0
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	f7f9 f8b0 	bl	8000adc <__aeabi_dcmplt>
 800797c:	b150      	cbz	r0, 8007994 <_dtoa_r+0x184>
 800797e:	9800      	ldr	r0, [sp, #0]
 8007980:	f7f8 fdd0 	bl	8000524 <__aeabi_i2d>
 8007984:	4632      	mov	r2, r6
 8007986:	463b      	mov	r3, r7
 8007988:	f7f9 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800798c:	b910      	cbnz	r0, 8007994 <_dtoa_r+0x184>
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	3b01      	subs	r3, #1
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	9b00      	ldr	r3, [sp, #0]
 8007996:	2b16      	cmp	r3, #22
 8007998:	d85a      	bhi.n	8007a50 <_dtoa_r+0x240>
 800799a:	9a00      	ldr	r2, [sp, #0]
 800799c:	4b57      	ldr	r3, [pc, #348]	; (8007afc <_dtoa_r+0x2ec>)
 800799e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	ec51 0b19 	vmov	r0, r1, d9
 80079aa:	f7f9 f897 	bl	8000adc <__aeabi_dcmplt>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d050      	beq.n	8007a54 <_dtoa_r+0x244>
 80079b2:	9b00      	ldr	r3, [sp, #0]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	2300      	movs	r3, #0
 80079ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80079bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079be:	1b5d      	subs	r5, r3, r5
 80079c0:	1e6b      	subs	r3, r5, #1
 80079c2:	9305      	str	r3, [sp, #20]
 80079c4:	bf45      	ittet	mi
 80079c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80079ca:	9304      	strmi	r3, [sp, #16]
 80079cc:	2300      	movpl	r3, #0
 80079ce:	2300      	movmi	r3, #0
 80079d0:	bf4c      	ite	mi
 80079d2:	9305      	strmi	r3, [sp, #20]
 80079d4:	9304      	strpl	r3, [sp, #16]
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	db3d      	blt.n	8007a58 <_dtoa_r+0x248>
 80079dc:	9b05      	ldr	r3, [sp, #20]
 80079de:	9a00      	ldr	r2, [sp, #0]
 80079e0:	920a      	str	r2, [sp, #40]	; 0x28
 80079e2:	4413      	add	r3, r2
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	2300      	movs	r3, #0
 80079e8:	9307      	str	r3, [sp, #28]
 80079ea:	9b06      	ldr	r3, [sp, #24]
 80079ec:	2b09      	cmp	r3, #9
 80079ee:	f200 8089 	bhi.w	8007b04 <_dtoa_r+0x2f4>
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	bfc4      	itt	gt
 80079f6:	3b04      	subgt	r3, #4
 80079f8:	9306      	strgt	r3, [sp, #24]
 80079fa:	9b06      	ldr	r3, [sp, #24]
 80079fc:	f1a3 0302 	sub.w	r3, r3, #2
 8007a00:	bfcc      	ite	gt
 8007a02:	2500      	movgt	r5, #0
 8007a04:	2501      	movle	r5, #1
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	f200 8087 	bhi.w	8007b1a <_dtoa_r+0x30a>
 8007a0c:	e8df f003 	tbb	[pc, r3]
 8007a10:	59383a2d 	.word	0x59383a2d
 8007a14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a18:	441d      	add	r5, r3
 8007a1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	bfc1      	itttt	gt
 8007a22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a32:	bfda      	itte	le
 8007a34:	f1c3 0320 	rsble	r3, r3, #32
 8007a38:	fa06 f003 	lslle.w	r0, r6, r3
 8007a3c:	4318      	orrgt	r0, r3
 8007a3e:	f7f8 fd61 	bl	8000504 <__aeabi_ui2d>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4606      	mov	r6, r0
 8007a46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a4a:	3d01      	subs	r5, #1
 8007a4c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a4e:	e76a      	b.n	8007926 <_dtoa_r+0x116>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e7b2      	b.n	80079ba <_dtoa_r+0x1aa>
 8007a54:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a56:	e7b1      	b.n	80079bc <_dtoa_r+0x1ac>
 8007a58:	9b04      	ldr	r3, [sp, #16]
 8007a5a:	9a00      	ldr	r2, [sp, #0]
 8007a5c:	1a9b      	subs	r3, r3, r2
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	4253      	negs	r3, r2
 8007a62:	9307      	str	r3, [sp, #28]
 8007a64:	2300      	movs	r3, #0
 8007a66:	930a      	str	r3, [sp, #40]	; 0x28
 8007a68:	e7bf      	b.n	80079ea <_dtoa_r+0x1da>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9308      	str	r3, [sp, #32]
 8007a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	dc55      	bgt.n	8007b20 <_dtoa_r+0x310>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a7e:	e00c      	b.n	8007a9a <_dtoa_r+0x28a>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e7f3      	b.n	8007a6c <_dtoa_r+0x25c>
 8007a84:	2300      	movs	r3, #0
 8007a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a88:	9308      	str	r3, [sp, #32]
 8007a8a:	9b00      	ldr	r3, [sp, #0]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	9302      	str	r3, [sp, #8]
 8007a90:	3301      	adds	r3, #1
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	bfb8      	it	lt
 8007a98:	2301      	movlt	r3, #1
 8007a9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	6042      	str	r2, [r0, #4]
 8007aa0:	2204      	movs	r2, #4
 8007aa2:	f102 0614 	add.w	r6, r2, #20
 8007aa6:	429e      	cmp	r6, r3
 8007aa8:	6841      	ldr	r1, [r0, #4]
 8007aaa:	d93d      	bls.n	8007b28 <_dtoa_r+0x318>
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 fce1 	bl	8008474 <_Balloc>
 8007ab2:	9001      	str	r0, [sp, #4]
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d13b      	bne.n	8007b30 <_dtoa_r+0x320>
 8007ab8:	4b11      	ldr	r3, [pc, #68]	; (8007b00 <_dtoa_r+0x2f0>)
 8007aba:	4602      	mov	r2, r0
 8007abc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ac0:	e6c0      	b.n	8007844 <_dtoa_r+0x34>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e7df      	b.n	8007a86 <_dtoa_r+0x276>
 8007ac6:	bf00      	nop
 8007ac8:	636f4361 	.word	0x636f4361
 8007acc:	3fd287a7 	.word	0x3fd287a7
 8007ad0:	8b60c8b3 	.word	0x8b60c8b3
 8007ad4:	3fc68a28 	.word	0x3fc68a28
 8007ad8:	509f79fb 	.word	0x509f79fb
 8007adc:	3fd34413 	.word	0x3fd34413
 8007ae0:	0800cc2e 	.word	0x0800cc2e
 8007ae4:	0800cc45 	.word	0x0800cc45
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	0800cc2a 	.word	0x0800cc2a
 8007af0:	0800cc21 	.word	0x0800cc21
 8007af4:	0800cafd 	.word	0x0800cafd
 8007af8:	3ff80000 	.word	0x3ff80000
 8007afc:	0800cd38 	.word	0x0800cd38
 8007b00:	0800cca0 	.word	0x0800cca0
 8007b04:	2501      	movs	r5, #1
 8007b06:	2300      	movs	r3, #0
 8007b08:	9306      	str	r3, [sp, #24]
 8007b0a:	9508      	str	r5, [sp, #32]
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b14:	2200      	movs	r2, #0
 8007b16:	2312      	movs	r3, #18
 8007b18:	e7b0      	b.n	8007a7c <_dtoa_r+0x26c>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	e7f5      	b.n	8007b0c <_dtoa_r+0x2fc>
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b26:	e7b8      	b.n	8007a9a <_dtoa_r+0x28a>
 8007b28:	3101      	adds	r1, #1
 8007b2a:	6041      	str	r1, [r0, #4]
 8007b2c:	0052      	lsls	r2, r2, #1
 8007b2e:	e7b8      	b.n	8007aa2 <_dtoa_r+0x292>
 8007b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b32:	9a01      	ldr	r2, [sp, #4]
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	2b0e      	cmp	r3, #14
 8007b3a:	f200 809d 	bhi.w	8007c78 <_dtoa_r+0x468>
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	f000 809a 	beq.w	8007c78 <_dtoa_r+0x468>
 8007b44:	9b00      	ldr	r3, [sp, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dd32      	ble.n	8007bb0 <_dtoa_r+0x3a0>
 8007b4a:	4ab7      	ldr	r2, [pc, #732]	; (8007e28 <_dtoa_r+0x618>)
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b58:	9b00      	ldr	r3, [sp, #0]
 8007b5a:	05d8      	lsls	r0, r3, #23
 8007b5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007b60:	d516      	bpl.n	8007b90 <_dtoa_r+0x380>
 8007b62:	4bb2      	ldr	r3, [pc, #712]	; (8007e2c <_dtoa_r+0x61c>)
 8007b64:	ec51 0b19 	vmov	r0, r1, d9
 8007b68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b6c:	f7f8 fe6e 	bl	800084c <__aeabi_ddiv>
 8007b70:	f007 070f 	and.w	r7, r7, #15
 8007b74:	4682      	mov	sl, r0
 8007b76:	468b      	mov	fp, r1
 8007b78:	2503      	movs	r5, #3
 8007b7a:	4eac      	ldr	r6, [pc, #688]	; (8007e2c <_dtoa_r+0x61c>)
 8007b7c:	b957      	cbnz	r7, 8007b94 <_dtoa_r+0x384>
 8007b7e:	4642      	mov	r2, r8
 8007b80:	464b      	mov	r3, r9
 8007b82:	4650      	mov	r0, sl
 8007b84:	4659      	mov	r1, fp
 8007b86:	f7f8 fe61 	bl	800084c <__aeabi_ddiv>
 8007b8a:	4682      	mov	sl, r0
 8007b8c:	468b      	mov	fp, r1
 8007b8e:	e028      	b.n	8007be2 <_dtoa_r+0x3d2>
 8007b90:	2502      	movs	r5, #2
 8007b92:	e7f2      	b.n	8007b7a <_dtoa_r+0x36a>
 8007b94:	07f9      	lsls	r1, r7, #31
 8007b96:	d508      	bpl.n	8007baa <_dtoa_r+0x39a>
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ba0:	f7f8 fd2a 	bl	80005f8 <__aeabi_dmul>
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	4680      	mov	r8, r0
 8007ba8:	4689      	mov	r9, r1
 8007baa:	107f      	asrs	r7, r7, #1
 8007bac:	3608      	adds	r6, #8
 8007bae:	e7e5      	b.n	8007b7c <_dtoa_r+0x36c>
 8007bb0:	f000 809b 	beq.w	8007cea <_dtoa_r+0x4da>
 8007bb4:	9b00      	ldr	r3, [sp, #0]
 8007bb6:	4f9d      	ldr	r7, [pc, #628]	; (8007e2c <_dtoa_r+0x61c>)
 8007bb8:	425e      	negs	r6, r3
 8007bba:	4b9b      	ldr	r3, [pc, #620]	; (8007e28 <_dtoa_r+0x618>)
 8007bbc:	f006 020f 	and.w	r2, r6, #15
 8007bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	ec51 0b19 	vmov	r0, r1, d9
 8007bcc:	f7f8 fd14 	bl	80005f8 <__aeabi_dmul>
 8007bd0:	1136      	asrs	r6, r6, #4
 8007bd2:	4682      	mov	sl, r0
 8007bd4:	468b      	mov	fp, r1
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2502      	movs	r5, #2
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	d17a      	bne.n	8007cd4 <_dtoa_r+0x4c4>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1d3      	bne.n	8007b8a <_dtoa_r+0x37a>
 8007be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8082 	beq.w	8007cee <_dtoa_r+0x4de>
 8007bea:	4b91      	ldr	r3, [pc, #580]	; (8007e30 <_dtoa_r+0x620>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	4650      	mov	r0, sl
 8007bf0:	4659      	mov	r1, fp
 8007bf2:	f7f8 ff73 	bl	8000adc <__aeabi_dcmplt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d079      	beq.n	8007cee <_dtoa_r+0x4de>
 8007bfa:	9b03      	ldr	r3, [sp, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d076      	beq.n	8007cee <_dtoa_r+0x4de>
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	dd36      	ble.n	8007c74 <_dtoa_r+0x464>
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	4650      	mov	r0, sl
 8007c0a:	4659      	mov	r1, fp
 8007c0c:	1e5f      	subs	r7, r3, #1
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4b88      	ldr	r3, [pc, #544]	; (8007e34 <_dtoa_r+0x624>)
 8007c12:	f7f8 fcf1 	bl	80005f8 <__aeabi_dmul>
 8007c16:	9e02      	ldr	r6, [sp, #8]
 8007c18:	4682      	mov	sl, r0
 8007c1a:	468b      	mov	fp, r1
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f7f8 fc80 	bl	8000524 <__aeabi_i2d>
 8007c24:	4652      	mov	r2, sl
 8007c26:	465b      	mov	r3, fp
 8007c28:	f7f8 fce6 	bl	80005f8 <__aeabi_dmul>
 8007c2c:	4b82      	ldr	r3, [pc, #520]	; (8007e38 <_dtoa_r+0x628>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f7f8 fb2c 	bl	800028c <__adddf3>
 8007c34:	46d0      	mov	r8, sl
 8007c36:	46d9      	mov	r9, fp
 8007c38:	4682      	mov	sl, r0
 8007c3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	d158      	bne.n	8007cf4 <_dtoa_r+0x4e4>
 8007c42:	4b7e      	ldr	r3, [pc, #504]	; (8007e3c <_dtoa_r+0x62c>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	4640      	mov	r0, r8
 8007c48:	4649      	mov	r1, r9
 8007c4a:	f7f8 fb1d 	bl	8000288 <__aeabi_dsub>
 8007c4e:	4652      	mov	r2, sl
 8007c50:	465b      	mov	r3, fp
 8007c52:	4680      	mov	r8, r0
 8007c54:	4689      	mov	r9, r1
 8007c56:	f7f8 ff5f 	bl	8000b18 <__aeabi_dcmpgt>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	f040 8295 	bne.w	800818a <_dtoa_r+0x97a>
 8007c60:	4652      	mov	r2, sl
 8007c62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f7f8 ff37 	bl	8000adc <__aeabi_dcmplt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f040 8289 	bne.w	8008186 <_dtoa_r+0x976>
 8007c74:	ec5b ab19 	vmov	sl, fp, d9
 8007c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f2c0 8148 	blt.w	8007f10 <_dtoa_r+0x700>
 8007c80:	9a00      	ldr	r2, [sp, #0]
 8007c82:	2a0e      	cmp	r2, #14
 8007c84:	f300 8144 	bgt.w	8007f10 <_dtoa_r+0x700>
 8007c88:	4b67      	ldr	r3, [pc, #412]	; (8007e28 <_dtoa_r+0x618>)
 8007c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f280 80d5 	bge.w	8007e44 <_dtoa_r+0x634>
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f300 80d1 	bgt.w	8007e44 <_dtoa_r+0x634>
 8007ca2:	f040 826f 	bne.w	8008184 <_dtoa_r+0x974>
 8007ca6:	4b65      	ldr	r3, [pc, #404]	; (8007e3c <_dtoa_r+0x62c>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	4640      	mov	r0, r8
 8007cac:	4649      	mov	r1, r9
 8007cae:	f7f8 fca3 	bl	80005f8 <__aeabi_dmul>
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	465b      	mov	r3, fp
 8007cb6:	f7f8 ff25 	bl	8000b04 <__aeabi_dcmpge>
 8007cba:	9e03      	ldr	r6, [sp, #12]
 8007cbc:	4637      	mov	r7, r6
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f040 8245 	bne.w	800814e <_dtoa_r+0x93e>
 8007cc4:	9d01      	ldr	r5, [sp, #4]
 8007cc6:	2331      	movs	r3, #49	; 0x31
 8007cc8:	f805 3b01 	strb.w	r3, [r5], #1
 8007ccc:	9b00      	ldr	r3, [sp, #0]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	e240      	b.n	8008156 <_dtoa_r+0x946>
 8007cd4:	07f2      	lsls	r2, r6, #31
 8007cd6:	d505      	bpl.n	8007ce4 <_dtoa_r+0x4d4>
 8007cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cdc:	f7f8 fc8c 	bl	80005f8 <__aeabi_dmul>
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	1076      	asrs	r6, r6, #1
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	e777      	b.n	8007bda <_dtoa_r+0x3ca>
 8007cea:	2502      	movs	r5, #2
 8007cec:	e779      	b.n	8007be2 <_dtoa_r+0x3d2>
 8007cee:	9f00      	ldr	r7, [sp, #0]
 8007cf0:	9e03      	ldr	r6, [sp, #12]
 8007cf2:	e794      	b.n	8007c1e <_dtoa_r+0x40e>
 8007cf4:	9901      	ldr	r1, [sp, #4]
 8007cf6:	4b4c      	ldr	r3, [pc, #304]	; (8007e28 <_dtoa_r+0x618>)
 8007cf8:	4431      	add	r1, r6
 8007cfa:	910d      	str	r1, [sp, #52]	; 0x34
 8007cfc:	9908      	ldr	r1, [sp, #32]
 8007cfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d06:	2900      	cmp	r1, #0
 8007d08:	d043      	beq.n	8007d92 <_dtoa_r+0x582>
 8007d0a:	494d      	ldr	r1, [pc, #308]	; (8007e40 <_dtoa_r+0x630>)
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	f7f8 fd9d 	bl	800084c <__aeabi_ddiv>
 8007d12:	4652      	mov	r2, sl
 8007d14:	465b      	mov	r3, fp
 8007d16:	f7f8 fab7 	bl	8000288 <__aeabi_dsub>
 8007d1a:	9d01      	ldr	r5, [sp, #4]
 8007d1c:	4682      	mov	sl, r0
 8007d1e:	468b      	mov	fp, r1
 8007d20:	4649      	mov	r1, r9
 8007d22:	4640      	mov	r0, r8
 8007d24:	f7f8 ff18 	bl	8000b58 <__aeabi_d2iz>
 8007d28:	4606      	mov	r6, r0
 8007d2a:	f7f8 fbfb 	bl	8000524 <__aeabi_i2d>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f7f8 faa7 	bl	8000288 <__aeabi_dsub>
 8007d3a:	3630      	adds	r6, #48	; 0x30
 8007d3c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d40:	4652      	mov	r2, sl
 8007d42:	465b      	mov	r3, fp
 8007d44:	4680      	mov	r8, r0
 8007d46:	4689      	mov	r9, r1
 8007d48:	f7f8 fec8 	bl	8000adc <__aeabi_dcmplt>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d163      	bne.n	8007e18 <_dtoa_r+0x608>
 8007d50:	4642      	mov	r2, r8
 8007d52:	464b      	mov	r3, r9
 8007d54:	4936      	ldr	r1, [pc, #216]	; (8007e30 <_dtoa_r+0x620>)
 8007d56:	2000      	movs	r0, #0
 8007d58:	f7f8 fa96 	bl	8000288 <__aeabi_dsub>
 8007d5c:	4652      	mov	r2, sl
 8007d5e:	465b      	mov	r3, fp
 8007d60:	f7f8 febc 	bl	8000adc <__aeabi_dcmplt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	f040 80b5 	bne.w	8007ed4 <_dtoa_r+0x6c4>
 8007d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d6c:	429d      	cmp	r5, r3
 8007d6e:	d081      	beq.n	8007c74 <_dtoa_r+0x464>
 8007d70:	4b30      	ldr	r3, [pc, #192]	; (8007e34 <_dtoa_r+0x624>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	4650      	mov	r0, sl
 8007d76:	4659      	mov	r1, fp
 8007d78:	f7f8 fc3e 	bl	80005f8 <__aeabi_dmul>
 8007d7c:	4b2d      	ldr	r3, [pc, #180]	; (8007e34 <_dtoa_r+0x624>)
 8007d7e:	4682      	mov	sl, r0
 8007d80:	468b      	mov	fp, r1
 8007d82:	4640      	mov	r0, r8
 8007d84:	4649      	mov	r1, r9
 8007d86:	2200      	movs	r2, #0
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	4689      	mov	r9, r1
 8007d90:	e7c6      	b.n	8007d20 <_dtoa_r+0x510>
 8007d92:	4650      	mov	r0, sl
 8007d94:	4659      	mov	r1, fp
 8007d96:	f7f8 fc2f 	bl	80005f8 <__aeabi_dmul>
 8007d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d9c:	9d01      	ldr	r5, [sp, #4]
 8007d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007da0:	4682      	mov	sl, r0
 8007da2:	468b      	mov	fp, r1
 8007da4:	4649      	mov	r1, r9
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7f8 fed6 	bl	8000b58 <__aeabi_d2iz>
 8007dac:	4606      	mov	r6, r0
 8007dae:	f7f8 fbb9 	bl	8000524 <__aeabi_i2d>
 8007db2:	3630      	adds	r6, #48	; 0x30
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fa64 	bl	8000288 <__aeabi_dsub>
 8007dc0:	f805 6b01 	strb.w	r6, [r5], #1
 8007dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc6:	429d      	cmp	r5, r3
 8007dc8:	4680      	mov	r8, r0
 8007dca:	4689      	mov	r9, r1
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	d124      	bne.n	8007e1c <_dtoa_r+0x60c>
 8007dd2:	4b1b      	ldr	r3, [pc, #108]	; (8007e40 <_dtoa_r+0x630>)
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	4659      	mov	r1, fp
 8007dd8:	f7f8 fa58 	bl	800028c <__adddf3>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4640      	mov	r0, r8
 8007de2:	4649      	mov	r1, r9
 8007de4:	f7f8 fe98 	bl	8000b18 <__aeabi_dcmpgt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d173      	bne.n	8007ed4 <_dtoa_r+0x6c4>
 8007dec:	4652      	mov	r2, sl
 8007dee:	465b      	mov	r3, fp
 8007df0:	4913      	ldr	r1, [pc, #76]	; (8007e40 <_dtoa_r+0x630>)
 8007df2:	2000      	movs	r0, #0
 8007df4:	f7f8 fa48 	bl	8000288 <__aeabi_dsub>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4649      	mov	r1, r9
 8007e00:	f7f8 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f43f af35 	beq.w	8007c74 <_dtoa_r+0x464>
 8007e0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e0c:	1e6b      	subs	r3, r5, #1
 8007e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d0f8      	beq.n	8007e0a <_dtoa_r+0x5fa>
 8007e18:	9700      	str	r7, [sp, #0]
 8007e1a:	e049      	b.n	8007eb0 <_dtoa_r+0x6a0>
 8007e1c:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <_dtoa_r+0x624>)
 8007e1e:	f7f8 fbeb 	bl	80005f8 <__aeabi_dmul>
 8007e22:	4680      	mov	r8, r0
 8007e24:	4689      	mov	r9, r1
 8007e26:	e7bd      	b.n	8007da4 <_dtoa_r+0x594>
 8007e28:	0800cd38 	.word	0x0800cd38
 8007e2c:	0800cd10 	.word	0x0800cd10
 8007e30:	3ff00000 	.word	0x3ff00000
 8007e34:	40240000 	.word	0x40240000
 8007e38:	401c0000 	.word	0x401c0000
 8007e3c:	40140000 	.word	0x40140000
 8007e40:	3fe00000 	.word	0x3fe00000
 8007e44:	9d01      	ldr	r5, [sp, #4]
 8007e46:	4656      	mov	r6, sl
 8007e48:	465f      	mov	r7, fp
 8007e4a:	4642      	mov	r2, r8
 8007e4c:	464b      	mov	r3, r9
 8007e4e:	4630      	mov	r0, r6
 8007e50:	4639      	mov	r1, r7
 8007e52:	f7f8 fcfb 	bl	800084c <__aeabi_ddiv>
 8007e56:	f7f8 fe7f 	bl	8000b58 <__aeabi_d2iz>
 8007e5a:	4682      	mov	sl, r0
 8007e5c:	f7f8 fb62 	bl	8000524 <__aeabi_i2d>
 8007e60:	4642      	mov	r2, r8
 8007e62:	464b      	mov	r3, r9
 8007e64:	f7f8 fbc8 	bl	80005f8 <__aeabi_dmul>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	4639      	mov	r1, r7
 8007e70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007e74:	f7f8 fa08 	bl	8000288 <__aeabi_dsub>
 8007e78:	f805 6b01 	strb.w	r6, [r5], #1
 8007e7c:	9e01      	ldr	r6, [sp, #4]
 8007e7e:	9f03      	ldr	r7, [sp, #12]
 8007e80:	1bae      	subs	r6, r5, r6
 8007e82:	42b7      	cmp	r7, r6
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	d135      	bne.n	8007ef6 <_dtoa_r+0x6e6>
 8007e8a:	f7f8 f9ff 	bl	800028c <__adddf3>
 8007e8e:	4642      	mov	r2, r8
 8007e90:	464b      	mov	r3, r9
 8007e92:	4606      	mov	r6, r0
 8007e94:	460f      	mov	r7, r1
 8007e96:	f7f8 fe3f 	bl	8000b18 <__aeabi_dcmpgt>
 8007e9a:	b9d0      	cbnz	r0, 8007ed2 <_dtoa_r+0x6c2>
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	464b      	mov	r3, r9
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 fe10 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ea8:	b110      	cbz	r0, 8007eb0 <_dtoa_r+0x6a0>
 8007eaa:	f01a 0f01 	tst.w	sl, #1
 8007eae:	d110      	bne.n	8007ed2 <_dtoa_r+0x6c2>
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	ee18 1a10 	vmov	r1, s16
 8007eb6:	f000 fb1d 	bl	80084f4 <_Bfree>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9800      	ldr	r0, [sp, #0]
 8007ebe:	702b      	strb	r3, [r5, #0]
 8007ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	6018      	str	r0, [r3, #0]
 8007ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f43f acf1 	beq.w	80078b0 <_dtoa_r+0xa0>
 8007ece:	601d      	str	r5, [r3, #0]
 8007ed0:	e4ee      	b.n	80078b0 <_dtoa_r+0xa0>
 8007ed2:	9f00      	ldr	r7, [sp, #0]
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007edc:	2a39      	cmp	r2, #57	; 0x39
 8007ede:	d106      	bne.n	8007eee <_dtoa_r+0x6de>
 8007ee0:	9a01      	ldr	r2, [sp, #4]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d1f7      	bne.n	8007ed6 <_dtoa_r+0x6c6>
 8007ee6:	9901      	ldr	r1, [sp, #4]
 8007ee8:	2230      	movs	r2, #48	; 0x30
 8007eea:	3701      	adds	r7, #1
 8007eec:	700a      	strb	r2, [r1, #0]
 8007eee:	781a      	ldrb	r2, [r3, #0]
 8007ef0:	3201      	adds	r2, #1
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e790      	b.n	8007e18 <_dtoa_r+0x608>
 8007ef6:	4ba6      	ldr	r3, [pc, #664]	; (8008190 <_dtoa_r+0x980>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f7f8 fb7d 	bl	80005f8 <__aeabi_dmul>
 8007efe:	2200      	movs	r2, #0
 8007f00:	2300      	movs	r3, #0
 8007f02:	4606      	mov	r6, r0
 8007f04:	460f      	mov	r7, r1
 8007f06:	f7f8 fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d09d      	beq.n	8007e4a <_dtoa_r+0x63a>
 8007f0e:	e7cf      	b.n	8007eb0 <_dtoa_r+0x6a0>
 8007f10:	9a08      	ldr	r2, [sp, #32]
 8007f12:	2a00      	cmp	r2, #0
 8007f14:	f000 80d7 	beq.w	80080c6 <_dtoa_r+0x8b6>
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	2a01      	cmp	r2, #1
 8007f1c:	f300 80ba 	bgt.w	8008094 <_dtoa_r+0x884>
 8007f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	f000 80b2 	beq.w	800808c <_dtoa_r+0x87c>
 8007f28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f2c:	9e07      	ldr	r6, [sp, #28]
 8007f2e:	9d04      	ldr	r5, [sp, #16]
 8007f30:	9a04      	ldr	r2, [sp, #16]
 8007f32:	441a      	add	r2, r3
 8007f34:	9204      	str	r2, [sp, #16]
 8007f36:	9a05      	ldr	r2, [sp, #20]
 8007f38:	2101      	movs	r1, #1
 8007f3a:	441a      	add	r2, r3
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	9205      	str	r2, [sp, #20]
 8007f40:	f000 fb90 	bl	8008664 <__i2b>
 8007f44:	4607      	mov	r7, r0
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	dd0c      	ble.n	8007f64 <_dtoa_r+0x754>
 8007f4a:	9b05      	ldr	r3, [sp, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dd09      	ble.n	8007f64 <_dtoa_r+0x754>
 8007f50:	42ab      	cmp	r3, r5
 8007f52:	9a04      	ldr	r2, [sp, #16]
 8007f54:	bfa8      	it	ge
 8007f56:	462b      	movge	r3, r5
 8007f58:	1ad2      	subs	r2, r2, r3
 8007f5a:	9204      	str	r2, [sp, #16]
 8007f5c:	9a05      	ldr	r2, [sp, #20]
 8007f5e:	1aed      	subs	r5, r5, r3
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	9b07      	ldr	r3, [sp, #28]
 8007f66:	b31b      	cbz	r3, 8007fb0 <_dtoa_r+0x7a0>
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 80af 	beq.w	80080ce <_dtoa_r+0x8be>
 8007f70:	2e00      	cmp	r6, #0
 8007f72:	dd13      	ble.n	8007f9c <_dtoa_r+0x78c>
 8007f74:	4639      	mov	r1, r7
 8007f76:	4632      	mov	r2, r6
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 fc33 	bl	80087e4 <__pow5mult>
 8007f7e:	ee18 2a10 	vmov	r2, s16
 8007f82:	4601      	mov	r1, r0
 8007f84:	4607      	mov	r7, r0
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fb82 	bl	8008690 <__multiply>
 8007f8c:	ee18 1a10 	vmov	r1, s16
 8007f90:	4680      	mov	r8, r0
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 faae 	bl	80084f4 <_Bfree>
 8007f98:	ee08 8a10 	vmov	s16, r8
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	1b9a      	subs	r2, r3, r6
 8007fa0:	d006      	beq.n	8007fb0 <_dtoa_r+0x7a0>
 8007fa2:	ee18 1a10 	vmov	r1, s16
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 fc1c 	bl	80087e4 <__pow5mult>
 8007fac:	ee08 0a10 	vmov	s16, r0
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fb56 	bl	8008664 <__i2b>
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	f340 8088 	ble.w	80080d2 <_dtoa_r+0x8c2>
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 fc0c 	bl	80087e4 <__pow5mult>
 8007fcc:	9b06      	ldr	r3, [sp, #24]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	f340 8081 	ble.w	80080d8 <_dtoa_r+0x8c8>
 8007fd6:	f04f 0800 	mov.w	r8, #0
 8007fda:	6933      	ldr	r3, [r6, #16]
 8007fdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fe0:	6918      	ldr	r0, [r3, #16]
 8007fe2:	f000 faef 	bl	80085c4 <__hi0bits>
 8007fe6:	f1c0 0020 	rsb	r0, r0, #32
 8007fea:	9b05      	ldr	r3, [sp, #20]
 8007fec:	4418      	add	r0, r3
 8007fee:	f010 001f 	ands.w	r0, r0, #31
 8007ff2:	f000 8092 	beq.w	800811a <_dtoa_r+0x90a>
 8007ff6:	f1c0 0320 	rsb	r3, r0, #32
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	f340 808a 	ble.w	8008114 <_dtoa_r+0x904>
 8008000:	f1c0 001c 	rsb	r0, r0, #28
 8008004:	9b04      	ldr	r3, [sp, #16]
 8008006:	4403      	add	r3, r0
 8008008:	9304      	str	r3, [sp, #16]
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	4403      	add	r3, r0
 800800e:	4405      	add	r5, r0
 8008010:	9305      	str	r3, [sp, #20]
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	dd07      	ble.n	8008028 <_dtoa_r+0x818>
 8008018:	ee18 1a10 	vmov	r1, s16
 800801c:	461a      	mov	r2, r3
 800801e:	4620      	mov	r0, r4
 8008020:	f000 fc3a 	bl	8008898 <__lshift>
 8008024:	ee08 0a10 	vmov	s16, r0
 8008028:	9b05      	ldr	r3, [sp, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	dd05      	ble.n	800803a <_dtoa_r+0x82a>
 800802e:	4631      	mov	r1, r6
 8008030:	461a      	mov	r2, r3
 8008032:	4620      	mov	r0, r4
 8008034:	f000 fc30 	bl	8008898 <__lshift>
 8008038:	4606      	mov	r6, r0
 800803a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d06e      	beq.n	800811e <_dtoa_r+0x90e>
 8008040:	ee18 0a10 	vmov	r0, s16
 8008044:	4631      	mov	r1, r6
 8008046:	f000 fc97 	bl	8008978 <__mcmp>
 800804a:	2800      	cmp	r0, #0
 800804c:	da67      	bge.n	800811e <_dtoa_r+0x90e>
 800804e:	9b00      	ldr	r3, [sp, #0]
 8008050:	3b01      	subs	r3, #1
 8008052:	ee18 1a10 	vmov	r1, s16
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	220a      	movs	r2, #10
 800805a:	2300      	movs	r3, #0
 800805c:	4620      	mov	r0, r4
 800805e:	f000 fa6b 	bl	8008538 <__multadd>
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	ee08 0a10 	vmov	s16, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 81b1 	beq.w	80083d0 <_dtoa_r+0xbc0>
 800806e:	2300      	movs	r3, #0
 8008070:	4639      	mov	r1, r7
 8008072:	220a      	movs	r2, #10
 8008074:	4620      	mov	r0, r4
 8008076:	f000 fa5f 	bl	8008538 <__multadd>
 800807a:	9b02      	ldr	r3, [sp, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	4607      	mov	r7, r0
 8008080:	f300 808e 	bgt.w	80081a0 <_dtoa_r+0x990>
 8008084:	9b06      	ldr	r3, [sp, #24]
 8008086:	2b02      	cmp	r3, #2
 8008088:	dc51      	bgt.n	800812e <_dtoa_r+0x91e>
 800808a:	e089      	b.n	80081a0 <_dtoa_r+0x990>
 800808c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800808e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008092:	e74b      	b.n	8007f2c <_dtoa_r+0x71c>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	1e5e      	subs	r6, r3, #1
 8008098:	9b07      	ldr	r3, [sp, #28]
 800809a:	42b3      	cmp	r3, r6
 800809c:	bfbf      	itttt	lt
 800809e:	9b07      	ldrlt	r3, [sp, #28]
 80080a0:	9607      	strlt	r6, [sp, #28]
 80080a2:	1af2      	sublt	r2, r6, r3
 80080a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080a6:	bfb6      	itet	lt
 80080a8:	189b      	addlt	r3, r3, r2
 80080aa:	1b9e      	subge	r6, r3, r6
 80080ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	bfb8      	it	lt
 80080b2:	2600      	movlt	r6, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bfb7      	itett	lt
 80080b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80080bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80080c0:	1a9d      	sublt	r5, r3, r2
 80080c2:	2300      	movlt	r3, #0
 80080c4:	e734      	b.n	8007f30 <_dtoa_r+0x720>
 80080c6:	9e07      	ldr	r6, [sp, #28]
 80080c8:	9d04      	ldr	r5, [sp, #16]
 80080ca:	9f08      	ldr	r7, [sp, #32]
 80080cc:	e73b      	b.n	8007f46 <_dtoa_r+0x736>
 80080ce:	9a07      	ldr	r2, [sp, #28]
 80080d0:	e767      	b.n	8007fa2 <_dtoa_r+0x792>
 80080d2:	9b06      	ldr	r3, [sp, #24]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	dc18      	bgt.n	800810a <_dtoa_r+0x8fa>
 80080d8:	f1ba 0f00 	cmp.w	sl, #0
 80080dc:	d115      	bne.n	800810a <_dtoa_r+0x8fa>
 80080de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080e2:	b993      	cbnz	r3, 800810a <_dtoa_r+0x8fa>
 80080e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080e8:	0d1b      	lsrs	r3, r3, #20
 80080ea:	051b      	lsls	r3, r3, #20
 80080ec:	b183      	cbz	r3, 8008110 <_dtoa_r+0x900>
 80080ee:	9b04      	ldr	r3, [sp, #16]
 80080f0:	3301      	adds	r3, #1
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	9b05      	ldr	r3, [sp, #20]
 80080f6:	3301      	adds	r3, #1
 80080f8:	9305      	str	r3, [sp, #20]
 80080fa:	f04f 0801 	mov.w	r8, #1
 80080fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008100:	2b00      	cmp	r3, #0
 8008102:	f47f af6a 	bne.w	8007fda <_dtoa_r+0x7ca>
 8008106:	2001      	movs	r0, #1
 8008108:	e76f      	b.n	8007fea <_dtoa_r+0x7da>
 800810a:	f04f 0800 	mov.w	r8, #0
 800810e:	e7f6      	b.n	80080fe <_dtoa_r+0x8ee>
 8008110:	4698      	mov	r8, r3
 8008112:	e7f4      	b.n	80080fe <_dtoa_r+0x8ee>
 8008114:	f43f af7d 	beq.w	8008012 <_dtoa_r+0x802>
 8008118:	4618      	mov	r0, r3
 800811a:	301c      	adds	r0, #28
 800811c:	e772      	b.n	8008004 <_dtoa_r+0x7f4>
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	dc37      	bgt.n	8008194 <_dtoa_r+0x984>
 8008124:	9b06      	ldr	r3, [sp, #24]
 8008126:	2b02      	cmp	r3, #2
 8008128:	dd34      	ble.n	8008194 <_dtoa_r+0x984>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	9302      	str	r3, [sp, #8]
 800812e:	9b02      	ldr	r3, [sp, #8]
 8008130:	b96b      	cbnz	r3, 800814e <_dtoa_r+0x93e>
 8008132:	4631      	mov	r1, r6
 8008134:	2205      	movs	r2, #5
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f9fe 	bl	8008538 <__multadd>
 800813c:	4601      	mov	r1, r0
 800813e:	4606      	mov	r6, r0
 8008140:	ee18 0a10 	vmov	r0, s16
 8008144:	f000 fc18 	bl	8008978 <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	f73f adbb 	bgt.w	8007cc4 <_dtoa_r+0x4b4>
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	9d01      	ldr	r5, [sp, #4]
 8008152:	43db      	mvns	r3, r3
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	f04f 0800 	mov.w	r8, #0
 800815a:	4631      	mov	r1, r6
 800815c:	4620      	mov	r0, r4
 800815e:	f000 f9c9 	bl	80084f4 <_Bfree>
 8008162:	2f00      	cmp	r7, #0
 8008164:	f43f aea4 	beq.w	8007eb0 <_dtoa_r+0x6a0>
 8008168:	f1b8 0f00 	cmp.w	r8, #0
 800816c:	d005      	beq.n	800817a <_dtoa_r+0x96a>
 800816e:	45b8      	cmp	r8, r7
 8008170:	d003      	beq.n	800817a <_dtoa_r+0x96a>
 8008172:	4641      	mov	r1, r8
 8008174:	4620      	mov	r0, r4
 8008176:	f000 f9bd 	bl	80084f4 <_Bfree>
 800817a:	4639      	mov	r1, r7
 800817c:	4620      	mov	r0, r4
 800817e:	f000 f9b9 	bl	80084f4 <_Bfree>
 8008182:	e695      	b.n	8007eb0 <_dtoa_r+0x6a0>
 8008184:	2600      	movs	r6, #0
 8008186:	4637      	mov	r7, r6
 8008188:	e7e1      	b.n	800814e <_dtoa_r+0x93e>
 800818a:	9700      	str	r7, [sp, #0]
 800818c:	4637      	mov	r7, r6
 800818e:	e599      	b.n	8007cc4 <_dtoa_r+0x4b4>
 8008190:	40240000 	.word	0x40240000
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 80ca 	beq.w	8008330 <_dtoa_r+0xb20>
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	9302      	str	r3, [sp, #8]
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	dd05      	ble.n	80081b0 <_dtoa_r+0x9a0>
 80081a4:	4639      	mov	r1, r7
 80081a6:	462a      	mov	r2, r5
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fb75 	bl	8008898 <__lshift>
 80081ae:	4607      	mov	r7, r0
 80081b0:	f1b8 0f00 	cmp.w	r8, #0
 80081b4:	d05b      	beq.n	800826e <_dtoa_r+0xa5e>
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 f95b 	bl	8008474 <_Balloc>
 80081be:	4605      	mov	r5, r0
 80081c0:	b928      	cbnz	r0, 80081ce <_dtoa_r+0x9be>
 80081c2:	4b87      	ldr	r3, [pc, #540]	; (80083e0 <_dtoa_r+0xbd0>)
 80081c4:	4602      	mov	r2, r0
 80081c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081ca:	f7ff bb3b 	b.w	8007844 <_dtoa_r+0x34>
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	3202      	adds	r2, #2
 80081d2:	0092      	lsls	r2, r2, #2
 80081d4:	f107 010c 	add.w	r1, r7, #12
 80081d8:	300c      	adds	r0, #12
 80081da:	f7fe fc03 	bl	80069e4 <memcpy>
 80081de:	2201      	movs	r2, #1
 80081e0:	4629      	mov	r1, r5
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 fb58 	bl	8008898 <__lshift>
 80081e8:	9b01      	ldr	r3, [sp, #4]
 80081ea:	f103 0901 	add.w	r9, r3, #1
 80081ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80081f2:	4413      	add	r3, r2
 80081f4:	9305      	str	r3, [sp, #20]
 80081f6:	f00a 0301 	and.w	r3, sl, #1
 80081fa:	46b8      	mov	r8, r7
 80081fc:	9304      	str	r3, [sp, #16]
 80081fe:	4607      	mov	r7, r0
 8008200:	4631      	mov	r1, r6
 8008202:	ee18 0a10 	vmov	r0, s16
 8008206:	f7ff fa77 	bl	80076f8 <quorem>
 800820a:	4641      	mov	r1, r8
 800820c:	9002      	str	r0, [sp, #8]
 800820e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008212:	ee18 0a10 	vmov	r0, s16
 8008216:	f000 fbaf 	bl	8008978 <__mcmp>
 800821a:	463a      	mov	r2, r7
 800821c:	9003      	str	r0, [sp, #12]
 800821e:	4631      	mov	r1, r6
 8008220:	4620      	mov	r0, r4
 8008222:	f000 fbc5 	bl	80089b0 <__mdiff>
 8008226:	68c2      	ldr	r2, [r0, #12]
 8008228:	f109 3bff 	add.w	fp, r9, #4294967295
 800822c:	4605      	mov	r5, r0
 800822e:	bb02      	cbnz	r2, 8008272 <_dtoa_r+0xa62>
 8008230:	4601      	mov	r1, r0
 8008232:	ee18 0a10 	vmov	r0, s16
 8008236:	f000 fb9f 	bl	8008978 <__mcmp>
 800823a:	4602      	mov	r2, r0
 800823c:	4629      	mov	r1, r5
 800823e:	4620      	mov	r0, r4
 8008240:	9207      	str	r2, [sp, #28]
 8008242:	f000 f957 	bl	80084f4 <_Bfree>
 8008246:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800824a:	ea43 0102 	orr.w	r1, r3, r2
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	430b      	orrs	r3, r1
 8008252:	464d      	mov	r5, r9
 8008254:	d10f      	bne.n	8008276 <_dtoa_r+0xa66>
 8008256:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800825a:	d02a      	beq.n	80082b2 <_dtoa_r+0xaa2>
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	dd02      	ble.n	8008268 <_dtoa_r+0xa58>
 8008262:	9b02      	ldr	r3, [sp, #8]
 8008264:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008268:	f88b a000 	strb.w	sl, [fp]
 800826c:	e775      	b.n	800815a <_dtoa_r+0x94a>
 800826e:	4638      	mov	r0, r7
 8008270:	e7ba      	b.n	80081e8 <_dtoa_r+0x9d8>
 8008272:	2201      	movs	r2, #1
 8008274:	e7e2      	b.n	800823c <_dtoa_r+0xa2c>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	db04      	blt.n	8008286 <_dtoa_r+0xa76>
 800827c:	9906      	ldr	r1, [sp, #24]
 800827e:	430b      	orrs	r3, r1
 8008280:	9904      	ldr	r1, [sp, #16]
 8008282:	430b      	orrs	r3, r1
 8008284:	d122      	bne.n	80082cc <_dtoa_r+0xabc>
 8008286:	2a00      	cmp	r2, #0
 8008288:	ddee      	ble.n	8008268 <_dtoa_r+0xa58>
 800828a:	ee18 1a10 	vmov	r1, s16
 800828e:	2201      	movs	r2, #1
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fb01 	bl	8008898 <__lshift>
 8008296:	4631      	mov	r1, r6
 8008298:	ee08 0a10 	vmov	s16, r0
 800829c:	f000 fb6c 	bl	8008978 <__mcmp>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	dc03      	bgt.n	80082ac <_dtoa_r+0xa9c>
 80082a4:	d1e0      	bne.n	8008268 <_dtoa_r+0xa58>
 80082a6:	f01a 0f01 	tst.w	sl, #1
 80082aa:	d0dd      	beq.n	8008268 <_dtoa_r+0xa58>
 80082ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082b0:	d1d7      	bne.n	8008262 <_dtoa_r+0xa52>
 80082b2:	2339      	movs	r3, #57	; 0x39
 80082b4:	f88b 3000 	strb.w	r3, [fp]
 80082b8:	462b      	mov	r3, r5
 80082ba:	461d      	mov	r5, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082c2:	2a39      	cmp	r2, #57	; 0x39
 80082c4:	d071      	beq.n	80083aa <_dtoa_r+0xb9a>
 80082c6:	3201      	adds	r2, #1
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	e746      	b.n	800815a <_dtoa_r+0x94a>
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	dd07      	ble.n	80082e0 <_dtoa_r+0xad0>
 80082d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082d4:	d0ed      	beq.n	80082b2 <_dtoa_r+0xaa2>
 80082d6:	f10a 0301 	add.w	r3, sl, #1
 80082da:	f88b 3000 	strb.w	r3, [fp]
 80082de:	e73c      	b.n	800815a <_dtoa_r+0x94a>
 80082e0:	9b05      	ldr	r3, [sp, #20]
 80082e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80082e6:	4599      	cmp	r9, r3
 80082e8:	d047      	beq.n	800837a <_dtoa_r+0xb6a>
 80082ea:	ee18 1a10 	vmov	r1, s16
 80082ee:	2300      	movs	r3, #0
 80082f0:	220a      	movs	r2, #10
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 f920 	bl	8008538 <__multadd>
 80082f8:	45b8      	cmp	r8, r7
 80082fa:	ee08 0a10 	vmov	s16, r0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	f04f 020a 	mov.w	r2, #10
 8008306:	4641      	mov	r1, r8
 8008308:	4620      	mov	r0, r4
 800830a:	d106      	bne.n	800831a <_dtoa_r+0xb0a>
 800830c:	f000 f914 	bl	8008538 <__multadd>
 8008310:	4680      	mov	r8, r0
 8008312:	4607      	mov	r7, r0
 8008314:	f109 0901 	add.w	r9, r9, #1
 8008318:	e772      	b.n	8008200 <_dtoa_r+0x9f0>
 800831a:	f000 f90d 	bl	8008538 <__multadd>
 800831e:	4639      	mov	r1, r7
 8008320:	4680      	mov	r8, r0
 8008322:	2300      	movs	r3, #0
 8008324:	220a      	movs	r2, #10
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f906 	bl	8008538 <__multadd>
 800832c:	4607      	mov	r7, r0
 800832e:	e7f1      	b.n	8008314 <_dtoa_r+0xb04>
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	9302      	str	r3, [sp, #8]
 8008334:	9d01      	ldr	r5, [sp, #4]
 8008336:	ee18 0a10 	vmov	r0, s16
 800833a:	4631      	mov	r1, r6
 800833c:	f7ff f9dc 	bl	80076f8 <quorem>
 8008340:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	f805 ab01 	strb.w	sl, [r5], #1
 800834a:	1aea      	subs	r2, r5, r3
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	4293      	cmp	r3, r2
 8008350:	dd09      	ble.n	8008366 <_dtoa_r+0xb56>
 8008352:	ee18 1a10 	vmov	r1, s16
 8008356:	2300      	movs	r3, #0
 8008358:	220a      	movs	r2, #10
 800835a:	4620      	mov	r0, r4
 800835c:	f000 f8ec 	bl	8008538 <__multadd>
 8008360:	ee08 0a10 	vmov	s16, r0
 8008364:	e7e7      	b.n	8008336 <_dtoa_r+0xb26>
 8008366:	9b02      	ldr	r3, [sp, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	bfc8      	it	gt
 800836c:	461d      	movgt	r5, r3
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	bfd8      	it	le
 8008372:	2501      	movle	r5, #1
 8008374:	441d      	add	r5, r3
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	ee18 1a10 	vmov	r1, s16
 800837e:	2201      	movs	r2, #1
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fa89 	bl	8008898 <__lshift>
 8008386:	4631      	mov	r1, r6
 8008388:	ee08 0a10 	vmov	s16, r0
 800838c:	f000 faf4 	bl	8008978 <__mcmp>
 8008390:	2800      	cmp	r0, #0
 8008392:	dc91      	bgt.n	80082b8 <_dtoa_r+0xaa8>
 8008394:	d102      	bne.n	800839c <_dtoa_r+0xb8c>
 8008396:	f01a 0f01 	tst.w	sl, #1
 800839a:	d18d      	bne.n	80082b8 <_dtoa_r+0xaa8>
 800839c:	462b      	mov	r3, r5
 800839e:	461d      	mov	r5, r3
 80083a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083a4:	2a30      	cmp	r2, #48	; 0x30
 80083a6:	d0fa      	beq.n	800839e <_dtoa_r+0xb8e>
 80083a8:	e6d7      	b.n	800815a <_dtoa_r+0x94a>
 80083aa:	9a01      	ldr	r2, [sp, #4]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d184      	bne.n	80082ba <_dtoa_r+0xaaa>
 80083b0:	9b00      	ldr	r3, [sp, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	2331      	movs	r3, #49	; 0x31
 80083b8:	7013      	strb	r3, [r2, #0]
 80083ba:	e6ce      	b.n	800815a <_dtoa_r+0x94a>
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <_dtoa_r+0xbd4>)
 80083be:	f7ff ba95 	b.w	80078ec <_dtoa_r+0xdc>
 80083c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f47f aa6e 	bne.w	80078a6 <_dtoa_r+0x96>
 80083ca:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <_dtoa_r+0xbd8>)
 80083cc:	f7ff ba8e 	b.w	80078ec <_dtoa_r+0xdc>
 80083d0:	9b02      	ldr	r3, [sp, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dcae      	bgt.n	8008334 <_dtoa_r+0xb24>
 80083d6:	9b06      	ldr	r3, [sp, #24]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	f73f aea8 	bgt.w	800812e <_dtoa_r+0x91e>
 80083de:	e7a9      	b.n	8008334 <_dtoa_r+0xb24>
 80083e0:	0800cca0 	.word	0x0800cca0
 80083e4:	0800cafc 	.word	0x0800cafc
 80083e8:	0800cc21 	.word	0x0800cc21

080083ec <_fstat_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d07      	ldr	r5, [pc, #28]	; (800840c <_fstat_r+0x20>)
 80083f0:	2300      	movs	r3, #0
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	4611      	mov	r1, r2
 80083f8:	602b      	str	r3, [r5, #0]
 80083fa:	f7f9 fc72 	bl	8001ce2 <_fstat>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d102      	bne.n	8008408 <_fstat_r+0x1c>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	b103      	cbz	r3, 8008408 <_fstat_r+0x1c>
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	bd38      	pop	{r3, r4, r5, pc}
 800840a:	bf00      	nop
 800840c:	2000a66c 	.word	0x2000a66c

08008410 <_isatty_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	; (800842c <_isatty_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7f9 fc66 	bl	8001cec <_isatty>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_isatty_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_isatty_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	2000a66c 	.word	0x2000a66c

08008430 <_localeconv_r>:
 8008430:	4800      	ldr	r0, [pc, #0]	; (8008434 <_localeconv_r+0x4>)
 8008432:	4770      	bx	lr
 8008434:	20000178 	.word	0x20000178

08008438 <_lseek_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	; (8008458 <_lseek_r+0x20>)
 800843c:	4604      	mov	r4, r0
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	2200      	movs	r2, #0
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	f7f9 fc52 	bl	8001cf0 <_lseek>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_lseek_r+0x1e>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_lseek_r+0x1e>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	2000a66c 	.word	0x2000a66c

0800845c <__malloc_lock>:
 800845c:	4801      	ldr	r0, [pc, #4]	; (8008464 <__malloc_lock+0x8>)
 800845e:	f7fe ba52 	b.w	8006906 <__retarget_lock_acquire_recursive>
 8008462:	bf00      	nop
 8008464:	2000a660 	.word	0x2000a660

08008468 <__malloc_unlock>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__malloc_unlock+0x8>)
 800846a:	f7fe ba4d 	b.w	8006908 <__retarget_lock_release_recursive>
 800846e:	bf00      	nop
 8008470:	2000a660 	.word	0x2000a660

08008474 <_Balloc>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008478:	4604      	mov	r4, r0
 800847a:	460d      	mov	r5, r1
 800847c:	b976      	cbnz	r6, 800849c <_Balloc+0x28>
 800847e:	2010      	movs	r0, #16
 8008480:	f7fe faa8 	bl	80069d4 <malloc>
 8008484:	4602      	mov	r2, r0
 8008486:	6260      	str	r0, [r4, #36]	; 0x24
 8008488:	b920      	cbnz	r0, 8008494 <_Balloc+0x20>
 800848a:	4b18      	ldr	r3, [pc, #96]	; (80084ec <_Balloc+0x78>)
 800848c:	4818      	ldr	r0, [pc, #96]	; (80084f0 <_Balloc+0x7c>)
 800848e:	2166      	movs	r1, #102	; 0x66
 8008490:	f000 fcf8 	bl	8008e84 <__assert_func>
 8008494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008498:	6006      	str	r6, [r0, #0]
 800849a:	60c6      	str	r6, [r0, #12]
 800849c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800849e:	68f3      	ldr	r3, [r6, #12]
 80084a0:	b183      	cbz	r3, 80084c4 <_Balloc+0x50>
 80084a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084aa:	b9b8      	cbnz	r0, 80084dc <_Balloc+0x68>
 80084ac:	2101      	movs	r1, #1
 80084ae:	fa01 f605 	lsl.w	r6, r1, r5
 80084b2:	1d72      	adds	r2, r6, #5
 80084b4:	0092      	lsls	r2, r2, #2
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 fb60 	bl	8008b7c <_calloc_r>
 80084bc:	b160      	cbz	r0, 80084d8 <_Balloc+0x64>
 80084be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084c2:	e00e      	b.n	80084e2 <_Balloc+0x6e>
 80084c4:	2221      	movs	r2, #33	; 0x21
 80084c6:	2104      	movs	r1, #4
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fb57 	bl	8008b7c <_calloc_r>
 80084ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084d0:	60f0      	str	r0, [r6, #12]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e4      	bne.n	80084a2 <_Balloc+0x2e>
 80084d8:	2000      	movs	r0, #0
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	6802      	ldr	r2, [r0, #0]
 80084de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084e2:	2300      	movs	r3, #0
 80084e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084e8:	e7f7      	b.n	80084da <_Balloc+0x66>
 80084ea:	bf00      	nop
 80084ec:	0800cc2e 	.word	0x0800cc2e
 80084f0:	0800ccb1 	.word	0x0800ccb1

080084f4 <_Bfree>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084f8:	4605      	mov	r5, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	b976      	cbnz	r6, 800851c <_Bfree+0x28>
 80084fe:	2010      	movs	r0, #16
 8008500:	f7fe fa68 	bl	80069d4 <malloc>
 8008504:	4602      	mov	r2, r0
 8008506:	6268      	str	r0, [r5, #36]	; 0x24
 8008508:	b920      	cbnz	r0, 8008514 <_Bfree+0x20>
 800850a:	4b09      	ldr	r3, [pc, #36]	; (8008530 <_Bfree+0x3c>)
 800850c:	4809      	ldr	r0, [pc, #36]	; (8008534 <_Bfree+0x40>)
 800850e:	218a      	movs	r1, #138	; 0x8a
 8008510:	f000 fcb8 	bl	8008e84 <__assert_func>
 8008514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008518:	6006      	str	r6, [r0, #0]
 800851a:	60c6      	str	r6, [r0, #12]
 800851c:	b13c      	cbz	r4, 800852e <_Bfree+0x3a>
 800851e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008520:	6862      	ldr	r2, [r4, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008528:	6021      	str	r1, [r4, #0]
 800852a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	0800cc2e 	.word	0x0800cc2e
 8008534:	0800ccb1 	.word	0x0800ccb1

08008538 <__multadd>:
 8008538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800853c:	690d      	ldr	r5, [r1, #16]
 800853e:	4607      	mov	r7, r0
 8008540:	460c      	mov	r4, r1
 8008542:	461e      	mov	r6, r3
 8008544:	f101 0c14 	add.w	ip, r1, #20
 8008548:	2000      	movs	r0, #0
 800854a:	f8dc 3000 	ldr.w	r3, [ip]
 800854e:	b299      	uxth	r1, r3
 8008550:	fb02 6101 	mla	r1, r2, r1, r6
 8008554:	0c1e      	lsrs	r6, r3, #16
 8008556:	0c0b      	lsrs	r3, r1, #16
 8008558:	fb02 3306 	mla	r3, r2, r6, r3
 800855c:	b289      	uxth	r1, r1
 800855e:	3001      	adds	r0, #1
 8008560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008564:	4285      	cmp	r5, r0
 8008566:	f84c 1b04 	str.w	r1, [ip], #4
 800856a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800856e:	dcec      	bgt.n	800854a <__multadd+0x12>
 8008570:	b30e      	cbz	r6, 80085b6 <__multadd+0x7e>
 8008572:	68a3      	ldr	r3, [r4, #8]
 8008574:	42ab      	cmp	r3, r5
 8008576:	dc19      	bgt.n	80085ac <__multadd+0x74>
 8008578:	6861      	ldr	r1, [r4, #4]
 800857a:	4638      	mov	r0, r7
 800857c:	3101      	adds	r1, #1
 800857e:	f7ff ff79 	bl	8008474 <_Balloc>
 8008582:	4680      	mov	r8, r0
 8008584:	b928      	cbnz	r0, 8008592 <__multadd+0x5a>
 8008586:	4602      	mov	r2, r0
 8008588:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <__multadd+0x84>)
 800858a:	480d      	ldr	r0, [pc, #52]	; (80085c0 <__multadd+0x88>)
 800858c:	21b5      	movs	r1, #181	; 0xb5
 800858e:	f000 fc79 	bl	8008e84 <__assert_func>
 8008592:	6922      	ldr	r2, [r4, #16]
 8008594:	3202      	adds	r2, #2
 8008596:	f104 010c 	add.w	r1, r4, #12
 800859a:	0092      	lsls	r2, r2, #2
 800859c:	300c      	adds	r0, #12
 800859e:	f7fe fa21 	bl	80069e4 <memcpy>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff ffa5 	bl	80084f4 <_Bfree>
 80085aa:	4644      	mov	r4, r8
 80085ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085b0:	3501      	adds	r5, #1
 80085b2:	615e      	str	r6, [r3, #20]
 80085b4:	6125      	str	r5, [r4, #16]
 80085b6:	4620      	mov	r0, r4
 80085b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085bc:	0800cca0 	.word	0x0800cca0
 80085c0:	0800ccb1 	.word	0x0800ccb1

080085c4 <__hi0bits>:
 80085c4:	0c03      	lsrs	r3, r0, #16
 80085c6:	041b      	lsls	r3, r3, #16
 80085c8:	b9d3      	cbnz	r3, 8008600 <__hi0bits+0x3c>
 80085ca:	0400      	lsls	r0, r0, #16
 80085cc:	2310      	movs	r3, #16
 80085ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	0200      	lsleq	r0, r0, #8
 80085d6:	3308      	addeq	r3, #8
 80085d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085dc:	bf04      	itt	eq
 80085de:	0100      	lsleq	r0, r0, #4
 80085e0:	3304      	addeq	r3, #4
 80085e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085e6:	bf04      	itt	eq
 80085e8:	0080      	lsleq	r0, r0, #2
 80085ea:	3302      	addeq	r3, #2
 80085ec:	2800      	cmp	r0, #0
 80085ee:	db05      	blt.n	80085fc <__hi0bits+0x38>
 80085f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085f4:	f103 0301 	add.w	r3, r3, #1
 80085f8:	bf08      	it	eq
 80085fa:	2320      	moveq	r3, #32
 80085fc:	4618      	mov	r0, r3
 80085fe:	4770      	bx	lr
 8008600:	2300      	movs	r3, #0
 8008602:	e7e4      	b.n	80085ce <__hi0bits+0xa>

08008604 <__lo0bits>:
 8008604:	6803      	ldr	r3, [r0, #0]
 8008606:	f013 0207 	ands.w	r2, r3, #7
 800860a:	4601      	mov	r1, r0
 800860c:	d00b      	beq.n	8008626 <__lo0bits+0x22>
 800860e:	07da      	lsls	r2, r3, #31
 8008610:	d423      	bmi.n	800865a <__lo0bits+0x56>
 8008612:	0798      	lsls	r0, r3, #30
 8008614:	bf49      	itett	mi
 8008616:	085b      	lsrmi	r3, r3, #1
 8008618:	089b      	lsrpl	r3, r3, #2
 800861a:	2001      	movmi	r0, #1
 800861c:	600b      	strmi	r3, [r1, #0]
 800861e:	bf5c      	itt	pl
 8008620:	600b      	strpl	r3, [r1, #0]
 8008622:	2002      	movpl	r0, #2
 8008624:	4770      	bx	lr
 8008626:	b298      	uxth	r0, r3
 8008628:	b9a8      	cbnz	r0, 8008656 <__lo0bits+0x52>
 800862a:	0c1b      	lsrs	r3, r3, #16
 800862c:	2010      	movs	r0, #16
 800862e:	b2da      	uxtb	r2, r3
 8008630:	b90a      	cbnz	r2, 8008636 <__lo0bits+0x32>
 8008632:	3008      	adds	r0, #8
 8008634:	0a1b      	lsrs	r3, r3, #8
 8008636:	071a      	lsls	r2, r3, #28
 8008638:	bf04      	itt	eq
 800863a:	091b      	lsreq	r3, r3, #4
 800863c:	3004      	addeq	r0, #4
 800863e:	079a      	lsls	r2, r3, #30
 8008640:	bf04      	itt	eq
 8008642:	089b      	lsreq	r3, r3, #2
 8008644:	3002      	addeq	r0, #2
 8008646:	07da      	lsls	r2, r3, #31
 8008648:	d403      	bmi.n	8008652 <__lo0bits+0x4e>
 800864a:	085b      	lsrs	r3, r3, #1
 800864c:	f100 0001 	add.w	r0, r0, #1
 8008650:	d005      	beq.n	800865e <__lo0bits+0x5a>
 8008652:	600b      	str	r3, [r1, #0]
 8008654:	4770      	bx	lr
 8008656:	4610      	mov	r0, r2
 8008658:	e7e9      	b.n	800862e <__lo0bits+0x2a>
 800865a:	2000      	movs	r0, #0
 800865c:	4770      	bx	lr
 800865e:	2020      	movs	r0, #32
 8008660:	4770      	bx	lr
	...

08008664 <__i2b>:
 8008664:	b510      	push	{r4, lr}
 8008666:	460c      	mov	r4, r1
 8008668:	2101      	movs	r1, #1
 800866a:	f7ff ff03 	bl	8008474 <_Balloc>
 800866e:	4602      	mov	r2, r0
 8008670:	b928      	cbnz	r0, 800867e <__i2b+0x1a>
 8008672:	4b05      	ldr	r3, [pc, #20]	; (8008688 <__i2b+0x24>)
 8008674:	4805      	ldr	r0, [pc, #20]	; (800868c <__i2b+0x28>)
 8008676:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800867a:	f000 fc03 	bl	8008e84 <__assert_func>
 800867e:	2301      	movs	r3, #1
 8008680:	6144      	str	r4, [r0, #20]
 8008682:	6103      	str	r3, [r0, #16]
 8008684:	bd10      	pop	{r4, pc}
 8008686:	bf00      	nop
 8008688:	0800cca0 	.word	0x0800cca0
 800868c:	0800ccb1 	.word	0x0800ccb1

08008690 <__multiply>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	4691      	mov	r9, r2
 8008696:	690a      	ldr	r2, [r1, #16]
 8008698:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800869c:	429a      	cmp	r2, r3
 800869e:	bfb8      	it	lt
 80086a0:	460b      	movlt	r3, r1
 80086a2:	460c      	mov	r4, r1
 80086a4:	bfbc      	itt	lt
 80086a6:	464c      	movlt	r4, r9
 80086a8:	4699      	movlt	r9, r3
 80086aa:	6927      	ldr	r7, [r4, #16]
 80086ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086b0:	68a3      	ldr	r3, [r4, #8]
 80086b2:	6861      	ldr	r1, [r4, #4]
 80086b4:	eb07 060a 	add.w	r6, r7, sl
 80086b8:	42b3      	cmp	r3, r6
 80086ba:	b085      	sub	sp, #20
 80086bc:	bfb8      	it	lt
 80086be:	3101      	addlt	r1, #1
 80086c0:	f7ff fed8 	bl	8008474 <_Balloc>
 80086c4:	b930      	cbnz	r0, 80086d4 <__multiply+0x44>
 80086c6:	4602      	mov	r2, r0
 80086c8:	4b44      	ldr	r3, [pc, #272]	; (80087dc <__multiply+0x14c>)
 80086ca:	4845      	ldr	r0, [pc, #276]	; (80087e0 <__multiply+0x150>)
 80086cc:	f240 115d 	movw	r1, #349	; 0x15d
 80086d0:	f000 fbd8 	bl	8008e84 <__assert_func>
 80086d4:	f100 0514 	add.w	r5, r0, #20
 80086d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086dc:	462b      	mov	r3, r5
 80086de:	2200      	movs	r2, #0
 80086e0:	4543      	cmp	r3, r8
 80086e2:	d321      	bcc.n	8008728 <__multiply+0x98>
 80086e4:	f104 0314 	add.w	r3, r4, #20
 80086e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086ec:	f109 0314 	add.w	r3, r9, #20
 80086f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086f4:	9202      	str	r2, [sp, #8]
 80086f6:	1b3a      	subs	r2, r7, r4
 80086f8:	3a15      	subs	r2, #21
 80086fa:	f022 0203 	bic.w	r2, r2, #3
 80086fe:	3204      	adds	r2, #4
 8008700:	f104 0115 	add.w	r1, r4, #21
 8008704:	428f      	cmp	r7, r1
 8008706:	bf38      	it	cc
 8008708:	2204      	movcc	r2, #4
 800870a:	9201      	str	r2, [sp, #4]
 800870c:	9a02      	ldr	r2, [sp, #8]
 800870e:	9303      	str	r3, [sp, #12]
 8008710:	429a      	cmp	r2, r3
 8008712:	d80c      	bhi.n	800872e <__multiply+0x9e>
 8008714:	2e00      	cmp	r6, #0
 8008716:	dd03      	ble.n	8008720 <__multiply+0x90>
 8008718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800871c:	2b00      	cmp	r3, #0
 800871e:	d05a      	beq.n	80087d6 <__multiply+0x146>
 8008720:	6106      	str	r6, [r0, #16]
 8008722:	b005      	add	sp, #20
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	f843 2b04 	str.w	r2, [r3], #4
 800872c:	e7d8      	b.n	80086e0 <__multiply+0x50>
 800872e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008732:	f1ba 0f00 	cmp.w	sl, #0
 8008736:	d024      	beq.n	8008782 <__multiply+0xf2>
 8008738:	f104 0e14 	add.w	lr, r4, #20
 800873c:	46a9      	mov	r9, r5
 800873e:	f04f 0c00 	mov.w	ip, #0
 8008742:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008746:	f8d9 1000 	ldr.w	r1, [r9]
 800874a:	fa1f fb82 	uxth.w	fp, r2
 800874e:	b289      	uxth	r1, r1
 8008750:	fb0a 110b 	mla	r1, sl, fp, r1
 8008754:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008758:	f8d9 2000 	ldr.w	r2, [r9]
 800875c:	4461      	add	r1, ip
 800875e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008762:	fb0a c20b 	mla	r2, sl, fp, ip
 8008766:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800876a:	b289      	uxth	r1, r1
 800876c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008770:	4577      	cmp	r7, lr
 8008772:	f849 1b04 	str.w	r1, [r9], #4
 8008776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800877a:	d8e2      	bhi.n	8008742 <__multiply+0xb2>
 800877c:	9a01      	ldr	r2, [sp, #4]
 800877e:	f845 c002 	str.w	ip, [r5, r2]
 8008782:	9a03      	ldr	r2, [sp, #12]
 8008784:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008788:	3304      	adds	r3, #4
 800878a:	f1b9 0f00 	cmp.w	r9, #0
 800878e:	d020      	beq.n	80087d2 <__multiply+0x142>
 8008790:	6829      	ldr	r1, [r5, #0]
 8008792:	f104 0c14 	add.w	ip, r4, #20
 8008796:	46ae      	mov	lr, r5
 8008798:	f04f 0a00 	mov.w	sl, #0
 800879c:	f8bc b000 	ldrh.w	fp, [ip]
 80087a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087a4:	fb09 220b 	mla	r2, r9, fp, r2
 80087a8:	4492      	add	sl, r2
 80087aa:	b289      	uxth	r1, r1
 80087ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80087b0:	f84e 1b04 	str.w	r1, [lr], #4
 80087b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087b8:	f8be 1000 	ldrh.w	r1, [lr]
 80087bc:	0c12      	lsrs	r2, r2, #16
 80087be:	fb09 1102 	mla	r1, r9, r2, r1
 80087c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087c6:	4567      	cmp	r7, ip
 80087c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087cc:	d8e6      	bhi.n	800879c <__multiply+0x10c>
 80087ce:	9a01      	ldr	r2, [sp, #4]
 80087d0:	50a9      	str	r1, [r5, r2]
 80087d2:	3504      	adds	r5, #4
 80087d4:	e79a      	b.n	800870c <__multiply+0x7c>
 80087d6:	3e01      	subs	r6, #1
 80087d8:	e79c      	b.n	8008714 <__multiply+0x84>
 80087da:	bf00      	nop
 80087dc:	0800cca0 	.word	0x0800cca0
 80087e0:	0800ccb1 	.word	0x0800ccb1

080087e4 <__pow5mult>:
 80087e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e8:	4615      	mov	r5, r2
 80087ea:	f012 0203 	ands.w	r2, r2, #3
 80087ee:	4606      	mov	r6, r0
 80087f0:	460f      	mov	r7, r1
 80087f2:	d007      	beq.n	8008804 <__pow5mult+0x20>
 80087f4:	4c25      	ldr	r4, [pc, #148]	; (800888c <__pow5mult+0xa8>)
 80087f6:	3a01      	subs	r2, #1
 80087f8:	2300      	movs	r3, #0
 80087fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087fe:	f7ff fe9b 	bl	8008538 <__multadd>
 8008802:	4607      	mov	r7, r0
 8008804:	10ad      	asrs	r5, r5, #2
 8008806:	d03d      	beq.n	8008884 <__pow5mult+0xa0>
 8008808:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800880a:	b97c      	cbnz	r4, 800882c <__pow5mult+0x48>
 800880c:	2010      	movs	r0, #16
 800880e:	f7fe f8e1 	bl	80069d4 <malloc>
 8008812:	4602      	mov	r2, r0
 8008814:	6270      	str	r0, [r6, #36]	; 0x24
 8008816:	b928      	cbnz	r0, 8008824 <__pow5mult+0x40>
 8008818:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <__pow5mult+0xac>)
 800881a:	481e      	ldr	r0, [pc, #120]	; (8008894 <__pow5mult+0xb0>)
 800881c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008820:	f000 fb30 	bl	8008e84 <__assert_func>
 8008824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008828:	6004      	str	r4, [r0, #0]
 800882a:	60c4      	str	r4, [r0, #12]
 800882c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008834:	b94c      	cbnz	r4, 800884a <__pow5mult+0x66>
 8008836:	f240 2171 	movw	r1, #625	; 0x271
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff ff12 	bl	8008664 <__i2b>
 8008840:	2300      	movs	r3, #0
 8008842:	f8c8 0008 	str.w	r0, [r8, #8]
 8008846:	4604      	mov	r4, r0
 8008848:	6003      	str	r3, [r0, #0]
 800884a:	f04f 0900 	mov.w	r9, #0
 800884e:	07eb      	lsls	r3, r5, #31
 8008850:	d50a      	bpl.n	8008868 <__pow5mult+0x84>
 8008852:	4639      	mov	r1, r7
 8008854:	4622      	mov	r2, r4
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ff1a 	bl	8008690 <__multiply>
 800885c:	4639      	mov	r1, r7
 800885e:	4680      	mov	r8, r0
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff fe47 	bl	80084f4 <_Bfree>
 8008866:	4647      	mov	r7, r8
 8008868:	106d      	asrs	r5, r5, #1
 800886a:	d00b      	beq.n	8008884 <__pow5mult+0xa0>
 800886c:	6820      	ldr	r0, [r4, #0]
 800886e:	b938      	cbnz	r0, 8008880 <__pow5mult+0x9c>
 8008870:	4622      	mov	r2, r4
 8008872:	4621      	mov	r1, r4
 8008874:	4630      	mov	r0, r6
 8008876:	f7ff ff0b 	bl	8008690 <__multiply>
 800887a:	6020      	str	r0, [r4, #0]
 800887c:	f8c0 9000 	str.w	r9, [r0]
 8008880:	4604      	mov	r4, r0
 8008882:	e7e4      	b.n	800884e <__pow5mult+0x6a>
 8008884:	4638      	mov	r0, r7
 8008886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800888a:	bf00      	nop
 800888c:	0800ce00 	.word	0x0800ce00
 8008890:	0800cc2e 	.word	0x0800cc2e
 8008894:	0800ccb1 	.word	0x0800ccb1

08008898 <__lshift>:
 8008898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889c:	460c      	mov	r4, r1
 800889e:	6849      	ldr	r1, [r1, #4]
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	4607      	mov	r7, r0
 80088aa:	4691      	mov	r9, r2
 80088ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088b0:	f108 0601 	add.w	r6, r8, #1
 80088b4:	42b3      	cmp	r3, r6
 80088b6:	db0b      	blt.n	80088d0 <__lshift+0x38>
 80088b8:	4638      	mov	r0, r7
 80088ba:	f7ff fddb 	bl	8008474 <_Balloc>
 80088be:	4605      	mov	r5, r0
 80088c0:	b948      	cbnz	r0, 80088d6 <__lshift+0x3e>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b2a      	ldr	r3, [pc, #168]	; (8008970 <__lshift+0xd8>)
 80088c6:	482b      	ldr	r0, [pc, #172]	; (8008974 <__lshift+0xdc>)
 80088c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088cc:	f000 fada 	bl	8008e84 <__assert_func>
 80088d0:	3101      	adds	r1, #1
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	e7ee      	b.n	80088b4 <__lshift+0x1c>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f100 0114 	add.w	r1, r0, #20
 80088dc:	f100 0210 	add.w	r2, r0, #16
 80088e0:	4618      	mov	r0, r3
 80088e2:	4553      	cmp	r3, sl
 80088e4:	db37      	blt.n	8008956 <__lshift+0xbe>
 80088e6:	6920      	ldr	r0, [r4, #16]
 80088e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088ec:	f104 0314 	add.w	r3, r4, #20
 80088f0:	f019 091f 	ands.w	r9, r9, #31
 80088f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088fc:	d02f      	beq.n	800895e <__lshift+0xc6>
 80088fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008902:	468a      	mov	sl, r1
 8008904:	f04f 0c00 	mov.w	ip, #0
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	fa02 f209 	lsl.w	r2, r2, r9
 800890e:	ea42 020c 	orr.w	r2, r2, ip
 8008912:	f84a 2b04 	str.w	r2, [sl], #4
 8008916:	f853 2b04 	ldr.w	r2, [r3], #4
 800891a:	4298      	cmp	r0, r3
 800891c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008920:	d8f2      	bhi.n	8008908 <__lshift+0x70>
 8008922:	1b03      	subs	r3, r0, r4
 8008924:	3b15      	subs	r3, #21
 8008926:	f023 0303 	bic.w	r3, r3, #3
 800892a:	3304      	adds	r3, #4
 800892c:	f104 0215 	add.w	r2, r4, #21
 8008930:	4290      	cmp	r0, r2
 8008932:	bf38      	it	cc
 8008934:	2304      	movcc	r3, #4
 8008936:	f841 c003 	str.w	ip, [r1, r3]
 800893a:	f1bc 0f00 	cmp.w	ip, #0
 800893e:	d001      	beq.n	8008944 <__lshift+0xac>
 8008940:	f108 0602 	add.w	r6, r8, #2
 8008944:	3e01      	subs	r6, #1
 8008946:	4638      	mov	r0, r7
 8008948:	612e      	str	r6, [r5, #16]
 800894a:	4621      	mov	r1, r4
 800894c:	f7ff fdd2 	bl	80084f4 <_Bfree>
 8008950:	4628      	mov	r0, r5
 8008952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008956:	f842 0f04 	str.w	r0, [r2, #4]!
 800895a:	3301      	adds	r3, #1
 800895c:	e7c1      	b.n	80088e2 <__lshift+0x4a>
 800895e:	3904      	subs	r1, #4
 8008960:	f853 2b04 	ldr.w	r2, [r3], #4
 8008964:	f841 2f04 	str.w	r2, [r1, #4]!
 8008968:	4298      	cmp	r0, r3
 800896a:	d8f9      	bhi.n	8008960 <__lshift+0xc8>
 800896c:	e7ea      	b.n	8008944 <__lshift+0xac>
 800896e:	bf00      	nop
 8008970:	0800cca0 	.word	0x0800cca0
 8008974:	0800ccb1 	.word	0x0800ccb1

08008978 <__mcmp>:
 8008978:	b530      	push	{r4, r5, lr}
 800897a:	6902      	ldr	r2, [r0, #16]
 800897c:	690c      	ldr	r4, [r1, #16]
 800897e:	1b12      	subs	r2, r2, r4
 8008980:	d10e      	bne.n	80089a0 <__mcmp+0x28>
 8008982:	f100 0314 	add.w	r3, r0, #20
 8008986:	3114      	adds	r1, #20
 8008988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800898c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008998:	42a5      	cmp	r5, r4
 800899a:	d003      	beq.n	80089a4 <__mcmp+0x2c>
 800899c:	d305      	bcc.n	80089aa <__mcmp+0x32>
 800899e:	2201      	movs	r2, #1
 80089a0:	4610      	mov	r0, r2
 80089a2:	bd30      	pop	{r4, r5, pc}
 80089a4:	4283      	cmp	r3, r0
 80089a6:	d3f3      	bcc.n	8008990 <__mcmp+0x18>
 80089a8:	e7fa      	b.n	80089a0 <__mcmp+0x28>
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295
 80089ae:	e7f7      	b.n	80089a0 <__mcmp+0x28>

080089b0 <__mdiff>:
 80089b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	460c      	mov	r4, r1
 80089b6:	4606      	mov	r6, r0
 80089b8:	4611      	mov	r1, r2
 80089ba:	4620      	mov	r0, r4
 80089bc:	4690      	mov	r8, r2
 80089be:	f7ff ffdb 	bl	8008978 <__mcmp>
 80089c2:	1e05      	subs	r5, r0, #0
 80089c4:	d110      	bne.n	80089e8 <__mdiff+0x38>
 80089c6:	4629      	mov	r1, r5
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff fd53 	bl	8008474 <_Balloc>
 80089ce:	b930      	cbnz	r0, 80089de <__mdiff+0x2e>
 80089d0:	4b3a      	ldr	r3, [pc, #232]	; (8008abc <__mdiff+0x10c>)
 80089d2:	4602      	mov	r2, r0
 80089d4:	f240 2132 	movw	r1, #562	; 0x232
 80089d8:	4839      	ldr	r0, [pc, #228]	; (8008ac0 <__mdiff+0x110>)
 80089da:	f000 fa53 	bl	8008e84 <__assert_func>
 80089de:	2301      	movs	r3, #1
 80089e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e8:	bfa4      	itt	ge
 80089ea:	4643      	movge	r3, r8
 80089ec:	46a0      	movge	r8, r4
 80089ee:	4630      	mov	r0, r6
 80089f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089f4:	bfa6      	itte	ge
 80089f6:	461c      	movge	r4, r3
 80089f8:	2500      	movge	r5, #0
 80089fa:	2501      	movlt	r5, #1
 80089fc:	f7ff fd3a 	bl	8008474 <_Balloc>
 8008a00:	b920      	cbnz	r0, 8008a0c <__mdiff+0x5c>
 8008a02:	4b2e      	ldr	r3, [pc, #184]	; (8008abc <__mdiff+0x10c>)
 8008a04:	4602      	mov	r2, r0
 8008a06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a0a:	e7e5      	b.n	80089d8 <__mdiff+0x28>
 8008a0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a10:	6926      	ldr	r6, [r4, #16]
 8008a12:	60c5      	str	r5, [r0, #12]
 8008a14:	f104 0914 	add.w	r9, r4, #20
 8008a18:	f108 0514 	add.w	r5, r8, #20
 8008a1c:	f100 0e14 	add.w	lr, r0, #20
 8008a20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a28:	f108 0210 	add.w	r2, r8, #16
 8008a2c:	46f2      	mov	sl, lr
 8008a2e:	2100      	movs	r1, #0
 8008a30:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a38:	fa1f f883 	uxth.w	r8, r3
 8008a3c:	fa11 f18b 	uxtah	r1, r1, fp
 8008a40:	0c1b      	lsrs	r3, r3, #16
 8008a42:	eba1 0808 	sub.w	r8, r1, r8
 8008a46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a4e:	fa1f f888 	uxth.w	r8, r8
 8008a52:	1419      	asrs	r1, r3, #16
 8008a54:	454e      	cmp	r6, r9
 8008a56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a5a:	f84a 3b04 	str.w	r3, [sl], #4
 8008a5e:	d8e7      	bhi.n	8008a30 <__mdiff+0x80>
 8008a60:	1b33      	subs	r3, r6, r4
 8008a62:	3b15      	subs	r3, #21
 8008a64:	f023 0303 	bic.w	r3, r3, #3
 8008a68:	3304      	adds	r3, #4
 8008a6a:	3415      	adds	r4, #21
 8008a6c:	42a6      	cmp	r6, r4
 8008a6e:	bf38      	it	cc
 8008a70:	2304      	movcc	r3, #4
 8008a72:	441d      	add	r5, r3
 8008a74:	4473      	add	r3, lr
 8008a76:	469e      	mov	lr, r3
 8008a78:	462e      	mov	r6, r5
 8008a7a:	4566      	cmp	r6, ip
 8008a7c:	d30e      	bcc.n	8008a9c <__mdiff+0xec>
 8008a7e:	f10c 0203 	add.w	r2, ip, #3
 8008a82:	1b52      	subs	r2, r2, r5
 8008a84:	f022 0203 	bic.w	r2, r2, #3
 8008a88:	3d03      	subs	r5, #3
 8008a8a:	45ac      	cmp	ip, r5
 8008a8c:	bf38      	it	cc
 8008a8e:	2200      	movcc	r2, #0
 8008a90:	441a      	add	r2, r3
 8008a92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a96:	b17b      	cbz	r3, 8008ab8 <__mdiff+0x108>
 8008a98:	6107      	str	r7, [r0, #16]
 8008a9a:	e7a3      	b.n	80089e4 <__mdiff+0x34>
 8008a9c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008aa0:	fa11 f288 	uxtah	r2, r1, r8
 8008aa4:	1414      	asrs	r4, r2, #16
 8008aa6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008aaa:	b292      	uxth	r2, r2
 8008aac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ab0:	f84e 2b04 	str.w	r2, [lr], #4
 8008ab4:	1421      	asrs	r1, r4, #16
 8008ab6:	e7e0      	b.n	8008a7a <__mdiff+0xca>
 8008ab8:	3f01      	subs	r7, #1
 8008aba:	e7ea      	b.n	8008a92 <__mdiff+0xe2>
 8008abc:	0800cca0 	.word	0x0800cca0
 8008ac0:	0800ccb1 	.word	0x0800ccb1

08008ac4 <__d2b>:
 8008ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	4689      	mov	r9, r1
 8008aca:	2101      	movs	r1, #1
 8008acc:	ec57 6b10 	vmov	r6, r7, d0
 8008ad0:	4690      	mov	r8, r2
 8008ad2:	f7ff fccf 	bl	8008474 <_Balloc>
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	b930      	cbnz	r0, 8008ae8 <__d2b+0x24>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4b25      	ldr	r3, [pc, #148]	; (8008b74 <__d2b+0xb0>)
 8008ade:	4826      	ldr	r0, [pc, #152]	; (8008b78 <__d2b+0xb4>)
 8008ae0:	f240 310a 	movw	r1, #778	; 0x30a
 8008ae4:	f000 f9ce 	bl	8008e84 <__assert_func>
 8008ae8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008aec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008af0:	bb35      	cbnz	r5, 8008b40 <__d2b+0x7c>
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	d028      	beq.n	8008b4a <__d2b+0x86>
 8008af8:	4668      	mov	r0, sp
 8008afa:	9600      	str	r6, [sp, #0]
 8008afc:	f7ff fd82 	bl	8008604 <__lo0bits>
 8008b00:	9900      	ldr	r1, [sp, #0]
 8008b02:	b300      	cbz	r0, 8008b46 <__d2b+0x82>
 8008b04:	9a01      	ldr	r2, [sp, #4]
 8008b06:	f1c0 0320 	rsb	r3, r0, #32
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	430b      	orrs	r3, r1
 8008b10:	40c2      	lsrs	r2, r0
 8008b12:	6163      	str	r3, [r4, #20]
 8008b14:	9201      	str	r2, [sp, #4]
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	61a3      	str	r3, [r4, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bf14      	ite	ne
 8008b1e:	2202      	movne	r2, #2
 8008b20:	2201      	moveq	r2, #1
 8008b22:	6122      	str	r2, [r4, #16]
 8008b24:	b1d5      	cbz	r5, 8008b5c <__d2b+0x98>
 8008b26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b2a:	4405      	add	r5, r0
 8008b2c:	f8c9 5000 	str.w	r5, [r9]
 8008b30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b34:	f8c8 0000 	str.w	r0, [r8]
 8008b38:	4620      	mov	r0, r4
 8008b3a:	b003      	add	sp, #12
 8008b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b44:	e7d5      	b.n	8008af2 <__d2b+0x2e>
 8008b46:	6161      	str	r1, [r4, #20]
 8008b48:	e7e5      	b.n	8008b16 <__d2b+0x52>
 8008b4a:	a801      	add	r0, sp, #4
 8008b4c:	f7ff fd5a 	bl	8008604 <__lo0bits>
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	6163      	str	r3, [r4, #20]
 8008b54:	2201      	movs	r2, #1
 8008b56:	6122      	str	r2, [r4, #16]
 8008b58:	3020      	adds	r0, #32
 8008b5a:	e7e3      	b.n	8008b24 <__d2b+0x60>
 8008b5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b64:	f8c9 0000 	str.w	r0, [r9]
 8008b68:	6918      	ldr	r0, [r3, #16]
 8008b6a:	f7ff fd2b 	bl	80085c4 <__hi0bits>
 8008b6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b72:	e7df      	b.n	8008b34 <__d2b+0x70>
 8008b74:	0800cca0 	.word	0x0800cca0
 8008b78:	0800ccb1 	.word	0x0800ccb1

08008b7c <_calloc_r>:
 8008b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b7e:	fba1 2402 	umull	r2, r4, r1, r2
 8008b82:	b94c      	cbnz	r4, 8008b98 <_calloc_r+0x1c>
 8008b84:	4611      	mov	r1, r2
 8008b86:	9201      	str	r2, [sp, #4]
 8008b88:	f7fd ffae 	bl	8006ae8 <_malloc_r>
 8008b8c:	9a01      	ldr	r2, [sp, #4]
 8008b8e:	4605      	mov	r5, r0
 8008b90:	b930      	cbnz	r0, 8008ba0 <_calloc_r+0x24>
 8008b92:	4628      	mov	r0, r5
 8008b94:	b003      	add	sp, #12
 8008b96:	bd30      	pop	{r4, r5, pc}
 8008b98:	220c      	movs	r2, #12
 8008b9a:	6002      	str	r2, [r0, #0]
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	e7f8      	b.n	8008b92 <_calloc_r+0x16>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	f7fd ff2d 	bl	8006a00 <memset>
 8008ba6:	e7f4      	b.n	8008b92 <_calloc_r+0x16>

08008ba8 <__ssputs_r>:
 8008ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	688e      	ldr	r6, [r1, #8]
 8008bae:	429e      	cmp	r6, r3
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	4690      	mov	r8, r2
 8008bb6:	461f      	mov	r7, r3
 8008bb8:	d838      	bhi.n	8008c2c <__ssputs_r+0x84>
 8008bba:	898a      	ldrh	r2, [r1, #12]
 8008bbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bc0:	d032      	beq.n	8008c28 <__ssputs_r+0x80>
 8008bc2:	6825      	ldr	r5, [r4, #0]
 8008bc4:	6909      	ldr	r1, [r1, #16]
 8008bc6:	eba5 0901 	sub.w	r9, r5, r1
 8008bca:	6965      	ldr	r5, [r4, #20]
 8008bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	444b      	add	r3, r9
 8008bd8:	106d      	asrs	r5, r5, #1
 8008bda:	429d      	cmp	r5, r3
 8008bdc:	bf38      	it	cc
 8008bde:	461d      	movcc	r5, r3
 8008be0:	0553      	lsls	r3, r2, #21
 8008be2:	d531      	bpl.n	8008c48 <__ssputs_r+0xa0>
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7fd ff7f 	bl	8006ae8 <_malloc_r>
 8008bea:	4606      	mov	r6, r0
 8008bec:	b950      	cbnz	r0, 8008c04 <__ssputs_r+0x5c>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	f8ca 3000 	str.w	r3, [sl]
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c04:	6921      	ldr	r1, [r4, #16]
 8008c06:	464a      	mov	r2, r9
 8008c08:	f7fd feec 	bl	80069e4 <memcpy>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	6126      	str	r6, [r4, #16]
 8008c1a:	6165      	str	r5, [r4, #20]
 8008c1c:	444e      	add	r6, r9
 8008c1e:	eba5 0509 	sub.w	r5, r5, r9
 8008c22:	6026      	str	r6, [r4, #0]
 8008c24:	60a5      	str	r5, [r4, #8]
 8008c26:	463e      	mov	r6, r7
 8008c28:	42be      	cmp	r6, r7
 8008c2a:	d900      	bls.n	8008c2e <__ssputs_r+0x86>
 8008c2c:	463e      	mov	r6, r7
 8008c2e:	6820      	ldr	r0, [r4, #0]
 8008c30:	4632      	mov	r2, r6
 8008c32:	4641      	mov	r1, r8
 8008c34:	f000 f968 	bl	8008f08 <memmove>
 8008c38:	68a3      	ldr	r3, [r4, #8]
 8008c3a:	1b9b      	subs	r3, r3, r6
 8008c3c:	60a3      	str	r3, [r4, #8]
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	4433      	add	r3, r6
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	2000      	movs	r0, #0
 8008c46:	e7db      	b.n	8008c00 <__ssputs_r+0x58>
 8008c48:	462a      	mov	r2, r5
 8008c4a:	f000 f977 	bl	8008f3c <_realloc_r>
 8008c4e:	4606      	mov	r6, r0
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1e1      	bne.n	8008c18 <__ssputs_r+0x70>
 8008c54:	6921      	ldr	r1, [r4, #16]
 8008c56:	4650      	mov	r0, sl
 8008c58:	f7fd feda 	bl	8006a10 <_free_r>
 8008c5c:	e7c7      	b.n	8008bee <__ssputs_r+0x46>
	...

08008c60 <_svfiprintf_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4698      	mov	r8, r3
 8008c66:	898b      	ldrh	r3, [r1, #12]
 8008c68:	061b      	lsls	r3, r3, #24
 8008c6a:	b09d      	sub	sp, #116	; 0x74
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	460d      	mov	r5, r1
 8008c70:	4614      	mov	r4, r2
 8008c72:	d50e      	bpl.n	8008c92 <_svfiprintf_r+0x32>
 8008c74:	690b      	ldr	r3, [r1, #16]
 8008c76:	b963      	cbnz	r3, 8008c92 <_svfiprintf_r+0x32>
 8008c78:	2140      	movs	r1, #64	; 0x40
 8008c7a:	f7fd ff35 	bl	8006ae8 <_malloc_r>
 8008c7e:	6028      	str	r0, [r5, #0]
 8008c80:	6128      	str	r0, [r5, #16]
 8008c82:	b920      	cbnz	r0, 8008c8e <_svfiprintf_r+0x2e>
 8008c84:	230c      	movs	r3, #12
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e0d1      	b.n	8008e32 <_svfiprintf_r+0x1d2>
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	616b      	str	r3, [r5, #20]
 8008c92:	2300      	movs	r3, #0
 8008c94:	9309      	str	r3, [sp, #36]	; 0x24
 8008c96:	2320      	movs	r3, #32
 8008c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ca0:	2330      	movs	r3, #48	; 0x30
 8008ca2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e4c <_svfiprintf_r+0x1ec>
 8008ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008caa:	f04f 0901 	mov.w	r9, #1
 8008cae:	4623      	mov	r3, r4
 8008cb0:	469a      	mov	sl, r3
 8008cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cb6:	b10a      	cbz	r2, 8008cbc <_svfiprintf_r+0x5c>
 8008cb8:	2a25      	cmp	r2, #37	; 0x25
 8008cba:	d1f9      	bne.n	8008cb0 <_svfiprintf_r+0x50>
 8008cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8008cc0:	d00b      	beq.n	8008cda <_svfiprintf_r+0x7a>
 8008cc2:	465b      	mov	r3, fp
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff ff6d 	bl	8008ba8 <__ssputs_r>
 8008cce:	3001      	adds	r0, #1
 8008cd0:	f000 80aa 	beq.w	8008e28 <_svfiprintf_r+0x1c8>
 8008cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd6:	445a      	add	r2, fp
 8008cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cda:	f89a 3000 	ldrb.w	r3, [sl]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 80a2 	beq.w	8008e28 <_svfiprintf_r+0x1c8>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cee:	f10a 0a01 	add.w	sl, sl, #1
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	9307      	str	r3, [sp, #28]
 8008cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8008cfc:	4654      	mov	r4, sl
 8008cfe:	2205      	movs	r2, #5
 8008d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d04:	4851      	ldr	r0, [pc, #324]	; (8008e4c <_svfiprintf_r+0x1ec>)
 8008d06:	f7f7 fa6b 	bl	80001e0 <memchr>
 8008d0a:	9a04      	ldr	r2, [sp, #16]
 8008d0c:	b9d8      	cbnz	r0, 8008d46 <_svfiprintf_r+0xe6>
 8008d0e:	06d0      	lsls	r0, r2, #27
 8008d10:	bf44      	itt	mi
 8008d12:	2320      	movmi	r3, #32
 8008d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d18:	0711      	lsls	r1, r2, #28
 8008d1a:	bf44      	itt	mi
 8008d1c:	232b      	movmi	r3, #43	; 0x2b
 8008d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d22:	f89a 3000 	ldrb.w	r3, [sl]
 8008d26:	2b2a      	cmp	r3, #42	; 0x2a
 8008d28:	d015      	beq.n	8008d56 <_svfiprintf_r+0xf6>
 8008d2a:	9a07      	ldr	r2, [sp, #28]
 8008d2c:	4654      	mov	r4, sl
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f04f 0c0a 	mov.w	ip, #10
 8008d34:	4621      	mov	r1, r4
 8008d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d3a:	3b30      	subs	r3, #48	; 0x30
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	d94e      	bls.n	8008dde <_svfiprintf_r+0x17e>
 8008d40:	b1b0      	cbz	r0, 8008d70 <_svfiprintf_r+0x110>
 8008d42:	9207      	str	r2, [sp, #28]
 8008d44:	e014      	b.n	8008d70 <_svfiprintf_r+0x110>
 8008d46:	eba0 0308 	sub.w	r3, r0, r8
 8008d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	46a2      	mov	sl, r4
 8008d54:	e7d2      	b.n	8008cfc <_svfiprintf_r+0x9c>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	1d19      	adds	r1, r3, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	9103      	str	r1, [sp, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bfbb      	ittet	lt
 8008d62:	425b      	neglt	r3, r3
 8008d64:	f042 0202 	orrlt.w	r2, r2, #2
 8008d68:	9307      	strge	r3, [sp, #28]
 8008d6a:	9307      	strlt	r3, [sp, #28]
 8008d6c:	bfb8      	it	lt
 8008d6e:	9204      	strlt	r2, [sp, #16]
 8008d70:	7823      	ldrb	r3, [r4, #0]
 8008d72:	2b2e      	cmp	r3, #46	; 0x2e
 8008d74:	d10c      	bne.n	8008d90 <_svfiprintf_r+0x130>
 8008d76:	7863      	ldrb	r3, [r4, #1]
 8008d78:	2b2a      	cmp	r3, #42	; 0x2a
 8008d7a:	d135      	bne.n	8008de8 <_svfiprintf_r+0x188>
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	1d1a      	adds	r2, r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	9203      	str	r2, [sp, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfb8      	it	lt
 8008d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d8c:	3402      	adds	r4, #2
 8008d8e:	9305      	str	r3, [sp, #20]
 8008d90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e5c <_svfiprintf_r+0x1fc>
 8008d94:	7821      	ldrb	r1, [r4, #0]
 8008d96:	2203      	movs	r2, #3
 8008d98:	4650      	mov	r0, sl
 8008d9a:	f7f7 fa21 	bl	80001e0 <memchr>
 8008d9e:	b140      	cbz	r0, 8008db2 <_svfiprintf_r+0x152>
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	eba0 000a 	sub.w	r0, r0, sl
 8008da6:	fa03 f000 	lsl.w	r0, r3, r0
 8008daa:	9b04      	ldr	r3, [sp, #16]
 8008dac:	4303      	orrs	r3, r0
 8008dae:	3401      	adds	r4, #1
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db6:	4826      	ldr	r0, [pc, #152]	; (8008e50 <_svfiprintf_r+0x1f0>)
 8008db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dbc:	2206      	movs	r2, #6
 8008dbe:	f7f7 fa0f 	bl	80001e0 <memchr>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d038      	beq.n	8008e38 <_svfiprintf_r+0x1d8>
 8008dc6:	4b23      	ldr	r3, [pc, #140]	; (8008e54 <_svfiprintf_r+0x1f4>)
 8008dc8:	bb1b      	cbnz	r3, 8008e12 <_svfiprintf_r+0x1b2>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	3307      	adds	r3, #7
 8008dce:	f023 0307 	bic.w	r3, r3, #7
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	9303      	str	r3, [sp, #12]
 8008dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd8:	4433      	add	r3, r6
 8008dda:	9309      	str	r3, [sp, #36]	; 0x24
 8008ddc:	e767      	b.n	8008cae <_svfiprintf_r+0x4e>
 8008dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de2:	460c      	mov	r4, r1
 8008de4:	2001      	movs	r0, #1
 8008de6:	e7a5      	b.n	8008d34 <_svfiprintf_r+0xd4>
 8008de8:	2300      	movs	r3, #0
 8008dea:	3401      	adds	r4, #1
 8008dec:	9305      	str	r3, [sp, #20]
 8008dee:	4619      	mov	r1, r3
 8008df0:	f04f 0c0a 	mov.w	ip, #10
 8008df4:	4620      	mov	r0, r4
 8008df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dfa:	3a30      	subs	r2, #48	; 0x30
 8008dfc:	2a09      	cmp	r2, #9
 8008dfe:	d903      	bls.n	8008e08 <_svfiprintf_r+0x1a8>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0c5      	beq.n	8008d90 <_svfiprintf_r+0x130>
 8008e04:	9105      	str	r1, [sp, #20]
 8008e06:	e7c3      	b.n	8008d90 <_svfiprintf_r+0x130>
 8008e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7f0      	b.n	8008df4 <_svfiprintf_r+0x194>
 8008e12:	ab03      	add	r3, sp, #12
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	462a      	mov	r2, r5
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <_svfiprintf_r+0x1f8>)
 8008e1a:	a904      	add	r1, sp, #16
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f7fd ff77 	bl	8006d10 <_printf_float>
 8008e22:	1c42      	adds	r2, r0, #1
 8008e24:	4606      	mov	r6, r0
 8008e26:	d1d6      	bne.n	8008dd6 <_svfiprintf_r+0x176>
 8008e28:	89ab      	ldrh	r3, [r5, #12]
 8008e2a:	065b      	lsls	r3, r3, #25
 8008e2c:	f53f af2c 	bmi.w	8008c88 <_svfiprintf_r+0x28>
 8008e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e32:	b01d      	add	sp, #116	; 0x74
 8008e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	ab03      	add	r3, sp, #12
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <_svfiprintf_r+0x1f8>)
 8008e40:	a904      	add	r1, sp, #16
 8008e42:	4638      	mov	r0, r7
 8008e44:	f7fe fa08 	bl	8007258 <_printf_i>
 8008e48:	e7eb      	b.n	8008e22 <_svfiprintf_r+0x1c2>
 8008e4a:	bf00      	nop
 8008e4c:	0800ce0c 	.word	0x0800ce0c
 8008e50:	0800ce16 	.word	0x0800ce16
 8008e54:	08006d11 	.word	0x08006d11
 8008e58:	08008ba9 	.word	0x08008ba9
 8008e5c:	0800ce12 	.word	0x0800ce12

08008e60 <_read_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	; (8008e80 <_read_r+0x20>)
 8008e64:	4604      	mov	r4, r0
 8008e66:	4608      	mov	r0, r1
 8008e68:	4611      	mov	r1, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	602a      	str	r2, [r5, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7f8 ff18 	bl	8001ca4 <_read>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_read_r+0x1e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_read_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	2000a66c 	.word	0x2000a66c

08008e84 <__assert_func>:
 8008e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e86:	4614      	mov	r4, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <__assert_func+0x2c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4605      	mov	r5, r0
 8008e90:	68d8      	ldr	r0, [r3, #12]
 8008e92:	b14c      	cbz	r4, 8008ea8 <__assert_func+0x24>
 8008e94:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <__assert_func+0x30>)
 8008e96:	9100      	str	r1, [sp, #0]
 8008e98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e9c:	4906      	ldr	r1, [pc, #24]	; (8008eb8 <__assert_func+0x34>)
 8008e9e:	462b      	mov	r3, r5
 8008ea0:	f000 f80e 	bl	8008ec0 <fiprintf>
 8008ea4:	f000 faa0 	bl	80093e8 <abort>
 8008ea8:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <__assert_func+0x38>)
 8008eaa:	461c      	mov	r4, r3
 8008eac:	e7f3      	b.n	8008e96 <__assert_func+0x12>
 8008eae:	bf00      	nop
 8008eb0:	20000024 	.word	0x20000024
 8008eb4:	0800ce1d 	.word	0x0800ce1d
 8008eb8:	0800ce2a 	.word	0x0800ce2a
 8008ebc:	0800ce58 	.word	0x0800ce58

08008ec0 <fiprintf>:
 8008ec0:	b40e      	push	{r1, r2, r3}
 8008ec2:	b503      	push	{r0, r1, lr}
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	ab03      	add	r3, sp, #12
 8008ec8:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <fiprintf+0x20>)
 8008eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ece:	6800      	ldr	r0, [r0, #0]
 8008ed0:	9301      	str	r3, [sp, #4]
 8008ed2:	f000 f88b 	bl	8008fec <_vfiprintf_r>
 8008ed6:	b002      	add	sp, #8
 8008ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008edc:	b003      	add	sp, #12
 8008ede:	4770      	bx	lr
 8008ee0:	20000024 	.word	0x20000024

08008ee4 <__ascii_mbtowc>:
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	b901      	cbnz	r1, 8008eea <__ascii_mbtowc+0x6>
 8008ee8:	a901      	add	r1, sp, #4
 8008eea:	b142      	cbz	r2, 8008efe <__ascii_mbtowc+0x1a>
 8008eec:	b14b      	cbz	r3, 8008f02 <__ascii_mbtowc+0x1e>
 8008eee:	7813      	ldrb	r3, [r2, #0]
 8008ef0:	600b      	str	r3, [r1, #0]
 8008ef2:	7812      	ldrb	r2, [r2, #0]
 8008ef4:	1e10      	subs	r0, r2, #0
 8008ef6:	bf18      	it	ne
 8008ef8:	2001      	movne	r0, #1
 8008efa:	b002      	add	sp, #8
 8008efc:	4770      	bx	lr
 8008efe:	4610      	mov	r0, r2
 8008f00:	e7fb      	b.n	8008efa <__ascii_mbtowc+0x16>
 8008f02:	f06f 0001 	mvn.w	r0, #1
 8008f06:	e7f8      	b.n	8008efa <__ascii_mbtowc+0x16>

08008f08 <memmove>:
 8008f08:	4288      	cmp	r0, r1
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	eb01 0402 	add.w	r4, r1, r2
 8008f10:	d902      	bls.n	8008f18 <memmove+0x10>
 8008f12:	4284      	cmp	r4, r0
 8008f14:	4623      	mov	r3, r4
 8008f16:	d807      	bhi.n	8008f28 <memmove+0x20>
 8008f18:	1e43      	subs	r3, r0, #1
 8008f1a:	42a1      	cmp	r1, r4
 8008f1c:	d008      	beq.n	8008f30 <memmove+0x28>
 8008f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f26:	e7f8      	b.n	8008f1a <memmove+0x12>
 8008f28:	4402      	add	r2, r0
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	428a      	cmp	r2, r1
 8008f2e:	d100      	bne.n	8008f32 <memmove+0x2a>
 8008f30:	bd10      	pop	{r4, pc}
 8008f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f3a:	e7f7      	b.n	8008f2c <memmove+0x24>

08008f3c <_realloc_r>:
 8008f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f40:	4680      	mov	r8, r0
 8008f42:	4614      	mov	r4, r2
 8008f44:	460e      	mov	r6, r1
 8008f46:	b921      	cbnz	r1, 8008f52 <_realloc_r+0x16>
 8008f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	f7fd bdcb 	b.w	8006ae8 <_malloc_r>
 8008f52:	b92a      	cbnz	r2, 8008f60 <_realloc_r+0x24>
 8008f54:	f7fd fd5c 	bl	8006a10 <_free_r>
 8008f58:	4625      	mov	r5, r4
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f60:	f000 fa49 	bl	80093f6 <_malloc_usable_size_r>
 8008f64:	4284      	cmp	r4, r0
 8008f66:	4607      	mov	r7, r0
 8008f68:	d802      	bhi.n	8008f70 <_realloc_r+0x34>
 8008f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f6e:	d812      	bhi.n	8008f96 <_realloc_r+0x5a>
 8008f70:	4621      	mov	r1, r4
 8008f72:	4640      	mov	r0, r8
 8008f74:	f7fd fdb8 	bl	8006ae8 <_malloc_r>
 8008f78:	4605      	mov	r5, r0
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d0ed      	beq.n	8008f5a <_realloc_r+0x1e>
 8008f7e:	42bc      	cmp	r4, r7
 8008f80:	4622      	mov	r2, r4
 8008f82:	4631      	mov	r1, r6
 8008f84:	bf28      	it	cs
 8008f86:	463a      	movcs	r2, r7
 8008f88:	f7fd fd2c 	bl	80069e4 <memcpy>
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f7fd fd3e 	bl	8006a10 <_free_r>
 8008f94:	e7e1      	b.n	8008f5a <_realloc_r+0x1e>
 8008f96:	4635      	mov	r5, r6
 8008f98:	e7df      	b.n	8008f5a <_realloc_r+0x1e>

08008f9a <__sfputc_r>:
 8008f9a:	6893      	ldr	r3, [r2, #8]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	b410      	push	{r4}
 8008fa2:	6093      	str	r3, [r2, #8]
 8008fa4:	da08      	bge.n	8008fb8 <__sfputc_r+0x1e>
 8008fa6:	6994      	ldr	r4, [r2, #24]
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	db01      	blt.n	8008fb0 <__sfputc_r+0x16>
 8008fac:	290a      	cmp	r1, #10
 8008fae:	d103      	bne.n	8008fb8 <__sfputc_r+0x1e>
 8008fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb4:	f000 b94a 	b.w	800924c <__swbuf_r>
 8008fb8:	6813      	ldr	r3, [r2, #0]
 8008fba:	1c58      	adds	r0, r3, #1
 8008fbc:	6010      	str	r0, [r2, #0]
 8008fbe:	7019      	strb	r1, [r3, #0]
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <__sfputs_r>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	4606      	mov	r6, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	4614      	mov	r4, r2
 8008fd0:	18d5      	adds	r5, r2, r3
 8008fd2:	42ac      	cmp	r4, r5
 8008fd4:	d101      	bne.n	8008fda <__sfputs_r+0x12>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e007      	b.n	8008fea <__sfputs_r+0x22>
 8008fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fde:	463a      	mov	r2, r7
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f7ff ffda 	bl	8008f9a <__sfputc_r>
 8008fe6:	1c43      	adds	r3, r0, #1
 8008fe8:	d1f3      	bne.n	8008fd2 <__sfputs_r+0xa>
 8008fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fec <_vfiprintf_r>:
 8008fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	460d      	mov	r5, r1
 8008ff2:	b09d      	sub	sp, #116	; 0x74
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	4698      	mov	r8, r3
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	b118      	cbz	r0, 8009004 <_vfiprintf_r+0x18>
 8008ffc:	6983      	ldr	r3, [r0, #24]
 8008ffe:	b90b      	cbnz	r3, 8009004 <_vfiprintf_r+0x18>
 8009000:	f7fd fbbe 	bl	8006780 <__sinit>
 8009004:	4b89      	ldr	r3, [pc, #548]	; (800922c <_vfiprintf_r+0x240>)
 8009006:	429d      	cmp	r5, r3
 8009008:	d11b      	bne.n	8009042 <_vfiprintf_r+0x56>
 800900a:	6875      	ldr	r5, [r6, #4]
 800900c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800900e:	07d9      	lsls	r1, r3, #31
 8009010:	d405      	bmi.n	800901e <_vfiprintf_r+0x32>
 8009012:	89ab      	ldrh	r3, [r5, #12]
 8009014:	059a      	lsls	r2, r3, #22
 8009016:	d402      	bmi.n	800901e <_vfiprintf_r+0x32>
 8009018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800901a:	f7fd fc74 	bl	8006906 <__retarget_lock_acquire_recursive>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	071b      	lsls	r3, r3, #28
 8009022:	d501      	bpl.n	8009028 <_vfiprintf_r+0x3c>
 8009024:	692b      	ldr	r3, [r5, #16]
 8009026:	b9eb      	cbnz	r3, 8009064 <_vfiprintf_r+0x78>
 8009028:	4629      	mov	r1, r5
 800902a:	4630      	mov	r0, r6
 800902c:	f000 f96e 	bl	800930c <__swsetup_r>
 8009030:	b1c0      	cbz	r0, 8009064 <_vfiprintf_r+0x78>
 8009032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009034:	07dc      	lsls	r4, r3, #31
 8009036:	d50e      	bpl.n	8009056 <_vfiprintf_r+0x6a>
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	b01d      	add	sp, #116	; 0x74
 800903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009042:	4b7b      	ldr	r3, [pc, #492]	; (8009230 <_vfiprintf_r+0x244>)
 8009044:	429d      	cmp	r5, r3
 8009046:	d101      	bne.n	800904c <_vfiprintf_r+0x60>
 8009048:	68b5      	ldr	r5, [r6, #8]
 800904a:	e7df      	b.n	800900c <_vfiprintf_r+0x20>
 800904c:	4b79      	ldr	r3, [pc, #484]	; (8009234 <_vfiprintf_r+0x248>)
 800904e:	429d      	cmp	r5, r3
 8009050:	bf08      	it	eq
 8009052:	68f5      	ldreq	r5, [r6, #12]
 8009054:	e7da      	b.n	800900c <_vfiprintf_r+0x20>
 8009056:	89ab      	ldrh	r3, [r5, #12]
 8009058:	0598      	lsls	r0, r3, #22
 800905a:	d4ed      	bmi.n	8009038 <_vfiprintf_r+0x4c>
 800905c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800905e:	f7fd fc53 	bl	8006908 <__retarget_lock_release_recursive>
 8009062:	e7e9      	b.n	8009038 <_vfiprintf_r+0x4c>
 8009064:	2300      	movs	r3, #0
 8009066:	9309      	str	r3, [sp, #36]	; 0x24
 8009068:	2320      	movs	r3, #32
 800906a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800906e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009072:	2330      	movs	r3, #48	; 0x30
 8009074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009238 <_vfiprintf_r+0x24c>
 8009078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800907c:	f04f 0901 	mov.w	r9, #1
 8009080:	4623      	mov	r3, r4
 8009082:	469a      	mov	sl, r3
 8009084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009088:	b10a      	cbz	r2, 800908e <_vfiprintf_r+0xa2>
 800908a:	2a25      	cmp	r2, #37	; 0x25
 800908c:	d1f9      	bne.n	8009082 <_vfiprintf_r+0x96>
 800908e:	ebba 0b04 	subs.w	fp, sl, r4
 8009092:	d00b      	beq.n	80090ac <_vfiprintf_r+0xc0>
 8009094:	465b      	mov	r3, fp
 8009096:	4622      	mov	r2, r4
 8009098:	4629      	mov	r1, r5
 800909a:	4630      	mov	r0, r6
 800909c:	f7ff ff94 	bl	8008fc8 <__sfputs_r>
 80090a0:	3001      	adds	r0, #1
 80090a2:	f000 80aa 	beq.w	80091fa <_vfiprintf_r+0x20e>
 80090a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a8:	445a      	add	r2, fp
 80090aa:	9209      	str	r2, [sp, #36]	; 0x24
 80090ac:	f89a 3000 	ldrb.w	r3, [sl]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80a2 	beq.w	80091fa <_vfiprintf_r+0x20e>
 80090b6:	2300      	movs	r3, #0
 80090b8:	f04f 32ff 	mov.w	r2, #4294967295
 80090bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090c0:	f10a 0a01 	add.w	sl, sl, #1
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	9307      	str	r3, [sp, #28]
 80090c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090cc:	931a      	str	r3, [sp, #104]	; 0x68
 80090ce:	4654      	mov	r4, sl
 80090d0:	2205      	movs	r2, #5
 80090d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d6:	4858      	ldr	r0, [pc, #352]	; (8009238 <_vfiprintf_r+0x24c>)
 80090d8:	f7f7 f882 	bl	80001e0 <memchr>
 80090dc:	9a04      	ldr	r2, [sp, #16]
 80090de:	b9d8      	cbnz	r0, 8009118 <_vfiprintf_r+0x12c>
 80090e0:	06d1      	lsls	r1, r2, #27
 80090e2:	bf44      	itt	mi
 80090e4:	2320      	movmi	r3, #32
 80090e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ea:	0713      	lsls	r3, r2, #28
 80090ec:	bf44      	itt	mi
 80090ee:	232b      	movmi	r3, #43	; 0x2b
 80090f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f4:	f89a 3000 	ldrb.w	r3, [sl]
 80090f8:	2b2a      	cmp	r3, #42	; 0x2a
 80090fa:	d015      	beq.n	8009128 <_vfiprintf_r+0x13c>
 80090fc:	9a07      	ldr	r2, [sp, #28]
 80090fe:	4654      	mov	r4, sl
 8009100:	2000      	movs	r0, #0
 8009102:	f04f 0c0a 	mov.w	ip, #10
 8009106:	4621      	mov	r1, r4
 8009108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800910c:	3b30      	subs	r3, #48	; 0x30
 800910e:	2b09      	cmp	r3, #9
 8009110:	d94e      	bls.n	80091b0 <_vfiprintf_r+0x1c4>
 8009112:	b1b0      	cbz	r0, 8009142 <_vfiprintf_r+0x156>
 8009114:	9207      	str	r2, [sp, #28]
 8009116:	e014      	b.n	8009142 <_vfiprintf_r+0x156>
 8009118:	eba0 0308 	sub.w	r3, r0, r8
 800911c:	fa09 f303 	lsl.w	r3, r9, r3
 8009120:	4313      	orrs	r3, r2
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	46a2      	mov	sl, r4
 8009126:	e7d2      	b.n	80090ce <_vfiprintf_r+0xe2>
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	1d19      	adds	r1, r3, #4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	9103      	str	r1, [sp, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bfbb      	ittet	lt
 8009134:	425b      	neglt	r3, r3
 8009136:	f042 0202 	orrlt.w	r2, r2, #2
 800913a:	9307      	strge	r3, [sp, #28]
 800913c:	9307      	strlt	r3, [sp, #28]
 800913e:	bfb8      	it	lt
 8009140:	9204      	strlt	r2, [sp, #16]
 8009142:	7823      	ldrb	r3, [r4, #0]
 8009144:	2b2e      	cmp	r3, #46	; 0x2e
 8009146:	d10c      	bne.n	8009162 <_vfiprintf_r+0x176>
 8009148:	7863      	ldrb	r3, [r4, #1]
 800914a:	2b2a      	cmp	r3, #42	; 0x2a
 800914c:	d135      	bne.n	80091ba <_vfiprintf_r+0x1ce>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	1d1a      	adds	r2, r3, #4
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	9203      	str	r2, [sp, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfb8      	it	lt
 800915a:	f04f 33ff 	movlt.w	r3, #4294967295
 800915e:	3402      	adds	r4, #2
 8009160:	9305      	str	r3, [sp, #20]
 8009162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009248 <_vfiprintf_r+0x25c>
 8009166:	7821      	ldrb	r1, [r4, #0]
 8009168:	2203      	movs	r2, #3
 800916a:	4650      	mov	r0, sl
 800916c:	f7f7 f838 	bl	80001e0 <memchr>
 8009170:	b140      	cbz	r0, 8009184 <_vfiprintf_r+0x198>
 8009172:	2340      	movs	r3, #64	; 0x40
 8009174:	eba0 000a 	sub.w	r0, r0, sl
 8009178:	fa03 f000 	lsl.w	r0, r3, r0
 800917c:	9b04      	ldr	r3, [sp, #16]
 800917e:	4303      	orrs	r3, r0
 8009180:	3401      	adds	r4, #1
 8009182:	9304      	str	r3, [sp, #16]
 8009184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009188:	482c      	ldr	r0, [pc, #176]	; (800923c <_vfiprintf_r+0x250>)
 800918a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800918e:	2206      	movs	r2, #6
 8009190:	f7f7 f826 	bl	80001e0 <memchr>
 8009194:	2800      	cmp	r0, #0
 8009196:	d03f      	beq.n	8009218 <_vfiprintf_r+0x22c>
 8009198:	4b29      	ldr	r3, [pc, #164]	; (8009240 <_vfiprintf_r+0x254>)
 800919a:	bb1b      	cbnz	r3, 80091e4 <_vfiprintf_r+0x1f8>
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	3307      	adds	r3, #7
 80091a0:	f023 0307 	bic.w	r3, r3, #7
 80091a4:	3308      	adds	r3, #8
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091aa:	443b      	add	r3, r7
 80091ac:	9309      	str	r3, [sp, #36]	; 0x24
 80091ae:	e767      	b.n	8009080 <_vfiprintf_r+0x94>
 80091b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091b4:	460c      	mov	r4, r1
 80091b6:	2001      	movs	r0, #1
 80091b8:	e7a5      	b.n	8009106 <_vfiprintf_r+0x11a>
 80091ba:	2300      	movs	r3, #0
 80091bc:	3401      	adds	r4, #1
 80091be:	9305      	str	r3, [sp, #20]
 80091c0:	4619      	mov	r1, r3
 80091c2:	f04f 0c0a 	mov.w	ip, #10
 80091c6:	4620      	mov	r0, r4
 80091c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091cc:	3a30      	subs	r2, #48	; 0x30
 80091ce:	2a09      	cmp	r2, #9
 80091d0:	d903      	bls.n	80091da <_vfiprintf_r+0x1ee>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0c5      	beq.n	8009162 <_vfiprintf_r+0x176>
 80091d6:	9105      	str	r1, [sp, #20]
 80091d8:	e7c3      	b.n	8009162 <_vfiprintf_r+0x176>
 80091da:	fb0c 2101 	mla	r1, ip, r1, r2
 80091de:	4604      	mov	r4, r0
 80091e0:	2301      	movs	r3, #1
 80091e2:	e7f0      	b.n	80091c6 <_vfiprintf_r+0x1da>
 80091e4:	ab03      	add	r3, sp, #12
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	462a      	mov	r2, r5
 80091ea:	4b16      	ldr	r3, [pc, #88]	; (8009244 <_vfiprintf_r+0x258>)
 80091ec:	a904      	add	r1, sp, #16
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7fd fd8e 	bl	8006d10 <_printf_float>
 80091f4:	4607      	mov	r7, r0
 80091f6:	1c78      	adds	r0, r7, #1
 80091f8:	d1d6      	bne.n	80091a8 <_vfiprintf_r+0x1bc>
 80091fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091fc:	07d9      	lsls	r1, r3, #31
 80091fe:	d405      	bmi.n	800920c <_vfiprintf_r+0x220>
 8009200:	89ab      	ldrh	r3, [r5, #12]
 8009202:	059a      	lsls	r2, r3, #22
 8009204:	d402      	bmi.n	800920c <_vfiprintf_r+0x220>
 8009206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009208:	f7fd fb7e 	bl	8006908 <__retarget_lock_release_recursive>
 800920c:	89ab      	ldrh	r3, [r5, #12]
 800920e:	065b      	lsls	r3, r3, #25
 8009210:	f53f af12 	bmi.w	8009038 <_vfiprintf_r+0x4c>
 8009214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009216:	e711      	b.n	800903c <_vfiprintf_r+0x50>
 8009218:	ab03      	add	r3, sp, #12
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	462a      	mov	r2, r5
 800921e:	4b09      	ldr	r3, [pc, #36]	; (8009244 <_vfiprintf_r+0x258>)
 8009220:	a904      	add	r1, sp, #16
 8009222:	4630      	mov	r0, r6
 8009224:	f7fe f818 	bl	8007258 <_printf_i>
 8009228:	e7e4      	b.n	80091f4 <_vfiprintf_r+0x208>
 800922a:	bf00      	nop
 800922c:	0800caa8 	.word	0x0800caa8
 8009230:	0800cac8 	.word	0x0800cac8
 8009234:	0800ca88 	.word	0x0800ca88
 8009238:	0800ce0c 	.word	0x0800ce0c
 800923c:	0800ce16 	.word	0x0800ce16
 8009240:	08006d11 	.word	0x08006d11
 8009244:	08008fc9 	.word	0x08008fc9
 8009248:	0800ce12 	.word	0x0800ce12

0800924c <__swbuf_r>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	460e      	mov	r6, r1
 8009250:	4614      	mov	r4, r2
 8009252:	4605      	mov	r5, r0
 8009254:	b118      	cbz	r0, 800925e <__swbuf_r+0x12>
 8009256:	6983      	ldr	r3, [r0, #24]
 8009258:	b90b      	cbnz	r3, 800925e <__swbuf_r+0x12>
 800925a:	f7fd fa91 	bl	8006780 <__sinit>
 800925e:	4b21      	ldr	r3, [pc, #132]	; (80092e4 <__swbuf_r+0x98>)
 8009260:	429c      	cmp	r4, r3
 8009262:	d12b      	bne.n	80092bc <__swbuf_r+0x70>
 8009264:	686c      	ldr	r4, [r5, #4]
 8009266:	69a3      	ldr	r3, [r4, #24]
 8009268:	60a3      	str	r3, [r4, #8]
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	071a      	lsls	r2, r3, #28
 800926e:	d52f      	bpl.n	80092d0 <__swbuf_r+0x84>
 8009270:	6923      	ldr	r3, [r4, #16]
 8009272:	b36b      	cbz	r3, 80092d0 <__swbuf_r+0x84>
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	1ac0      	subs	r0, r0, r3
 800927a:	6963      	ldr	r3, [r4, #20]
 800927c:	b2f6      	uxtb	r6, r6
 800927e:	4283      	cmp	r3, r0
 8009280:	4637      	mov	r7, r6
 8009282:	dc04      	bgt.n	800928e <__swbuf_r+0x42>
 8009284:	4621      	mov	r1, r4
 8009286:	4628      	mov	r0, r5
 8009288:	f7fd f9e6 	bl	8006658 <_fflush_r>
 800928c:	bb30      	cbnz	r0, 80092dc <__swbuf_r+0x90>
 800928e:	68a3      	ldr	r3, [r4, #8]
 8009290:	3b01      	subs	r3, #1
 8009292:	60a3      	str	r3, [r4, #8]
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	6022      	str	r2, [r4, #0]
 800929a:	701e      	strb	r6, [r3, #0]
 800929c:	6963      	ldr	r3, [r4, #20]
 800929e:	3001      	adds	r0, #1
 80092a0:	4283      	cmp	r3, r0
 80092a2:	d004      	beq.n	80092ae <__swbuf_r+0x62>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	07db      	lsls	r3, r3, #31
 80092a8:	d506      	bpl.n	80092b8 <__swbuf_r+0x6c>
 80092aa:	2e0a      	cmp	r6, #10
 80092ac:	d104      	bne.n	80092b8 <__swbuf_r+0x6c>
 80092ae:	4621      	mov	r1, r4
 80092b0:	4628      	mov	r0, r5
 80092b2:	f7fd f9d1 	bl	8006658 <_fflush_r>
 80092b6:	b988      	cbnz	r0, 80092dc <__swbuf_r+0x90>
 80092b8:	4638      	mov	r0, r7
 80092ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <__swbuf_r+0x9c>)
 80092be:	429c      	cmp	r4, r3
 80092c0:	d101      	bne.n	80092c6 <__swbuf_r+0x7a>
 80092c2:	68ac      	ldr	r4, [r5, #8]
 80092c4:	e7cf      	b.n	8009266 <__swbuf_r+0x1a>
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <__swbuf_r+0xa0>)
 80092c8:	429c      	cmp	r4, r3
 80092ca:	bf08      	it	eq
 80092cc:	68ec      	ldreq	r4, [r5, #12]
 80092ce:	e7ca      	b.n	8009266 <__swbuf_r+0x1a>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4628      	mov	r0, r5
 80092d4:	f000 f81a 	bl	800930c <__swsetup_r>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d0cb      	beq.n	8009274 <__swbuf_r+0x28>
 80092dc:	f04f 37ff 	mov.w	r7, #4294967295
 80092e0:	e7ea      	b.n	80092b8 <__swbuf_r+0x6c>
 80092e2:	bf00      	nop
 80092e4:	0800caa8 	.word	0x0800caa8
 80092e8:	0800cac8 	.word	0x0800cac8
 80092ec:	0800ca88 	.word	0x0800ca88

080092f0 <__ascii_wctomb>:
 80092f0:	b149      	cbz	r1, 8009306 <__ascii_wctomb+0x16>
 80092f2:	2aff      	cmp	r2, #255	; 0xff
 80092f4:	bf85      	ittet	hi
 80092f6:	238a      	movhi	r3, #138	; 0x8a
 80092f8:	6003      	strhi	r3, [r0, #0]
 80092fa:	700a      	strbls	r2, [r1, #0]
 80092fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009300:	bf98      	it	ls
 8009302:	2001      	movls	r0, #1
 8009304:	4770      	bx	lr
 8009306:	4608      	mov	r0, r1
 8009308:	4770      	bx	lr
	...

0800930c <__swsetup_r>:
 800930c:	4b32      	ldr	r3, [pc, #200]	; (80093d8 <__swsetup_r+0xcc>)
 800930e:	b570      	push	{r4, r5, r6, lr}
 8009310:	681d      	ldr	r5, [r3, #0]
 8009312:	4606      	mov	r6, r0
 8009314:	460c      	mov	r4, r1
 8009316:	b125      	cbz	r5, 8009322 <__swsetup_r+0x16>
 8009318:	69ab      	ldr	r3, [r5, #24]
 800931a:	b913      	cbnz	r3, 8009322 <__swsetup_r+0x16>
 800931c:	4628      	mov	r0, r5
 800931e:	f7fd fa2f 	bl	8006780 <__sinit>
 8009322:	4b2e      	ldr	r3, [pc, #184]	; (80093dc <__swsetup_r+0xd0>)
 8009324:	429c      	cmp	r4, r3
 8009326:	d10f      	bne.n	8009348 <__swsetup_r+0x3c>
 8009328:	686c      	ldr	r4, [r5, #4]
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009330:	0719      	lsls	r1, r3, #28
 8009332:	d42c      	bmi.n	800938e <__swsetup_r+0x82>
 8009334:	06dd      	lsls	r5, r3, #27
 8009336:	d411      	bmi.n	800935c <__swsetup_r+0x50>
 8009338:	2309      	movs	r3, #9
 800933a:	6033      	str	r3, [r6, #0]
 800933c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	f04f 30ff 	mov.w	r0, #4294967295
 8009346:	e03e      	b.n	80093c6 <__swsetup_r+0xba>
 8009348:	4b25      	ldr	r3, [pc, #148]	; (80093e0 <__swsetup_r+0xd4>)
 800934a:	429c      	cmp	r4, r3
 800934c:	d101      	bne.n	8009352 <__swsetup_r+0x46>
 800934e:	68ac      	ldr	r4, [r5, #8]
 8009350:	e7eb      	b.n	800932a <__swsetup_r+0x1e>
 8009352:	4b24      	ldr	r3, [pc, #144]	; (80093e4 <__swsetup_r+0xd8>)
 8009354:	429c      	cmp	r4, r3
 8009356:	bf08      	it	eq
 8009358:	68ec      	ldreq	r4, [r5, #12]
 800935a:	e7e6      	b.n	800932a <__swsetup_r+0x1e>
 800935c:	0758      	lsls	r0, r3, #29
 800935e:	d512      	bpl.n	8009386 <__swsetup_r+0x7a>
 8009360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009362:	b141      	cbz	r1, 8009376 <__swsetup_r+0x6a>
 8009364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009368:	4299      	cmp	r1, r3
 800936a:	d002      	beq.n	8009372 <__swsetup_r+0x66>
 800936c:	4630      	mov	r0, r6
 800936e:	f7fd fb4f 	bl	8006a10 <_free_r>
 8009372:	2300      	movs	r3, #0
 8009374:	6363      	str	r3, [r4, #52]	; 0x34
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	2300      	movs	r3, #0
 8009380:	6063      	str	r3, [r4, #4]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f043 0308 	orr.w	r3, r3, #8
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	b94b      	cbnz	r3, 80093a6 <__swsetup_r+0x9a>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939c:	d003      	beq.n	80093a6 <__swsetup_r+0x9a>
 800939e:	4621      	mov	r1, r4
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7fd fad7 	bl	8006954 <__smakebuf_r>
 80093a6:	89a0      	ldrh	r0, [r4, #12]
 80093a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ac:	f010 0301 	ands.w	r3, r0, #1
 80093b0:	d00a      	beq.n	80093c8 <__swsetup_r+0xbc>
 80093b2:	2300      	movs	r3, #0
 80093b4:	60a3      	str	r3, [r4, #8]
 80093b6:	6963      	ldr	r3, [r4, #20]
 80093b8:	425b      	negs	r3, r3
 80093ba:	61a3      	str	r3, [r4, #24]
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	b943      	cbnz	r3, 80093d2 <__swsetup_r+0xc6>
 80093c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093c4:	d1ba      	bne.n	800933c <__swsetup_r+0x30>
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	0781      	lsls	r1, r0, #30
 80093ca:	bf58      	it	pl
 80093cc:	6963      	ldrpl	r3, [r4, #20]
 80093ce:	60a3      	str	r3, [r4, #8]
 80093d0:	e7f4      	b.n	80093bc <__swsetup_r+0xb0>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e7f7      	b.n	80093c6 <__swsetup_r+0xba>
 80093d6:	bf00      	nop
 80093d8:	20000024 	.word	0x20000024
 80093dc:	0800caa8 	.word	0x0800caa8
 80093e0:	0800cac8 	.word	0x0800cac8
 80093e4:	0800ca88 	.word	0x0800ca88

080093e8 <abort>:
 80093e8:	b508      	push	{r3, lr}
 80093ea:	2006      	movs	r0, #6
 80093ec:	f000 f834 	bl	8009458 <raise>
 80093f0:	2001      	movs	r0, #1
 80093f2:	f7f8 fc51 	bl	8001c98 <_exit>

080093f6 <_malloc_usable_size_r>:
 80093f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fa:	1f18      	subs	r0, r3, #4
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bfbc      	itt	lt
 8009400:	580b      	ldrlt	r3, [r1, r0]
 8009402:	18c0      	addlt	r0, r0, r3
 8009404:	4770      	bx	lr

08009406 <_raise_r>:
 8009406:	291f      	cmp	r1, #31
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4604      	mov	r4, r0
 800940c:	460d      	mov	r5, r1
 800940e:	d904      	bls.n	800941a <_raise_r+0x14>
 8009410:	2316      	movs	r3, #22
 8009412:	6003      	str	r3, [r0, #0]
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	bd38      	pop	{r3, r4, r5, pc}
 800941a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800941c:	b112      	cbz	r2, 8009424 <_raise_r+0x1e>
 800941e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009422:	b94b      	cbnz	r3, 8009438 <_raise_r+0x32>
 8009424:	4620      	mov	r0, r4
 8009426:	f000 f831 	bl	800948c <_getpid_r>
 800942a:	462a      	mov	r2, r5
 800942c:	4601      	mov	r1, r0
 800942e:	4620      	mov	r0, r4
 8009430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009434:	f000 b818 	b.w	8009468 <_kill_r>
 8009438:	2b01      	cmp	r3, #1
 800943a:	d00a      	beq.n	8009452 <_raise_r+0x4c>
 800943c:	1c59      	adds	r1, r3, #1
 800943e:	d103      	bne.n	8009448 <_raise_r+0x42>
 8009440:	2316      	movs	r3, #22
 8009442:	6003      	str	r3, [r0, #0]
 8009444:	2001      	movs	r0, #1
 8009446:	e7e7      	b.n	8009418 <_raise_r+0x12>
 8009448:	2400      	movs	r4, #0
 800944a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800944e:	4628      	mov	r0, r5
 8009450:	4798      	blx	r3
 8009452:	2000      	movs	r0, #0
 8009454:	e7e0      	b.n	8009418 <_raise_r+0x12>
	...

08009458 <raise>:
 8009458:	4b02      	ldr	r3, [pc, #8]	; (8009464 <raise+0xc>)
 800945a:	4601      	mov	r1, r0
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	f7ff bfd2 	b.w	8009406 <_raise_r>
 8009462:	bf00      	nop
 8009464:	20000024 	.word	0x20000024

08009468 <_kill_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_kill_r+0x20>)
 800946c:	2300      	movs	r3, #0
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	602b      	str	r3, [r5, #0]
 8009476:	f7f8 fc07 	bl	8001c88 <_kill>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	d102      	bne.n	8009484 <_kill_r+0x1c>
 800947e:	682b      	ldr	r3, [r5, #0]
 8009480:	b103      	cbz	r3, 8009484 <_kill_r+0x1c>
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	bd38      	pop	{r3, r4, r5, pc}
 8009486:	bf00      	nop
 8009488:	2000a66c 	.word	0x2000a66c

0800948c <_getpid_r>:
 800948c:	f7f8 bbfa 	b.w	8001c84 <_getpid>

08009490 <atan>:
 8009490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	ec55 4b10 	vmov	r4, r5, d0
 8009498:	4bc3      	ldr	r3, [pc, #780]	; (80097a8 <atan+0x318>)
 800949a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800949e:	429e      	cmp	r6, r3
 80094a0:	46ab      	mov	fp, r5
 80094a2:	dd18      	ble.n	80094d6 <atan+0x46>
 80094a4:	4bc1      	ldr	r3, [pc, #772]	; (80097ac <atan+0x31c>)
 80094a6:	429e      	cmp	r6, r3
 80094a8:	dc01      	bgt.n	80094ae <atan+0x1e>
 80094aa:	d109      	bne.n	80094c0 <atan+0x30>
 80094ac:	b144      	cbz	r4, 80094c0 <atan+0x30>
 80094ae:	4622      	mov	r2, r4
 80094b0:	462b      	mov	r3, r5
 80094b2:	4620      	mov	r0, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	f7f6 fee9 	bl	800028c <__adddf3>
 80094ba:	4604      	mov	r4, r0
 80094bc:	460d      	mov	r5, r1
 80094be:	e006      	b.n	80094ce <atan+0x3e>
 80094c0:	f1bb 0f00 	cmp.w	fp, #0
 80094c4:	f300 8131 	bgt.w	800972a <atan+0x29a>
 80094c8:	a59b      	add	r5, pc, #620	; (adr r5, 8009738 <atan+0x2a8>)
 80094ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094ce:	ec45 4b10 	vmov	d0, r4, r5
 80094d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d6:	4bb6      	ldr	r3, [pc, #728]	; (80097b0 <atan+0x320>)
 80094d8:	429e      	cmp	r6, r3
 80094da:	dc14      	bgt.n	8009506 <atan+0x76>
 80094dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80094e0:	429e      	cmp	r6, r3
 80094e2:	dc0d      	bgt.n	8009500 <atan+0x70>
 80094e4:	a396      	add	r3, pc, #600	; (adr r3, 8009740 <atan+0x2b0>)
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	ee10 0a10 	vmov	r0, s0
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7f6 fecc 	bl	800028c <__adddf3>
 80094f4:	4baf      	ldr	r3, [pc, #700]	; (80097b4 <atan+0x324>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	f7f7 fb0e 	bl	8000b18 <__aeabi_dcmpgt>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d1e6      	bne.n	80094ce <atan+0x3e>
 8009500:	f04f 3aff 	mov.w	sl, #4294967295
 8009504:	e02b      	b.n	800955e <atan+0xce>
 8009506:	f000 f963 	bl	80097d0 <fabs>
 800950a:	4bab      	ldr	r3, [pc, #684]	; (80097b8 <atan+0x328>)
 800950c:	429e      	cmp	r6, r3
 800950e:	ec55 4b10 	vmov	r4, r5, d0
 8009512:	f300 80bf 	bgt.w	8009694 <atan+0x204>
 8009516:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800951a:	429e      	cmp	r6, r3
 800951c:	f300 80a0 	bgt.w	8009660 <atan+0x1d0>
 8009520:	ee10 2a10 	vmov	r2, s0
 8009524:	ee10 0a10 	vmov	r0, s0
 8009528:	462b      	mov	r3, r5
 800952a:	4629      	mov	r1, r5
 800952c:	f7f6 feae 	bl	800028c <__adddf3>
 8009530:	4ba0      	ldr	r3, [pc, #640]	; (80097b4 <atan+0x324>)
 8009532:	2200      	movs	r2, #0
 8009534:	f7f6 fea8 	bl	8000288 <__aeabi_dsub>
 8009538:	2200      	movs	r2, #0
 800953a:	4606      	mov	r6, r0
 800953c:	460f      	mov	r7, r1
 800953e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009542:	4620      	mov	r0, r4
 8009544:	4629      	mov	r1, r5
 8009546:	f7f6 fea1 	bl	800028c <__adddf3>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4630      	mov	r0, r6
 8009550:	4639      	mov	r1, r7
 8009552:	f7f7 f97b 	bl	800084c <__aeabi_ddiv>
 8009556:	f04f 0a00 	mov.w	sl, #0
 800955a:	4604      	mov	r4, r0
 800955c:	460d      	mov	r5, r1
 800955e:	4622      	mov	r2, r4
 8009560:	462b      	mov	r3, r5
 8009562:	4620      	mov	r0, r4
 8009564:	4629      	mov	r1, r5
 8009566:	f7f7 f847 	bl	80005f8 <__aeabi_dmul>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4680      	mov	r8, r0
 8009570:	4689      	mov	r9, r1
 8009572:	f7f7 f841 	bl	80005f8 <__aeabi_dmul>
 8009576:	a374      	add	r3, pc, #464	; (adr r3, 8009748 <atan+0x2b8>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	4606      	mov	r6, r0
 800957e:	460f      	mov	r7, r1
 8009580:	f7f7 f83a 	bl	80005f8 <__aeabi_dmul>
 8009584:	a372      	add	r3, pc, #456	; (adr r3, 8009750 <atan+0x2c0>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	f7f6 fe7f 	bl	800028c <__adddf3>
 800958e:	4632      	mov	r2, r6
 8009590:	463b      	mov	r3, r7
 8009592:	f7f7 f831 	bl	80005f8 <__aeabi_dmul>
 8009596:	a370      	add	r3, pc, #448	; (adr r3, 8009758 <atan+0x2c8>)
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f7f6 fe76 	bl	800028c <__adddf3>
 80095a0:	4632      	mov	r2, r6
 80095a2:	463b      	mov	r3, r7
 80095a4:	f7f7 f828 	bl	80005f8 <__aeabi_dmul>
 80095a8:	a36d      	add	r3, pc, #436	; (adr r3, 8009760 <atan+0x2d0>)
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f6 fe6d 	bl	800028c <__adddf3>
 80095b2:	4632      	mov	r2, r6
 80095b4:	463b      	mov	r3, r7
 80095b6:	f7f7 f81f 	bl	80005f8 <__aeabi_dmul>
 80095ba:	a36b      	add	r3, pc, #428	; (adr r3, 8009768 <atan+0x2d8>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f7f6 fe64 	bl	800028c <__adddf3>
 80095c4:	4632      	mov	r2, r6
 80095c6:	463b      	mov	r3, r7
 80095c8:	f7f7 f816 	bl	80005f8 <__aeabi_dmul>
 80095cc:	a368      	add	r3, pc, #416	; (adr r3, 8009770 <atan+0x2e0>)
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	f7f6 fe5b 	bl	800028c <__adddf3>
 80095d6:	4642      	mov	r2, r8
 80095d8:	464b      	mov	r3, r9
 80095da:	f7f7 f80d 	bl	80005f8 <__aeabi_dmul>
 80095de:	a366      	add	r3, pc, #408	; (adr r3, 8009778 <atan+0x2e8>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	4680      	mov	r8, r0
 80095e6:	4689      	mov	r9, r1
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	f7f7 f804 	bl	80005f8 <__aeabi_dmul>
 80095f0:	a363      	add	r3, pc, #396	; (adr r3, 8009780 <atan+0x2f0>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f7f6 fe47 	bl	8000288 <__aeabi_dsub>
 80095fa:	4632      	mov	r2, r6
 80095fc:	463b      	mov	r3, r7
 80095fe:	f7f6 fffb 	bl	80005f8 <__aeabi_dmul>
 8009602:	a361      	add	r3, pc, #388	; (adr r3, 8009788 <atan+0x2f8>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f6 fe3e 	bl	8000288 <__aeabi_dsub>
 800960c:	4632      	mov	r2, r6
 800960e:	463b      	mov	r3, r7
 8009610:	f7f6 fff2 	bl	80005f8 <__aeabi_dmul>
 8009614:	a35e      	add	r3, pc, #376	; (adr r3, 8009790 <atan+0x300>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fe35 	bl	8000288 <__aeabi_dsub>
 800961e:	4632      	mov	r2, r6
 8009620:	463b      	mov	r3, r7
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	a35c      	add	r3, pc, #368	; (adr r3, 8009798 <atan+0x308>)
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	f7f6 fe2c 	bl	8000288 <__aeabi_dsub>
 8009630:	4632      	mov	r2, r6
 8009632:	463b      	mov	r3, r7
 8009634:	f7f6 ffe0 	bl	80005f8 <__aeabi_dmul>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4640      	mov	r0, r8
 800963e:	4649      	mov	r1, r9
 8009640:	f7f6 fe24 	bl	800028c <__adddf3>
 8009644:	4622      	mov	r2, r4
 8009646:	462b      	mov	r3, r5
 8009648:	f7f6 ffd6 	bl	80005f8 <__aeabi_dmul>
 800964c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	d14b      	bne.n	80096ee <atan+0x25e>
 8009656:	4620      	mov	r0, r4
 8009658:	4629      	mov	r1, r5
 800965a:	f7f6 fe15 	bl	8000288 <__aeabi_dsub>
 800965e:	e72c      	b.n	80094ba <atan+0x2a>
 8009660:	ee10 0a10 	vmov	r0, s0
 8009664:	4b53      	ldr	r3, [pc, #332]	; (80097b4 <atan+0x324>)
 8009666:	2200      	movs	r2, #0
 8009668:	4629      	mov	r1, r5
 800966a:	f7f6 fe0d 	bl	8000288 <__aeabi_dsub>
 800966e:	4b51      	ldr	r3, [pc, #324]	; (80097b4 <atan+0x324>)
 8009670:	4606      	mov	r6, r0
 8009672:	460f      	mov	r7, r1
 8009674:	2200      	movs	r2, #0
 8009676:	4620      	mov	r0, r4
 8009678:	4629      	mov	r1, r5
 800967a:	f7f6 fe07 	bl	800028c <__adddf3>
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	4630      	mov	r0, r6
 8009684:	4639      	mov	r1, r7
 8009686:	f7f7 f8e1 	bl	800084c <__aeabi_ddiv>
 800968a:	f04f 0a01 	mov.w	sl, #1
 800968e:	4604      	mov	r4, r0
 8009690:	460d      	mov	r5, r1
 8009692:	e764      	b.n	800955e <atan+0xce>
 8009694:	4b49      	ldr	r3, [pc, #292]	; (80097bc <atan+0x32c>)
 8009696:	429e      	cmp	r6, r3
 8009698:	da1d      	bge.n	80096d6 <atan+0x246>
 800969a:	ee10 0a10 	vmov	r0, s0
 800969e:	4b48      	ldr	r3, [pc, #288]	; (80097c0 <atan+0x330>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	4629      	mov	r1, r5
 80096a4:	f7f6 fdf0 	bl	8000288 <__aeabi_dsub>
 80096a8:	4b45      	ldr	r3, [pc, #276]	; (80097c0 <atan+0x330>)
 80096aa:	4606      	mov	r6, r0
 80096ac:	460f      	mov	r7, r1
 80096ae:	2200      	movs	r2, #0
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	4b3e      	ldr	r3, [pc, #248]	; (80097b4 <atan+0x324>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	f7f6 fde6 	bl	800028c <__adddf3>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4630      	mov	r0, r6
 80096c6:	4639      	mov	r1, r7
 80096c8:	f7f7 f8c0 	bl	800084c <__aeabi_ddiv>
 80096cc:	f04f 0a02 	mov.w	sl, #2
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	e743      	b.n	800955e <atan+0xce>
 80096d6:	462b      	mov	r3, r5
 80096d8:	ee10 2a10 	vmov	r2, s0
 80096dc:	4939      	ldr	r1, [pc, #228]	; (80097c4 <atan+0x334>)
 80096de:	2000      	movs	r0, #0
 80096e0:	f7f7 f8b4 	bl	800084c <__aeabi_ddiv>
 80096e4:	f04f 0a03 	mov.w	sl, #3
 80096e8:	4604      	mov	r4, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	e737      	b.n	800955e <atan+0xce>
 80096ee:	4b36      	ldr	r3, [pc, #216]	; (80097c8 <atan+0x338>)
 80096f0:	4e36      	ldr	r6, [pc, #216]	; (80097cc <atan+0x33c>)
 80096f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80096f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80096fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80096fe:	f7f6 fdc3 	bl	8000288 <__aeabi_dsub>
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	f7f6 fdbf 	bl	8000288 <__aeabi_dsub>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009712:	f7f6 fdb9 	bl	8000288 <__aeabi_dsub>
 8009716:	f1bb 0f00 	cmp.w	fp, #0
 800971a:	4604      	mov	r4, r0
 800971c:	460d      	mov	r5, r1
 800971e:	f6bf aed6 	bge.w	80094ce <atan+0x3e>
 8009722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009726:	461d      	mov	r5, r3
 8009728:	e6d1      	b.n	80094ce <atan+0x3e>
 800972a:	a51d      	add	r5, pc, #116	; (adr r5, 80097a0 <atan+0x310>)
 800972c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009730:	e6cd      	b.n	80094ce <atan+0x3e>
 8009732:	bf00      	nop
 8009734:	f3af 8000 	nop.w
 8009738:	54442d18 	.word	0x54442d18
 800973c:	bff921fb 	.word	0xbff921fb
 8009740:	8800759c 	.word	0x8800759c
 8009744:	7e37e43c 	.word	0x7e37e43c
 8009748:	e322da11 	.word	0xe322da11
 800974c:	3f90ad3a 	.word	0x3f90ad3a
 8009750:	24760deb 	.word	0x24760deb
 8009754:	3fa97b4b 	.word	0x3fa97b4b
 8009758:	a0d03d51 	.word	0xa0d03d51
 800975c:	3fb10d66 	.word	0x3fb10d66
 8009760:	c54c206e 	.word	0xc54c206e
 8009764:	3fb745cd 	.word	0x3fb745cd
 8009768:	920083ff 	.word	0x920083ff
 800976c:	3fc24924 	.word	0x3fc24924
 8009770:	5555550d 	.word	0x5555550d
 8009774:	3fd55555 	.word	0x3fd55555
 8009778:	2c6a6c2f 	.word	0x2c6a6c2f
 800977c:	bfa2b444 	.word	0xbfa2b444
 8009780:	52defd9a 	.word	0x52defd9a
 8009784:	3fadde2d 	.word	0x3fadde2d
 8009788:	af749a6d 	.word	0xaf749a6d
 800978c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009790:	fe231671 	.word	0xfe231671
 8009794:	3fbc71c6 	.word	0x3fbc71c6
 8009798:	9998ebc4 	.word	0x9998ebc4
 800979c:	3fc99999 	.word	0x3fc99999
 80097a0:	54442d18 	.word	0x54442d18
 80097a4:	3ff921fb 	.word	0x3ff921fb
 80097a8:	440fffff 	.word	0x440fffff
 80097ac:	7ff00000 	.word	0x7ff00000
 80097b0:	3fdbffff 	.word	0x3fdbffff
 80097b4:	3ff00000 	.word	0x3ff00000
 80097b8:	3ff2ffff 	.word	0x3ff2ffff
 80097bc:	40038000 	.word	0x40038000
 80097c0:	3ff80000 	.word	0x3ff80000
 80097c4:	bff00000 	.word	0xbff00000
 80097c8:	0800ce88 	.word	0x0800ce88
 80097cc:	0800ce68 	.word	0x0800ce68

080097d0 <fabs>:
 80097d0:	ec51 0b10 	vmov	r0, r1, d0
 80097d4:	ee10 2a10 	vmov	r2, s0
 80097d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097dc:	ec43 2b10 	vmov	d0, r2, r3
 80097e0:	4770      	bx	lr

080097e2 <sqrt>:
 80097e2:	b538      	push	{r3, r4, r5, lr}
 80097e4:	ed2d 8b02 	vpush	{d8}
 80097e8:	ec55 4b10 	vmov	r4, r5, d0
 80097ec:	f000 f826 	bl	800983c <__ieee754_sqrt>
 80097f0:	4622      	mov	r2, r4
 80097f2:	462b      	mov	r3, r5
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	eeb0 8a40 	vmov.f32	s16, s0
 80097fc:	eef0 8a60 	vmov.f32	s17, s1
 8009800:	f7f7 f994 	bl	8000b2c <__aeabi_dcmpun>
 8009804:	b990      	cbnz	r0, 800982c <sqrt+0x4a>
 8009806:	2200      	movs	r2, #0
 8009808:	2300      	movs	r3, #0
 800980a:	4620      	mov	r0, r4
 800980c:	4629      	mov	r1, r5
 800980e:	f7f7 f965 	bl	8000adc <__aeabi_dcmplt>
 8009812:	b158      	cbz	r0, 800982c <sqrt+0x4a>
 8009814:	f7fc fe94 	bl	8006540 <__errno>
 8009818:	2321      	movs	r3, #33	; 0x21
 800981a:	6003      	str	r3, [r0, #0]
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	4610      	mov	r0, r2
 8009822:	4619      	mov	r1, r3
 8009824:	f7f7 f812 	bl	800084c <__aeabi_ddiv>
 8009828:	ec41 0b18 	vmov	d8, r0, r1
 800982c:	eeb0 0a48 	vmov.f32	s0, s16
 8009830:	eef0 0a68 	vmov.f32	s1, s17
 8009834:	ecbd 8b02 	vpop	{d8}
 8009838:	bd38      	pop	{r3, r4, r5, pc}
	...

0800983c <__ieee754_sqrt>:
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	ec55 4b10 	vmov	r4, r5, d0
 8009844:	4e55      	ldr	r6, [pc, #340]	; (800999c <__ieee754_sqrt+0x160>)
 8009846:	43ae      	bics	r6, r5
 8009848:	ee10 0a10 	vmov	r0, s0
 800984c:	ee10 3a10 	vmov	r3, s0
 8009850:	462a      	mov	r2, r5
 8009852:	4629      	mov	r1, r5
 8009854:	d110      	bne.n	8009878 <__ieee754_sqrt+0x3c>
 8009856:	ee10 2a10 	vmov	r2, s0
 800985a:	462b      	mov	r3, r5
 800985c:	f7f6 fecc 	bl	80005f8 <__aeabi_dmul>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fd10 	bl	800028c <__adddf3>
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	ec45 4b10 	vmov	d0, r4, r5
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	2d00      	cmp	r5, #0
 800987a:	dc10      	bgt.n	800989e <__ieee754_sqrt+0x62>
 800987c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009880:	4330      	orrs	r0, r6
 8009882:	d0f5      	beq.n	8009870 <__ieee754_sqrt+0x34>
 8009884:	b15d      	cbz	r5, 800989e <__ieee754_sqrt+0x62>
 8009886:	ee10 2a10 	vmov	r2, s0
 800988a:	462b      	mov	r3, r5
 800988c:	ee10 0a10 	vmov	r0, s0
 8009890:	f7f6 fcfa 	bl	8000288 <__aeabi_dsub>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	f7f6 ffd8 	bl	800084c <__aeabi_ddiv>
 800989c:	e7e6      	b.n	800986c <__ieee754_sqrt+0x30>
 800989e:	1512      	asrs	r2, r2, #20
 80098a0:	d074      	beq.n	800998c <__ieee754_sqrt+0x150>
 80098a2:	07d4      	lsls	r4, r2, #31
 80098a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80098a8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80098ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80098b0:	bf5e      	ittt	pl
 80098b2:	0fda      	lsrpl	r2, r3, #31
 80098b4:	005b      	lslpl	r3, r3, #1
 80098b6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80098ba:	2400      	movs	r4, #0
 80098bc:	0fda      	lsrs	r2, r3, #31
 80098be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80098c2:	107f      	asrs	r7, r7, #1
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	2516      	movs	r5, #22
 80098c8:	4620      	mov	r0, r4
 80098ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80098ce:	1886      	adds	r6, r0, r2
 80098d0:	428e      	cmp	r6, r1
 80098d2:	bfde      	ittt	le
 80098d4:	1b89      	suble	r1, r1, r6
 80098d6:	18b0      	addle	r0, r6, r2
 80098d8:	18a4      	addle	r4, r4, r2
 80098da:	0049      	lsls	r1, r1, #1
 80098dc:	3d01      	subs	r5, #1
 80098de:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80098e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80098e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098ea:	d1f0      	bne.n	80098ce <__ieee754_sqrt+0x92>
 80098ec:	462a      	mov	r2, r5
 80098ee:	f04f 0e20 	mov.w	lr, #32
 80098f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80098f6:	4281      	cmp	r1, r0
 80098f8:	eb06 0c05 	add.w	ip, r6, r5
 80098fc:	dc02      	bgt.n	8009904 <__ieee754_sqrt+0xc8>
 80098fe:	d113      	bne.n	8009928 <__ieee754_sqrt+0xec>
 8009900:	459c      	cmp	ip, r3
 8009902:	d811      	bhi.n	8009928 <__ieee754_sqrt+0xec>
 8009904:	f1bc 0f00 	cmp.w	ip, #0
 8009908:	eb0c 0506 	add.w	r5, ip, r6
 800990c:	da43      	bge.n	8009996 <__ieee754_sqrt+0x15a>
 800990e:	2d00      	cmp	r5, #0
 8009910:	db41      	blt.n	8009996 <__ieee754_sqrt+0x15a>
 8009912:	f100 0801 	add.w	r8, r0, #1
 8009916:	1a09      	subs	r1, r1, r0
 8009918:	459c      	cmp	ip, r3
 800991a:	bf88      	it	hi
 800991c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009920:	eba3 030c 	sub.w	r3, r3, ip
 8009924:	4432      	add	r2, r6
 8009926:	4640      	mov	r0, r8
 8009928:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800992c:	f1be 0e01 	subs.w	lr, lr, #1
 8009930:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009934:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009938:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800993c:	d1db      	bne.n	80098f6 <__ieee754_sqrt+0xba>
 800993e:	430b      	orrs	r3, r1
 8009940:	d006      	beq.n	8009950 <__ieee754_sqrt+0x114>
 8009942:	1c50      	adds	r0, r2, #1
 8009944:	bf13      	iteet	ne
 8009946:	3201      	addne	r2, #1
 8009948:	3401      	addeq	r4, #1
 800994a:	4672      	moveq	r2, lr
 800994c:	f022 0201 	bicne.w	r2, r2, #1
 8009950:	1063      	asrs	r3, r4, #1
 8009952:	0852      	lsrs	r2, r2, #1
 8009954:	07e1      	lsls	r1, r4, #31
 8009956:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800995a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800995e:	bf48      	it	mi
 8009960:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009964:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009968:	4614      	mov	r4, r2
 800996a:	e781      	b.n	8009870 <__ieee754_sqrt+0x34>
 800996c:	0ad9      	lsrs	r1, r3, #11
 800996e:	3815      	subs	r0, #21
 8009970:	055b      	lsls	r3, r3, #21
 8009972:	2900      	cmp	r1, #0
 8009974:	d0fa      	beq.n	800996c <__ieee754_sqrt+0x130>
 8009976:	02cd      	lsls	r5, r1, #11
 8009978:	d50a      	bpl.n	8009990 <__ieee754_sqrt+0x154>
 800997a:	f1c2 0420 	rsb	r4, r2, #32
 800997e:	fa23 f404 	lsr.w	r4, r3, r4
 8009982:	1e55      	subs	r5, r2, #1
 8009984:	4093      	lsls	r3, r2
 8009986:	4321      	orrs	r1, r4
 8009988:	1b42      	subs	r2, r0, r5
 800998a:	e78a      	b.n	80098a2 <__ieee754_sqrt+0x66>
 800998c:	4610      	mov	r0, r2
 800998e:	e7f0      	b.n	8009972 <__ieee754_sqrt+0x136>
 8009990:	0049      	lsls	r1, r1, #1
 8009992:	3201      	adds	r2, #1
 8009994:	e7ef      	b.n	8009976 <__ieee754_sqrt+0x13a>
 8009996:	4680      	mov	r8, r0
 8009998:	e7bd      	b.n	8009916 <__ieee754_sqrt+0xda>
 800999a:	bf00      	nop
 800999c:	7ff00000 	.word	0x7ff00000

080099a0 <_init>:
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	bf00      	nop
 80099a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a6:	bc08      	pop	{r3}
 80099a8:	469e      	mov	lr, r3
 80099aa:	4770      	bx	lr

080099ac <_fini>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	bf00      	nop
 80099b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b2:	bc08      	pop	{r3}
 80099b4:	469e      	mov	lr, r3
 80099b6:	4770      	bx	lr
