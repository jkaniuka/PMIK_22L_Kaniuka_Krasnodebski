
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800e000  0800e000  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5a4  0800e5a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5a4  0800e5a4  0001e5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5ac  0800e5ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5ac  0800e5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5b0  0800e5b0  0001e5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e5b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002248  200001dc  0800e790  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002424  0800e790  00022424  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c38  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff3  00000000  00000000  00039e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  0003de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  0003f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019643  00000000  00000000  00040ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d121  00000000  00000000  0005a10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f09f  00000000  00000000  0007722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001062cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006650  00000000  00000000  0010631c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dfe8 	.word	0x0800dfe8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800dfe8 	.word	0x0800dfe8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe2b 	bl	8002098 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd7b 	bl	8001f48 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe1d 	bl	8002098 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe13 	bl	8002098 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fda3 	bl	8001fcc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd99 	bl	8001fcc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f84c 	bl	8000574 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_f2uiz>:
 8000544:	219e      	movs	r1, #158	; 0x9e
 8000546:	b510      	push	{r4, lr}
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	1c04      	adds	r4, r0, #0
 800054c:	f002 fdb0 	bl	80030b0 <__aeabi_fcmpge>
 8000550:	2800      	cmp	r0, #0
 8000552:	d103      	bne.n	800055c <__aeabi_f2uiz+0x18>
 8000554:	1c20      	adds	r0, r4, #0
 8000556:	f000 fe63 	bl	8001220 <__aeabi_f2iz>
 800055a:	bd10      	pop	{r4, pc}
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	1c20      	adds	r0, r4, #0
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	f000 fcaf 	bl	8000ec4 <__aeabi_fsub>
 8000566:	f000 fe5b 	bl	8001220 <__aeabi_f2iz>
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	061b      	lsls	r3, r3, #24
 800056e:	469c      	mov	ip, r3
 8000570:	4460      	add	r0, ip
 8000572:	e7f2      	b.n	800055a <__aeabi_f2uiz+0x16>

08000574 <__udivmoddi4>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	4645      	mov	r5, r8
 800057c:	46de      	mov	lr, fp
 800057e:	b5e0      	push	{r5, r6, r7, lr}
 8000580:	0004      	movs	r4, r0
 8000582:	000d      	movs	r5, r1
 8000584:	4692      	mov	sl, r2
 8000586:	4699      	mov	r9, r3
 8000588:	b083      	sub	sp, #12
 800058a:	428b      	cmp	r3, r1
 800058c:	d830      	bhi.n	80005f0 <__udivmoddi4+0x7c>
 800058e:	d02d      	beq.n	80005ec <__udivmoddi4+0x78>
 8000590:	4649      	mov	r1, r9
 8000592:	4650      	mov	r0, sl
 8000594:	f002 fdb4 	bl	8003100 <__clzdi2>
 8000598:	0029      	movs	r1, r5
 800059a:	0006      	movs	r6, r0
 800059c:	0020      	movs	r0, r4
 800059e:	f002 fdaf 	bl	8003100 <__clzdi2>
 80005a2:	1a33      	subs	r3, r6, r0
 80005a4:	4698      	mov	r8, r3
 80005a6:	3b20      	subs	r3, #32
 80005a8:	469b      	mov	fp, r3
 80005aa:	d433      	bmi.n	8000614 <__udivmoddi4+0xa0>
 80005ac:	465a      	mov	r2, fp
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	4642      	mov	r2, r8
 80005b4:	001f      	movs	r7, r3
 80005b6:	4653      	mov	r3, sl
 80005b8:	4093      	lsls	r3, r2
 80005ba:	001e      	movs	r6, r3
 80005bc:	42af      	cmp	r7, r5
 80005be:	d83a      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d100      	bne.n	80005c6 <__udivmoddi4+0x52>
 80005c4:	e078      	b.n	80006b8 <__udivmoddi4+0x144>
 80005c6:	465b      	mov	r3, fp
 80005c8:	1ba4      	subs	r4, r4, r6
 80005ca:	41bd      	sbcs	r5, r7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <__udivmoddi4+0x5e>
 80005d0:	e075      	b.n	80006be <__udivmoddi4+0x14a>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	465a      	mov	r2, fp
 80005de:	4093      	lsls	r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4642      	mov	r2, r8
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	e028      	b.n	800063e <__udivmoddi4+0xca>
 80005ec:	4282      	cmp	r2, r0
 80005ee:	d9cf      	bls.n	8000590 <__udivmoddi4+0x1c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <__udivmoddi4+0x8e>
 80005fe:	601c      	str	r4, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	b003      	add	sp, #12
 8000608:	bcf0      	pop	{r4, r5, r6, r7}
 800060a:	46bb      	mov	fp, r7
 800060c:	46b2      	mov	sl, r6
 800060e:	46a9      	mov	r9, r5
 8000610:	46a0      	mov	r8, r4
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4652      	mov	r2, sl
 800061c:	40da      	lsrs	r2, r3
 800061e:	4641      	mov	r1, r8
 8000620:	0013      	movs	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	408a      	lsls	r2, r1
 8000626:	0017      	movs	r7, r2
 8000628:	4642      	mov	r2, r8
 800062a:	431f      	orrs	r7, r3
 800062c:	4653      	mov	r3, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	001e      	movs	r6, r3
 8000632:	42af      	cmp	r7, r5
 8000634:	d9c4      	bls.n	80005c0 <__udivmoddi4+0x4c>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0d9      	beq.n	80005f8 <__udivmoddi4+0x84>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	0872      	lsrs	r2, r6, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	4646      	mov	r6, r8
 800064c:	087b      	lsrs	r3, r7, #1
 800064e:	e00e      	b.n	800066e <__udivmoddi4+0xfa>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d101      	bne.n	8000658 <__udivmoddi4+0xe4>
 8000654:	42a2      	cmp	r2, r4
 8000656:	d80c      	bhi.n	8000672 <__udivmoddi4+0xfe>
 8000658:	1aa4      	subs	r4, r4, r2
 800065a:	419d      	sbcs	r5, r3
 800065c:	2001      	movs	r0, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2100      	movs	r1, #0
 8000664:	3e01      	subs	r6, #1
 8000666:	1824      	adds	r4, r4, r0
 8000668:	414d      	adcs	r5, r1
 800066a:	2e00      	cmp	r6, #0
 800066c:	d006      	beq.n	800067c <__udivmoddi4+0x108>
 800066e:	42ab      	cmp	r3, r5
 8000670:	d9ee      	bls.n	8000650 <__udivmoddi4+0xdc>
 8000672:	3e01      	subs	r6, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1f8      	bne.n	800066e <__udivmoddi4+0xfa>
 800067c:	9800      	ldr	r0, [sp, #0]
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	465b      	mov	r3, fp
 8000682:	1900      	adds	r0, r0, r4
 8000684:	4169      	adcs	r1, r5
 8000686:	2b00      	cmp	r3, #0
 8000688:	db24      	blt.n	80006d4 <__udivmoddi4+0x160>
 800068a:	002b      	movs	r3, r5
 800068c:	465a      	mov	r2, fp
 800068e:	4644      	mov	r4, r8
 8000690:	40d3      	lsrs	r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	40e2      	lsrs	r2, r4
 8000696:	001c      	movs	r4, r3
 8000698:	465b      	mov	r3, fp
 800069a:	0015      	movs	r5, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	db2a      	blt.n	80006f6 <__udivmoddi4+0x182>
 80006a0:	0026      	movs	r6, r4
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	0026      	movs	r6, r4
 80006a8:	4647      	mov	r7, r8
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1a80      	subs	r0, r0, r2
 80006b0:	4199      	sbcs	r1, r3
 80006b2:	9000      	str	r0, [sp, #0]
 80006b4:	9101      	str	r1, [sp, #4]
 80006b6:	e79f      	b.n	80005f8 <__udivmoddi4+0x84>
 80006b8:	42a3      	cmp	r3, r4
 80006ba:	d8bc      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80006bc:	e783      	b.n	80005c6 <__udivmoddi4+0x52>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e786      	b.n	80005e2 <__udivmoddi4+0x6e>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	002a      	movs	r2, r5
 80006dc:	4646      	mov	r6, r8
 80006de:	409a      	lsls	r2, r3
 80006e0:	0023      	movs	r3, r4
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	4644      	mov	r4, r8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	40e2      	lsrs	r2, r4
 80006ec:	001c      	movs	r4, r3
 80006ee:	465b      	mov	r3, fp
 80006f0:	0015      	movs	r5, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dad4      	bge.n	80006a0 <__udivmoddi4+0x12c>
 80006f6:	4642      	mov	r2, r8
 80006f8:	002f      	movs	r7, r5
 80006fa:	2320      	movs	r3, #32
 80006fc:	0026      	movs	r6, r4
 80006fe:	4097      	lsls	r7, r2
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	40de      	lsrs	r6, r3
 8000704:	003b      	movs	r3, r7
 8000706:	4333      	orrs	r3, r6
 8000708:	e7cd      	b.n	80006a6 <__udivmoddi4+0x132>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__aeabi_fadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	46c6      	mov	lr, r8
 8000710:	0243      	lsls	r3, r0, #9
 8000712:	0a5b      	lsrs	r3, r3, #9
 8000714:	024e      	lsls	r6, r1, #9
 8000716:	0045      	lsls	r5, r0, #1
 8000718:	004f      	lsls	r7, r1, #1
 800071a:	00da      	lsls	r2, r3, #3
 800071c:	0fc4      	lsrs	r4, r0, #31
 800071e:	469c      	mov	ip, r3
 8000720:	0a70      	lsrs	r0, r6, #9
 8000722:	4690      	mov	r8, r2
 8000724:	b500      	push	{lr}
 8000726:	0e2d      	lsrs	r5, r5, #24
 8000728:	0e3f      	lsrs	r7, r7, #24
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	09b6      	lsrs	r6, r6, #6
 800072e:	428c      	cmp	r4, r1
 8000730:	d04b      	beq.n	80007ca <__aeabi_fadd+0xbe>
 8000732:	1bea      	subs	r2, r5, r7
 8000734:	2a00      	cmp	r2, #0
 8000736:	dd36      	ble.n	80007a6 <__aeabi_fadd+0x9a>
 8000738:	2f00      	cmp	r7, #0
 800073a:	d061      	beq.n	8000800 <__aeabi_fadd+0xf4>
 800073c:	2dff      	cmp	r5, #255	; 0xff
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x36>
 8000740:	e0ad      	b.n	800089e <__aeabi_fadd+0x192>
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	04db      	lsls	r3, r3, #19
 8000746:	431e      	orrs	r6, r3
 8000748:	2a1b      	cmp	r2, #27
 800074a:	dc00      	bgt.n	800074e <__aeabi_fadd+0x42>
 800074c:	e0d3      	b.n	80008f6 <__aeabi_fadd+0x1ea>
 800074e:	2001      	movs	r0, #1
 8000750:	4643      	mov	r3, r8
 8000752:	1a18      	subs	r0, r3, r0
 8000754:	0143      	lsls	r3, r0, #5
 8000756:	d400      	bmi.n	800075a <__aeabi_fadd+0x4e>
 8000758:	e08c      	b.n	8000874 <__aeabi_fadd+0x168>
 800075a:	0180      	lsls	r0, r0, #6
 800075c:	0987      	lsrs	r7, r0, #6
 800075e:	0038      	movs	r0, r7
 8000760:	f002 fcb0 	bl	80030c4 <__clzsi2>
 8000764:	3805      	subs	r0, #5
 8000766:	4087      	lsls	r7, r0
 8000768:	4285      	cmp	r5, r0
 800076a:	dc00      	bgt.n	800076e <__aeabi_fadd+0x62>
 800076c:	e0b6      	b.n	80008dc <__aeabi_fadd+0x1d0>
 800076e:	1a2d      	subs	r5, r5, r0
 8000770:	48b3      	ldr	r0, [pc, #716]	; (8000a40 <__aeabi_fadd+0x334>)
 8000772:	4038      	ands	r0, r7
 8000774:	0743      	lsls	r3, r0, #29
 8000776:	d004      	beq.n	8000782 <__aeabi_fadd+0x76>
 8000778:	230f      	movs	r3, #15
 800077a:	4003      	ands	r3, r0
 800077c:	2b04      	cmp	r3, #4
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x76>
 8000780:	3004      	adds	r0, #4
 8000782:	0143      	lsls	r3, r0, #5
 8000784:	d400      	bmi.n	8000788 <__aeabi_fadd+0x7c>
 8000786:	e078      	b.n	800087a <__aeabi_fadd+0x16e>
 8000788:	1c6a      	adds	r2, r5, #1
 800078a:	2dfe      	cmp	r5, #254	; 0xfe
 800078c:	d065      	beq.n	800085a <__aeabi_fadd+0x14e>
 800078e:	0180      	lsls	r0, r0, #6
 8000790:	0a43      	lsrs	r3, r0, #9
 8000792:	469c      	mov	ip, r3
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	4663      	mov	r3, ip
 8000798:	05d0      	lsls	r0, r2, #23
 800079a:	4318      	orrs	r0, r3
 800079c:	07e4      	lsls	r4, r4, #31
 800079e:	4320      	orrs	r0, r4
 80007a0:	bc80      	pop	{r7}
 80007a2:	46b8      	mov	r8, r7
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d035      	beq.n	8000816 <__aeabi_fadd+0x10a>
 80007aa:	1b7a      	subs	r2, r7, r5
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0xa6>
 80007b0:	e0af      	b.n	8000912 <__aeabi_fadd+0x206>
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0xae>
 80007b8:	e0a7      	b.n	800090a <__aeabi_fadd+0x1fe>
 80007ba:	1e53      	subs	r3, r2, #1
 80007bc:	2a01      	cmp	r2, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0xb6>
 80007c0:	e12f      	b.n	8000a22 <__aeabi_fadd+0x316>
 80007c2:	2aff      	cmp	r2, #255	; 0xff
 80007c4:	d069      	beq.n	800089a <__aeabi_fadd+0x18e>
 80007c6:	001a      	movs	r2, r3
 80007c8:	e0aa      	b.n	8000920 <__aeabi_fadd+0x214>
 80007ca:	1be9      	subs	r1, r5, r7
 80007cc:	2900      	cmp	r1, #0
 80007ce:	dd70      	ble.n	80008b2 <__aeabi_fadd+0x1a6>
 80007d0:	2f00      	cmp	r7, #0
 80007d2:	d037      	beq.n	8000844 <__aeabi_fadd+0x138>
 80007d4:	2dff      	cmp	r5, #255	; 0xff
 80007d6:	d062      	beq.n	800089e <__aeabi_fadd+0x192>
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	04db      	lsls	r3, r3, #19
 80007dc:	431e      	orrs	r6, r3
 80007de:	291b      	cmp	r1, #27
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_fadd+0xd8>
 80007e2:	e0b0      	b.n	8000946 <__aeabi_fadd+0x23a>
 80007e4:	2001      	movs	r0, #1
 80007e6:	4440      	add	r0, r8
 80007e8:	0143      	lsls	r3, r0, #5
 80007ea:	d543      	bpl.n	8000874 <__aeabi_fadd+0x168>
 80007ec:	3501      	adds	r5, #1
 80007ee:	2dff      	cmp	r5, #255	; 0xff
 80007f0:	d033      	beq.n	800085a <__aeabi_fadd+0x14e>
 80007f2:	2301      	movs	r3, #1
 80007f4:	4a93      	ldr	r2, [pc, #588]	; (8000a44 <__aeabi_fadd+0x338>)
 80007f6:	4003      	ands	r3, r0
 80007f8:	0840      	lsrs	r0, r0, #1
 80007fa:	4010      	ands	r0, r2
 80007fc:	4318      	orrs	r0, r3
 80007fe:	e7b9      	b.n	8000774 <__aeabi_fadd+0x68>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0xfa>
 8000804:	e083      	b.n	800090e <__aeabi_fadd+0x202>
 8000806:	1e51      	subs	r1, r2, #1
 8000808:	2a01      	cmp	r2, #1
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x102>
 800080c:	e0d8      	b.n	80009c0 <__aeabi_fadd+0x2b4>
 800080e:	2aff      	cmp	r2, #255	; 0xff
 8000810:	d045      	beq.n	800089e <__aeabi_fadd+0x192>
 8000812:	000a      	movs	r2, r1
 8000814:	e798      	b.n	8000748 <__aeabi_fadd+0x3c>
 8000816:	27fe      	movs	r7, #254	; 0xfe
 8000818:	1c6a      	adds	r2, r5, #1
 800081a:	4217      	tst	r7, r2
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x114>
 800081e:	e086      	b.n	800092e <__aeabi_fadd+0x222>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x11a>
 8000824:	e0b7      	b.n	8000996 <__aeabi_fadd+0x28a>
 8000826:	4643      	mov	r3, r8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x122>
 800082c:	e0f3      	b.n	8000a16 <__aeabi_fadd+0x30a>
 800082e:	2200      	movs	r2, #0
 8000830:	2e00      	cmp	r6, #0
 8000832:	d0b0      	beq.n	8000796 <__aeabi_fadd+0x8a>
 8000834:	1b98      	subs	r0, r3, r6
 8000836:	0143      	lsls	r3, r0, #5
 8000838:	d400      	bmi.n	800083c <__aeabi_fadd+0x130>
 800083a:	e0fa      	b.n	8000a32 <__aeabi_fadd+0x326>
 800083c:	4643      	mov	r3, r8
 800083e:	000c      	movs	r4, r1
 8000840:	1af0      	subs	r0, r6, r3
 8000842:	e797      	b.n	8000774 <__aeabi_fadd+0x68>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0x13e>
 8000848:	e0c8      	b.n	80009dc <__aeabi_fadd+0x2d0>
 800084a:	1e4a      	subs	r2, r1, #1
 800084c:	2901      	cmp	r1, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x146>
 8000850:	e0ae      	b.n	80009b0 <__aeabi_fadd+0x2a4>
 8000852:	29ff      	cmp	r1, #255	; 0xff
 8000854:	d023      	beq.n	800089e <__aeabi_fadd+0x192>
 8000856:	0011      	movs	r1, r2
 8000858:	e7c1      	b.n	80007de <__aeabi_fadd+0xd2>
 800085a:	2300      	movs	r3, #0
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	469c      	mov	ip, r3
 8000860:	e799      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000862:	21fe      	movs	r1, #254	; 0xfe
 8000864:	1c6a      	adds	r2, r5, #1
 8000866:	4211      	tst	r1, r2
 8000868:	d077      	beq.n	800095a <__aeabi_fadd+0x24e>
 800086a:	2aff      	cmp	r2, #255	; 0xff
 800086c:	d0f5      	beq.n	800085a <__aeabi_fadd+0x14e>
 800086e:	0015      	movs	r5, r2
 8000870:	4446      	add	r6, r8
 8000872:	0870      	lsrs	r0, r6, #1
 8000874:	0743      	lsls	r3, r0, #29
 8000876:	d000      	beq.n	800087a <__aeabi_fadd+0x16e>
 8000878:	e77e      	b.n	8000778 <__aeabi_fadd+0x6c>
 800087a:	08c3      	lsrs	r3, r0, #3
 800087c:	2dff      	cmp	r5, #255	; 0xff
 800087e:	d00e      	beq.n	800089e <__aeabi_fadd+0x192>
 8000880:	025b      	lsls	r3, r3, #9
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	469c      	mov	ip, r3
 8000886:	b2ea      	uxtb	r2, r5
 8000888:	e785      	b.n	8000796 <__aeabi_fadd+0x8a>
 800088a:	2e00      	cmp	r6, #0
 800088c:	d007      	beq.n	800089e <__aeabi_fadd+0x192>
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	03d2      	lsls	r2, r2, #15
 8000892:	4213      	tst	r3, r2
 8000894:	d003      	beq.n	800089e <__aeabi_fadd+0x192>
 8000896:	4210      	tst	r0, r2
 8000898:	d101      	bne.n	800089e <__aeabi_fadd+0x192>
 800089a:	000c      	movs	r4, r1
 800089c:	0003      	movs	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0db      	beq.n	800085a <__aeabi_fadd+0x14e>
 80008a2:	2080      	movs	r0, #128	; 0x80
 80008a4:	03c0      	lsls	r0, r0, #15
 80008a6:	4318      	orrs	r0, r3
 80008a8:	0240      	lsls	r0, r0, #9
 80008aa:	0a43      	lsrs	r3, r0, #9
 80008ac:	469c      	mov	ip, r3
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	e771      	b.n	8000796 <__aeabi_fadd+0x8a>
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d0d5      	beq.n	8000862 <__aeabi_fadd+0x156>
 80008b6:	1b7a      	subs	r2, r7, r5
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d160      	bne.n	800097e <__aeabi_fadd+0x272>
 80008bc:	4643      	mov	r3, r8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d024      	beq.n	800090c <__aeabi_fadd+0x200>
 80008c2:	1e53      	subs	r3, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d073      	beq.n	80009b0 <__aeabi_fadd+0x2a4>
 80008c8:	2aff      	cmp	r2, #255	; 0xff
 80008ca:	d0e7      	beq.n	800089c <__aeabi_fadd+0x190>
 80008cc:	001a      	movs	r2, r3
 80008ce:	2a1b      	cmp	r2, #27
 80008d0:	dc00      	bgt.n	80008d4 <__aeabi_fadd+0x1c8>
 80008d2:	e085      	b.n	80009e0 <__aeabi_fadd+0x2d4>
 80008d4:	2001      	movs	r0, #1
 80008d6:	003d      	movs	r5, r7
 80008d8:	1980      	adds	r0, r0, r6
 80008da:	e785      	b.n	80007e8 <__aeabi_fadd+0xdc>
 80008dc:	2320      	movs	r3, #32
 80008de:	003a      	movs	r2, r7
 80008e0:	1b45      	subs	r5, r0, r5
 80008e2:	0038      	movs	r0, r7
 80008e4:	3501      	adds	r5, #1
 80008e6:	40ea      	lsrs	r2, r5
 80008e8:	1b5d      	subs	r5, r3, r5
 80008ea:	40a8      	lsls	r0, r5
 80008ec:	1e43      	subs	r3, r0, #1
 80008ee:	4198      	sbcs	r0, r3
 80008f0:	2500      	movs	r5, #0
 80008f2:	4310      	orrs	r0, r2
 80008f4:	e73e      	b.n	8000774 <__aeabi_fadd+0x68>
 80008f6:	2320      	movs	r3, #32
 80008f8:	0030      	movs	r0, r6
 80008fa:	1a9b      	subs	r3, r3, r2
 80008fc:	0031      	movs	r1, r6
 80008fe:	4098      	lsls	r0, r3
 8000900:	40d1      	lsrs	r1, r2
 8000902:	1e43      	subs	r3, r0, #1
 8000904:	4198      	sbcs	r0, r3
 8000906:	4308      	orrs	r0, r1
 8000908:	e722      	b.n	8000750 <__aeabi_fadd+0x44>
 800090a:	000c      	movs	r4, r1
 800090c:	0003      	movs	r3, r0
 800090e:	0015      	movs	r5, r2
 8000910:	e7b4      	b.n	800087c <__aeabi_fadd+0x170>
 8000912:	2fff      	cmp	r7, #255	; 0xff
 8000914:	d0c1      	beq.n	800089a <__aeabi_fadd+0x18e>
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	4640      	mov	r0, r8
 800091a:	04db      	lsls	r3, r3, #19
 800091c:	4318      	orrs	r0, r3
 800091e:	4680      	mov	r8, r0
 8000920:	2a1b      	cmp	r2, #27
 8000922:	dd51      	ble.n	80009c8 <__aeabi_fadd+0x2bc>
 8000924:	2001      	movs	r0, #1
 8000926:	000c      	movs	r4, r1
 8000928:	003d      	movs	r5, r7
 800092a:	1a30      	subs	r0, r6, r0
 800092c:	e712      	b.n	8000754 <__aeabi_fadd+0x48>
 800092e:	4643      	mov	r3, r8
 8000930:	1b9f      	subs	r7, r3, r6
 8000932:	017b      	lsls	r3, r7, #5
 8000934:	d42b      	bmi.n	800098e <__aeabi_fadd+0x282>
 8000936:	2f00      	cmp	r7, #0
 8000938:	d000      	beq.n	800093c <__aeabi_fadd+0x230>
 800093a:	e710      	b.n	800075e <__aeabi_fadd+0x52>
 800093c:	2300      	movs	r3, #0
 800093e:	2400      	movs	r4, #0
 8000940:	2200      	movs	r2, #0
 8000942:	469c      	mov	ip, r3
 8000944:	e727      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000946:	2320      	movs	r3, #32
 8000948:	0032      	movs	r2, r6
 800094a:	0030      	movs	r0, r6
 800094c:	40ca      	lsrs	r2, r1
 800094e:	1a59      	subs	r1, r3, r1
 8000950:	4088      	lsls	r0, r1
 8000952:	1e43      	subs	r3, r0, #1
 8000954:	4198      	sbcs	r0, r3
 8000956:	4310      	orrs	r0, r2
 8000958:	e745      	b.n	80007e6 <__aeabi_fadd+0xda>
 800095a:	2d00      	cmp	r5, #0
 800095c:	d14a      	bne.n	80009f4 <__aeabi_fadd+0x2e8>
 800095e:	4643      	mov	r3, r8
 8000960:	2b00      	cmp	r3, #0
 8000962:	d063      	beq.n	8000a2c <__aeabi_fadd+0x320>
 8000964:	2200      	movs	r2, #0
 8000966:	2e00      	cmp	r6, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x260>
 800096a:	e714      	b.n	8000796 <__aeabi_fadd+0x8a>
 800096c:	0030      	movs	r0, r6
 800096e:	4440      	add	r0, r8
 8000970:	0143      	lsls	r3, r0, #5
 8000972:	d400      	bmi.n	8000976 <__aeabi_fadd+0x26a>
 8000974:	e77e      	b.n	8000874 <__aeabi_fadd+0x168>
 8000976:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <__aeabi_fadd+0x334>)
 8000978:	3501      	adds	r5, #1
 800097a:	4018      	ands	r0, r3
 800097c:	e77a      	b.n	8000874 <__aeabi_fadd+0x168>
 800097e:	2fff      	cmp	r7, #255	; 0xff
 8000980:	d08c      	beq.n	800089c <__aeabi_fadd+0x190>
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	4641      	mov	r1, r8
 8000986:	04db      	lsls	r3, r3, #19
 8000988:	4319      	orrs	r1, r3
 800098a:	4688      	mov	r8, r1
 800098c:	e79f      	b.n	80008ce <__aeabi_fadd+0x1c2>
 800098e:	4643      	mov	r3, r8
 8000990:	000c      	movs	r4, r1
 8000992:	1af7      	subs	r7, r6, r3
 8000994:	e6e3      	b.n	800075e <__aeabi_fadd+0x52>
 8000996:	4642      	mov	r2, r8
 8000998:	2a00      	cmp	r2, #0
 800099a:	d000      	beq.n	800099e <__aeabi_fadd+0x292>
 800099c:	e775      	b.n	800088a <__aeabi_fadd+0x17e>
 800099e:	2e00      	cmp	r6, #0
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fadd+0x298>
 80009a2:	e77a      	b.n	800089a <__aeabi_fadd+0x18e>
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	03db      	lsls	r3, r3, #15
 80009a8:	2400      	movs	r4, #0
 80009aa:	469c      	mov	ip, r3
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	e6f2      	b.n	8000796 <__aeabi_fadd+0x8a>
 80009b0:	0030      	movs	r0, r6
 80009b2:	4440      	add	r0, r8
 80009b4:	2501      	movs	r5, #1
 80009b6:	0143      	lsls	r3, r0, #5
 80009b8:	d400      	bmi.n	80009bc <__aeabi_fadd+0x2b0>
 80009ba:	e75b      	b.n	8000874 <__aeabi_fadd+0x168>
 80009bc:	2502      	movs	r5, #2
 80009be:	e718      	b.n	80007f2 <__aeabi_fadd+0xe6>
 80009c0:	4643      	mov	r3, r8
 80009c2:	2501      	movs	r5, #1
 80009c4:	1b98      	subs	r0, r3, r6
 80009c6:	e6c5      	b.n	8000754 <__aeabi_fadd+0x48>
 80009c8:	2320      	movs	r3, #32
 80009ca:	4644      	mov	r4, r8
 80009cc:	4640      	mov	r0, r8
 80009ce:	40d4      	lsrs	r4, r2
 80009d0:	1a9a      	subs	r2, r3, r2
 80009d2:	4090      	lsls	r0, r2
 80009d4:	1e43      	subs	r3, r0, #1
 80009d6:	4198      	sbcs	r0, r3
 80009d8:	4320      	orrs	r0, r4
 80009da:	e7a4      	b.n	8000926 <__aeabi_fadd+0x21a>
 80009dc:	000d      	movs	r5, r1
 80009de:	e74d      	b.n	800087c <__aeabi_fadd+0x170>
 80009e0:	2320      	movs	r3, #32
 80009e2:	4641      	mov	r1, r8
 80009e4:	4640      	mov	r0, r8
 80009e6:	40d1      	lsrs	r1, r2
 80009e8:	1a9a      	subs	r2, r3, r2
 80009ea:	4090      	lsls	r0, r2
 80009ec:	1e43      	subs	r3, r0, #1
 80009ee:	4198      	sbcs	r0, r3
 80009f0:	4308      	orrs	r0, r1
 80009f2:	e770      	b.n	80008d6 <__aeabi_fadd+0x1ca>
 80009f4:	4642      	mov	r2, r8
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_fadd+0x2f0>
 80009fa:	e74f      	b.n	800089c <__aeabi_fadd+0x190>
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fadd+0x2f6>
 8000a00:	e74d      	b.n	800089e <__aeabi_fadd+0x192>
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	03d2      	lsls	r2, r2, #15
 8000a06:	4213      	tst	r3, r2
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fadd+0x300>
 8000a0a:	e748      	b.n	800089e <__aeabi_fadd+0x192>
 8000a0c:	4210      	tst	r0, r2
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fadd+0x306>
 8000a10:	e745      	b.n	800089e <__aeabi_fadd+0x192>
 8000a12:	0003      	movs	r3, r0
 8000a14:	e743      	b.n	800089e <__aeabi_fadd+0x192>
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d090      	beq.n	800093c <__aeabi_fadd+0x230>
 8000a1a:	000c      	movs	r4, r1
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	2200      	movs	r2, #0
 8000a20:	e6b9      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a22:	4643      	mov	r3, r8
 8000a24:	000c      	movs	r4, r1
 8000a26:	1af0      	subs	r0, r6, r3
 8000a28:	3501      	adds	r5, #1
 8000a2a:	e693      	b.n	8000754 <__aeabi_fadd+0x48>
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	e6b1      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fadd+0x32c>
 8000a36:	e71d      	b.n	8000874 <__aeabi_fadd+0x168>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	469c      	mov	ip, r3
 8000a3e:	e6aa      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a40:	fbffffff 	.word	0xfbffffff
 8000a44:	7dffffff 	.word	0x7dffffff

08000a48 <__aeabi_fdiv>:
 8000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4a:	464f      	mov	r7, r9
 8000a4c:	4646      	mov	r6, r8
 8000a4e:	46d6      	mov	lr, sl
 8000a50:	0245      	lsls	r5, r0, #9
 8000a52:	b5c0      	push	{r6, r7, lr}
 8000a54:	0047      	lsls	r7, r0, #1
 8000a56:	1c0c      	adds	r4, r1, #0
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	0e3f      	lsrs	r7, r7, #24
 8000a5c:	0fc6      	lsrs	r6, r0, #31
 8000a5e:	2f00      	cmp	r7, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fdiv+0x1c>
 8000a62:	e070      	b.n	8000b46 <__aeabi_fdiv+0xfe>
 8000a64:	2fff      	cmp	r7, #255	; 0xff
 8000a66:	d100      	bne.n	8000a6a <__aeabi_fdiv+0x22>
 8000a68:	e075      	b.n	8000b56 <__aeabi_fdiv+0x10e>
 8000a6a:	00eb      	lsls	r3, r5, #3
 8000a6c:	2580      	movs	r5, #128	; 0x80
 8000a6e:	04ed      	lsls	r5, r5, #19
 8000a70:	431d      	orrs	r5, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	3f7f      	subs	r7, #127	; 0x7f
 8000a7a:	0260      	lsls	r0, r4, #9
 8000a7c:	0a43      	lsrs	r3, r0, #9
 8000a7e:	4698      	mov	r8, r3
 8000a80:	0063      	lsls	r3, r4, #1
 8000a82:	0e1b      	lsrs	r3, r3, #24
 8000a84:	0fe4      	lsrs	r4, r4, #31
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d04e      	beq.n	8000b28 <__aeabi_fdiv+0xe0>
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d046      	beq.n	8000b1c <__aeabi_fdiv+0xd4>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	00d0      	lsls	r0, r2, #3
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	04d2      	lsls	r2, r2, #19
 8000a96:	4302      	orrs	r2, r0
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	3b7f      	subs	r3, #127	; 0x7f
 8000a9e:	0031      	movs	r1, r6
 8000aa0:	1aff      	subs	r7, r7, r3
 8000aa2:	464b      	mov	r3, r9
 8000aa4:	4061      	eors	r1, r4
 8000aa6:	b2c9      	uxtb	r1, r1
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d900      	bls.n	8000ab0 <__aeabi_fdiv+0x68>
 8000aae:	e0b5      	b.n	8000c1c <__aeabi_fdiv+0x1d4>
 8000ab0:	486e      	ldr	r0, [pc, #440]	; (8000c6c <__aeabi_fdiv+0x224>)
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	58c3      	ldr	r3, [r0, r3]
 8000ab6:	469f      	mov	pc, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	4698      	mov	r8, r3
 8000abc:	0026      	movs	r6, r4
 8000abe:	4645      	mov	r5, r8
 8000ac0:	4692      	mov	sl, r2
 8000ac2:	4653      	mov	r3, sl
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fdiv+0x82>
 8000ac8:	e089      	b.n	8000bde <__aeabi_fdiv+0x196>
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fdiv+0x88>
 8000ace:	e09e      	b.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d018      	beq.n	8000b06 <__aeabi_fdiv+0xbe>
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	337f      	adds	r3, #127	; 0x7f
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dd69      	ble.n	8000bb0 <__aeabi_fdiv+0x168>
 8000adc:	076a      	lsls	r2, r5, #29
 8000ade:	d004      	beq.n	8000aea <__aeabi_fdiv+0xa2>
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	402a      	ands	r2, r5
 8000ae4:	2a04      	cmp	r2, #4
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fdiv+0xa2>
 8000ae8:	3504      	adds	r5, #4
 8000aea:	012a      	lsls	r2, r5, #4
 8000aec:	d503      	bpl.n	8000af6 <__aeabi_fdiv+0xae>
 8000aee:	4b60      	ldr	r3, [pc, #384]	; (8000c70 <__aeabi_fdiv+0x228>)
 8000af0:	401d      	ands	r5, r3
 8000af2:	003b      	movs	r3, r7
 8000af4:	3380      	adds	r3, #128	; 0x80
 8000af6:	2bfe      	cmp	r3, #254	; 0xfe
 8000af8:	dd00      	ble.n	8000afc <__aeabi_fdiv+0xb4>
 8000afa:	e070      	b.n	8000bde <__aeabi_fdiv+0x196>
 8000afc:	01ad      	lsls	r5, r5, #6
 8000afe:	0a6d      	lsrs	r5, r5, #9
 8000b00:	b2d8      	uxtb	r0, r3
 8000b02:	e002      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000b04:	000e      	movs	r6, r1
 8000b06:	2000      	movs	r0, #0
 8000b08:	2500      	movs	r5, #0
 8000b0a:	05c0      	lsls	r0, r0, #23
 8000b0c:	4328      	orrs	r0, r5
 8000b0e:	07f6      	lsls	r6, r6, #31
 8000b10:	4330      	orrs	r0, r6
 8000b12:	bce0      	pop	{r5, r6, r7}
 8000b14:	46ba      	mov	sl, r7
 8000b16:	46b1      	mov	r9, r6
 8000b18:	46a8      	mov	r8, r5
 8000b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d13f      	bne.n	8000ba2 <__aeabi_fdiv+0x15a>
 8000b22:	2202      	movs	r2, #2
 8000b24:	3fff      	subs	r7, #255	; 0xff
 8000b26:	e003      	b.n	8000b30 <__aeabi_fdiv+0xe8>
 8000b28:	4643      	mov	r3, r8
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12d      	bne.n	8000b8a <__aeabi_fdiv+0x142>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	0031      	movs	r1, r6
 8000b32:	464b      	mov	r3, r9
 8000b34:	4061      	eors	r1, r4
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d834      	bhi.n	8000ba8 <__aeabi_fdiv+0x160>
 8000b3e:	484d      	ldr	r0, [pc, #308]	; (8000c74 <__aeabi_fdiv+0x22c>)
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	58c3      	ldr	r3, [r0, r3]
 8000b44:	469f      	mov	pc, r3
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d113      	bne.n	8000b72 <__aeabi_fdiv+0x12a>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	3b03      	subs	r3, #3
 8000b50:	2700      	movs	r7, #0
 8000b52:	469a      	mov	sl, r3
 8000b54:	e791      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d105      	bne.n	8000b66 <__aeabi_fdiv+0x11e>
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	3b06      	subs	r3, #6
 8000b60:	27ff      	movs	r7, #255	; 0xff
 8000b62:	469a      	mov	sl, r3
 8000b64:	e789      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b66:	230c      	movs	r3, #12
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b09      	subs	r3, #9
 8000b6c:	27ff      	movs	r7, #255	; 0xff
 8000b6e:	469a      	mov	sl, r3
 8000b70:	e783      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b72:	0028      	movs	r0, r5
 8000b74:	f002 faa6 	bl	80030c4 <__clzsi2>
 8000b78:	2776      	movs	r7, #118	; 0x76
 8000b7a:	1f43      	subs	r3, r0, #5
 8000b7c:	409d      	lsls	r5, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	427f      	negs	r7, r7
 8000b82:	4699      	mov	r9, r3
 8000b84:	469a      	mov	sl, r3
 8000b86:	1a3f      	subs	r7, r7, r0
 8000b88:	e777      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	f002 fa9a 	bl	80030c4 <__clzsi2>
 8000b90:	4642      	mov	r2, r8
 8000b92:	1f43      	subs	r3, r0, #5
 8000b94:	409a      	lsls	r2, r3
 8000b96:	2376      	movs	r3, #118	; 0x76
 8000b98:	425b      	negs	r3, r3
 8000b9a:	4690      	mov	r8, r2
 8000b9c:	1a1b      	subs	r3, r3, r0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	e77d      	b.n	8000a9e <__aeabi_fdiv+0x56>
 8000ba2:	23ff      	movs	r3, #255	; 0xff
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	e77a      	b.n	8000a9e <__aeabi_fdiv+0x56>
 8000ba8:	000e      	movs	r6, r1
 8000baa:	20ff      	movs	r0, #255	; 0xff
 8000bac:	2500      	movs	r5, #0
 8000bae:	e7ac      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	1ac0      	subs	r0, r0, r3
 8000bb4:	281b      	cmp	r0, #27
 8000bb6:	dca6      	bgt.n	8000b06 <__aeabi_fdiv+0xbe>
 8000bb8:	379e      	adds	r7, #158	; 0x9e
 8000bba:	002a      	movs	r2, r5
 8000bbc:	40bd      	lsls	r5, r7
 8000bbe:	40c2      	lsrs	r2, r0
 8000bc0:	1e6b      	subs	r3, r5, #1
 8000bc2:	419d      	sbcs	r5, r3
 8000bc4:	4315      	orrs	r5, r2
 8000bc6:	076b      	lsls	r3, r5, #29
 8000bc8:	d004      	beq.n	8000bd4 <__aeabi_fdiv+0x18c>
 8000bca:	230f      	movs	r3, #15
 8000bcc:	402b      	ands	r3, r5
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_fdiv+0x18c>
 8000bd2:	3504      	adds	r5, #4
 8000bd4:	016b      	lsls	r3, r5, #5
 8000bd6:	d544      	bpl.n	8000c62 <__aeabi_fdiv+0x21a>
 8000bd8:	2001      	movs	r0, #1
 8000bda:	2500      	movs	r5, #0
 8000bdc:	e795      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bde:	20ff      	movs	r0, #255	; 0xff
 8000be0:	2500      	movs	r5, #0
 8000be2:	e792      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000be4:	2580      	movs	r5, #128	; 0x80
 8000be6:	2600      	movs	r6, #0
 8000be8:	20ff      	movs	r0, #255	; 0xff
 8000bea:	03ed      	lsls	r5, r5, #15
 8000bec:	e78d      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	03c0      	lsls	r0, r0, #15
 8000bf6:	4205      	tst	r5, r0
 8000bf8:	d009      	beq.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	4203      	tst	r3, r0
 8000bfe:	d106      	bne.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000c00:	4645      	mov	r5, r8
 8000c02:	4305      	orrs	r5, r0
 8000c04:	026d      	lsls	r5, r5, #9
 8000c06:	0026      	movs	r6, r4
 8000c08:	20ff      	movs	r0, #255	; 0xff
 8000c0a:	0a6d      	lsrs	r5, r5, #9
 8000c0c:	e77d      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c0e:	2080      	movs	r0, #128	; 0x80
 8000c10:	03c0      	lsls	r0, r0, #15
 8000c12:	4305      	orrs	r5, r0
 8000c14:	026d      	lsls	r5, r5, #9
 8000c16:	20ff      	movs	r0, #255	; 0xff
 8000c18:	0a6d      	lsrs	r5, r5, #9
 8000c1a:	e776      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	016b      	lsls	r3, r5, #5
 8000c20:	0150      	lsls	r0, r2, #5
 8000c22:	4283      	cmp	r3, r0
 8000c24:	d219      	bcs.n	8000c5a <__aeabi_fdiv+0x212>
 8000c26:	221b      	movs	r2, #27
 8000c28:	2500      	movs	r5, #0
 8000c2a:	3f01      	subs	r7, #1
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	001c      	movs	r4, r3
 8000c30:	006d      	lsls	r5, r5, #1
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	db01      	blt.n	8000c3c <__aeabi_fdiv+0x1f4>
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	d801      	bhi.n	8000c40 <__aeabi_fdiv+0x1f8>
 8000c3c:	1a1b      	subs	r3, r3, r0
 8000c3e:	4335      	orrs	r5, r6
 8000c40:	3a01      	subs	r2, #1
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d1f3      	bne.n	8000c2e <__aeabi_fdiv+0x1e6>
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	4193      	sbcs	r3, r2
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	337f      	adds	r3, #127	; 0x7f
 8000c50:	000e      	movs	r6, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_fdiv+0x210>
 8000c56:	e741      	b.n	8000adc <__aeabi_fdiv+0x94>
 8000c58:	e7aa      	b.n	8000bb0 <__aeabi_fdiv+0x168>
 8000c5a:	221a      	movs	r2, #26
 8000c5c:	2501      	movs	r5, #1
 8000c5e:	1a1b      	subs	r3, r3, r0
 8000c60:	e7e4      	b.n	8000c2c <__aeabi_fdiv+0x1e4>
 8000c62:	01ad      	lsls	r5, r5, #6
 8000c64:	2000      	movs	r0, #0
 8000c66:	0a6d      	lsrs	r5, r5, #9
 8000c68:	e74f      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	0800e018 	.word	0x0800e018
 8000c70:	f7ffffff 	.word	0xf7ffffff
 8000c74:	0800e058 	.word	0x0800e058

08000c78 <__aeabi_fmul>:
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	464f      	mov	r7, r9
 8000c7c:	4646      	mov	r6, r8
 8000c7e:	46d6      	mov	lr, sl
 8000c80:	0244      	lsls	r4, r0, #9
 8000c82:	0045      	lsls	r5, r0, #1
 8000c84:	b5c0      	push	{r6, r7, lr}
 8000c86:	0a64      	lsrs	r4, r4, #9
 8000c88:	1c0f      	adds	r7, r1, #0
 8000c8a:	0e2d      	lsrs	r5, r5, #24
 8000c8c:	0fc6      	lsrs	r6, r0, #31
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fmul+0x1c>
 8000c92:	e08d      	b.n	8000db0 <__aeabi_fmul+0x138>
 8000c94:	2dff      	cmp	r5, #255	; 0xff
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fmul+0x22>
 8000c98:	e092      	b.n	8000dc0 <__aeabi_fmul+0x148>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2080      	movs	r0, #128	; 0x80
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	00e4      	lsls	r4, r4, #3
 8000ca4:	04c0      	lsls	r0, r0, #19
 8000ca6:	4304      	orrs	r4, r0
 8000ca8:	3d7f      	subs	r5, #127	; 0x7f
 8000caa:	0278      	lsls	r0, r7, #9
 8000cac:	0a43      	lsrs	r3, r0, #9
 8000cae:	4698      	mov	r8, r3
 8000cb0:	007b      	lsls	r3, r7, #1
 8000cb2:	0e1b      	lsrs	r3, r3, #24
 8000cb4:	0fff      	lsrs	r7, r7, #31
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fmul+0x44>
 8000cba:	e070      	b.n	8000d9e <__aeabi_fmul+0x126>
 8000cbc:	2bff      	cmp	r3, #255	; 0xff
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_fmul+0x4a>
 8000cc0:	e086      	b.n	8000dd0 <__aeabi_fmul+0x158>
 8000cc2:	4642      	mov	r2, r8
 8000cc4:	00d0      	lsls	r0, r2, #3
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	3b7f      	subs	r3, #127	; 0x7f
 8000cca:	18ed      	adds	r5, r5, r3
 8000ccc:	2300      	movs	r3, #0
 8000cce:	04d2      	lsls	r2, r2, #19
 8000cd0:	4302      	orrs	r2, r0
 8000cd2:	4690      	mov	r8, r2
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	0031      	movs	r1, r6
 8000cd8:	464b      	mov	r3, r9
 8000cda:	4079      	eors	r1, r7
 8000cdc:	1c68      	adds	r0, r5, #1
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d81c      	bhi.n	8000d1c <__aeabi_fmul+0xa4>
 8000ce2:	4a76      	ldr	r2, [pc, #472]	; (8000ebc <__aeabi_fmul+0x244>)
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	58d3      	ldr	r3, [r2, r3]
 8000ce8:	469f      	mov	pc, r3
 8000cea:	0039      	movs	r1, r7
 8000cec:	4644      	mov	r4, r8
 8000cee:	46e2      	mov	sl, ip
 8000cf0:	4653      	mov	r3, sl
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d00f      	beq.n	8000d16 <__aeabi_fmul+0x9e>
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fmul+0x84>
 8000cfa:	e0d7      	b.n	8000eac <__aeabi_fmul+0x234>
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d137      	bne.n	8000d70 <__aeabi_fmul+0xf8>
 8000d00:	2000      	movs	r0, #0
 8000d02:	2400      	movs	r4, #0
 8000d04:	05c0      	lsls	r0, r0, #23
 8000d06:	4320      	orrs	r0, r4
 8000d08:	07c9      	lsls	r1, r1, #31
 8000d0a:	4308      	orrs	r0, r1
 8000d0c:	bce0      	pop	{r5, r6, r7}
 8000d0e:	46ba      	mov	sl, r7
 8000d10:	46b1      	mov	r9, r6
 8000d12:	46a8      	mov	r8, r5
 8000d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d16:	20ff      	movs	r0, #255	; 0xff
 8000d18:	2400      	movs	r4, #0
 8000d1a:	e7f3      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000d1c:	0c26      	lsrs	r6, r4, #16
 8000d1e:	0424      	lsls	r4, r4, #16
 8000d20:	0c22      	lsrs	r2, r4, #16
 8000d22:	4644      	mov	r4, r8
 8000d24:	0424      	lsls	r4, r4, #16
 8000d26:	0c24      	lsrs	r4, r4, #16
 8000d28:	4643      	mov	r3, r8
 8000d2a:	0027      	movs	r7, r4
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	4357      	muls	r7, r2
 8000d30:	4374      	muls	r4, r6
 8000d32:	435a      	muls	r2, r3
 8000d34:	435e      	muls	r6, r3
 8000d36:	1912      	adds	r2, r2, r4
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	189b      	adds	r3, r3, r2
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	d903      	bls.n	8000d48 <__aeabi_fmul+0xd0>
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	0252      	lsls	r2, r2, #9
 8000d44:	4694      	mov	ip, r2
 8000d46:	4466      	add	r6, ip
 8000d48:	043f      	lsls	r7, r7, #16
 8000d4a:	041a      	lsls	r2, r3, #16
 8000d4c:	0c3f      	lsrs	r7, r7, #16
 8000d4e:	19d2      	adds	r2, r2, r7
 8000d50:	0194      	lsls	r4, r2, #6
 8000d52:	1e67      	subs	r7, r4, #1
 8000d54:	41bc      	sbcs	r4, r7
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	0e92      	lsrs	r2, r2, #26
 8000d5a:	199b      	adds	r3, r3, r6
 8000d5c:	4314      	orrs	r4, r2
 8000d5e:	019b      	lsls	r3, r3, #6
 8000d60:	431c      	orrs	r4, r3
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	d400      	bmi.n	8000d68 <__aeabi_fmul+0xf0>
 8000d66:	e09b      	b.n	8000ea0 <__aeabi_fmul+0x228>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	0862      	lsrs	r2, r4, #1
 8000d6c:	401c      	ands	r4, r3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	0002      	movs	r2, r0
 8000d72:	327f      	adds	r2, #127	; 0x7f
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	dd64      	ble.n	8000e42 <__aeabi_fmul+0x1ca>
 8000d78:	0763      	lsls	r3, r4, #29
 8000d7a:	d004      	beq.n	8000d86 <__aeabi_fmul+0x10e>
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	4023      	ands	r3, r4
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d000      	beq.n	8000d86 <__aeabi_fmul+0x10e>
 8000d84:	3404      	adds	r4, #4
 8000d86:	0123      	lsls	r3, r4, #4
 8000d88:	d503      	bpl.n	8000d92 <__aeabi_fmul+0x11a>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <__aeabi_fmul+0x248>)
 8000d8e:	3280      	adds	r2, #128	; 0x80
 8000d90:	401c      	ands	r4, r3
 8000d92:	2afe      	cmp	r2, #254	; 0xfe
 8000d94:	dcbf      	bgt.n	8000d16 <__aeabi_fmul+0x9e>
 8000d96:	01a4      	lsls	r4, r4, #6
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	b2d0      	uxtb	r0, r2
 8000d9c:	e7b2      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000d9e:	4643      	mov	r3, r8
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d13d      	bne.n	8000e20 <__aeabi_fmul+0x1a8>
 8000da4:	464a      	mov	r2, r9
 8000da6:	3301      	adds	r3, #1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	4691      	mov	r9, r2
 8000dac:	469c      	mov	ip, r3
 8000dae:	e792      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d129      	bne.n	8000e08 <__aeabi_fmul+0x190>
 8000db4:	2304      	movs	r3, #4
 8000db6:	4699      	mov	r9, r3
 8000db8:	3b03      	subs	r3, #3
 8000dba:	2500      	movs	r5, #0
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	e774      	b.n	8000caa <__aeabi_fmul+0x32>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d11b      	bne.n	8000dfc <__aeabi_fmul+0x184>
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	3b06      	subs	r3, #6
 8000dca:	25ff      	movs	r5, #255	; 0xff
 8000dcc:	469a      	mov	sl, r3
 8000dce:	e76c      	b.n	8000caa <__aeabi_fmul+0x32>
 8000dd0:	4643      	mov	r3, r8
 8000dd2:	35ff      	adds	r5, #255	; 0xff
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10b      	bne.n	8000df0 <__aeabi_fmul+0x178>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	464a      	mov	r2, r9
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	469c      	mov	ip, r3
 8000de2:	e778      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000de4:	4653      	mov	r3, sl
 8000de6:	0031      	movs	r1, r6
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d000      	beq.n	8000dee <__aeabi_fmul+0x176>
 8000dec:	e783      	b.n	8000cf6 <__aeabi_fmul+0x7e>
 8000dee:	e792      	b.n	8000d16 <__aeabi_fmul+0x9e>
 8000df0:	2303      	movs	r3, #3
 8000df2:	464a      	mov	r2, r9
 8000df4:	431a      	orrs	r2, r3
 8000df6:	4691      	mov	r9, r2
 8000df8:	469c      	mov	ip, r3
 8000dfa:	e76c      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	4699      	mov	r9, r3
 8000e00:	3b09      	subs	r3, #9
 8000e02:	25ff      	movs	r5, #255	; 0xff
 8000e04:	469a      	mov	sl, r3
 8000e06:	e750      	b.n	8000caa <__aeabi_fmul+0x32>
 8000e08:	0020      	movs	r0, r4
 8000e0a:	f002 f95b 	bl	80030c4 <__clzsi2>
 8000e0e:	2576      	movs	r5, #118	; 0x76
 8000e10:	1f43      	subs	r3, r0, #5
 8000e12:	409c      	lsls	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	426d      	negs	r5, r5
 8000e18:	4699      	mov	r9, r3
 8000e1a:	469a      	mov	sl, r3
 8000e1c:	1a2d      	subs	r5, r5, r0
 8000e1e:	e744      	b.n	8000caa <__aeabi_fmul+0x32>
 8000e20:	4640      	mov	r0, r8
 8000e22:	f002 f94f 	bl	80030c4 <__clzsi2>
 8000e26:	4642      	mov	r2, r8
 8000e28:	1f43      	subs	r3, r0, #5
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	1a2d      	subs	r5, r5, r0
 8000e30:	4690      	mov	r8, r2
 8000e32:	469c      	mov	ip, r3
 8000e34:	3d76      	subs	r5, #118	; 0x76
 8000e36:	e74e      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000e38:	2480      	movs	r4, #128	; 0x80
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	20ff      	movs	r0, #255	; 0xff
 8000e3e:	03e4      	lsls	r4, r4, #15
 8000e40:	e760      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e42:	2301      	movs	r3, #1
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	2b1b      	cmp	r3, #27
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_fmul+0x1d4>
 8000e4a:	e759      	b.n	8000d00 <__aeabi_fmul+0x88>
 8000e4c:	0022      	movs	r2, r4
 8000e4e:	309e      	adds	r0, #158	; 0x9e
 8000e50:	40da      	lsrs	r2, r3
 8000e52:	4084      	lsls	r4, r0
 8000e54:	0013      	movs	r3, r2
 8000e56:	1e62      	subs	r2, r4, #1
 8000e58:	4194      	sbcs	r4, r2
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	0763      	lsls	r3, r4, #29
 8000e5e:	d004      	beq.n	8000e6a <__aeabi_fmul+0x1f2>
 8000e60:	230f      	movs	r3, #15
 8000e62:	4023      	ands	r3, r4
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d000      	beq.n	8000e6a <__aeabi_fmul+0x1f2>
 8000e68:	3404      	adds	r4, #4
 8000e6a:	0163      	lsls	r3, r4, #5
 8000e6c:	d51a      	bpl.n	8000ea4 <__aeabi_fmul+0x22c>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	2400      	movs	r4, #0
 8000e72:	e747      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	03c0      	lsls	r0, r0, #15
 8000e78:	4204      	tst	r4, r0
 8000e7a:	d009      	beq.n	8000e90 <__aeabi_fmul+0x218>
 8000e7c:	4643      	mov	r3, r8
 8000e7e:	4203      	tst	r3, r0
 8000e80:	d106      	bne.n	8000e90 <__aeabi_fmul+0x218>
 8000e82:	4644      	mov	r4, r8
 8000e84:	4304      	orrs	r4, r0
 8000e86:	0264      	lsls	r4, r4, #9
 8000e88:	0039      	movs	r1, r7
 8000e8a:	20ff      	movs	r0, #255	; 0xff
 8000e8c:	0a64      	lsrs	r4, r4, #9
 8000e8e:	e739      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e90:	2080      	movs	r0, #128	; 0x80
 8000e92:	03c0      	lsls	r0, r0, #15
 8000e94:	4304      	orrs	r4, r0
 8000e96:	0264      	lsls	r4, r4, #9
 8000e98:	0031      	movs	r1, r6
 8000e9a:	20ff      	movs	r0, #255	; 0xff
 8000e9c:	0a64      	lsrs	r4, r4, #9
 8000e9e:	e731      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000ea0:	0028      	movs	r0, r5
 8000ea2:	e765      	b.n	8000d70 <__aeabi_fmul+0xf8>
 8000ea4:	01a4      	lsls	r4, r4, #6
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	0a64      	lsrs	r4, r4, #9
 8000eaa:	e72b      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	03c0      	lsls	r0, r0, #15
 8000eb0:	4304      	orrs	r4, r0
 8000eb2:	0264      	lsls	r4, r4, #9
 8000eb4:	20ff      	movs	r0, #255	; 0xff
 8000eb6:	0a64      	lsrs	r4, r4, #9
 8000eb8:	e724      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	0800e098 	.word	0x0800e098
 8000ec0:	f7ffffff 	.word	0xf7ffffff

08000ec4 <__aeabi_fsub>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	46ce      	mov	lr, r9
 8000ec8:	4647      	mov	r7, r8
 8000eca:	0243      	lsls	r3, r0, #9
 8000ecc:	0a5b      	lsrs	r3, r3, #9
 8000ece:	024e      	lsls	r6, r1, #9
 8000ed0:	00da      	lsls	r2, r3, #3
 8000ed2:	4694      	mov	ip, r2
 8000ed4:	0a72      	lsrs	r2, r6, #9
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	0045      	lsls	r5, r0, #1
 8000eda:	004a      	lsls	r2, r1, #1
 8000edc:	b580      	push	{r7, lr}
 8000ede:	0e2d      	lsrs	r5, r5, #24
 8000ee0:	001f      	movs	r7, r3
 8000ee2:	0fc4      	lsrs	r4, r0, #31
 8000ee4:	0e12      	lsrs	r2, r2, #24
 8000ee6:	0fc9      	lsrs	r1, r1, #31
 8000ee8:	09b6      	lsrs	r6, r6, #6
 8000eea:	2aff      	cmp	r2, #255	; 0xff
 8000eec:	d05b      	beq.n	8000fa6 <__aeabi_fsub+0xe2>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	4041      	eors	r1, r0
 8000ef2:	428c      	cmp	r4, r1
 8000ef4:	d039      	beq.n	8000f6a <__aeabi_fsub+0xa6>
 8000ef6:	1aa8      	subs	r0, r5, r2
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	dd5a      	ble.n	8000fb2 <__aeabi_fsub+0xee>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d06a      	beq.n	8000fd6 <__aeabi_fsub+0x112>
 8000f00:	2dff      	cmp	r5, #255	; 0xff
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x42>
 8000f04:	e0d9      	b.n	80010ba <__aeabi_fsub+0x1f6>
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	4316      	orrs	r6, r2
 8000f0c:	281b      	cmp	r0, #27
 8000f0e:	dc00      	bgt.n	8000f12 <__aeabi_fsub+0x4e>
 8000f10:	e0e9      	b.n	80010e6 <__aeabi_fsub+0x222>
 8000f12:	2001      	movs	r0, #1
 8000f14:	4663      	mov	r3, ip
 8000f16:	1a18      	subs	r0, r3, r0
 8000f18:	0143      	lsls	r3, r0, #5
 8000f1a:	d400      	bmi.n	8000f1e <__aeabi_fsub+0x5a>
 8000f1c:	e0b4      	b.n	8001088 <__aeabi_fsub+0x1c4>
 8000f1e:	0180      	lsls	r0, r0, #6
 8000f20:	0987      	lsrs	r7, r0, #6
 8000f22:	0038      	movs	r0, r7
 8000f24:	f002 f8ce 	bl	80030c4 <__clzsi2>
 8000f28:	3805      	subs	r0, #5
 8000f2a:	4087      	lsls	r7, r0
 8000f2c:	4285      	cmp	r5, r0
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_fsub+0x6e>
 8000f30:	e0cc      	b.n	80010cc <__aeabi_fsub+0x208>
 8000f32:	1a2d      	subs	r5, r5, r0
 8000f34:	48b5      	ldr	r0, [pc, #724]	; (800120c <__aeabi_fsub+0x348>)
 8000f36:	4038      	ands	r0, r7
 8000f38:	0743      	lsls	r3, r0, #29
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_fsub+0x82>
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	4003      	ands	r3, r0
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_fsub+0x82>
 8000f44:	3004      	adds	r0, #4
 8000f46:	0143      	lsls	r3, r0, #5
 8000f48:	d400      	bmi.n	8000f4c <__aeabi_fsub+0x88>
 8000f4a:	e0a0      	b.n	800108e <__aeabi_fsub+0x1ca>
 8000f4c:	1c6a      	adds	r2, r5, #1
 8000f4e:	2dfe      	cmp	r5, #254	; 0xfe
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x90>
 8000f52:	e08d      	b.n	8001070 <__aeabi_fsub+0x1ac>
 8000f54:	0180      	lsls	r0, r0, #6
 8000f56:	0a47      	lsrs	r7, r0, #9
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	05d0      	lsls	r0, r2, #23
 8000f5c:	4338      	orrs	r0, r7
 8000f5e:	07e4      	lsls	r4, r4, #31
 8000f60:	4320      	orrs	r0, r4
 8000f62:	bcc0      	pop	{r6, r7}
 8000f64:	46b9      	mov	r9, r7
 8000f66:	46b0      	mov	r8, r6
 8000f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6a:	1aa8      	subs	r0, r5, r2
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	dd45      	ble.n	8000ffe <__aeabi_fsub+0x13a>
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d070      	beq.n	8001058 <__aeabi_fsub+0x194>
 8000f76:	2dff      	cmp	r5, #255	; 0xff
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0xb8>
 8000f7a:	e09e      	b.n	80010ba <__aeabi_fsub+0x1f6>
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	04db      	lsls	r3, r3, #19
 8000f80:	431e      	orrs	r6, r3
 8000f82:	4643      	mov	r3, r8
 8000f84:	2b1b      	cmp	r3, #27
 8000f86:	dc00      	bgt.n	8000f8a <__aeabi_fsub+0xc6>
 8000f88:	e0d2      	b.n	8001130 <__aeabi_fsub+0x26c>
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	4460      	add	r0, ip
 8000f8e:	0143      	lsls	r3, r0, #5
 8000f90:	d57a      	bpl.n	8001088 <__aeabi_fsub+0x1c4>
 8000f92:	3501      	adds	r5, #1
 8000f94:	2dff      	cmp	r5, #255	; 0xff
 8000f96:	d06b      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	4a9d      	ldr	r2, [pc, #628]	; (8001210 <__aeabi_fsub+0x34c>)
 8000f9c:	4003      	ands	r3, r0
 8000f9e:	0840      	lsrs	r0, r0, #1
 8000fa0:	4010      	ands	r0, r2
 8000fa2:	4318      	orrs	r0, r3
 8000fa4:	e7c8      	b.n	8000f38 <__aeabi_fsub+0x74>
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	d020      	beq.n	8000fec <__aeabi_fsub+0x128>
 8000faa:	428c      	cmp	r4, r1
 8000fac:	d023      	beq.n	8000ff6 <__aeabi_fsub+0x132>
 8000fae:	0028      	movs	r0, r5
 8000fb0:	38ff      	subs	r0, #255	; 0xff
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d039      	beq.n	800102a <__aeabi_fsub+0x166>
 8000fb6:	1b57      	subs	r7, r2, r5
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0xfa>
 8000fbc:	e09d      	b.n	80010fa <__aeabi_fsub+0x236>
 8000fbe:	4663      	mov	r3, ip
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x102>
 8000fc4:	e0db      	b.n	800117e <__aeabi_fsub+0x2ba>
 8000fc6:	1e7b      	subs	r3, r7, #1
 8000fc8:	2f01      	cmp	r7, #1
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x10a>
 8000fcc:	e10d      	b.n	80011ea <__aeabi_fsub+0x326>
 8000fce:	2fff      	cmp	r7, #255	; 0xff
 8000fd0:	d071      	beq.n	80010b6 <__aeabi_fsub+0x1f2>
 8000fd2:	001f      	movs	r7, r3
 8000fd4:	e098      	b.n	8001108 <__aeabi_fsub+0x244>
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x118>
 8000fda:	e0a7      	b.n	800112c <__aeabi_fsub+0x268>
 8000fdc:	1e42      	subs	r2, r0, #1
 8000fde:	2801      	cmp	r0, #1
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_fsub+0x120>
 8000fe2:	e0e6      	b.n	80011b2 <__aeabi_fsub+0x2ee>
 8000fe4:	28ff      	cmp	r0, #255	; 0xff
 8000fe6:	d068      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 8000fe8:	0010      	movs	r0, r2
 8000fea:	e78f      	b.n	8000f0c <__aeabi_fsub+0x48>
 8000fec:	2001      	movs	r0, #1
 8000fee:	4041      	eors	r1, r0
 8000ff0:	42a1      	cmp	r1, r4
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_fsub+0x132>
 8000ff4:	e77f      	b.n	8000ef6 <__aeabi_fsub+0x32>
 8000ff6:	20ff      	movs	r0, #255	; 0xff
 8000ff8:	4240      	negs	r0, r0
 8000ffa:	4680      	mov	r8, r0
 8000ffc:	44a8      	add	r8, r5
 8000ffe:	4640      	mov	r0, r8
 8001000:	2800      	cmp	r0, #0
 8001002:	d038      	beq.n	8001076 <__aeabi_fsub+0x1b2>
 8001004:	1b51      	subs	r1, r2, r5
 8001006:	2d00      	cmp	r5, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x148>
 800100a:	e0ae      	b.n	800116a <__aeabi_fsub+0x2a6>
 800100c:	2aff      	cmp	r2, #255	; 0xff
 800100e:	d100      	bne.n	8001012 <__aeabi_fsub+0x14e>
 8001010:	e0df      	b.n	80011d2 <__aeabi_fsub+0x30e>
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	4660      	mov	r0, ip
 8001016:	04db      	lsls	r3, r3, #19
 8001018:	4318      	orrs	r0, r3
 800101a:	4684      	mov	ip, r0
 800101c:	291b      	cmp	r1, #27
 800101e:	dc00      	bgt.n	8001022 <__aeabi_fsub+0x15e>
 8001020:	e0d9      	b.n	80011d6 <__aeabi_fsub+0x312>
 8001022:	2001      	movs	r0, #1
 8001024:	0015      	movs	r5, r2
 8001026:	1980      	adds	r0, r0, r6
 8001028:	e7b1      	b.n	8000f8e <__aeabi_fsub+0xca>
 800102a:	20fe      	movs	r0, #254	; 0xfe
 800102c:	1c6a      	adds	r2, r5, #1
 800102e:	4210      	tst	r0, r2
 8001030:	d171      	bne.n	8001116 <__aeabi_fsub+0x252>
 8001032:	2d00      	cmp	r5, #0
 8001034:	d000      	beq.n	8001038 <__aeabi_fsub+0x174>
 8001036:	e0a6      	b.n	8001186 <__aeabi_fsub+0x2c2>
 8001038:	4663      	mov	r3, ip
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x17c>
 800103e:	e0d9      	b.n	80011f4 <__aeabi_fsub+0x330>
 8001040:	2200      	movs	r2, #0
 8001042:	2e00      	cmp	r6, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x184>
 8001046:	e788      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001048:	1b98      	subs	r0, r3, r6
 800104a:	0143      	lsls	r3, r0, #5
 800104c:	d400      	bmi.n	8001050 <__aeabi_fsub+0x18c>
 800104e:	e0e1      	b.n	8001214 <__aeabi_fsub+0x350>
 8001050:	4663      	mov	r3, ip
 8001052:	000c      	movs	r4, r1
 8001054:	1af0      	subs	r0, r6, r3
 8001056:	e76f      	b.n	8000f38 <__aeabi_fsub+0x74>
 8001058:	2e00      	cmp	r6, #0
 800105a:	d100      	bne.n	800105e <__aeabi_fsub+0x19a>
 800105c:	e0b7      	b.n	80011ce <__aeabi_fsub+0x30a>
 800105e:	0002      	movs	r2, r0
 8001060:	3a01      	subs	r2, #1
 8001062:	2801      	cmp	r0, #1
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0x1a4>
 8001066:	e09c      	b.n	80011a2 <__aeabi_fsub+0x2de>
 8001068:	28ff      	cmp	r0, #255	; 0xff
 800106a:	d026      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 800106c:	4690      	mov	r8, r2
 800106e:	e788      	b.n	8000f82 <__aeabi_fsub+0xbe>
 8001070:	22ff      	movs	r2, #255	; 0xff
 8001072:	2700      	movs	r7, #0
 8001074:	e771      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001076:	20fe      	movs	r0, #254	; 0xfe
 8001078:	1c6a      	adds	r2, r5, #1
 800107a:	4210      	tst	r0, r2
 800107c:	d064      	beq.n	8001148 <__aeabi_fsub+0x284>
 800107e:	2aff      	cmp	r2, #255	; 0xff
 8001080:	d0f6      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 8001082:	0015      	movs	r5, r2
 8001084:	4466      	add	r6, ip
 8001086:	0870      	lsrs	r0, r6, #1
 8001088:	0743      	lsls	r3, r0, #29
 800108a:	d000      	beq.n	800108e <__aeabi_fsub+0x1ca>
 800108c:	e756      	b.n	8000f3c <__aeabi_fsub+0x78>
 800108e:	08c3      	lsrs	r3, r0, #3
 8001090:	2dff      	cmp	r5, #255	; 0xff
 8001092:	d012      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	0a5f      	lsrs	r7, r3, #9
 8001098:	b2ea      	uxtb	r2, r5
 800109a:	e75e      	b.n	8000f5a <__aeabi_fsub+0x96>
 800109c:	4662      	mov	r2, ip
 800109e:	2a00      	cmp	r2, #0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_fsub+0x1e0>
 80010a2:	e096      	b.n	80011d2 <__aeabi_fsub+0x30e>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d008      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	03d2      	lsls	r2, r2, #15
 80010ac:	4213      	tst	r3, r2
 80010ae:	d004      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 80010b0:	4648      	mov	r0, r9
 80010b2:	4210      	tst	r0, r2
 80010b4:	d101      	bne.n	80010ba <__aeabi_fsub+0x1f6>
 80010b6:	000c      	movs	r4, r1
 80010b8:	464b      	mov	r3, r9
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0d8      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 80010be:	2780      	movs	r7, #128	; 0x80
 80010c0:	03ff      	lsls	r7, r7, #15
 80010c2:	431f      	orrs	r7, r3
 80010c4:	027f      	lsls	r7, r7, #9
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	0a7f      	lsrs	r7, r7, #9
 80010ca:	e746      	b.n	8000f5a <__aeabi_fsub+0x96>
 80010cc:	2320      	movs	r3, #32
 80010ce:	003a      	movs	r2, r7
 80010d0:	1b45      	subs	r5, r0, r5
 80010d2:	0038      	movs	r0, r7
 80010d4:	3501      	adds	r5, #1
 80010d6:	40ea      	lsrs	r2, r5
 80010d8:	1b5d      	subs	r5, r3, r5
 80010da:	40a8      	lsls	r0, r5
 80010dc:	1e43      	subs	r3, r0, #1
 80010de:	4198      	sbcs	r0, r3
 80010e0:	2500      	movs	r5, #0
 80010e2:	4310      	orrs	r0, r2
 80010e4:	e728      	b.n	8000f38 <__aeabi_fsub+0x74>
 80010e6:	2320      	movs	r3, #32
 80010e8:	1a1b      	subs	r3, r3, r0
 80010ea:	0032      	movs	r2, r6
 80010ec:	409e      	lsls	r6, r3
 80010ee:	40c2      	lsrs	r2, r0
 80010f0:	0030      	movs	r0, r6
 80010f2:	1e43      	subs	r3, r0, #1
 80010f4:	4198      	sbcs	r0, r3
 80010f6:	4310      	orrs	r0, r2
 80010f8:	e70c      	b.n	8000f14 <__aeabi_fsub+0x50>
 80010fa:	2aff      	cmp	r2, #255	; 0xff
 80010fc:	d0db      	beq.n	80010b6 <__aeabi_fsub+0x1f2>
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	4660      	mov	r0, ip
 8001102:	04db      	lsls	r3, r3, #19
 8001104:	4318      	orrs	r0, r3
 8001106:	4684      	mov	ip, r0
 8001108:	2f1b      	cmp	r7, #27
 800110a:	dd56      	ble.n	80011ba <__aeabi_fsub+0x2f6>
 800110c:	2001      	movs	r0, #1
 800110e:	000c      	movs	r4, r1
 8001110:	0015      	movs	r5, r2
 8001112:	1a30      	subs	r0, r6, r0
 8001114:	e700      	b.n	8000f18 <__aeabi_fsub+0x54>
 8001116:	4663      	mov	r3, ip
 8001118:	1b9f      	subs	r7, r3, r6
 800111a:	017b      	lsls	r3, r7, #5
 800111c:	d43d      	bmi.n	800119a <__aeabi_fsub+0x2d6>
 800111e:	2f00      	cmp	r7, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x260>
 8001122:	e6fe      	b.n	8000f22 <__aeabi_fsub+0x5e>
 8001124:	2400      	movs	r4, #0
 8001126:	2200      	movs	r2, #0
 8001128:	2700      	movs	r7, #0
 800112a:	e716      	b.n	8000f5a <__aeabi_fsub+0x96>
 800112c:	0005      	movs	r5, r0
 800112e:	e7af      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001130:	0032      	movs	r2, r6
 8001132:	4643      	mov	r3, r8
 8001134:	4641      	mov	r1, r8
 8001136:	40da      	lsrs	r2, r3
 8001138:	2320      	movs	r3, #32
 800113a:	1a5b      	subs	r3, r3, r1
 800113c:	409e      	lsls	r6, r3
 800113e:	0030      	movs	r0, r6
 8001140:	1e43      	subs	r3, r0, #1
 8001142:	4198      	sbcs	r0, r3
 8001144:	4310      	orrs	r0, r2
 8001146:	e721      	b.n	8000f8c <__aeabi_fsub+0xc8>
 8001148:	2d00      	cmp	r5, #0
 800114a:	d1a7      	bne.n	800109c <__aeabi_fsub+0x1d8>
 800114c:	4663      	mov	r3, ip
 800114e:	2b00      	cmp	r3, #0
 8001150:	d059      	beq.n	8001206 <__aeabi_fsub+0x342>
 8001152:	2200      	movs	r2, #0
 8001154:	2e00      	cmp	r6, #0
 8001156:	d100      	bne.n	800115a <__aeabi_fsub+0x296>
 8001158:	e6ff      	b.n	8000f5a <__aeabi_fsub+0x96>
 800115a:	0030      	movs	r0, r6
 800115c:	4460      	add	r0, ip
 800115e:	0143      	lsls	r3, r0, #5
 8001160:	d592      	bpl.n	8001088 <__aeabi_fsub+0x1c4>
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <__aeabi_fsub+0x348>)
 8001164:	3501      	adds	r5, #1
 8001166:	4018      	ands	r0, r3
 8001168:	e78e      	b.n	8001088 <__aeabi_fsub+0x1c4>
 800116a:	4663      	mov	r3, ip
 800116c:	2b00      	cmp	r3, #0
 800116e:	d047      	beq.n	8001200 <__aeabi_fsub+0x33c>
 8001170:	1e4b      	subs	r3, r1, #1
 8001172:	2901      	cmp	r1, #1
 8001174:	d015      	beq.n	80011a2 <__aeabi_fsub+0x2de>
 8001176:	29ff      	cmp	r1, #255	; 0xff
 8001178:	d02b      	beq.n	80011d2 <__aeabi_fsub+0x30e>
 800117a:	0019      	movs	r1, r3
 800117c:	e74e      	b.n	800101c <__aeabi_fsub+0x158>
 800117e:	000c      	movs	r4, r1
 8001180:	464b      	mov	r3, r9
 8001182:	003d      	movs	r5, r7
 8001184:	e784      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d18b      	bne.n	80010a4 <__aeabi_fsub+0x1e0>
 800118c:	2e00      	cmp	r6, #0
 800118e:	d192      	bne.n	80010b6 <__aeabi_fsub+0x1f2>
 8001190:	2780      	movs	r7, #128	; 0x80
 8001192:	2400      	movs	r4, #0
 8001194:	22ff      	movs	r2, #255	; 0xff
 8001196:	03ff      	lsls	r7, r7, #15
 8001198:	e6df      	b.n	8000f5a <__aeabi_fsub+0x96>
 800119a:	4663      	mov	r3, ip
 800119c:	000c      	movs	r4, r1
 800119e:	1af7      	subs	r7, r6, r3
 80011a0:	e6bf      	b.n	8000f22 <__aeabi_fsub+0x5e>
 80011a2:	0030      	movs	r0, r6
 80011a4:	4460      	add	r0, ip
 80011a6:	2501      	movs	r5, #1
 80011a8:	0143      	lsls	r3, r0, #5
 80011aa:	d400      	bmi.n	80011ae <__aeabi_fsub+0x2ea>
 80011ac:	e76c      	b.n	8001088 <__aeabi_fsub+0x1c4>
 80011ae:	2502      	movs	r5, #2
 80011b0:	e6f2      	b.n	8000f98 <__aeabi_fsub+0xd4>
 80011b2:	4663      	mov	r3, ip
 80011b4:	2501      	movs	r5, #1
 80011b6:	1b98      	subs	r0, r3, r6
 80011b8:	e6ae      	b.n	8000f18 <__aeabi_fsub+0x54>
 80011ba:	2320      	movs	r3, #32
 80011bc:	4664      	mov	r4, ip
 80011be:	4660      	mov	r0, ip
 80011c0:	40fc      	lsrs	r4, r7
 80011c2:	1bdf      	subs	r7, r3, r7
 80011c4:	40b8      	lsls	r0, r7
 80011c6:	1e43      	subs	r3, r0, #1
 80011c8:	4198      	sbcs	r0, r3
 80011ca:	4320      	orrs	r0, r4
 80011cc:	e79f      	b.n	800110e <__aeabi_fsub+0x24a>
 80011ce:	0005      	movs	r5, r0
 80011d0:	e75e      	b.n	8001090 <__aeabi_fsub+0x1cc>
 80011d2:	464b      	mov	r3, r9
 80011d4:	e771      	b.n	80010ba <__aeabi_fsub+0x1f6>
 80011d6:	2320      	movs	r3, #32
 80011d8:	4665      	mov	r5, ip
 80011da:	4660      	mov	r0, ip
 80011dc:	40cd      	lsrs	r5, r1
 80011de:	1a59      	subs	r1, r3, r1
 80011e0:	4088      	lsls	r0, r1
 80011e2:	1e43      	subs	r3, r0, #1
 80011e4:	4198      	sbcs	r0, r3
 80011e6:	4328      	orrs	r0, r5
 80011e8:	e71c      	b.n	8001024 <__aeabi_fsub+0x160>
 80011ea:	4663      	mov	r3, ip
 80011ec:	000c      	movs	r4, r1
 80011ee:	2501      	movs	r5, #1
 80011f0:	1af0      	subs	r0, r6, r3
 80011f2:	e691      	b.n	8000f18 <__aeabi_fsub+0x54>
 80011f4:	2e00      	cmp	r6, #0
 80011f6:	d095      	beq.n	8001124 <__aeabi_fsub+0x260>
 80011f8:	000c      	movs	r4, r1
 80011fa:	464f      	mov	r7, r9
 80011fc:	2200      	movs	r2, #0
 80011fe:	e6ac      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001200:	464b      	mov	r3, r9
 8001202:	000d      	movs	r5, r1
 8001204:	e744      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001206:	464f      	mov	r7, r9
 8001208:	2200      	movs	r2, #0
 800120a:	e6a6      	b.n	8000f5a <__aeabi_fsub+0x96>
 800120c:	fbffffff 	.word	0xfbffffff
 8001210:	7dffffff 	.word	0x7dffffff
 8001214:	2800      	cmp	r0, #0
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x356>
 8001218:	e736      	b.n	8001088 <__aeabi_fsub+0x1c4>
 800121a:	2400      	movs	r4, #0
 800121c:	2700      	movs	r7, #0
 800121e:	e69c      	b.n	8000f5a <__aeabi_fsub+0x96>

08001220 <__aeabi_f2iz>:
 8001220:	0241      	lsls	r1, r0, #9
 8001222:	0042      	lsls	r2, r0, #1
 8001224:	0fc3      	lsrs	r3, r0, #31
 8001226:	0a49      	lsrs	r1, r1, #9
 8001228:	2000      	movs	r0, #0
 800122a:	0e12      	lsrs	r2, r2, #24
 800122c:	2a7e      	cmp	r2, #126	; 0x7e
 800122e:	dd03      	ble.n	8001238 <__aeabi_f2iz+0x18>
 8001230:	2a9d      	cmp	r2, #157	; 0x9d
 8001232:	dd02      	ble.n	800123a <__aeabi_f2iz+0x1a>
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <__aeabi_f2iz+0x3c>)
 8001236:	1898      	adds	r0, r3, r2
 8001238:	4770      	bx	lr
 800123a:	2080      	movs	r0, #128	; 0x80
 800123c:	0400      	lsls	r0, r0, #16
 800123e:	4301      	orrs	r1, r0
 8001240:	2a95      	cmp	r2, #149	; 0x95
 8001242:	dc07      	bgt.n	8001254 <__aeabi_f2iz+0x34>
 8001244:	2096      	movs	r0, #150	; 0x96
 8001246:	1a82      	subs	r2, r0, r2
 8001248:	40d1      	lsrs	r1, r2
 800124a:	4248      	negs	r0, r1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f3      	bne.n	8001238 <__aeabi_f2iz+0x18>
 8001250:	0008      	movs	r0, r1
 8001252:	e7f1      	b.n	8001238 <__aeabi_f2iz+0x18>
 8001254:	3a96      	subs	r2, #150	; 0x96
 8001256:	4091      	lsls	r1, r2
 8001258:	e7f7      	b.n	800124a <__aeabi_f2iz+0x2a>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	7fffffff 	.word	0x7fffffff

08001260 <__aeabi_ui2f>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	1e05      	subs	r5, r0, #0
 8001264:	d00e      	beq.n	8001284 <__aeabi_ui2f+0x24>
 8001266:	f001 ff2d 	bl	80030c4 <__clzsi2>
 800126a:	239e      	movs	r3, #158	; 0x9e
 800126c:	0004      	movs	r4, r0
 800126e:	1a1b      	subs	r3, r3, r0
 8001270:	2b96      	cmp	r3, #150	; 0x96
 8001272:	dc0c      	bgt.n	800128e <__aeabi_ui2f+0x2e>
 8001274:	2808      	cmp	r0, #8
 8001276:	dd01      	ble.n	800127c <__aeabi_ui2f+0x1c>
 8001278:	3c08      	subs	r4, #8
 800127a:	40a5      	lsls	r5, r4
 800127c:	026d      	lsls	r5, r5, #9
 800127e:	0a6d      	lsrs	r5, r5, #9
 8001280:	b2d8      	uxtb	r0, r3
 8001282:	e001      	b.n	8001288 <__aeabi_ui2f+0x28>
 8001284:	2000      	movs	r0, #0
 8001286:	2500      	movs	r5, #0
 8001288:	05c0      	lsls	r0, r0, #23
 800128a:	4328      	orrs	r0, r5
 800128c:	bd70      	pop	{r4, r5, r6, pc}
 800128e:	2b99      	cmp	r3, #153	; 0x99
 8001290:	dd09      	ble.n	80012a6 <__aeabi_ui2f+0x46>
 8001292:	0002      	movs	r2, r0
 8001294:	0029      	movs	r1, r5
 8001296:	321b      	adds	r2, #27
 8001298:	4091      	lsls	r1, r2
 800129a:	1e4a      	subs	r2, r1, #1
 800129c:	4191      	sbcs	r1, r2
 800129e:	2205      	movs	r2, #5
 80012a0:	1a12      	subs	r2, r2, r0
 80012a2:	40d5      	lsrs	r5, r2
 80012a4:	430d      	orrs	r5, r1
 80012a6:	2c05      	cmp	r4, #5
 80012a8:	dc12      	bgt.n	80012d0 <__aeabi_ui2f+0x70>
 80012aa:	0029      	movs	r1, r5
 80012ac:	4e0c      	ldr	r6, [pc, #48]	; (80012e0 <__aeabi_ui2f+0x80>)
 80012ae:	4031      	ands	r1, r6
 80012b0:	076a      	lsls	r2, r5, #29
 80012b2:	d009      	beq.n	80012c8 <__aeabi_ui2f+0x68>
 80012b4:	200f      	movs	r0, #15
 80012b6:	4028      	ands	r0, r5
 80012b8:	2804      	cmp	r0, #4
 80012ba:	d005      	beq.n	80012c8 <__aeabi_ui2f+0x68>
 80012bc:	3104      	adds	r1, #4
 80012be:	014a      	lsls	r2, r1, #5
 80012c0:	d502      	bpl.n	80012c8 <__aeabi_ui2f+0x68>
 80012c2:	239f      	movs	r3, #159	; 0x9f
 80012c4:	4031      	ands	r1, r6
 80012c6:	1b1b      	subs	r3, r3, r4
 80012c8:	0189      	lsls	r1, r1, #6
 80012ca:	0a4d      	lsrs	r5, r1, #9
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	e7db      	b.n	8001288 <__aeabi_ui2f+0x28>
 80012d0:	1f62      	subs	r2, r4, #5
 80012d2:	4095      	lsls	r5, r2
 80012d4:	0029      	movs	r1, r5
 80012d6:	4e02      	ldr	r6, [pc, #8]	; (80012e0 <__aeabi_ui2f+0x80>)
 80012d8:	4031      	ands	r1, r6
 80012da:	076a      	lsls	r2, r5, #29
 80012dc:	d0f4      	beq.n	80012c8 <__aeabi_ui2f+0x68>
 80012de:	e7e9      	b.n	80012b4 <__aeabi_ui2f+0x54>
 80012e0:	fbffffff 	.word	0xfbffffff

080012e4 <__aeabi_dadd>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	464f      	mov	r7, r9
 80012e8:	4646      	mov	r6, r8
 80012ea:	46d6      	mov	lr, sl
 80012ec:	000d      	movs	r5, r1
 80012ee:	0004      	movs	r4, r0
 80012f0:	b5c0      	push	{r6, r7, lr}
 80012f2:	001f      	movs	r7, r3
 80012f4:	0011      	movs	r1, r2
 80012f6:	0328      	lsls	r0, r5, #12
 80012f8:	0f62      	lsrs	r2, r4, #29
 80012fa:	0a40      	lsrs	r0, r0, #9
 80012fc:	4310      	orrs	r0, r2
 80012fe:	007a      	lsls	r2, r7, #1
 8001300:	0d52      	lsrs	r2, r2, #21
 8001302:	00e3      	lsls	r3, r4, #3
 8001304:	033c      	lsls	r4, r7, #12
 8001306:	4691      	mov	r9, r2
 8001308:	0a64      	lsrs	r4, r4, #9
 800130a:	0ffa      	lsrs	r2, r7, #31
 800130c:	0f4f      	lsrs	r7, r1, #29
 800130e:	006e      	lsls	r6, r5, #1
 8001310:	4327      	orrs	r7, r4
 8001312:	4692      	mov	sl, r2
 8001314:	46b8      	mov	r8, r7
 8001316:	0d76      	lsrs	r6, r6, #21
 8001318:	0fed      	lsrs	r5, r5, #31
 800131a:	00c9      	lsls	r1, r1, #3
 800131c:	4295      	cmp	r5, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x3e>
 8001320:	e099      	b.n	8001456 <__aeabi_dadd+0x172>
 8001322:	464c      	mov	r4, r9
 8001324:	1b34      	subs	r4, r6, r4
 8001326:	46a4      	mov	ip, r4
 8001328:	2c00      	cmp	r4, #0
 800132a:	dc00      	bgt.n	800132e <__aeabi_dadd+0x4a>
 800132c:	e07c      	b.n	8001428 <__aeabi_dadd+0x144>
 800132e:	464a      	mov	r2, r9
 8001330:	2a00      	cmp	r2, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x52>
 8001334:	e0b8      	b.n	80014a8 <__aeabi_dadd+0x1c4>
 8001336:	4ac5      	ldr	r2, [pc, #788]	; (800164c <__aeabi_dadd+0x368>)
 8001338:	4296      	cmp	r6, r2
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x5a>
 800133c:	e11c      	b.n	8001578 <__aeabi_dadd+0x294>
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	003c      	movs	r4, r7
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	4314      	orrs	r4, r2
 8001346:	46a0      	mov	r8, r4
 8001348:	4662      	mov	r2, ip
 800134a:	2a38      	cmp	r2, #56	; 0x38
 800134c:	dd00      	ble.n	8001350 <__aeabi_dadd+0x6c>
 800134e:	e161      	b.n	8001614 <__aeabi_dadd+0x330>
 8001350:	2a1f      	cmp	r2, #31
 8001352:	dd00      	ble.n	8001356 <__aeabi_dadd+0x72>
 8001354:	e1cc      	b.n	80016f0 <__aeabi_dadd+0x40c>
 8001356:	4664      	mov	r4, ip
 8001358:	2220      	movs	r2, #32
 800135a:	1b12      	subs	r2, r2, r4
 800135c:	4644      	mov	r4, r8
 800135e:	4094      	lsls	r4, r2
 8001360:	000f      	movs	r7, r1
 8001362:	46a1      	mov	r9, r4
 8001364:	4664      	mov	r4, ip
 8001366:	4091      	lsls	r1, r2
 8001368:	40e7      	lsrs	r7, r4
 800136a:	464c      	mov	r4, r9
 800136c:	1e4a      	subs	r2, r1, #1
 800136e:	4191      	sbcs	r1, r2
 8001370:	433c      	orrs	r4, r7
 8001372:	4642      	mov	r2, r8
 8001374:	4321      	orrs	r1, r4
 8001376:	4664      	mov	r4, ip
 8001378:	40e2      	lsrs	r2, r4
 800137a:	1a80      	subs	r0, r0, r2
 800137c:	1a5c      	subs	r4, r3, r1
 800137e:	42a3      	cmp	r3, r4
 8001380:	419b      	sbcs	r3, r3
 8001382:	425f      	negs	r7, r3
 8001384:	1bc7      	subs	r7, r0, r7
 8001386:	023b      	lsls	r3, r7, #8
 8001388:	d400      	bmi.n	800138c <__aeabi_dadd+0xa8>
 800138a:	e0d0      	b.n	800152e <__aeabi_dadd+0x24a>
 800138c:	027f      	lsls	r7, r7, #9
 800138e:	0a7f      	lsrs	r7, r7, #9
 8001390:	2f00      	cmp	r7, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0xb2>
 8001394:	e0ff      	b.n	8001596 <__aeabi_dadd+0x2b2>
 8001396:	0038      	movs	r0, r7
 8001398:	f001 fe94 	bl	80030c4 <__clzsi2>
 800139c:	0001      	movs	r1, r0
 800139e:	3908      	subs	r1, #8
 80013a0:	2320      	movs	r3, #32
 80013a2:	0022      	movs	r2, r4
 80013a4:	1a5b      	subs	r3, r3, r1
 80013a6:	408f      	lsls	r7, r1
 80013a8:	40da      	lsrs	r2, r3
 80013aa:	408c      	lsls	r4, r1
 80013ac:	4317      	orrs	r7, r2
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	da00      	bge.n	80013b4 <__aeabi_dadd+0xd0>
 80013b2:	e0ff      	b.n	80015b4 <__aeabi_dadd+0x2d0>
 80013b4:	1b89      	subs	r1, r1, r6
 80013b6:	1c4b      	adds	r3, r1, #1
 80013b8:	2b1f      	cmp	r3, #31
 80013ba:	dd00      	ble.n	80013be <__aeabi_dadd+0xda>
 80013bc:	e0a8      	b.n	8001510 <__aeabi_dadd+0x22c>
 80013be:	2220      	movs	r2, #32
 80013c0:	0039      	movs	r1, r7
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	0020      	movs	r0, r4
 80013c6:	4094      	lsls	r4, r2
 80013c8:	4091      	lsls	r1, r2
 80013ca:	40d8      	lsrs	r0, r3
 80013cc:	1e62      	subs	r2, r4, #1
 80013ce:	4194      	sbcs	r4, r2
 80013d0:	40df      	lsrs	r7, r3
 80013d2:	2600      	movs	r6, #0
 80013d4:	4301      	orrs	r1, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	0763      	lsls	r3, r4, #29
 80013da:	d009      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013dc:	230f      	movs	r3, #15
 80013de:	4023      	ands	r3, r4
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d005      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013e4:	1d23      	adds	r3, r4, #4
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	41a4      	sbcs	r4, r4
 80013ea:	4264      	negs	r4, r4
 80013ec:	193f      	adds	r7, r7, r4
 80013ee:	001c      	movs	r4, r3
 80013f0:	023b      	lsls	r3, r7, #8
 80013f2:	d400      	bmi.n	80013f6 <__aeabi_dadd+0x112>
 80013f4:	e09e      	b.n	8001534 <__aeabi_dadd+0x250>
 80013f6:	4b95      	ldr	r3, [pc, #596]	; (800164c <__aeabi_dadd+0x368>)
 80013f8:	3601      	adds	r6, #1
 80013fa:	429e      	cmp	r6, r3
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x11c>
 80013fe:	e0b7      	b.n	8001570 <__aeabi_dadd+0x28c>
 8001400:	4a93      	ldr	r2, [pc, #588]	; (8001650 <__aeabi_dadd+0x36c>)
 8001402:	08e4      	lsrs	r4, r4, #3
 8001404:	4017      	ands	r7, r2
 8001406:	077b      	lsls	r3, r7, #29
 8001408:	0571      	lsls	r1, r6, #21
 800140a:	027f      	lsls	r7, r7, #9
 800140c:	4323      	orrs	r3, r4
 800140e:	0b3f      	lsrs	r7, r7, #12
 8001410:	0d4a      	lsrs	r2, r1, #21
 8001412:	0512      	lsls	r2, r2, #20
 8001414:	433a      	orrs	r2, r7
 8001416:	07ed      	lsls	r5, r5, #31
 8001418:	432a      	orrs	r2, r5
 800141a:	0018      	movs	r0, r3
 800141c:	0011      	movs	r1, r2
 800141e:	bce0      	pop	{r5, r6, r7}
 8001420:	46ba      	mov	sl, r7
 8001422:	46b1      	mov	r9, r6
 8001424:	46a8      	mov	r8, r5
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	2c00      	cmp	r4, #0
 800142a:	d04b      	beq.n	80014c4 <__aeabi_dadd+0x1e0>
 800142c:	464c      	mov	r4, r9
 800142e:	1ba4      	subs	r4, r4, r6
 8001430:	46a4      	mov	ip, r4
 8001432:	2e00      	cmp	r6, #0
 8001434:	d000      	beq.n	8001438 <__aeabi_dadd+0x154>
 8001436:	e123      	b.n	8001680 <__aeabi_dadd+0x39c>
 8001438:	0004      	movs	r4, r0
 800143a:	431c      	orrs	r4, r3
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x15c>
 800143e:	e1af      	b.n	80017a0 <__aeabi_dadd+0x4bc>
 8001440:	4662      	mov	r2, ip
 8001442:	1e54      	subs	r4, r2, #1
 8001444:	2a01      	cmp	r2, #1
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x166>
 8001448:	e215      	b.n	8001876 <__aeabi_dadd+0x592>
 800144a:	4d80      	ldr	r5, [pc, #512]	; (800164c <__aeabi_dadd+0x368>)
 800144c:	45ac      	cmp	ip, r5
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x16e>
 8001450:	e1c8      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001452:	46a4      	mov	ip, r4
 8001454:	e11b      	b.n	800168e <__aeabi_dadd+0x3aa>
 8001456:	464a      	mov	r2, r9
 8001458:	1ab2      	subs	r2, r6, r2
 800145a:	4694      	mov	ip, r2
 800145c:	2a00      	cmp	r2, #0
 800145e:	dc00      	bgt.n	8001462 <__aeabi_dadd+0x17e>
 8001460:	e0ac      	b.n	80015bc <__aeabi_dadd+0x2d8>
 8001462:	464a      	mov	r2, r9
 8001464:	2a00      	cmp	r2, #0
 8001466:	d043      	beq.n	80014f0 <__aeabi_dadd+0x20c>
 8001468:	4a78      	ldr	r2, [pc, #480]	; (800164c <__aeabi_dadd+0x368>)
 800146a:	4296      	cmp	r6, r2
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x18c>
 800146e:	e1af      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	003c      	movs	r4, r7
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	4314      	orrs	r4, r2
 8001478:	46a0      	mov	r8, r4
 800147a:	4662      	mov	r2, ip
 800147c:	2a38      	cmp	r2, #56	; 0x38
 800147e:	dc67      	bgt.n	8001550 <__aeabi_dadd+0x26c>
 8001480:	2a1f      	cmp	r2, #31
 8001482:	dc00      	bgt.n	8001486 <__aeabi_dadd+0x1a2>
 8001484:	e15f      	b.n	8001746 <__aeabi_dadd+0x462>
 8001486:	4647      	mov	r7, r8
 8001488:	3a20      	subs	r2, #32
 800148a:	40d7      	lsrs	r7, r2
 800148c:	4662      	mov	r2, ip
 800148e:	2a20      	cmp	r2, #32
 8001490:	d005      	beq.n	800149e <__aeabi_dadd+0x1ba>
 8001492:	4664      	mov	r4, ip
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	1b12      	subs	r2, r2, r4
 8001498:	4644      	mov	r4, r8
 800149a:	4094      	lsls	r4, r2
 800149c:	4321      	orrs	r1, r4
 800149e:	1e4a      	subs	r2, r1, #1
 80014a0:	4191      	sbcs	r1, r2
 80014a2:	000c      	movs	r4, r1
 80014a4:	433c      	orrs	r4, r7
 80014a6:	e057      	b.n	8001558 <__aeabi_dadd+0x274>
 80014a8:	003a      	movs	r2, r7
 80014aa:	430a      	orrs	r2, r1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x1cc>
 80014ae:	e105      	b.n	80016bc <__aeabi_dadd+0x3d8>
 80014b0:	0022      	movs	r2, r4
 80014b2:	3a01      	subs	r2, #1
 80014b4:	2c01      	cmp	r4, #1
 80014b6:	d100      	bne.n	80014ba <__aeabi_dadd+0x1d6>
 80014b8:	e182      	b.n	80017c0 <__aeabi_dadd+0x4dc>
 80014ba:	4c64      	ldr	r4, [pc, #400]	; (800164c <__aeabi_dadd+0x368>)
 80014bc:	45a4      	cmp	ip, r4
 80014be:	d05b      	beq.n	8001578 <__aeabi_dadd+0x294>
 80014c0:	4694      	mov	ip, r2
 80014c2:	e741      	b.n	8001348 <__aeabi_dadd+0x64>
 80014c4:	4c63      	ldr	r4, [pc, #396]	; (8001654 <__aeabi_dadd+0x370>)
 80014c6:	1c77      	adds	r7, r6, #1
 80014c8:	4227      	tst	r7, r4
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x1ea>
 80014cc:	e0c4      	b.n	8001658 <__aeabi_dadd+0x374>
 80014ce:	0004      	movs	r4, r0
 80014d0:	431c      	orrs	r4, r3
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dadd+0x1f4>
 80014d6:	e169      	b.n	80017ac <__aeabi_dadd+0x4c8>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x1fa>
 80014dc:	e1bf      	b.n	800185e <__aeabi_dadd+0x57a>
 80014de:	4644      	mov	r4, r8
 80014e0:	430c      	orrs	r4, r1
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x202>
 80014e4:	e1d0      	b.n	8001888 <__aeabi_dadd+0x5a4>
 80014e6:	0742      	lsls	r2, r0, #29
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	08c0      	lsrs	r0, r0, #3
 80014ee:	e029      	b.n	8001544 <__aeabi_dadd+0x260>
 80014f0:	003a      	movs	r2, r7
 80014f2:	430a      	orrs	r2, r1
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x214>
 80014f6:	e170      	b.n	80017da <__aeabi_dadd+0x4f6>
 80014f8:	4662      	mov	r2, ip
 80014fa:	4664      	mov	r4, ip
 80014fc:	3a01      	subs	r2, #1
 80014fe:	2c01      	cmp	r4, #1
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x220>
 8001502:	e0e0      	b.n	80016c6 <__aeabi_dadd+0x3e2>
 8001504:	4c51      	ldr	r4, [pc, #324]	; (800164c <__aeabi_dadd+0x368>)
 8001506:	45a4      	cmp	ip, r4
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x228>
 800150a:	e161      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 800150c:	4694      	mov	ip, r2
 800150e:	e7b4      	b.n	800147a <__aeabi_dadd+0x196>
 8001510:	003a      	movs	r2, r7
 8001512:	391f      	subs	r1, #31
 8001514:	40ca      	lsrs	r2, r1
 8001516:	0011      	movs	r1, r2
 8001518:	2b20      	cmp	r3, #32
 800151a:	d003      	beq.n	8001524 <__aeabi_dadd+0x240>
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	409f      	lsls	r7, r3
 8001522:	433c      	orrs	r4, r7
 8001524:	1e63      	subs	r3, r4, #1
 8001526:	419c      	sbcs	r4, r3
 8001528:	2700      	movs	r7, #0
 800152a:	2600      	movs	r6, #0
 800152c:	430c      	orrs	r4, r1
 800152e:	0763      	lsls	r3, r4, #29
 8001530:	d000      	beq.n	8001534 <__aeabi_dadd+0x250>
 8001532:	e753      	b.n	80013dc <__aeabi_dadd+0xf8>
 8001534:	46b4      	mov	ip, r6
 8001536:	08e4      	lsrs	r4, r4, #3
 8001538:	077b      	lsls	r3, r7, #29
 800153a:	4323      	orrs	r3, r4
 800153c:	08f8      	lsrs	r0, r7, #3
 800153e:	4a43      	ldr	r2, [pc, #268]	; (800164c <__aeabi_dadd+0x368>)
 8001540:	4594      	cmp	ip, r2
 8001542:	d01d      	beq.n	8001580 <__aeabi_dadd+0x29c>
 8001544:	4662      	mov	r2, ip
 8001546:	0307      	lsls	r7, r0, #12
 8001548:	0552      	lsls	r2, r2, #21
 800154a:	0b3f      	lsrs	r7, r7, #12
 800154c:	0d52      	lsrs	r2, r2, #21
 800154e:	e760      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001550:	4644      	mov	r4, r8
 8001552:	430c      	orrs	r4, r1
 8001554:	1e62      	subs	r2, r4, #1
 8001556:	4194      	sbcs	r4, r2
 8001558:	18e4      	adds	r4, r4, r3
 800155a:	429c      	cmp	r4, r3
 800155c:	419b      	sbcs	r3, r3
 800155e:	425f      	negs	r7, r3
 8001560:	183f      	adds	r7, r7, r0
 8001562:	023b      	lsls	r3, r7, #8
 8001564:	d5e3      	bpl.n	800152e <__aeabi_dadd+0x24a>
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <__aeabi_dadd+0x368>)
 8001568:	3601      	adds	r6, #1
 800156a:	429e      	cmp	r6, r3
 800156c:	d000      	beq.n	8001570 <__aeabi_dadd+0x28c>
 800156e:	e0b5      	b.n	80016dc <__aeabi_dadd+0x3f8>
 8001570:	0032      	movs	r2, r6
 8001572:	2700      	movs	r7, #0
 8001574:	2300      	movs	r3, #0
 8001576:	e74c      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001578:	0742      	lsls	r2, r0, #29
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	4313      	orrs	r3, r2
 800157e:	08c0      	lsrs	r0, r0, #3
 8001580:	001a      	movs	r2, r3
 8001582:	4302      	orrs	r2, r0
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x2a4>
 8001586:	e1e1      	b.n	800194c <__aeabi_dadd+0x668>
 8001588:	2780      	movs	r7, #128	; 0x80
 800158a:	033f      	lsls	r7, r7, #12
 800158c:	4307      	orrs	r7, r0
 800158e:	033f      	lsls	r7, r7, #12
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <__aeabi_dadd+0x368>)
 8001592:	0b3f      	lsrs	r7, r7, #12
 8001594:	e73d      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001596:	0020      	movs	r0, r4
 8001598:	f001 fd94 	bl	80030c4 <__clzsi2>
 800159c:	0001      	movs	r1, r0
 800159e:	3118      	adds	r1, #24
 80015a0:	291f      	cmp	r1, #31
 80015a2:	dc00      	bgt.n	80015a6 <__aeabi_dadd+0x2c2>
 80015a4:	e6fc      	b.n	80013a0 <__aeabi_dadd+0xbc>
 80015a6:	3808      	subs	r0, #8
 80015a8:	4084      	lsls	r4, r0
 80015aa:	0027      	movs	r7, r4
 80015ac:	2400      	movs	r4, #0
 80015ae:	42b1      	cmp	r1, r6
 80015b0:	db00      	blt.n	80015b4 <__aeabi_dadd+0x2d0>
 80015b2:	e6ff      	b.n	80013b4 <__aeabi_dadd+0xd0>
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <__aeabi_dadd+0x36c>)
 80015b6:	1a76      	subs	r6, r6, r1
 80015b8:	4017      	ands	r7, r2
 80015ba:	e70d      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d02f      	beq.n	8001620 <__aeabi_dadd+0x33c>
 80015c0:	464a      	mov	r2, r9
 80015c2:	1b92      	subs	r2, r2, r6
 80015c4:	4694      	mov	ip, r2
 80015c6:	2e00      	cmp	r6, #0
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x2e8>
 80015ca:	e0ad      	b.n	8001728 <__aeabi_dadd+0x444>
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <__aeabi_dadd+0x368>)
 80015ce:	4591      	cmp	r9, r2
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x2f0>
 80015d2:	e10f      	b.n	80017f4 <__aeabi_dadd+0x510>
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	4310      	orrs	r0, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	2a38      	cmp	r2, #56	; 0x38
 80015de:	dd00      	ble.n	80015e2 <__aeabi_dadd+0x2fe>
 80015e0:	e10f      	b.n	8001802 <__aeabi_dadd+0x51e>
 80015e2:	2a1f      	cmp	r2, #31
 80015e4:	dd00      	ble.n	80015e8 <__aeabi_dadd+0x304>
 80015e6:	e180      	b.n	80018ea <__aeabi_dadd+0x606>
 80015e8:	4664      	mov	r4, ip
 80015ea:	2220      	movs	r2, #32
 80015ec:	001e      	movs	r6, r3
 80015ee:	1b12      	subs	r2, r2, r4
 80015f0:	4667      	mov	r7, ip
 80015f2:	0004      	movs	r4, r0
 80015f4:	4093      	lsls	r3, r2
 80015f6:	4094      	lsls	r4, r2
 80015f8:	40fe      	lsrs	r6, r7
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	4193      	sbcs	r3, r2
 80015fe:	40f8      	lsrs	r0, r7
 8001600:	4334      	orrs	r4, r6
 8001602:	431c      	orrs	r4, r3
 8001604:	4480      	add	r8, r0
 8001606:	1864      	adds	r4, r4, r1
 8001608:	428c      	cmp	r4, r1
 800160a:	41bf      	sbcs	r7, r7
 800160c:	427f      	negs	r7, r7
 800160e:	464e      	mov	r6, r9
 8001610:	4447      	add	r7, r8
 8001612:	e7a6      	b.n	8001562 <__aeabi_dadd+0x27e>
 8001614:	4642      	mov	r2, r8
 8001616:	430a      	orrs	r2, r1
 8001618:	0011      	movs	r1, r2
 800161a:	1e4a      	subs	r2, r1, #1
 800161c:	4191      	sbcs	r1, r2
 800161e:	e6ad      	b.n	800137c <__aeabi_dadd+0x98>
 8001620:	4c0c      	ldr	r4, [pc, #48]	; (8001654 <__aeabi_dadd+0x370>)
 8001622:	1c72      	adds	r2, r6, #1
 8001624:	4222      	tst	r2, r4
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x346>
 8001628:	e0a1      	b.n	800176e <__aeabi_dadd+0x48a>
 800162a:	0002      	movs	r2, r0
 800162c:	431a      	orrs	r2, r3
 800162e:	2e00      	cmp	r6, #0
 8001630:	d000      	beq.n	8001634 <__aeabi_dadd+0x350>
 8001632:	e0fa      	b.n	800182a <__aeabi_dadd+0x546>
 8001634:	2a00      	cmp	r2, #0
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x356>
 8001638:	e145      	b.n	80018c6 <__aeabi_dadd+0x5e2>
 800163a:	003a      	movs	r2, r7
 800163c:	430a      	orrs	r2, r1
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x35e>
 8001640:	e146      	b.n	80018d0 <__aeabi_dadd+0x5ec>
 8001642:	0742      	lsls	r2, r0, #29
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	4313      	orrs	r3, r2
 8001648:	08c0      	lsrs	r0, r0, #3
 800164a:	e77b      	b.n	8001544 <__aeabi_dadd+0x260>
 800164c:	000007ff 	.word	0x000007ff
 8001650:	ff7fffff 	.word	0xff7fffff
 8001654:	000007fe 	.word	0x000007fe
 8001658:	4647      	mov	r7, r8
 800165a:	1a5c      	subs	r4, r3, r1
 800165c:	1bc2      	subs	r2, r0, r7
 800165e:	42a3      	cmp	r3, r4
 8001660:	41bf      	sbcs	r7, r7
 8001662:	427f      	negs	r7, r7
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	464a      	mov	r2, r9
 800166a:	1abf      	subs	r7, r7, r2
 800166c:	023a      	lsls	r2, r7, #8
 800166e:	d500      	bpl.n	8001672 <__aeabi_dadd+0x38e>
 8001670:	e08d      	b.n	800178e <__aeabi_dadd+0x4aa>
 8001672:	0023      	movs	r3, r4
 8001674:	433b      	orrs	r3, r7
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x396>
 8001678:	e68a      	b.n	8001390 <__aeabi_dadd+0xac>
 800167a:	2000      	movs	r0, #0
 800167c:	2500      	movs	r5, #0
 800167e:	e761      	b.n	8001544 <__aeabi_dadd+0x260>
 8001680:	4cb4      	ldr	r4, [pc, #720]	; (8001954 <__aeabi_dadd+0x670>)
 8001682:	45a1      	cmp	r9, r4
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x3a4>
 8001686:	e0ad      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001688:	2480      	movs	r4, #128	; 0x80
 800168a:	0424      	lsls	r4, r4, #16
 800168c:	4320      	orrs	r0, r4
 800168e:	4664      	mov	r4, ip
 8001690:	2c38      	cmp	r4, #56	; 0x38
 8001692:	dc3d      	bgt.n	8001710 <__aeabi_dadd+0x42c>
 8001694:	4662      	mov	r2, ip
 8001696:	2c1f      	cmp	r4, #31
 8001698:	dd00      	ble.n	800169c <__aeabi_dadd+0x3b8>
 800169a:	e0b7      	b.n	800180c <__aeabi_dadd+0x528>
 800169c:	2520      	movs	r5, #32
 800169e:	001e      	movs	r6, r3
 80016a0:	1b2d      	subs	r5, r5, r4
 80016a2:	0004      	movs	r4, r0
 80016a4:	40ab      	lsls	r3, r5
 80016a6:	40ac      	lsls	r4, r5
 80016a8:	40d6      	lsrs	r6, r2
 80016aa:	40d0      	lsrs	r0, r2
 80016ac:	4642      	mov	r2, r8
 80016ae:	1e5d      	subs	r5, r3, #1
 80016b0:	41ab      	sbcs	r3, r5
 80016b2:	4334      	orrs	r4, r6
 80016b4:	1a12      	subs	r2, r2, r0
 80016b6:	4690      	mov	r8, r2
 80016b8:	4323      	orrs	r3, r4
 80016ba:	e02c      	b.n	8001716 <__aeabi_dadd+0x432>
 80016bc:	0742      	lsls	r2, r0, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c0      	lsrs	r0, r0, #3
 80016c4:	e73b      	b.n	800153e <__aeabi_dadd+0x25a>
 80016c6:	185c      	adds	r4, r3, r1
 80016c8:	429c      	cmp	r4, r3
 80016ca:	419b      	sbcs	r3, r3
 80016cc:	4440      	add	r0, r8
 80016ce:	425b      	negs	r3, r3
 80016d0:	18c7      	adds	r7, r0, r3
 80016d2:	2601      	movs	r6, #1
 80016d4:	023b      	lsls	r3, r7, #8
 80016d6:	d400      	bmi.n	80016da <__aeabi_dadd+0x3f6>
 80016d8:	e729      	b.n	800152e <__aeabi_dadd+0x24a>
 80016da:	2602      	movs	r6, #2
 80016dc:	4a9e      	ldr	r2, [pc, #632]	; (8001958 <__aeabi_dadd+0x674>)
 80016de:	0863      	lsrs	r3, r4, #1
 80016e0:	4017      	ands	r7, r2
 80016e2:	2201      	movs	r2, #1
 80016e4:	4014      	ands	r4, r2
 80016e6:	431c      	orrs	r4, r3
 80016e8:	07fb      	lsls	r3, r7, #31
 80016ea:	431c      	orrs	r4, r3
 80016ec:	087f      	lsrs	r7, r7, #1
 80016ee:	e673      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80016f0:	4644      	mov	r4, r8
 80016f2:	3a20      	subs	r2, #32
 80016f4:	40d4      	lsrs	r4, r2
 80016f6:	4662      	mov	r2, ip
 80016f8:	2a20      	cmp	r2, #32
 80016fa:	d005      	beq.n	8001708 <__aeabi_dadd+0x424>
 80016fc:	4667      	mov	r7, ip
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	1bd2      	subs	r2, r2, r7
 8001702:	4647      	mov	r7, r8
 8001704:	4097      	lsls	r7, r2
 8001706:	4339      	orrs	r1, r7
 8001708:	1e4a      	subs	r2, r1, #1
 800170a:	4191      	sbcs	r1, r2
 800170c:	4321      	orrs	r1, r4
 800170e:	e635      	b.n	800137c <__aeabi_dadd+0x98>
 8001710:	4303      	orrs	r3, r0
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	4183      	sbcs	r3, r0
 8001716:	1acc      	subs	r4, r1, r3
 8001718:	42a1      	cmp	r1, r4
 800171a:	41bf      	sbcs	r7, r7
 800171c:	4643      	mov	r3, r8
 800171e:	427f      	negs	r7, r7
 8001720:	4655      	mov	r5, sl
 8001722:	464e      	mov	r6, r9
 8001724:	1bdf      	subs	r7, r3, r7
 8001726:	e62e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001728:	0002      	movs	r2, r0
 800172a:	431a      	orrs	r2, r3
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x44c>
 800172e:	e0bd      	b.n	80018ac <__aeabi_dadd+0x5c8>
 8001730:	4662      	mov	r2, ip
 8001732:	4664      	mov	r4, ip
 8001734:	3a01      	subs	r2, #1
 8001736:	2c01      	cmp	r4, #1
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x458>
 800173a:	e0e5      	b.n	8001908 <__aeabi_dadd+0x624>
 800173c:	4c85      	ldr	r4, [pc, #532]	; (8001954 <__aeabi_dadd+0x670>)
 800173e:	45a4      	cmp	ip, r4
 8001740:	d058      	beq.n	80017f4 <__aeabi_dadd+0x510>
 8001742:	4694      	mov	ip, r2
 8001744:	e749      	b.n	80015da <__aeabi_dadd+0x2f6>
 8001746:	4664      	mov	r4, ip
 8001748:	2220      	movs	r2, #32
 800174a:	1b12      	subs	r2, r2, r4
 800174c:	4644      	mov	r4, r8
 800174e:	4094      	lsls	r4, r2
 8001750:	000f      	movs	r7, r1
 8001752:	46a1      	mov	r9, r4
 8001754:	4664      	mov	r4, ip
 8001756:	4091      	lsls	r1, r2
 8001758:	40e7      	lsrs	r7, r4
 800175a:	464c      	mov	r4, r9
 800175c:	1e4a      	subs	r2, r1, #1
 800175e:	4191      	sbcs	r1, r2
 8001760:	433c      	orrs	r4, r7
 8001762:	4642      	mov	r2, r8
 8001764:	430c      	orrs	r4, r1
 8001766:	4661      	mov	r1, ip
 8001768:	40ca      	lsrs	r2, r1
 800176a:	1880      	adds	r0, r0, r2
 800176c:	e6f4      	b.n	8001558 <__aeabi_dadd+0x274>
 800176e:	4c79      	ldr	r4, [pc, #484]	; (8001954 <__aeabi_dadd+0x670>)
 8001770:	42a2      	cmp	r2, r4
 8001772:	d100      	bne.n	8001776 <__aeabi_dadd+0x492>
 8001774:	e6fd      	b.n	8001572 <__aeabi_dadd+0x28e>
 8001776:	1859      	adds	r1, r3, r1
 8001778:	4299      	cmp	r1, r3
 800177a:	419b      	sbcs	r3, r3
 800177c:	4440      	add	r0, r8
 800177e:	425f      	negs	r7, r3
 8001780:	19c7      	adds	r7, r0, r7
 8001782:	07fc      	lsls	r4, r7, #31
 8001784:	0849      	lsrs	r1, r1, #1
 8001786:	0016      	movs	r6, r2
 8001788:	430c      	orrs	r4, r1
 800178a:	087f      	lsrs	r7, r7, #1
 800178c:	e6cf      	b.n	800152e <__aeabi_dadd+0x24a>
 800178e:	1acc      	subs	r4, r1, r3
 8001790:	42a1      	cmp	r1, r4
 8001792:	41bf      	sbcs	r7, r7
 8001794:	4643      	mov	r3, r8
 8001796:	427f      	negs	r7, r7
 8001798:	1a18      	subs	r0, r3, r0
 800179a:	4655      	mov	r5, sl
 800179c:	1bc7      	subs	r7, r0, r7
 800179e:	e5f7      	b.n	8001390 <__aeabi_dadd+0xac>
 80017a0:	08c9      	lsrs	r1, r1, #3
 80017a2:	077b      	lsls	r3, r7, #29
 80017a4:	4655      	mov	r5, sl
 80017a6:	430b      	orrs	r3, r1
 80017a8:	08f8      	lsrs	r0, r7, #3
 80017aa:	e6c8      	b.n	800153e <__aeabi_dadd+0x25a>
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x4ce>
 80017b0:	e081      	b.n	80018b6 <__aeabi_dadd+0x5d2>
 80017b2:	4643      	mov	r3, r8
 80017b4:	430b      	orrs	r3, r1
 80017b6:	d115      	bne.n	80017e4 <__aeabi_dadd+0x500>
 80017b8:	2080      	movs	r0, #128	; 0x80
 80017ba:	2500      	movs	r5, #0
 80017bc:	0300      	lsls	r0, r0, #12
 80017be:	e6e3      	b.n	8001588 <__aeabi_dadd+0x2a4>
 80017c0:	1a5c      	subs	r4, r3, r1
 80017c2:	42a3      	cmp	r3, r4
 80017c4:	419b      	sbcs	r3, r3
 80017c6:	1bc7      	subs	r7, r0, r7
 80017c8:	425b      	negs	r3, r3
 80017ca:	2601      	movs	r6, #1
 80017cc:	1aff      	subs	r7, r7, r3
 80017ce:	e5da      	b.n	8001386 <__aeabi_dadd+0xa2>
 80017d0:	0742      	lsls	r2, r0, #29
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	08c0      	lsrs	r0, r0, #3
 80017d8:	e6d2      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017da:	0742      	lsls	r2, r0, #29
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	4313      	orrs	r3, r2
 80017e0:	08c0      	lsrs	r0, r0, #3
 80017e2:	e6ac      	b.n	800153e <__aeabi_dadd+0x25a>
 80017e4:	4643      	mov	r3, r8
 80017e6:	4642      	mov	r2, r8
 80017e8:	08c9      	lsrs	r1, r1, #3
 80017ea:	075b      	lsls	r3, r3, #29
 80017ec:	4655      	mov	r5, sl
 80017ee:	430b      	orrs	r3, r1
 80017f0:	08d0      	lsrs	r0, r2, #3
 80017f2:	e6c5      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017f4:	4643      	mov	r3, r8
 80017f6:	4642      	mov	r2, r8
 80017f8:	075b      	lsls	r3, r3, #29
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	430b      	orrs	r3, r1
 80017fe:	08d0      	lsrs	r0, r2, #3
 8001800:	e6be      	b.n	8001580 <__aeabi_dadd+0x29c>
 8001802:	4303      	orrs	r3, r0
 8001804:	001c      	movs	r4, r3
 8001806:	1e63      	subs	r3, r4, #1
 8001808:	419c      	sbcs	r4, r3
 800180a:	e6fc      	b.n	8001606 <__aeabi_dadd+0x322>
 800180c:	0002      	movs	r2, r0
 800180e:	3c20      	subs	r4, #32
 8001810:	40e2      	lsrs	r2, r4
 8001812:	0014      	movs	r4, r2
 8001814:	4662      	mov	r2, ip
 8001816:	2a20      	cmp	r2, #32
 8001818:	d003      	beq.n	8001822 <__aeabi_dadd+0x53e>
 800181a:	2540      	movs	r5, #64	; 0x40
 800181c:	1aad      	subs	r5, r5, r2
 800181e:	40a8      	lsls	r0, r5
 8001820:	4303      	orrs	r3, r0
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	4183      	sbcs	r3, r0
 8001826:	4323      	orrs	r3, r4
 8001828:	e775      	b.n	8001716 <__aeabi_dadd+0x432>
 800182a:	2a00      	cmp	r2, #0
 800182c:	d0e2      	beq.n	80017f4 <__aeabi_dadd+0x510>
 800182e:	003a      	movs	r2, r7
 8001830:	430a      	orrs	r2, r1
 8001832:	d0cd      	beq.n	80017d0 <__aeabi_dadd+0x4ec>
 8001834:	0742      	lsls	r2, r0, #29
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	4313      	orrs	r3, r2
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	08c0      	lsrs	r0, r0, #3
 800183e:	0312      	lsls	r2, r2, #12
 8001840:	4210      	tst	r0, r2
 8001842:	d006      	beq.n	8001852 <__aeabi_dadd+0x56e>
 8001844:	08fc      	lsrs	r4, r7, #3
 8001846:	4214      	tst	r4, r2
 8001848:	d103      	bne.n	8001852 <__aeabi_dadd+0x56e>
 800184a:	0020      	movs	r0, r4
 800184c:	08cb      	lsrs	r3, r1, #3
 800184e:	077a      	lsls	r2, r7, #29
 8001850:	4313      	orrs	r3, r2
 8001852:	0f5a      	lsrs	r2, r3, #29
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	0752      	lsls	r2, r2, #29
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	4313      	orrs	r3, r2
 800185c:	e690      	b.n	8001580 <__aeabi_dadd+0x29c>
 800185e:	4643      	mov	r3, r8
 8001860:	430b      	orrs	r3, r1
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x582>
 8001864:	e709      	b.n	800167a <__aeabi_dadd+0x396>
 8001866:	4643      	mov	r3, r8
 8001868:	4642      	mov	r2, r8
 800186a:	08c9      	lsrs	r1, r1, #3
 800186c:	075b      	lsls	r3, r3, #29
 800186e:	4655      	mov	r5, sl
 8001870:	430b      	orrs	r3, r1
 8001872:	08d0      	lsrs	r0, r2, #3
 8001874:	e666      	b.n	8001544 <__aeabi_dadd+0x260>
 8001876:	1acc      	subs	r4, r1, r3
 8001878:	42a1      	cmp	r1, r4
 800187a:	4189      	sbcs	r1, r1
 800187c:	1a3f      	subs	r7, r7, r0
 800187e:	4249      	negs	r1, r1
 8001880:	4655      	mov	r5, sl
 8001882:	2601      	movs	r6, #1
 8001884:	1a7f      	subs	r7, r7, r1
 8001886:	e57e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001888:	4642      	mov	r2, r8
 800188a:	1a5c      	subs	r4, r3, r1
 800188c:	1a87      	subs	r7, r0, r2
 800188e:	42a3      	cmp	r3, r4
 8001890:	4192      	sbcs	r2, r2
 8001892:	4252      	negs	r2, r2
 8001894:	1abf      	subs	r7, r7, r2
 8001896:	023a      	lsls	r2, r7, #8
 8001898:	d53d      	bpl.n	8001916 <__aeabi_dadd+0x632>
 800189a:	1acc      	subs	r4, r1, r3
 800189c:	42a1      	cmp	r1, r4
 800189e:	4189      	sbcs	r1, r1
 80018a0:	4643      	mov	r3, r8
 80018a2:	4249      	negs	r1, r1
 80018a4:	1a1f      	subs	r7, r3, r0
 80018a6:	4655      	mov	r5, sl
 80018a8:	1a7f      	subs	r7, r7, r1
 80018aa:	e595      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80018ac:	077b      	lsls	r3, r7, #29
 80018ae:	08c9      	lsrs	r1, r1, #3
 80018b0:	430b      	orrs	r3, r1
 80018b2:	08f8      	lsrs	r0, r7, #3
 80018b4:	e643      	b.n	800153e <__aeabi_dadd+0x25a>
 80018b6:	4644      	mov	r4, r8
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	430c      	orrs	r4, r1
 80018bc:	d130      	bne.n	8001920 <__aeabi_dadd+0x63c>
 80018be:	0742      	lsls	r2, r0, #29
 80018c0:	4313      	orrs	r3, r2
 80018c2:	08c0      	lsrs	r0, r0, #3
 80018c4:	e65c      	b.n	8001580 <__aeabi_dadd+0x29c>
 80018c6:	077b      	lsls	r3, r7, #29
 80018c8:	08c9      	lsrs	r1, r1, #3
 80018ca:	430b      	orrs	r3, r1
 80018cc:	08f8      	lsrs	r0, r7, #3
 80018ce:	e639      	b.n	8001544 <__aeabi_dadd+0x260>
 80018d0:	185c      	adds	r4, r3, r1
 80018d2:	429c      	cmp	r4, r3
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	4440      	add	r0, r8
 80018d8:	425b      	negs	r3, r3
 80018da:	18c7      	adds	r7, r0, r3
 80018dc:	023b      	lsls	r3, r7, #8
 80018de:	d400      	bmi.n	80018e2 <__aeabi_dadd+0x5fe>
 80018e0:	e625      	b.n	800152e <__aeabi_dadd+0x24a>
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <__aeabi_dadd+0x674>)
 80018e4:	2601      	movs	r6, #1
 80018e6:	401f      	ands	r7, r3
 80018e8:	e621      	b.n	800152e <__aeabi_dadd+0x24a>
 80018ea:	0004      	movs	r4, r0
 80018ec:	3a20      	subs	r2, #32
 80018ee:	40d4      	lsrs	r4, r2
 80018f0:	4662      	mov	r2, ip
 80018f2:	2a20      	cmp	r2, #32
 80018f4:	d004      	beq.n	8001900 <__aeabi_dadd+0x61c>
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	4666      	mov	r6, ip
 80018fa:	1b92      	subs	r2, r2, r6
 80018fc:	4090      	lsls	r0, r2
 80018fe:	4303      	orrs	r3, r0
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	4193      	sbcs	r3, r2
 8001904:	431c      	orrs	r4, r3
 8001906:	e67e      	b.n	8001606 <__aeabi_dadd+0x322>
 8001908:	185c      	adds	r4, r3, r1
 800190a:	428c      	cmp	r4, r1
 800190c:	4189      	sbcs	r1, r1
 800190e:	4440      	add	r0, r8
 8001910:	4249      	negs	r1, r1
 8001912:	1847      	adds	r7, r0, r1
 8001914:	e6dd      	b.n	80016d2 <__aeabi_dadd+0x3ee>
 8001916:	0023      	movs	r3, r4
 8001918:	433b      	orrs	r3, r7
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x63a>
 800191c:	e6ad      	b.n	800167a <__aeabi_dadd+0x396>
 800191e:	e606      	b.n	800152e <__aeabi_dadd+0x24a>
 8001920:	0744      	lsls	r4, r0, #29
 8001922:	4323      	orrs	r3, r4
 8001924:	2480      	movs	r4, #128	; 0x80
 8001926:	08c0      	lsrs	r0, r0, #3
 8001928:	0324      	lsls	r4, r4, #12
 800192a:	4220      	tst	r0, r4
 800192c:	d008      	beq.n	8001940 <__aeabi_dadd+0x65c>
 800192e:	4642      	mov	r2, r8
 8001930:	08d6      	lsrs	r6, r2, #3
 8001932:	4226      	tst	r6, r4
 8001934:	d104      	bne.n	8001940 <__aeabi_dadd+0x65c>
 8001936:	4655      	mov	r5, sl
 8001938:	0030      	movs	r0, r6
 800193a:	08cb      	lsrs	r3, r1, #3
 800193c:	0751      	lsls	r1, r2, #29
 800193e:	430b      	orrs	r3, r1
 8001940:	0f5a      	lsrs	r2, r3, #29
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	0752      	lsls	r2, r2, #29
 8001948:	4313      	orrs	r3, r2
 800194a:	e619      	b.n	8001580 <__aeabi_dadd+0x29c>
 800194c:	2300      	movs	r3, #0
 800194e:	4a01      	ldr	r2, [pc, #4]	; (8001954 <__aeabi_dadd+0x670>)
 8001950:	001f      	movs	r7, r3
 8001952:	e55e      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001954:	000007ff 	.word	0x000007ff
 8001958:	ff7fffff 	.word	0xff7fffff

0800195c <__aeabi_ddiv>:
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	4657      	mov	r7, sl
 8001960:	464e      	mov	r6, r9
 8001962:	4645      	mov	r5, r8
 8001964:	46de      	mov	lr, fp
 8001966:	b5e0      	push	{r5, r6, r7, lr}
 8001968:	4681      	mov	r9, r0
 800196a:	0005      	movs	r5, r0
 800196c:	030c      	lsls	r4, r1, #12
 800196e:	0048      	lsls	r0, r1, #1
 8001970:	4692      	mov	sl, r2
 8001972:	001f      	movs	r7, r3
 8001974:	b085      	sub	sp, #20
 8001976:	0b24      	lsrs	r4, r4, #12
 8001978:	0d40      	lsrs	r0, r0, #21
 800197a:	0fce      	lsrs	r6, r1, #31
 800197c:	2800      	cmp	r0, #0
 800197e:	d100      	bne.n	8001982 <__aeabi_ddiv+0x26>
 8001980:	e156      	b.n	8001c30 <__aeabi_ddiv+0x2d4>
 8001982:	4bd4      	ldr	r3, [pc, #848]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001984:	4298      	cmp	r0, r3
 8001986:	d100      	bne.n	800198a <__aeabi_ddiv+0x2e>
 8001988:	e172      	b.n	8001c70 <__aeabi_ddiv+0x314>
 800198a:	0f6b      	lsrs	r3, r5, #29
 800198c:	00e4      	lsls	r4, r4, #3
 800198e:	431c      	orrs	r4, r3
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	4323      	orrs	r3, r4
 8001996:	4698      	mov	r8, r3
 8001998:	4bcf      	ldr	r3, [pc, #828]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 800199a:	00ed      	lsls	r5, r5, #3
 800199c:	469b      	mov	fp, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	4699      	mov	r9, r3
 80019a2:	4483      	add	fp, r0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	033c      	lsls	r4, r7, #12
 80019a8:	007b      	lsls	r3, r7, #1
 80019aa:	4650      	mov	r0, sl
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	0d5b      	lsrs	r3, r3, #21
 80019b0:	0fff      	lsrs	r7, r7, #31
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x5c>
 80019b6:	e11f      	b.n	8001bf8 <__aeabi_ddiv+0x29c>
 80019b8:	4ac6      	ldr	r2, [pc, #792]	; (8001cd4 <__aeabi_ddiv+0x378>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d100      	bne.n	80019c0 <__aeabi_ddiv+0x64>
 80019be:	e162      	b.n	8001c86 <__aeabi_ddiv+0x32a>
 80019c0:	49c5      	ldr	r1, [pc, #788]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 80019c2:	0f42      	lsrs	r2, r0, #29
 80019c4:	468c      	mov	ip, r1
 80019c6:	00e4      	lsls	r4, r4, #3
 80019c8:	4659      	mov	r1, fp
 80019ca:	4314      	orrs	r4, r2
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	4463      	add	r3, ip
 80019d0:	0412      	lsls	r2, r2, #16
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	4314      	orrs	r4, r2
 80019d6:	469b      	mov	fp, r3
 80019d8:	00c2      	lsls	r2, r0, #3
 80019da:	2000      	movs	r0, #0
 80019dc:	0033      	movs	r3, r6
 80019de:	407b      	eors	r3, r7
 80019e0:	469a      	mov	sl, r3
 80019e2:	464b      	mov	r3, r9
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d827      	bhi.n	8001a38 <__aeabi_ddiv+0xdc>
 80019e8:	49bc      	ldr	r1, [pc, #752]	; (8001cdc <__aeabi_ddiv+0x380>)
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	58cb      	ldr	r3, [r1, r3]
 80019ee:	469f      	mov	pc, r3
 80019f0:	46b2      	mov	sl, r6
 80019f2:	9b00      	ldr	r3, [sp, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d016      	beq.n	8001a26 <__aeabi_ddiv+0xca>
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d100      	bne.n	80019fe <__aeabi_ddiv+0xa2>
 80019fc:	e28e      	b.n	8001f1c <__aeabi_ddiv+0x5c0>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d000      	beq.n	8001a04 <__aeabi_ddiv+0xa8>
 8001a02:	e0d9      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2400      	movs	r4, #0
 8001a08:	2500      	movs	r5, #0
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	051b      	lsls	r3, r3, #20
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	07d2      	lsls	r2, r2, #31
 8001a12:	4313      	orrs	r3, r2
 8001a14:	0028      	movs	r0, r5
 8001a16:	0019      	movs	r1, r3
 8001a18:	b005      	add	sp, #20
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	46a9      	mov	r9, r5
 8001a22:	46a0      	mov	r8, r4
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a26:	2400      	movs	r4, #0
 8001a28:	2500      	movs	r5, #0
 8001a2a:	4baa      	ldr	r3, [pc, #680]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001a2c:	e7ed      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001a2e:	46ba      	mov	sl, r7
 8001a30:	46a0      	mov	r8, r4
 8001a32:	0015      	movs	r5, r2
 8001a34:	9000      	str	r0, [sp, #0]
 8001a36:	e7dc      	b.n	80019f2 <__aeabi_ddiv+0x96>
 8001a38:	4544      	cmp	r4, r8
 8001a3a:	d200      	bcs.n	8001a3e <__aeabi_ddiv+0xe2>
 8001a3c:	e1c7      	b.n	8001dce <__aeabi_ddiv+0x472>
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_ddiv+0xe6>
 8001a40:	e1c2      	b.n	8001dc8 <__aeabi_ddiv+0x46c>
 8001a42:	2301      	movs	r3, #1
 8001a44:	425b      	negs	r3, r3
 8001a46:	469c      	mov	ip, r3
 8001a48:	002e      	movs	r6, r5
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	44e3      	add	fp, ip
 8001a50:	0223      	lsls	r3, r4, #8
 8001a52:	0e14      	lsrs	r4, r2, #24
 8001a54:	431c      	orrs	r4, r3
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	4699      	mov	r9, r3
 8001a5a:	0423      	lsls	r3, r4, #16
 8001a5c:	0c1f      	lsrs	r7, r3, #16
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4649      	mov	r1, r9
 8001a62:	9200      	str	r2, [sp, #0]
 8001a64:	9701      	str	r7, [sp, #4]
 8001a66:	f7fe fbf1 	bl	800024c <__aeabi_uidivmod>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	437a      	muls	r2, r7
 8001a6e:	040b      	lsls	r3, r1, #16
 8001a70:	0c31      	lsrs	r1, r6, #16
 8001a72:	4680      	mov	r8, r0
 8001a74:	4319      	orrs	r1, r3
 8001a76:	428a      	cmp	r2, r1
 8001a78:	d907      	bls.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	469c      	mov	ip, r3
 8001a80:	1909      	adds	r1, r1, r4
 8001a82:	44e0      	add	r8, ip
 8001a84:	428c      	cmp	r4, r1
 8001a86:	d800      	bhi.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a88:	e207      	b.n	8001e9a <__aeabi_ddiv+0x53e>
 8001a8a:	1a88      	subs	r0, r1, r2
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f7fe fbdd 	bl	800024c <__aeabi_uidivmod>
 8001a92:	0409      	lsls	r1, r1, #16
 8001a94:	468c      	mov	ip, r1
 8001a96:	0431      	lsls	r1, r6, #16
 8001a98:	4666      	mov	r6, ip
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	0c09      	lsrs	r1, r1, #16
 8001a9e:	4342      	muls	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	4331      	orrs	r1, r6
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d904      	bls.n	8001ab2 <__aeabi_ddiv+0x156>
 8001aa8:	1909      	adds	r1, r1, r4
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	428c      	cmp	r4, r1
 8001aae:	d800      	bhi.n	8001ab2 <__aeabi_ddiv+0x156>
 8001ab0:	e1ed      	b.n	8001e8e <__aeabi_ddiv+0x532>
 8001ab2:	1a88      	subs	r0, r1, r2
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4641      	mov	r1, r8
 8001abe:	9b00      	ldr	r3, [sp, #0]
 8001ac0:	040e      	lsls	r6, r1, #16
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	001f      	movs	r7, r3
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	9b00      	ldr	r3, [sp, #0]
 8001aca:	0c36      	lsrs	r6, r6, #16
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	0c19      	lsrs	r1, r3, #16
 8001ad0:	000b      	movs	r3, r1
 8001ad2:	4373      	muls	r3, r6
 8001ad4:	0c12      	lsrs	r2, r2, #16
 8001ad6:	437e      	muls	r6, r7
 8001ad8:	9103      	str	r1, [sp, #12]
 8001ada:	4351      	muls	r1, r2
 8001adc:	437a      	muls	r2, r7
 8001ade:	0c1f      	lsrs	r7, r3, #16
 8001ae0:	46bc      	mov	ip, r7
 8001ae2:	1876      	adds	r6, r6, r1
 8001ae4:	4466      	add	r6, ip
 8001ae6:	42b1      	cmp	r1, r6
 8001ae8:	d903      	bls.n	8001af2 <__aeabi_ddiv+0x196>
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0249      	lsls	r1, r1, #9
 8001aee:	468c      	mov	ip, r1
 8001af0:	4462      	add	r2, ip
 8001af2:	0c31      	lsrs	r1, r6, #16
 8001af4:	188a      	adds	r2, r1, r2
 8001af6:	0431      	lsls	r1, r6, #16
 8001af8:	041e      	lsls	r6, r3, #16
 8001afa:	0c36      	lsrs	r6, r6, #16
 8001afc:	198e      	adds	r6, r1, r6
 8001afe:	4290      	cmp	r0, r2
 8001b00:	d302      	bcc.n	8001b08 <__aeabi_ddiv+0x1ac>
 8001b02:	d112      	bne.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b04:	42b5      	cmp	r5, r6
 8001b06:	d210      	bcs.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b08:	4643      	mov	r3, r8
 8001b0a:	1e59      	subs	r1, r3, #1
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	469c      	mov	ip, r3
 8001b10:	4465      	add	r5, ip
 8001b12:	001f      	movs	r7, r3
 8001b14:	429d      	cmp	r5, r3
 8001b16:	419b      	sbcs	r3, r3
 8001b18:	425b      	negs	r3, r3
 8001b1a:	191b      	adds	r3, r3, r4
 8001b1c:	18c0      	adds	r0, r0, r3
 8001b1e:	4284      	cmp	r4, r0
 8001b20:	d200      	bcs.n	8001b24 <__aeabi_ddiv+0x1c8>
 8001b22:	e1a0      	b.n	8001e66 <__aeabi_ddiv+0x50a>
 8001b24:	d100      	bne.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001b26:	e19b      	b.n	8001e60 <__aeabi_ddiv+0x504>
 8001b28:	4688      	mov	r8, r1
 8001b2a:	1bae      	subs	r6, r5, r6
 8001b2c:	42b5      	cmp	r5, r6
 8001b2e:	41ad      	sbcs	r5, r5
 8001b30:	1a80      	subs	r0, r0, r2
 8001b32:	426d      	negs	r5, r5
 8001b34:	1b40      	subs	r0, r0, r5
 8001b36:	4284      	cmp	r4, r0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x1e0>
 8001b3a:	e1d5      	b.n	8001ee8 <__aeabi_ddiv+0x58c>
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	f7fe fb85 	bl	800024c <__aeabi_uidivmod>
 8001b42:	9a01      	ldr	r2, [sp, #4]
 8001b44:	040b      	lsls	r3, r1, #16
 8001b46:	4342      	muls	r2, r0
 8001b48:	0c31      	lsrs	r1, r6, #16
 8001b4a:	0005      	movs	r5, r0
 8001b4c:	4319      	orrs	r1, r3
 8001b4e:	428a      	cmp	r2, r1
 8001b50:	d900      	bls.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001b52:	e16c      	b.n	8001e2e <__aeabi_ddiv+0x4d2>
 8001b54:	1a88      	subs	r0, r1, r2
 8001b56:	4649      	mov	r1, r9
 8001b58:	f7fe fb78 	bl	800024c <__aeabi_uidivmod>
 8001b5c:	9a01      	ldr	r2, [sp, #4]
 8001b5e:	0436      	lsls	r6, r6, #16
 8001b60:	4342      	muls	r2, r0
 8001b62:	0409      	lsls	r1, r1, #16
 8001b64:	0c36      	lsrs	r6, r6, #16
 8001b66:	0003      	movs	r3, r0
 8001b68:	430e      	orrs	r6, r1
 8001b6a:	42b2      	cmp	r2, r6
 8001b6c:	d900      	bls.n	8001b70 <__aeabi_ddiv+0x214>
 8001b6e:	e153      	b.n	8001e18 <__aeabi_ddiv+0x4bc>
 8001b70:	9803      	ldr	r0, [sp, #12]
 8001b72:	1ab6      	subs	r6, r6, r2
 8001b74:	0002      	movs	r2, r0
 8001b76:	042d      	lsls	r5, r5, #16
 8001b78:	431d      	orrs	r5, r3
 8001b7a:	9f02      	ldr	r7, [sp, #8]
 8001b7c:	042b      	lsls	r3, r5, #16
 8001b7e:	0c1b      	lsrs	r3, r3, #16
 8001b80:	435a      	muls	r2, r3
 8001b82:	437b      	muls	r3, r7
 8001b84:	469c      	mov	ip, r3
 8001b86:	0c29      	lsrs	r1, r5, #16
 8001b88:	4348      	muls	r0, r1
 8001b8a:	0c13      	lsrs	r3, r2, #16
 8001b8c:	4484      	add	ip, r0
 8001b8e:	4463      	add	r3, ip
 8001b90:	4379      	muls	r1, r7
 8001b92:	4298      	cmp	r0, r3
 8001b94:	d903      	bls.n	8001b9e <__aeabi_ddiv+0x242>
 8001b96:	2080      	movs	r0, #128	; 0x80
 8001b98:	0240      	lsls	r0, r0, #9
 8001b9a:	4684      	mov	ip, r0
 8001b9c:	4461      	add	r1, ip
 8001b9e:	0c18      	lsrs	r0, r3, #16
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	0c12      	lsrs	r2, r2, #16
 8001ba6:	1841      	adds	r1, r0, r1
 8001ba8:	189b      	adds	r3, r3, r2
 8001baa:	428e      	cmp	r6, r1
 8001bac:	d200      	bcs.n	8001bb0 <__aeabi_ddiv+0x254>
 8001bae:	e0ff      	b.n	8001db0 <__aeabi_ddiv+0x454>
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_ddiv+0x258>
 8001bb2:	e0fa      	b.n	8001daa <__aeabi_ddiv+0x44e>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <__aeabi_ddiv+0x384>)
 8001bba:	445a      	add	r2, fp
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	dc00      	bgt.n	8001bc2 <__aeabi_ddiv+0x266>
 8001bc0:	e0aa      	b.n	8001d18 <__aeabi_ddiv+0x3bc>
 8001bc2:	076b      	lsls	r3, r5, #29
 8001bc4:	d000      	beq.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001bc6:	e13d      	b.n	8001e44 <__aeabi_ddiv+0x4e8>
 8001bc8:	08ed      	lsrs	r5, r5, #3
 8001bca:	4643      	mov	r3, r8
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	d506      	bpl.n	8001bde <__aeabi_ddiv+0x282>
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <__aeabi_ddiv+0x388>)
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	00d2      	lsls	r2, r2, #3
 8001bdc:	445a      	add	r2, fp
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <__aeabi_ddiv+0x38c>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dd00      	ble.n	8001be6 <__aeabi_ddiv+0x28a>
 8001be4:	e71f      	b.n	8001a26 <__aeabi_ddiv+0xca>
 8001be6:	4643      	mov	r3, r8
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	431d      	orrs	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	0552      	lsls	r2, r2, #21
 8001bf0:	025c      	lsls	r4, r3, #9
 8001bf2:	0b24      	lsrs	r4, r4, #12
 8001bf4:	0d53      	lsrs	r3, r2, #21
 8001bf6:	e708      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_ddiv+0x2a4>
 8001bfe:	e07b      	b.n	8001cf8 <__aeabi_ddiv+0x39c>
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x2aa>
 8001c04:	e0fa      	b.n	8001dfc <__aeabi_ddiv+0x4a0>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f001 fa5c 	bl	80030c4 <__clzsi2>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	3a0b      	subs	r2, #11
 8001c10:	231d      	movs	r3, #29
 8001c12:	0001      	movs	r1, r0
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	4652      	mov	r2, sl
 8001c18:	3908      	subs	r1, #8
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	408c      	lsls	r4, r1
 8001c1e:	4314      	orrs	r4, r2
 8001c20:	4652      	mov	r2, sl
 8001c22:	408a      	lsls	r2, r1
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <__aeabi_ddiv+0x390>)
 8001c26:	4458      	add	r0, fp
 8001c28:	469b      	mov	fp, r3
 8001c2a:	4483      	add	fp, r0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e6d5      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001c30:	464b      	mov	r3, r9
 8001c32:	4323      	orrs	r3, r4
 8001c34:	4698      	mov	r8, r3
 8001c36:	d044      	beq.n	8001cc2 <__aeabi_ddiv+0x366>
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_ddiv+0x2e2>
 8001c3c:	e0ce      	b.n	8001ddc <__aeabi_ddiv+0x480>
 8001c3e:	0020      	movs	r0, r4
 8001c40:	f001 fa40 	bl	80030c4 <__clzsi2>
 8001c44:	0001      	movs	r1, r0
 8001c46:	0002      	movs	r2, r0
 8001c48:	390b      	subs	r1, #11
 8001c4a:	231d      	movs	r3, #29
 8001c4c:	1a5b      	subs	r3, r3, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	0010      	movs	r0, r2
 8001c52:	40d9      	lsrs	r1, r3
 8001c54:	3808      	subs	r0, #8
 8001c56:	4084      	lsls	r4, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	464d      	mov	r5, r9
 8001c5c:	4323      	orrs	r3, r4
 8001c5e:	4698      	mov	r8, r3
 8001c60:	4085      	lsls	r5, r0
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <__aeabi_ddiv+0x394>)
 8001c64:	1a83      	subs	r3, r0, r2
 8001c66:	469b      	mov	fp, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	e69a      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c70:	464b      	mov	r3, r9
 8001c72:	4323      	orrs	r3, r4
 8001c74:	4698      	mov	r8, r3
 8001c76:	d11d      	bne.n	8001cb4 <__aeabi_ddiv+0x358>
 8001c78:	2308      	movs	r3, #8
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	3b06      	subs	r3, #6
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4683      	mov	fp, r0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	e68f      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c86:	4652      	mov	r2, sl
 8001c88:	4322      	orrs	r2, r4
 8001c8a:	d109      	bne.n	8001ca0 <__aeabi_ddiv+0x344>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	4649      	mov	r1, r9
 8001c90:	4319      	orrs	r1, r3
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001c94:	4689      	mov	r9, r1
 8001c96:	469c      	mov	ip, r3
 8001c98:	2400      	movs	r4, #0
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	44e3      	add	fp, ip
 8001c9e:	e69d      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	464a      	mov	r2, r9
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001ca8:	4691      	mov	r9, r2
 8001caa:	469c      	mov	ip, r3
 8001cac:	4652      	mov	r2, sl
 8001cae:	2003      	movs	r0, #3
 8001cb0:	44e3      	add	fp, ip
 8001cb2:	e693      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	4699      	mov	r9, r3
 8001cb8:	3b09      	subs	r3, #9
 8001cba:	46a0      	mov	r8, r4
 8001cbc:	4683      	mov	fp, r0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	e671      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	469b      	mov	fp, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	2500      	movs	r5, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	e669      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	0800e0d8 	.word	0x0800e0d8
 8001ce0:	000003ff 	.word	0x000003ff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	000003f3 	.word	0x000003f3
 8001cf0:	fffffc0d 	.word	0xfffffc0d
 8001cf4:	fffff801 	.word	0xfffff801
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	4689      	mov	r9, r1
 8001d00:	2400      	movs	r4, #0
 8001d02:	2001      	movs	r0, #1
 8001d04:	e66a      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	469a      	mov	sl, r3
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	e67a      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d14:	2501      	movs	r5, #1
 8001d16:	426d      	negs	r5, r5
 8001d18:	2301      	movs	r3, #1
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	2b38      	cmp	r3, #56	; 0x38
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_ddiv+0x3c6>
 8001d20:	e670      	b.n	8001a04 <__aeabi_ddiv+0xa8>
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_ddiv+0x3cc>
 8001d26:	e0bf      	b.n	8001ea8 <__aeabi_ddiv+0x54c>
 8001d28:	211f      	movs	r1, #31
 8001d2a:	4249      	negs	r1, r1
 8001d2c:	1a8a      	subs	r2, r1, r2
 8001d2e:	4641      	mov	r1, r8
 8001d30:	40d1      	lsrs	r1, r2
 8001d32:	000a      	movs	r2, r1
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d004      	beq.n	8001d42 <__aeabi_ddiv+0x3e6>
 8001d38:	4641      	mov	r1, r8
 8001d3a:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <__aeabi_ddiv+0x5e0>)
 8001d3c:	445b      	add	r3, fp
 8001d3e:	4099      	lsls	r1, r3
 8001d40:	430d      	orrs	r5, r1
 8001d42:	1e6b      	subs	r3, r5, #1
 8001d44:	419d      	sbcs	r5, r3
 8001d46:	2307      	movs	r3, #7
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	001d      	movs	r5, r3
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4015      	ands	r5, r2
 8001d50:	4213      	tst	r3, r2
 8001d52:	d100      	bne.n	8001d56 <__aeabi_ddiv+0x3fa>
 8001d54:	e0d4      	b.n	8001f00 <__aeabi_ddiv+0x5a4>
 8001d56:	210f      	movs	r1, #15
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4011      	ands	r1, r2
 8001d5c:	2904      	cmp	r1, #4
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x406>
 8001d60:	e0cb      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d62:	1d11      	adds	r1, r2, #4
 8001d64:	4291      	cmp	r1, r2
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	4252      	negs	r2, r2
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	0219      	lsls	r1, r3, #8
 8001d70:	d400      	bmi.n	8001d74 <__aeabi_ddiv+0x418>
 8001d72:	e0c2      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d74:	2301      	movs	r3, #1
 8001d76:	2400      	movs	r4, #0
 8001d78:	2500      	movs	r5, #0
 8001d7a:	e646      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	4641      	mov	r1, r8
 8001d80:	031b      	lsls	r3, r3, #12
 8001d82:	4219      	tst	r1, r3
 8001d84:	d008      	beq.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d86:	421c      	tst	r4, r3
 8001d88:	d106      	bne.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d8a:	431c      	orrs	r4, r3
 8001d8c:	0324      	lsls	r4, r4, #12
 8001d8e:	46ba      	mov	sl, r7
 8001d90:	0015      	movs	r5, r2
 8001d92:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d94:	0b24      	lsrs	r4, r4, #12
 8001d96:	e638      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	0324      	lsls	r4, r4, #12
 8001d9e:	431c      	orrs	r4, r3
 8001da0:	0324      	lsls	r4, r4, #12
 8001da2:	46b2      	mov	sl, r6
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001da6:	0b24      	lsrs	r4, r4, #12
 8001da8:	e62f      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_ddiv+0x454>
 8001dae:	e703      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001db0:	19a6      	adds	r6, r4, r6
 8001db2:	1e68      	subs	r0, r5, #1
 8001db4:	42a6      	cmp	r6, r4
 8001db6:	d200      	bcs.n	8001dba <__aeabi_ddiv+0x45e>
 8001db8:	e08d      	b.n	8001ed6 <__aeabi_ddiv+0x57a>
 8001dba:	428e      	cmp	r6, r1
 8001dbc:	d200      	bcs.n	8001dc0 <__aeabi_ddiv+0x464>
 8001dbe:	e0a3      	b.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_ddiv+0x468>
 8001dc2:	e0b3      	b.n	8001f2c <__aeabi_ddiv+0x5d0>
 8001dc4:	0005      	movs	r5, r0
 8001dc6:	e6f5      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001dc8:	42aa      	cmp	r2, r5
 8001dca:	d900      	bls.n	8001dce <__aeabi_ddiv+0x472>
 8001dcc:	e639      	b.n	8001a42 <__aeabi_ddiv+0xe6>
 8001dce:	4643      	mov	r3, r8
 8001dd0:	07de      	lsls	r6, r3, #31
 8001dd2:	0858      	lsrs	r0, r3, #1
 8001dd4:	086b      	lsrs	r3, r5, #1
 8001dd6:	431e      	orrs	r6, r3
 8001dd8:	07ed      	lsls	r5, r5, #31
 8001dda:	e639      	b.n	8001a50 <__aeabi_ddiv+0xf4>
 8001ddc:	4648      	mov	r0, r9
 8001dde:	f001 f971 	bl	80030c4 <__clzsi2>
 8001de2:	0001      	movs	r1, r0
 8001de4:	0002      	movs	r2, r0
 8001de6:	3115      	adds	r1, #21
 8001de8:	3220      	adds	r2, #32
 8001dea:	291c      	cmp	r1, #28
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_ddiv+0x494>
 8001dee:	e72c      	b.n	8001c4a <__aeabi_ddiv+0x2ee>
 8001df0:	464b      	mov	r3, r9
 8001df2:	3808      	subs	r0, #8
 8001df4:	4083      	lsls	r3, r0
 8001df6:	2500      	movs	r5, #0
 8001df8:	4698      	mov	r8, r3
 8001dfa:	e732      	b.n	8001c62 <__aeabi_ddiv+0x306>
 8001dfc:	f001 f962 	bl	80030c4 <__clzsi2>
 8001e00:	0003      	movs	r3, r0
 8001e02:	001a      	movs	r2, r3
 8001e04:	3215      	adds	r2, #21
 8001e06:	3020      	adds	r0, #32
 8001e08:	2a1c      	cmp	r2, #28
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_ddiv+0x4b2>
 8001e0c:	e700      	b.n	8001c10 <__aeabi_ddiv+0x2b4>
 8001e0e:	4654      	mov	r4, sl
 8001e10:	3b08      	subs	r3, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	409c      	lsls	r4, r3
 8001e16:	e705      	b.n	8001c24 <__aeabi_ddiv+0x2c8>
 8001e18:	1936      	adds	r6, r6, r4
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	42b4      	cmp	r4, r6
 8001e1e:	d900      	bls.n	8001e22 <__aeabi_ddiv+0x4c6>
 8001e20:	e6a6      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e22:	42b2      	cmp	r2, r6
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x4cc>
 8001e26:	e6a3      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e28:	1e83      	subs	r3, r0, #2
 8001e2a:	1936      	adds	r6, r6, r4
 8001e2c:	e6a0      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e2e:	1909      	adds	r1, r1, r4
 8001e30:	3d01      	subs	r5, #1
 8001e32:	428c      	cmp	r4, r1
 8001e34:	d900      	bls.n	8001e38 <__aeabi_ddiv+0x4dc>
 8001e36:	e68d      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d800      	bhi.n	8001e3e <__aeabi_ddiv+0x4e2>
 8001e3c:	e68a      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e3e:	1e85      	subs	r5, r0, #2
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	e687      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e44:	230f      	movs	r3, #15
 8001e46:	402b      	ands	r3, r5
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_ddiv+0x4f2>
 8001e4c:	e6bc      	b.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	425b      	negs	r3, r3
 8001e52:	42ab      	cmp	r3, r5
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	3504      	adds	r5, #4
 8001e58:	425b      	negs	r3, r3
 8001e5a:	08ed      	lsrs	r5, r5, #3
 8001e5c:	4498      	add	r8, r3
 8001e5e:	e6b4      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001e60:	42af      	cmp	r7, r5
 8001e62:	d900      	bls.n	8001e66 <__aeabi_ddiv+0x50a>
 8001e64:	e660      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e66:	4282      	cmp	r2, r0
 8001e68:	d804      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_ddiv+0x512>
 8001e6c:	e65c      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e6e:	42ae      	cmp	r6, r5
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e72:	e659      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e74:	2302      	movs	r3, #2
 8001e76:	425b      	negs	r3, r3
 8001e78:	469c      	mov	ip, r3
 8001e7a:	9b00      	ldr	r3, [sp, #0]
 8001e7c:	44e0      	add	r8, ip
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4465      	add	r5, ip
 8001e82:	429d      	cmp	r5, r3
 8001e84:	419b      	sbcs	r3, r3
 8001e86:	425b      	negs	r3, r3
 8001e88:	191b      	adds	r3, r3, r4
 8001e8a:	18c0      	adds	r0, r0, r3
 8001e8c:	e64d      	b.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001e8e:	428a      	cmp	r2, r1
 8001e90:	d800      	bhi.n	8001e94 <__aeabi_ddiv+0x538>
 8001e92:	e60e      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e94:	1e83      	subs	r3, r0, #2
 8001e96:	1909      	adds	r1, r1, r4
 8001e98:	e60b      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d800      	bhi.n	8001ea0 <__aeabi_ddiv+0x544>
 8001e9e:	e5f4      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea0:	1e83      	subs	r3, r0, #2
 8001ea2:	4698      	mov	r8, r3
 8001ea4:	1909      	adds	r1, r1, r4
 8001ea6:	e5f0      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea8:	4925      	ldr	r1, [pc, #148]	; (8001f40 <__aeabi_ddiv+0x5e4>)
 8001eaa:	0028      	movs	r0, r5
 8001eac:	4459      	add	r1, fp
 8001eae:	408d      	lsls	r5, r1
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	408a      	lsls	r2, r1
 8001eb4:	1e69      	subs	r1, r5, #1
 8001eb6:	418d      	sbcs	r5, r1
 8001eb8:	4641      	mov	r1, r8
 8001eba:	40d8      	lsrs	r0, r3
 8001ebc:	40d9      	lsrs	r1, r3
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	432a      	orrs	r2, r5
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	0751      	lsls	r1, r2, #29
 8001ec6:	d100      	bne.n	8001eca <__aeabi_ddiv+0x56e>
 8001ec8:	e751      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001eca:	210f      	movs	r1, #15
 8001ecc:	4011      	ands	r1, r2
 8001ece:	2904      	cmp	r1, #4
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_ddiv+0x578>
 8001ed2:	e746      	b.n	8001d62 <__aeabi_ddiv+0x406>
 8001ed4:	e74b      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001ed6:	0005      	movs	r5, r0
 8001ed8:	428e      	cmp	r6, r1
 8001eda:	d000      	beq.n	8001ede <__aeabi_ddiv+0x582>
 8001edc:	e66a      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ede:	9a00      	ldr	r2, [sp, #0]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_ddiv+0x58a>
 8001ee4:	e666      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ee6:	e667      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <__aeabi_ddiv+0x5e8>)
 8001eea:	445a      	add	r2, fp
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x596>
 8001ef0:	e710      	b.n	8001d14 <__aeabi_ddiv+0x3b8>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	4498      	add	r8, r3
 8001ef8:	e667      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001efa:	075d      	lsls	r5, r3, #29
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	0b1c      	lsrs	r4, r3, #12
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	2300      	movs	r3, #0
 8001f04:	4315      	orrs	r5, r2
 8001f06:	e580      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f08:	9800      	ldr	r0, [sp, #0]
 8001f0a:	3d02      	subs	r5, #2
 8001f0c:	0042      	lsls	r2, r0, #1
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	41bf      	sbcs	r7, r7
 8001f12:	427f      	negs	r7, r7
 8001f14:	193c      	adds	r4, r7, r4
 8001f16:	1936      	adds	r6, r6, r4
 8001f18:	9200      	str	r2, [sp, #0]
 8001f1a:	e7dd      	b.n	8001ed8 <__aeabi_ddiv+0x57c>
 8001f1c:	2480      	movs	r4, #128	; 0x80
 8001f1e:	4643      	mov	r3, r8
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0324      	lsls	r4, r4, #12
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	e56e      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f2c:	9a00      	ldr	r2, [sp, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3ea      	bcc.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001f32:	0005      	movs	r5, r0
 8001f34:	e7d3      	b.n	8001ede <__aeabi_ddiv+0x582>
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	000007ff 	.word	0x000007ff
 8001f3c:	0000043e 	.word	0x0000043e
 8001f40:	0000041e 	.word	0x0000041e
 8001f44:	000003ff 	.word	0x000003ff

08001f48 <__eqdf2>:
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	464e      	mov	r6, r9
 8001f4c:	4645      	mov	r5, r8
 8001f4e:	46de      	mov	lr, fp
 8001f50:	4657      	mov	r7, sl
 8001f52:	4690      	mov	r8, r2
 8001f54:	b5e0      	push	{r5, r6, r7, lr}
 8001f56:	0017      	movs	r7, r2
 8001f58:	031a      	lsls	r2, r3, #12
 8001f5a:	0b12      	lsrs	r2, r2, #12
 8001f5c:	0005      	movs	r5, r0
 8001f5e:	4684      	mov	ip, r0
 8001f60:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <__eqdf2+0x80>)
 8001f62:	030e      	lsls	r6, r1, #12
 8001f64:	004c      	lsls	r4, r1, #1
 8001f66:	4691      	mov	r9, r2
 8001f68:	005a      	lsls	r2, r3, #1
 8001f6a:	0fdb      	lsrs	r3, r3, #31
 8001f6c:	469b      	mov	fp, r3
 8001f6e:	0b36      	lsrs	r6, r6, #12
 8001f70:	0d64      	lsrs	r4, r4, #21
 8001f72:	0fc9      	lsrs	r1, r1, #31
 8001f74:	0d52      	lsrs	r2, r2, #21
 8001f76:	4284      	cmp	r4, r0
 8001f78:	d019      	beq.n	8001fae <__eqdf2+0x66>
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	d010      	beq.n	8001fa0 <__eqdf2+0x58>
 8001f7e:	2001      	movs	r0, #1
 8001f80:	4294      	cmp	r4, r2
 8001f82:	d10e      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f84:	454e      	cmp	r6, r9
 8001f86:	d10c      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f88:	2001      	movs	r0, #1
 8001f8a:	45c4      	cmp	ip, r8
 8001f8c:	d109      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f8e:	4559      	cmp	r1, fp
 8001f90:	d017      	beq.n	8001fc2 <__eqdf2+0x7a>
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d105      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f96:	0030      	movs	r0, r6
 8001f98:	4328      	orrs	r0, r5
 8001f9a:	1e43      	subs	r3, r0, #1
 8001f9c:	4198      	sbcs	r0, r3
 8001f9e:	e000      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa4:	46bb      	mov	fp, r7
 8001fa6:	46b2      	mov	sl, r6
 8001fa8:	46a9      	mov	r9, r5
 8001faa:	46a0      	mov	r8, r4
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fae:	0033      	movs	r3, r6
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	432b      	orrs	r3, r5
 8001fb4:	d1f5      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fb6:	42a2      	cmp	r2, r4
 8001fb8:	d1f3      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fba:	464b      	mov	r3, r9
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	d1f0      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fc0:	e7e2      	b.n	8001f88 <__eqdf2+0x40>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	e7ed      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__gedf2>:
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	4647      	mov	r7, r8
 8001fd0:	46ce      	mov	lr, r9
 8001fd2:	0004      	movs	r4, r0
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	0016      	movs	r6, r2
 8001fd8:	031b      	lsls	r3, r3, #12
 8001fda:	0b1b      	lsrs	r3, r3, #12
 8001fdc:	4d2d      	ldr	r5, [pc, #180]	; (8002094 <__gedf2+0xc8>)
 8001fde:	004a      	lsls	r2, r1, #1
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	0043      	lsls	r3, r0, #1
 8001fe6:	030f      	lsls	r7, r1, #12
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	46b0      	mov	r8, r6
 8001fec:	0b3f      	lsrs	r7, r7, #12
 8001fee:	0d52      	lsrs	r2, r2, #21
 8001ff0:	0fc9      	lsrs	r1, r1, #31
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	0fc0      	lsrs	r0, r0, #31
 8001ff6:	42aa      	cmp	r2, r5
 8001ff8:	d021      	beq.n	800203e <__gedf2+0x72>
 8001ffa:	42ab      	cmp	r3, r5
 8001ffc:	d013      	beq.n	8002026 <__gedf2+0x5a>
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d122      	bne.n	8002048 <__gedf2+0x7c>
 8002002:	433c      	orrs	r4, r7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <__gedf2+0x42>
 8002008:	464d      	mov	r5, r9
 800200a:	432e      	orrs	r6, r5
 800200c:	d022      	beq.n	8002054 <__gedf2+0x88>
 800200e:	2c00      	cmp	r4, #0
 8002010:	d010      	beq.n	8002034 <__gedf2+0x68>
 8002012:	4281      	cmp	r1, r0
 8002014:	d022      	beq.n	800205c <__gedf2+0x90>
 8002016:	2002      	movs	r0, #2
 8002018:	3901      	subs	r1, #1
 800201a:	4008      	ands	r0, r1
 800201c:	3801      	subs	r0, #1
 800201e:	bcc0      	pop	{r6, r7}
 8002020:	46b9      	mov	r9, r7
 8002022:	46b0      	mov	r8, r6
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	464d      	mov	r5, r9
 8002028:	432e      	orrs	r6, r5
 800202a:	d129      	bne.n	8002080 <__gedf2+0xb4>
 800202c:	2a00      	cmp	r2, #0
 800202e:	d1f0      	bne.n	8002012 <__gedf2+0x46>
 8002030:	433c      	orrs	r4, r7
 8002032:	d1ee      	bne.n	8002012 <__gedf2+0x46>
 8002034:	2800      	cmp	r0, #0
 8002036:	d1f2      	bne.n	800201e <__gedf2+0x52>
 8002038:	2001      	movs	r0, #1
 800203a:	4240      	negs	r0, r0
 800203c:	e7ef      	b.n	800201e <__gedf2+0x52>
 800203e:	003d      	movs	r5, r7
 8002040:	4325      	orrs	r5, r4
 8002042:	d11d      	bne.n	8002080 <__gedf2+0xb4>
 8002044:	4293      	cmp	r3, r2
 8002046:	d0ee      	beq.n	8002026 <__gedf2+0x5a>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e2      	bne.n	8002012 <__gedf2+0x46>
 800204c:	464c      	mov	r4, r9
 800204e:	4326      	orrs	r6, r4
 8002050:	d1df      	bne.n	8002012 <__gedf2+0x46>
 8002052:	e7e0      	b.n	8002016 <__gedf2+0x4a>
 8002054:	2000      	movs	r0, #0
 8002056:	2c00      	cmp	r4, #0
 8002058:	d0e1      	beq.n	800201e <__gedf2+0x52>
 800205a:	e7dc      	b.n	8002016 <__gedf2+0x4a>
 800205c:	429a      	cmp	r2, r3
 800205e:	dc0a      	bgt.n	8002076 <__gedf2+0xaa>
 8002060:	dbe8      	blt.n	8002034 <__gedf2+0x68>
 8002062:	454f      	cmp	r7, r9
 8002064:	d8d7      	bhi.n	8002016 <__gedf2+0x4a>
 8002066:	d00e      	beq.n	8002086 <__gedf2+0xba>
 8002068:	2000      	movs	r0, #0
 800206a:	454f      	cmp	r7, r9
 800206c:	d2d7      	bcs.n	800201e <__gedf2+0x52>
 800206e:	2900      	cmp	r1, #0
 8002070:	d0e2      	beq.n	8002038 <__gedf2+0x6c>
 8002072:	0008      	movs	r0, r1
 8002074:	e7d3      	b.n	800201e <__gedf2+0x52>
 8002076:	4243      	negs	r3, r0
 8002078:	4158      	adcs	r0, r3
 800207a:	0040      	lsls	r0, r0, #1
 800207c:	3801      	subs	r0, #1
 800207e:	e7ce      	b.n	800201e <__gedf2+0x52>
 8002080:	2002      	movs	r0, #2
 8002082:	4240      	negs	r0, r0
 8002084:	e7cb      	b.n	800201e <__gedf2+0x52>
 8002086:	45c4      	cmp	ip, r8
 8002088:	d8c5      	bhi.n	8002016 <__gedf2+0x4a>
 800208a:	2000      	movs	r0, #0
 800208c:	45c4      	cmp	ip, r8
 800208e:	d2c6      	bcs.n	800201e <__gedf2+0x52>
 8002090:	e7ed      	b.n	800206e <__gedf2+0xa2>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	000007ff 	.word	0x000007ff

08002098 <__ledf2>:
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	4647      	mov	r7, r8
 800209c:	46ce      	mov	lr, r9
 800209e:	0004      	movs	r4, r0
 80020a0:	0018      	movs	r0, r3
 80020a2:	0016      	movs	r6, r2
 80020a4:	031b      	lsls	r3, r3, #12
 80020a6:	0b1b      	lsrs	r3, r3, #12
 80020a8:	4d2c      	ldr	r5, [pc, #176]	; (800215c <__ledf2+0xc4>)
 80020aa:	004a      	lsls	r2, r1, #1
 80020ac:	4699      	mov	r9, r3
 80020ae:	b580      	push	{r7, lr}
 80020b0:	0043      	lsls	r3, r0, #1
 80020b2:	030f      	lsls	r7, r1, #12
 80020b4:	46a4      	mov	ip, r4
 80020b6:	46b0      	mov	r8, r6
 80020b8:	0b3f      	lsrs	r7, r7, #12
 80020ba:	0d52      	lsrs	r2, r2, #21
 80020bc:	0fc9      	lsrs	r1, r1, #31
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	0fc0      	lsrs	r0, r0, #31
 80020c2:	42aa      	cmp	r2, r5
 80020c4:	d00d      	beq.n	80020e2 <__ledf2+0x4a>
 80020c6:	42ab      	cmp	r3, r5
 80020c8:	d010      	beq.n	80020ec <__ledf2+0x54>
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d127      	bne.n	800211e <__ledf2+0x86>
 80020ce:	433c      	orrs	r4, r7
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <__ledf2+0x60>
 80020d4:	464d      	mov	r5, r9
 80020d6:	432e      	orrs	r6, r5
 80020d8:	d10e      	bne.n	80020f8 <__ledf2+0x60>
 80020da:	2000      	movs	r0, #0
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d015      	beq.n	800210c <__ledf2+0x74>
 80020e0:	e00e      	b.n	8002100 <__ledf2+0x68>
 80020e2:	003d      	movs	r5, r7
 80020e4:	4325      	orrs	r5, r4
 80020e6:	d110      	bne.n	800210a <__ledf2+0x72>
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d118      	bne.n	800211e <__ledf2+0x86>
 80020ec:	464d      	mov	r5, r9
 80020ee:	432e      	orrs	r6, r5
 80020f0:	d10b      	bne.n	800210a <__ledf2+0x72>
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d102      	bne.n	80020fc <__ledf2+0x64>
 80020f6:	433c      	orrs	r4, r7
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d00b      	beq.n	8002114 <__ledf2+0x7c>
 80020fc:	4281      	cmp	r1, r0
 80020fe:	d014      	beq.n	800212a <__ledf2+0x92>
 8002100:	2002      	movs	r0, #2
 8002102:	3901      	subs	r1, #1
 8002104:	4008      	ands	r0, r1
 8002106:	3801      	subs	r0, #1
 8002108:	e000      	b.n	800210c <__ledf2+0x74>
 800210a:	2002      	movs	r0, #2
 800210c:	bcc0      	pop	{r6, r7}
 800210e:	46b9      	mov	r9, r7
 8002110:	46b0      	mov	r8, r6
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002114:	2800      	cmp	r0, #0
 8002116:	d1f9      	bne.n	800210c <__ledf2+0x74>
 8002118:	2001      	movs	r0, #1
 800211a:	4240      	negs	r0, r0
 800211c:	e7f6      	b.n	800210c <__ledf2+0x74>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ec      	bne.n	80020fc <__ledf2+0x64>
 8002122:	464c      	mov	r4, r9
 8002124:	4326      	orrs	r6, r4
 8002126:	d1e9      	bne.n	80020fc <__ledf2+0x64>
 8002128:	e7ea      	b.n	8002100 <__ledf2+0x68>
 800212a:	429a      	cmp	r2, r3
 800212c:	dd04      	ble.n	8002138 <__ledf2+0xa0>
 800212e:	4243      	negs	r3, r0
 8002130:	4158      	adcs	r0, r3
 8002132:	0040      	lsls	r0, r0, #1
 8002134:	3801      	subs	r0, #1
 8002136:	e7e9      	b.n	800210c <__ledf2+0x74>
 8002138:	429a      	cmp	r2, r3
 800213a:	dbeb      	blt.n	8002114 <__ledf2+0x7c>
 800213c:	454f      	cmp	r7, r9
 800213e:	d8df      	bhi.n	8002100 <__ledf2+0x68>
 8002140:	d006      	beq.n	8002150 <__ledf2+0xb8>
 8002142:	2000      	movs	r0, #0
 8002144:	454f      	cmp	r7, r9
 8002146:	d2e1      	bcs.n	800210c <__ledf2+0x74>
 8002148:	2900      	cmp	r1, #0
 800214a:	d0e5      	beq.n	8002118 <__ledf2+0x80>
 800214c:	0008      	movs	r0, r1
 800214e:	e7dd      	b.n	800210c <__ledf2+0x74>
 8002150:	45c4      	cmp	ip, r8
 8002152:	d8d5      	bhi.n	8002100 <__ledf2+0x68>
 8002154:	2000      	movs	r0, #0
 8002156:	45c4      	cmp	ip, r8
 8002158:	d2d8      	bcs.n	800210c <__ledf2+0x74>
 800215a:	e7f5      	b.n	8002148 <__ledf2+0xb0>
 800215c:	000007ff 	.word	0x000007ff

08002160 <__aeabi_dmul>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	4657      	mov	r7, sl
 8002164:	464e      	mov	r6, r9
 8002166:	4645      	mov	r5, r8
 8002168:	46de      	mov	lr, fp
 800216a:	b5e0      	push	{r5, r6, r7, lr}
 800216c:	4698      	mov	r8, r3
 800216e:	030c      	lsls	r4, r1, #12
 8002170:	004b      	lsls	r3, r1, #1
 8002172:	0006      	movs	r6, r0
 8002174:	4692      	mov	sl, r2
 8002176:	b087      	sub	sp, #28
 8002178:	0b24      	lsrs	r4, r4, #12
 800217a:	0d5b      	lsrs	r3, r3, #21
 800217c:	0fcf      	lsrs	r7, r1, #31
 800217e:	2b00      	cmp	r3, #0
 8002180:	d100      	bne.n	8002184 <__aeabi_dmul+0x24>
 8002182:	e15c      	b.n	800243e <__aeabi_dmul+0x2de>
 8002184:	4ad9      	ldr	r2, [pc, #868]	; (80024ec <__aeabi_dmul+0x38c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d100      	bne.n	800218c <__aeabi_dmul+0x2c>
 800218a:	e175      	b.n	8002478 <__aeabi_dmul+0x318>
 800218c:	0f42      	lsrs	r2, r0, #29
 800218e:	00e4      	lsls	r4, r4, #3
 8002190:	4314      	orrs	r4, r2
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	4314      	orrs	r4, r2
 8002198:	4ad5      	ldr	r2, [pc, #852]	; (80024f0 <__aeabi_dmul+0x390>)
 800219a:	00c5      	lsls	r5, r0, #3
 800219c:	4694      	mov	ip, r2
 800219e:	4463      	add	r3, ip
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2300      	movs	r3, #0
 80021a4:	4699      	mov	r9, r3
 80021a6:	469b      	mov	fp, r3
 80021a8:	4643      	mov	r3, r8
 80021aa:	4642      	mov	r2, r8
 80021ac:	031e      	lsls	r6, r3, #12
 80021ae:	0fd2      	lsrs	r2, r2, #31
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4650      	mov	r0, sl
 80021b4:	4690      	mov	r8, r2
 80021b6:	0b36      	lsrs	r6, r6, #12
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	d100      	bne.n	80021be <__aeabi_dmul+0x5e>
 80021bc:	e120      	b.n	8002400 <__aeabi_dmul+0x2a0>
 80021be:	4acb      	ldr	r2, [pc, #812]	; (80024ec <__aeabi_dmul+0x38c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x66>
 80021c4:	e162      	b.n	800248c <__aeabi_dmul+0x32c>
 80021c6:	49ca      	ldr	r1, [pc, #808]	; (80024f0 <__aeabi_dmul+0x390>)
 80021c8:	0f42      	lsrs	r2, r0, #29
 80021ca:	468c      	mov	ip, r1
 80021cc:	9900      	ldr	r1, [sp, #0]
 80021ce:	4463      	add	r3, ip
 80021d0:	00f6      	lsls	r6, r6, #3
 80021d2:	468c      	mov	ip, r1
 80021d4:	4316      	orrs	r6, r2
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	449c      	add	ip, r3
 80021da:	0412      	lsls	r2, r2, #16
 80021dc:	4663      	mov	r3, ip
 80021de:	4316      	orrs	r6, r2
 80021e0:	00c2      	lsls	r2, r0, #3
 80021e2:	2000      	movs	r0, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	4643      	mov	r3, r8
 80021ea:	3101      	adds	r1, #1
 80021ec:	468c      	mov	ip, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	407b      	eors	r3, r7
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	290f      	cmp	r1, #15
 80021f6:	d826      	bhi.n	8002246 <__aeabi_dmul+0xe6>
 80021f8:	4bbe      	ldr	r3, [pc, #760]	; (80024f4 <__aeabi_dmul+0x394>)
 80021fa:	0089      	lsls	r1, r1, #2
 80021fc:	5859      	ldr	r1, [r3, r1]
 80021fe:	468f      	mov	pc, r1
 8002200:	4643      	mov	r3, r8
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	0034      	movs	r4, r6
 8002206:	0015      	movs	r5, r2
 8002208:	4683      	mov	fp, r0
 800220a:	465b      	mov	r3, fp
 800220c:	2b02      	cmp	r3, #2
 800220e:	d016      	beq.n	800223e <__aeabi_dmul+0xde>
 8002210:	2b03      	cmp	r3, #3
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0xb6>
 8002214:	e203      	b.n	800261e <__aeabi_dmul+0x4be>
 8002216:	2b01      	cmp	r3, #1
 8002218:	d000      	beq.n	800221c <__aeabi_dmul+0xbc>
 800221a:	e0cd      	b.n	80023b8 <__aeabi_dmul+0x258>
 800221c:	2200      	movs	r2, #0
 800221e:	2400      	movs	r4, #0
 8002220:	2500      	movs	r5, #0
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	0512      	lsls	r2, r2, #20
 8002226:	4322      	orrs	r2, r4
 8002228:	07db      	lsls	r3, r3, #31
 800222a:	431a      	orrs	r2, r3
 800222c:	0028      	movs	r0, r5
 800222e:	0011      	movs	r1, r2
 8002230:	b007      	add	sp, #28
 8002232:	bcf0      	pop	{r4, r5, r6, r7}
 8002234:	46bb      	mov	fp, r7
 8002236:	46b2      	mov	sl, r6
 8002238:	46a9      	mov	r9, r5
 800223a:	46a0      	mov	r8, r4
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223e:	2400      	movs	r4, #0
 8002240:	2500      	movs	r5, #0
 8002242:	4aaa      	ldr	r2, [pc, #680]	; (80024ec <__aeabi_dmul+0x38c>)
 8002244:	e7ed      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002246:	0c28      	lsrs	r0, r5, #16
 8002248:	042d      	lsls	r5, r5, #16
 800224a:	0c2d      	lsrs	r5, r5, #16
 800224c:	002b      	movs	r3, r5
 800224e:	0c11      	lsrs	r1, r2, #16
 8002250:	0412      	lsls	r2, r2, #16
 8002252:	0c12      	lsrs	r2, r2, #16
 8002254:	4353      	muls	r3, r2
 8002256:	4698      	mov	r8, r3
 8002258:	0013      	movs	r3, r2
 800225a:	002f      	movs	r7, r5
 800225c:	4343      	muls	r3, r0
 800225e:	4699      	mov	r9, r3
 8002260:	434f      	muls	r7, r1
 8002262:	444f      	add	r7, r9
 8002264:	46bb      	mov	fp, r7
 8002266:	4647      	mov	r7, r8
 8002268:	000b      	movs	r3, r1
 800226a:	0c3f      	lsrs	r7, r7, #16
 800226c:	46ba      	mov	sl, r7
 800226e:	4343      	muls	r3, r0
 8002270:	44da      	add	sl, fp
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	45d1      	cmp	r9, sl
 8002276:	d904      	bls.n	8002282 <__aeabi_dmul+0x122>
 8002278:	2780      	movs	r7, #128	; 0x80
 800227a:	027f      	lsls	r7, r7, #9
 800227c:	46b9      	mov	r9, r7
 800227e:	444b      	add	r3, r9
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	4653      	mov	r3, sl
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	469b      	mov	fp, r3
 8002288:	4653      	mov	r3, sl
 800228a:	041f      	lsls	r7, r3, #16
 800228c:	4643      	mov	r3, r8
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	4698      	mov	r8, r3
 8002294:	003b      	movs	r3, r7
 8002296:	4443      	add	r3, r8
 8002298:	9304      	str	r3, [sp, #16]
 800229a:	0c33      	lsrs	r3, r6, #16
 800229c:	0436      	lsls	r6, r6, #16
 800229e:	0c36      	lsrs	r6, r6, #16
 80022a0:	4698      	mov	r8, r3
 80022a2:	0033      	movs	r3, r6
 80022a4:	4343      	muls	r3, r0
 80022a6:	4699      	mov	r9, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	4343      	muls	r3, r0
 80022ac:	002f      	movs	r7, r5
 80022ae:	469a      	mov	sl, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	4377      	muls	r7, r6
 80022b4:	435d      	muls	r5, r3
 80022b6:	0c38      	lsrs	r0, r7, #16
 80022b8:	444d      	add	r5, r9
 80022ba:	1945      	adds	r5, r0, r5
 80022bc:	45a9      	cmp	r9, r5
 80022be:	d903      	bls.n	80022c8 <__aeabi_dmul+0x168>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	4699      	mov	r9, r3
 80022c6:	44ca      	add	sl, r9
 80022c8:	043f      	lsls	r7, r7, #16
 80022ca:	0c28      	lsrs	r0, r5, #16
 80022cc:	0c3f      	lsrs	r7, r7, #16
 80022ce:	042d      	lsls	r5, r5, #16
 80022d0:	19ed      	adds	r5, r5, r7
 80022d2:	0c27      	lsrs	r7, r4, #16
 80022d4:	0424      	lsls	r4, r4, #16
 80022d6:	0c24      	lsrs	r4, r4, #16
 80022d8:	0003      	movs	r3, r0
 80022da:	0020      	movs	r0, r4
 80022dc:	4350      	muls	r0, r2
 80022de:	437a      	muls	r2, r7
 80022e0:	4691      	mov	r9, r2
 80022e2:	003a      	movs	r2, r7
 80022e4:	4453      	add	r3, sl
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	0c03      	lsrs	r3, r0, #16
 80022ea:	469a      	mov	sl, r3
 80022ec:	434a      	muls	r2, r1
 80022ee:	4361      	muls	r1, r4
 80022f0:	4449      	add	r1, r9
 80022f2:	4451      	add	r1, sl
 80022f4:	44ab      	add	fp, r5
 80022f6:	4589      	cmp	r9, r1
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x1a2>
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	4699      	mov	r9, r3
 8002300:	444a      	add	r2, r9
 8002302:	0400      	lsls	r0, r0, #16
 8002304:	0c0b      	lsrs	r3, r1, #16
 8002306:	0c00      	lsrs	r0, r0, #16
 8002308:	0409      	lsls	r1, r1, #16
 800230a:	1809      	adds	r1, r1, r0
 800230c:	0020      	movs	r0, r4
 800230e:	4699      	mov	r9, r3
 8002310:	4643      	mov	r3, r8
 8002312:	4370      	muls	r0, r6
 8002314:	435c      	muls	r4, r3
 8002316:	437e      	muls	r6, r7
 8002318:	435f      	muls	r7, r3
 800231a:	0c03      	lsrs	r3, r0, #16
 800231c:	4698      	mov	r8, r3
 800231e:	19a4      	adds	r4, r4, r6
 8002320:	4444      	add	r4, r8
 8002322:	444a      	add	r2, r9
 8002324:	9703      	str	r7, [sp, #12]
 8002326:	42a6      	cmp	r6, r4
 8002328:	d904      	bls.n	8002334 <__aeabi_dmul+0x1d4>
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	4698      	mov	r8, r3
 8002330:	4447      	add	r7, r8
 8002332:	9703      	str	r7, [sp, #12]
 8002334:	0423      	lsls	r3, r4, #16
 8002336:	9e02      	ldr	r6, [sp, #8]
 8002338:	469a      	mov	sl, r3
 800233a:	9b05      	ldr	r3, [sp, #20]
 800233c:	445e      	add	r6, fp
 800233e:	4698      	mov	r8, r3
 8002340:	42ae      	cmp	r6, r5
 8002342:	41ad      	sbcs	r5, r5
 8002344:	1876      	adds	r6, r6, r1
 8002346:	428e      	cmp	r6, r1
 8002348:	4189      	sbcs	r1, r1
 800234a:	0400      	lsls	r0, r0, #16
 800234c:	0c00      	lsrs	r0, r0, #16
 800234e:	4450      	add	r0, sl
 8002350:	4440      	add	r0, r8
 8002352:	426d      	negs	r5, r5
 8002354:	1947      	adds	r7, r0, r5
 8002356:	46b8      	mov	r8, r7
 8002358:	4693      	mov	fp, r2
 800235a:	4249      	negs	r1, r1
 800235c:	4689      	mov	r9, r1
 800235e:	44c3      	add	fp, r8
 8002360:	44d9      	add	r9, fp
 8002362:	4298      	cmp	r0, r3
 8002364:	4180      	sbcs	r0, r0
 8002366:	45a8      	cmp	r8, r5
 8002368:	41ad      	sbcs	r5, r5
 800236a:	4593      	cmp	fp, r2
 800236c:	4192      	sbcs	r2, r2
 800236e:	4589      	cmp	r9, r1
 8002370:	4189      	sbcs	r1, r1
 8002372:	426d      	negs	r5, r5
 8002374:	4240      	negs	r0, r0
 8002376:	4328      	orrs	r0, r5
 8002378:	0c24      	lsrs	r4, r4, #16
 800237a:	4252      	negs	r2, r2
 800237c:	4249      	negs	r1, r1
 800237e:	430a      	orrs	r2, r1
 8002380:	9b03      	ldr	r3, [sp, #12]
 8002382:	1900      	adds	r0, r0, r4
 8002384:	1880      	adds	r0, r0, r2
 8002386:	18c7      	adds	r7, r0, r3
 8002388:	464b      	mov	r3, r9
 800238a:	0ddc      	lsrs	r4, r3, #23
 800238c:	9b04      	ldr	r3, [sp, #16]
 800238e:	0275      	lsls	r5, r6, #9
 8002390:	431d      	orrs	r5, r3
 8002392:	1e6a      	subs	r2, r5, #1
 8002394:	4195      	sbcs	r5, r2
 8002396:	464b      	mov	r3, r9
 8002398:	0df6      	lsrs	r6, r6, #23
 800239a:	027f      	lsls	r7, r7, #9
 800239c:	4335      	orrs	r5, r6
 800239e:	025a      	lsls	r2, r3, #9
 80023a0:	433c      	orrs	r4, r7
 80023a2:	4315      	orrs	r5, r2
 80023a4:	01fb      	lsls	r3, r7, #7
 80023a6:	d400      	bmi.n	80023aa <__aeabi_dmul+0x24a>
 80023a8:	e11c      	b.n	80025e4 <__aeabi_dmul+0x484>
 80023aa:	2101      	movs	r1, #1
 80023ac:	086a      	lsrs	r2, r5, #1
 80023ae:	400d      	ands	r5, r1
 80023b0:	4315      	orrs	r5, r2
 80023b2:	07e2      	lsls	r2, r4, #31
 80023b4:	4315      	orrs	r5, r2
 80023b6:	0864      	lsrs	r4, r4, #1
 80023b8:	494f      	ldr	r1, [pc, #316]	; (80024f8 <__aeabi_dmul+0x398>)
 80023ba:	4461      	add	r1, ip
 80023bc:	2900      	cmp	r1, #0
 80023be:	dc00      	bgt.n	80023c2 <__aeabi_dmul+0x262>
 80023c0:	e0b0      	b.n	8002524 <__aeabi_dmul+0x3c4>
 80023c2:	076b      	lsls	r3, r5, #29
 80023c4:	d009      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023c6:	220f      	movs	r2, #15
 80023c8:	402a      	ands	r2, r5
 80023ca:	2a04      	cmp	r2, #4
 80023cc:	d005      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023ce:	1d2a      	adds	r2, r5, #4
 80023d0:	42aa      	cmp	r2, r5
 80023d2:	41ad      	sbcs	r5, r5
 80023d4:	426d      	negs	r5, r5
 80023d6:	1964      	adds	r4, r4, r5
 80023d8:	0015      	movs	r5, r2
 80023da:	01e3      	lsls	r3, r4, #7
 80023dc:	d504      	bpl.n	80023e8 <__aeabi_dmul+0x288>
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	4a46      	ldr	r2, [pc, #280]	; (80024fc <__aeabi_dmul+0x39c>)
 80023e2:	00c9      	lsls	r1, r1, #3
 80023e4:	4014      	ands	r4, r2
 80023e6:	4461      	add	r1, ip
 80023e8:	4a45      	ldr	r2, [pc, #276]	; (8002500 <__aeabi_dmul+0x3a0>)
 80023ea:	4291      	cmp	r1, r2
 80023ec:	dd00      	ble.n	80023f0 <__aeabi_dmul+0x290>
 80023ee:	e726      	b.n	800223e <__aeabi_dmul+0xde>
 80023f0:	0762      	lsls	r2, r4, #29
 80023f2:	08ed      	lsrs	r5, r5, #3
 80023f4:	0264      	lsls	r4, r4, #9
 80023f6:	0549      	lsls	r1, r1, #21
 80023f8:	4315      	orrs	r5, r2
 80023fa:	0b24      	lsrs	r4, r4, #12
 80023fc:	0d4a      	lsrs	r2, r1, #21
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002400:	4652      	mov	r2, sl
 8002402:	4332      	orrs	r2, r6
 8002404:	d100      	bne.n	8002408 <__aeabi_dmul+0x2a8>
 8002406:	e07f      	b.n	8002508 <__aeabi_dmul+0x3a8>
 8002408:	2e00      	cmp	r6, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dmul+0x2ae>
 800240c:	e0dc      	b.n	80025c8 <__aeabi_dmul+0x468>
 800240e:	0030      	movs	r0, r6
 8002410:	f000 fe58 	bl	80030c4 <__clzsi2>
 8002414:	0002      	movs	r2, r0
 8002416:	3a0b      	subs	r2, #11
 8002418:	231d      	movs	r3, #29
 800241a:	0001      	movs	r1, r0
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	4652      	mov	r2, sl
 8002420:	3908      	subs	r1, #8
 8002422:	40da      	lsrs	r2, r3
 8002424:	408e      	lsls	r6, r1
 8002426:	4316      	orrs	r6, r2
 8002428:	4652      	mov	r2, sl
 800242a:	408a      	lsls	r2, r1
 800242c:	9b00      	ldr	r3, [sp, #0]
 800242e:	4935      	ldr	r1, [pc, #212]	; (8002504 <__aeabi_dmul+0x3a4>)
 8002430:	1a18      	subs	r0, r3, r0
 8002432:	0003      	movs	r3, r0
 8002434:	468c      	mov	ip, r1
 8002436:	4463      	add	r3, ip
 8002438:	2000      	movs	r0, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	e6d3      	b.n	80021e6 <__aeabi_dmul+0x86>
 800243e:	0025      	movs	r5, r4
 8002440:	4305      	orrs	r5, r0
 8002442:	d04a      	beq.n	80024da <__aeabi_dmul+0x37a>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d100      	bne.n	800244a <__aeabi_dmul+0x2ea>
 8002448:	e0b0      	b.n	80025ac <__aeabi_dmul+0x44c>
 800244a:	0020      	movs	r0, r4
 800244c:	f000 fe3a 	bl	80030c4 <__clzsi2>
 8002450:	0001      	movs	r1, r0
 8002452:	0002      	movs	r2, r0
 8002454:	390b      	subs	r1, #11
 8002456:	231d      	movs	r3, #29
 8002458:	0010      	movs	r0, r2
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	0031      	movs	r1, r6
 800245e:	0035      	movs	r5, r6
 8002460:	3808      	subs	r0, #8
 8002462:	4084      	lsls	r4, r0
 8002464:	40d9      	lsrs	r1, r3
 8002466:	4085      	lsls	r5, r0
 8002468:	430c      	orrs	r4, r1
 800246a:	4826      	ldr	r0, [pc, #152]	; (8002504 <__aeabi_dmul+0x3a4>)
 800246c:	1a83      	subs	r3, r0, r2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	4699      	mov	r9, r3
 8002474:	469b      	mov	fp, r3
 8002476:	e697      	b.n	80021a8 <__aeabi_dmul+0x48>
 8002478:	0005      	movs	r5, r0
 800247a:	4325      	orrs	r5, r4
 800247c:	d126      	bne.n	80024cc <__aeabi_dmul+0x36c>
 800247e:	2208      	movs	r2, #8
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	2400      	movs	r4, #0
 8002486:	4691      	mov	r9, r2
 8002488:	469b      	mov	fp, r3
 800248a:	e68d      	b.n	80021a8 <__aeabi_dmul+0x48>
 800248c:	4652      	mov	r2, sl
 800248e:	9b00      	ldr	r3, [sp, #0]
 8002490:	4332      	orrs	r2, r6
 8002492:	d110      	bne.n	80024b6 <__aeabi_dmul+0x356>
 8002494:	4915      	ldr	r1, [pc, #84]	; (80024ec <__aeabi_dmul+0x38c>)
 8002496:	2600      	movs	r6, #0
 8002498:	468c      	mov	ip, r1
 800249a:	4463      	add	r3, ip
 800249c:	4649      	mov	r1, r9
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2302      	movs	r3, #2
 80024a2:	4319      	orrs	r1, r3
 80024a4:	4689      	mov	r9, r1
 80024a6:	2002      	movs	r0, #2
 80024a8:	e69d      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024aa:	465b      	mov	r3, fp
 80024ac:	9701      	str	r7, [sp, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d000      	beq.n	80024b4 <__aeabi_dmul+0x354>
 80024b2:	e6ad      	b.n	8002210 <__aeabi_dmul+0xb0>
 80024b4:	e6c3      	b.n	800223e <__aeabi_dmul+0xde>
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <__aeabi_dmul+0x38c>)
 80024b8:	2003      	movs	r0, #3
 80024ba:	4694      	mov	ip, r2
 80024bc:	4463      	add	r3, ip
 80024be:	464a      	mov	r2, r9
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2303      	movs	r3, #3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	4691      	mov	r9, r2
 80024c8:	4652      	mov	r2, sl
 80024ca:	e68c      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024cc:	220c      	movs	r2, #12
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2303      	movs	r3, #3
 80024d2:	0005      	movs	r5, r0
 80024d4:	4691      	mov	r9, r2
 80024d6:	469b      	mov	fp, r3
 80024d8:	e666      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024da:	2304      	movs	r3, #4
 80024dc:	4699      	mov	r9, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	2400      	movs	r4, #0
 80024e6:	469b      	mov	fp, r3
 80024e8:	e65e      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	000007ff 	.word	0x000007ff
 80024f0:	fffffc01 	.word	0xfffffc01
 80024f4:	0800e118 	.word	0x0800e118
 80024f8:	000003ff 	.word	0x000003ff
 80024fc:	feffffff 	.word	0xfeffffff
 8002500:	000007fe 	.word	0x000007fe
 8002504:	fffffc0d 	.word	0xfffffc0d
 8002508:	4649      	mov	r1, r9
 800250a:	2301      	movs	r3, #1
 800250c:	4319      	orrs	r1, r3
 800250e:	4689      	mov	r9, r1
 8002510:	2600      	movs	r6, #0
 8002512:	2001      	movs	r0, #1
 8002514:	e667      	b.n	80021e6 <__aeabi_dmul+0x86>
 8002516:	2300      	movs	r3, #0
 8002518:	2480      	movs	r4, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <__aeabi_dmul+0x4cc>)
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	0324      	lsls	r4, r4, #12
 8002522:	e67e      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002524:	2001      	movs	r0, #1
 8002526:	1a40      	subs	r0, r0, r1
 8002528:	2838      	cmp	r0, #56	; 0x38
 800252a:	dd00      	ble.n	800252e <__aeabi_dmul+0x3ce>
 800252c:	e676      	b.n	800221c <__aeabi_dmul+0xbc>
 800252e:	281f      	cmp	r0, #31
 8002530:	dd5b      	ble.n	80025ea <__aeabi_dmul+0x48a>
 8002532:	221f      	movs	r2, #31
 8002534:	0023      	movs	r3, r4
 8002536:	4252      	negs	r2, r2
 8002538:	1a51      	subs	r1, r2, r1
 800253a:	40cb      	lsrs	r3, r1
 800253c:	0019      	movs	r1, r3
 800253e:	2820      	cmp	r0, #32
 8002540:	d003      	beq.n	800254a <__aeabi_dmul+0x3ea>
 8002542:	4a3b      	ldr	r2, [pc, #236]	; (8002630 <__aeabi_dmul+0x4d0>)
 8002544:	4462      	add	r2, ip
 8002546:	4094      	lsls	r4, r2
 8002548:	4325      	orrs	r5, r4
 800254a:	1e6a      	subs	r2, r5, #1
 800254c:	4195      	sbcs	r5, r2
 800254e:	002a      	movs	r2, r5
 8002550:	430a      	orrs	r2, r1
 8002552:	2107      	movs	r1, #7
 8002554:	000d      	movs	r5, r1
 8002556:	2400      	movs	r4, #0
 8002558:	4015      	ands	r5, r2
 800255a:	4211      	tst	r1, r2
 800255c:	d05b      	beq.n	8002616 <__aeabi_dmul+0x4b6>
 800255e:	210f      	movs	r1, #15
 8002560:	2400      	movs	r4, #0
 8002562:	4011      	ands	r1, r2
 8002564:	2904      	cmp	r1, #4
 8002566:	d053      	beq.n	8002610 <__aeabi_dmul+0x4b0>
 8002568:	1d11      	adds	r1, r2, #4
 800256a:	4291      	cmp	r1, r2
 800256c:	4192      	sbcs	r2, r2
 800256e:	4252      	negs	r2, r2
 8002570:	18a4      	adds	r4, r4, r2
 8002572:	000a      	movs	r2, r1
 8002574:	0223      	lsls	r3, r4, #8
 8002576:	d54b      	bpl.n	8002610 <__aeabi_dmul+0x4b0>
 8002578:	2201      	movs	r2, #1
 800257a:	2400      	movs	r4, #0
 800257c:	2500      	movs	r5, #0
 800257e:	e650      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	031b      	lsls	r3, r3, #12
 8002584:	421c      	tst	r4, r3
 8002586:	d009      	beq.n	800259c <__aeabi_dmul+0x43c>
 8002588:	421e      	tst	r6, r3
 800258a:	d107      	bne.n	800259c <__aeabi_dmul+0x43c>
 800258c:	4333      	orrs	r3, r6
 800258e:	031c      	lsls	r4, r3, #12
 8002590:	4643      	mov	r3, r8
 8002592:	0015      	movs	r5, r2
 8002594:	0b24      	lsrs	r4, r4, #12
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <__aeabi_dmul+0x4cc>)
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	e642      	b.n	8002222 <__aeabi_dmul+0xc2>
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0312      	lsls	r2, r2, #12
 80025a0:	4314      	orrs	r4, r2
 80025a2:	0324      	lsls	r4, r4, #12
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <__aeabi_dmul+0x4cc>)
 80025a6:	0b24      	lsrs	r4, r4, #12
 80025a8:	9701      	str	r7, [sp, #4]
 80025aa:	e63a      	b.n	8002222 <__aeabi_dmul+0xc2>
 80025ac:	f000 fd8a 	bl	80030c4 <__clzsi2>
 80025b0:	0001      	movs	r1, r0
 80025b2:	0002      	movs	r2, r0
 80025b4:	3115      	adds	r1, #21
 80025b6:	3220      	adds	r2, #32
 80025b8:	291c      	cmp	r1, #28
 80025ba:	dc00      	bgt.n	80025be <__aeabi_dmul+0x45e>
 80025bc:	e74b      	b.n	8002456 <__aeabi_dmul+0x2f6>
 80025be:	0034      	movs	r4, r6
 80025c0:	3808      	subs	r0, #8
 80025c2:	2500      	movs	r5, #0
 80025c4:	4084      	lsls	r4, r0
 80025c6:	e750      	b.n	800246a <__aeabi_dmul+0x30a>
 80025c8:	f000 fd7c 	bl	80030c4 <__clzsi2>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	3215      	adds	r2, #21
 80025d2:	3020      	adds	r0, #32
 80025d4:	2a1c      	cmp	r2, #28
 80025d6:	dc00      	bgt.n	80025da <__aeabi_dmul+0x47a>
 80025d8:	e71e      	b.n	8002418 <__aeabi_dmul+0x2b8>
 80025da:	4656      	mov	r6, sl
 80025dc:	3b08      	subs	r3, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	409e      	lsls	r6, r3
 80025e2:	e723      	b.n	800242c <__aeabi_dmul+0x2cc>
 80025e4:	9b00      	ldr	r3, [sp, #0]
 80025e6:	469c      	mov	ip, r3
 80025e8:	e6e6      	b.n	80023b8 <__aeabi_dmul+0x258>
 80025ea:	4912      	ldr	r1, [pc, #72]	; (8002634 <__aeabi_dmul+0x4d4>)
 80025ec:	0022      	movs	r2, r4
 80025ee:	4461      	add	r1, ip
 80025f0:	002e      	movs	r6, r5
 80025f2:	408d      	lsls	r5, r1
 80025f4:	408a      	lsls	r2, r1
 80025f6:	40c6      	lsrs	r6, r0
 80025f8:	1e69      	subs	r1, r5, #1
 80025fa:	418d      	sbcs	r5, r1
 80025fc:	4332      	orrs	r2, r6
 80025fe:	432a      	orrs	r2, r5
 8002600:	40c4      	lsrs	r4, r0
 8002602:	0753      	lsls	r3, r2, #29
 8002604:	d0b6      	beq.n	8002574 <__aeabi_dmul+0x414>
 8002606:	210f      	movs	r1, #15
 8002608:	4011      	ands	r1, r2
 800260a:	2904      	cmp	r1, #4
 800260c:	d1ac      	bne.n	8002568 <__aeabi_dmul+0x408>
 800260e:	e7b1      	b.n	8002574 <__aeabi_dmul+0x414>
 8002610:	0765      	lsls	r5, r4, #29
 8002612:	0264      	lsls	r4, r4, #9
 8002614:	0b24      	lsrs	r4, r4, #12
 8002616:	08d2      	lsrs	r2, r2, #3
 8002618:	4315      	orrs	r5, r2
 800261a:	2200      	movs	r2, #0
 800261c:	e601      	b.n	8002222 <__aeabi_dmul+0xc2>
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0312      	lsls	r2, r2, #12
 8002622:	4314      	orrs	r4, r2
 8002624:	0324      	lsls	r4, r4, #12
 8002626:	4a01      	ldr	r2, [pc, #4]	; (800262c <__aeabi_dmul+0x4cc>)
 8002628:	0b24      	lsrs	r4, r4, #12
 800262a:	e5fa      	b.n	8002222 <__aeabi_dmul+0xc2>
 800262c:	000007ff 	.word	0x000007ff
 8002630:	0000043e 	.word	0x0000043e
 8002634:	0000041e 	.word	0x0000041e

08002638 <__aeabi_dsub>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	4657      	mov	r7, sl
 800263c:	464e      	mov	r6, r9
 800263e:	4645      	mov	r5, r8
 8002640:	46de      	mov	lr, fp
 8002642:	b5e0      	push	{r5, r6, r7, lr}
 8002644:	001e      	movs	r6, r3
 8002646:	0017      	movs	r7, r2
 8002648:	004a      	lsls	r2, r1, #1
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0d52      	lsrs	r2, r2, #21
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	4690      	mov	r8, r2
 8002652:	0f42      	lsrs	r2, r0, #29
 8002654:	431a      	orrs	r2, r3
 8002656:	0fcd      	lsrs	r5, r1, #31
 8002658:	4ccd      	ldr	r4, [pc, #820]	; (8002990 <__aeabi_dsub+0x358>)
 800265a:	0331      	lsls	r1, r6, #12
 800265c:	00c3      	lsls	r3, r0, #3
 800265e:	4694      	mov	ip, r2
 8002660:	0070      	lsls	r0, r6, #1
 8002662:	0f7a      	lsrs	r2, r7, #29
 8002664:	0a49      	lsrs	r1, r1, #9
 8002666:	00ff      	lsls	r7, r7, #3
 8002668:	469a      	mov	sl, r3
 800266a:	46b9      	mov	r9, r7
 800266c:	0d40      	lsrs	r0, r0, #21
 800266e:	0ff6      	lsrs	r6, r6, #31
 8002670:	4311      	orrs	r1, r2
 8002672:	42a0      	cmp	r0, r4
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x40>
 8002676:	e0b1      	b.n	80027dc <__aeabi_dsub+0x1a4>
 8002678:	2201      	movs	r2, #1
 800267a:	4056      	eors	r6, r2
 800267c:	46b3      	mov	fp, r6
 800267e:	42b5      	cmp	r5, r6
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x4c>
 8002682:	e088      	b.n	8002796 <__aeabi_dsub+0x15e>
 8002684:	4642      	mov	r2, r8
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	2a00      	cmp	r2, #0
 800268a:	dc00      	bgt.n	800268e <__aeabi_dsub+0x56>
 800268c:	e0ae      	b.n	80027ec <__aeabi_dsub+0x1b4>
 800268e:	2800      	cmp	r0, #0
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x5c>
 8002692:	e0c1      	b.n	8002818 <__aeabi_dsub+0x1e0>
 8002694:	48be      	ldr	r0, [pc, #760]	; (8002990 <__aeabi_dsub+0x358>)
 8002696:	4580      	cmp	r8, r0
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x64>
 800269a:	e151      	b.n	8002940 <__aeabi_dsub+0x308>
 800269c:	2080      	movs	r0, #128	; 0x80
 800269e:	0400      	lsls	r0, r0, #16
 80026a0:	4301      	orrs	r1, r0
 80026a2:	2a38      	cmp	r2, #56	; 0x38
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dsub+0x70>
 80026a6:	e17b      	b.n	80029a0 <__aeabi_dsub+0x368>
 80026a8:	2a1f      	cmp	r2, #31
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dsub+0x76>
 80026ac:	e1ee      	b.n	8002a8c <__aeabi_dsub+0x454>
 80026ae:	2020      	movs	r0, #32
 80026b0:	003e      	movs	r6, r7
 80026b2:	1a80      	subs	r0, r0, r2
 80026b4:	000c      	movs	r4, r1
 80026b6:	40d6      	lsrs	r6, r2
 80026b8:	40d1      	lsrs	r1, r2
 80026ba:	4087      	lsls	r7, r0
 80026bc:	4662      	mov	r2, ip
 80026be:	4084      	lsls	r4, r0
 80026c0:	1a52      	subs	r2, r2, r1
 80026c2:	1e78      	subs	r0, r7, #1
 80026c4:	4187      	sbcs	r7, r0
 80026c6:	4694      	mov	ip, r2
 80026c8:	4334      	orrs	r4, r6
 80026ca:	4327      	orrs	r7, r4
 80026cc:	1bdc      	subs	r4, r3, r7
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	419b      	sbcs	r3, r3
 80026d2:	4662      	mov	r2, ip
 80026d4:	425b      	negs	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4699      	mov	r9, r3
 80026da:	464b      	mov	r3, r9
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0xaa>
 80026e0:	e118      	b.n	8002914 <__aeabi_dsub+0x2dc>
 80026e2:	464b      	mov	r3, r9
 80026e4:	0258      	lsls	r0, r3, #9
 80026e6:	0a43      	lsrs	r3, r0, #9
 80026e8:	4699      	mov	r9, r3
 80026ea:	464b      	mov	r3, r9
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0xba>
 80026f0:	e137      	b.n	8002962 <__aeabi_dsub+0x32a>
 80026f2:	4648      	mov	r0, r9
 80026f4:	f000 fce6 	bl	80030c4 <__clzsi2>
 80026f8:	0001      	movs	r1, r0
 80026fa:	3908      	subs	r1, #8
 80026fc:	2320      	movs	r3, #32
 80026fe:	0022      	movs	r2, r4
 8002700:	4648      	mov	r0, r9
 8002702:	1a5b      	subs	r3, r3, r1
 8002704:	40da      	lsrs	r2, r3
 8002706:	4088      	lsls	r0, r1
 8002708:	408c      	lsls	r4, r1
 800270a:	4643      	mov	r3, r8
 800270c:	4310      	orrs	r0, r2
 800270e:	4588      	cmp	r8, r1
 8002710:	dd00      	ble.n	8002714 <__aeabi_dsub+0xdc>
 8002712:	e136      	b.n	8002982 <__aeabi_dsub+0x34a>
 8002714:	1ac9      	subs	r1, r1, r3
 8002716:	1c4b      	adds	r3, r1, #1
 8002718:	2b1f      	cmp	r3, #31
 800271a:	dd00      	ble.n	800271e <__aeabi_dsub+0xe6>
 800271c:	e0ea      	b.n	80028f4 <__aeabi_dsub+0x2bc>
 800271e:	2220      	movs	r2, #32
 8002720:	0026      	movs	r6, r4
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	0001      	movs	r1, r0
 8002726:	4094      	lsls	r4, r2
 8002728:	40de      	lsrs	r6, r3
 800272a:	40d8      	lsrs	r0, r3
 800272c:	2300      	movs	r3, #0
 800272e:	4091      	lsls	r1, r2
 8002730:	1e62      	subs	r2, r4, #1
 8002732:	4194      	sbcs	r4, r2
 8002734:	4681      	mov	r9, r0
 8002736:	4698      	mov	r8, r3
 8002738:	4331      	orrs	r1, r6
 800273a:	430c      	orrs	r4, r1
 800273c:	0763      	lsls	r3, r4, #29
 800273e:	d009      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002740:	230f      	movs	r3, #15
 8002742:	4023      	ands	r3, r4
 8002744:	2b04      	cmp	r3, #4
 8002746:	d005      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002748:	1d23      	adds	r3, r4, #4
 800274a:	42a3      	cmp	r3, r4
 800274c:	41a4      	sbcs	r4, r4
 800274e:	4264      	negs	r4, r4
 8002750:	44a1      	add	r9, r4
 8002752:	001c      	movs	r4, r3
 8002754:	464b      	mov	r3, r9
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	d400      	bmi.n	800275c <__aeabi_dsub+0x124>
 800275a:	e0de      	b.n	800291a <__aeabi_dsub+0x2e2>
 800275c:	4641      	mov	r1, r8
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <__aeabi_dsub+0x358>)
 8002760:	3101      	adds	r1, #1
 8002762:	4299      	cmp	r1, r3
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x130>
 8002766:	e0e7      	b.n	8002938 <__aeabi_dsub+0x300>
 8002768:	464b      	mov	r3, r9
 800276a:	488a      	ldr	r0, [pc, #552]	; (8002994 <__aeabi_dsub+0x35c>)
 800276c:	08e4      	lsrs	r4, r4, #3
 800276e:	4003      	ands	r3, r0
 8002770:	0018      	movs	r0, r3
 8002772:	0549      	lsls	r1, r1, #21
 8002774:	075b      	lsls	r3, r3, #29
 8002776:	0240      	lsls	r0, r0, #9
 8002778:	4323      	orrs	r3, r4
 800277a:	0d4a      	lsrs	r2, r1, #21
 800277c:	0b04      	lsrs	r4, r0, #12
 800277e:	0512      	lsls	r2, r2, #20
 8002780:	07ed      	lsls	r5, r5, #31
 8002782:	4322      	orrs	r2, r4
 8002784:	432a      	orrs	r2, r5
 8002786:	0018      	movs	r0, r3
 8002788:	0011      	movs	r1, r2
 800278a:	bcf0      	pop	{r4, r5, r6, r7}
 800278c:	46bb      	mov	fp, r7
 800278e:	46b2      	mov	sl, r6
 8002790:	46a9      	mov	r9, r5
 8002792:	46a0      	mov	r8, r4
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002796:	4642      	mov	r2, r8
 8002798:	1a12      	subs	r2, r2, r0
 800279a:	2a00      	cmp	r2, #0
 800279c:	dd52      	ble.n	8002844 <__aeabi_dsub+0x20c>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x16c>
 80027a2:	e09c      	b.n	80028de <__aeabi_dsub+0x2a6>
 80027a4:	45a0      	cmp	r8, r4
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x172>
 80027a8:	e0ca      	b.n	8002940 <__aeabi_dsub+0x308>
 80027aa:	2080      	movs	r0, #128	; 0x80
 80027ac:	0400      	lsls	r0, r0, #16
 80027ae:	4301      	orrs	r1, r0
 80027b0:	2a38      	cmp	r2, #56	; 0x38
 80027b2:	dd00      	ble.n	80027b6 <__aeabi_dsub+0x17e>
 80027b4:	e149      	b.n	8002a4a <__aeabi_dsub+0x412>
 80027b6:	2a1f      	cmp	r2, #31
 80027b8:	dc00      	bgt.n	80027bc <__aeabi_dsub+0x184>
 80027ba:	e197      	b.n	8002aec <__aeabi_dsub+0x4b4>
 80027bc:	0010      	movs	r0, r2
 80027be:	000e      	movs	r6, r1
 80027c0:	3820      	subs	r0, #32
 80027c2:	40c6      	lsrs	r6, r0
 80027c4:	2a20      	cmp	r2, #32
 80027c6:	d004      	beq.n	80027d2 <__aeabi_dsub+0x19a>
 80027c8:	2040      	movs	r0, #64	; 0x40
 80027ca:	1a82      	subs	r2, r0, r2
 80027cc:	4091      	lsls	r1, r2
 80027ce:	430f      	orrs	r7, r1
 80027d0:	46b9      	mov	r9, r7
 80027d2:	464c      	mov	r4, r9
 80027d4:	1e62      	subs	r2, r4, #1
 80027d6:	4194      	sbcs	r4, r2
 80027d8:	4334      	orrs	r4, r6
 80027da:	e13a      	b.n	8002a52 <__aeabi_dsub+0x41a>
 80027dc:	000a      	movs	r2, r1
 80027de:	433a      	orrs	r2, r7
 80027e0:	d028      	beq.n	8002834 <__aeabi_dsub+0x1fc>
 80027e2:	46b3      	mov	fp, r6
 80027e4:	42b5      	cmp	r5, r6
 80027e6:	d02b      	beq.n	8002840 <__aeabi_dsub+0x208>
 80027e8:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <__aeabi_dsub+0x360>)
 80027ea:	4442      	add	r2, r8
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d05d      	beq.n	80028ac <__aeabi_dsub+0x274>
 80027f0:	4642      	mov	r2, r8
 80027f2:	4644      	mov	r4, r8
 80027f4:	1a82      	subs	r2, r0, r2
 80027f6:	2c00      	cmp	r4, #0
 80027f8:	d000      	beq.n	80027fc <__aeabi_dsub+0x1c4>
 80027fa:	e0f5      	b.n	80029e8 <__aeabi_dsub+0x3b0>
 80027fc:	4665      	mov	r5, ip
 80027fe:	431d      	orrs	r5, r3
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x1cc>
 8002802:	e19c      	b.n	8002b3e <__aeabi_dsub+0x506>
 8002804:	1e55      	subs	r5, r2, #1
 8002806:	2a01      	cmp	r2, #1
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x1d4>
 800280a:	e1fb      	b.n	8002c04 <__aeabi_dsub+0x5cc>
 800280c:	4c60      	ldr	r4, [pc, #384]	; (8002990 <__aeabi_dsub+0x358>)
 800280e:	42a2      	cmp	r2, r4
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x1dc>
 8002812:	e1bd      	b.n	8002b90 <__aeabi_dsub+0x558>
 8002814:	002a      	movs	r2, r5
 8002816:	e0f0      	b.n	80029fa <__aeabi_dsub+0x3c2>
 8002818:	0008      	movs	r0, r1
 800281a:	4338      	orrs	r0, r7
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x1e8>
 800281e:	e0c3      	b.n	80029a8 <__aeabi_dsub+0x370>
 8002820:	1e50      	subs	r0, r2, #1
 8002822:	2a01      	cmp	r2, #1
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x1f0>
 8002826:	e1a8      	b.n	8002b7a <__aeabi_dsub+0x542>
 8002828:	4c59      	ldr	r4, [pc, #356]	; (8002990 <__aeabi_dsub+0x358>)
 800282a:	42a2      	cmp	r2, r4
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x1f8>
 800282e:	e087      	b.n	8002940 <__aeabi_dsub+0x308>
 8002830:	0002      	movs	r2, r0
 8002832:	e736      	b.n	80026a2 <__aeabi_dsub+0x6a>
 8002834:	2201      	movs	r2, #1
 8002836:	4056      	eors	r6, r2
 8002838:	46b3      	mov	fp, r6
 800283a:	42b5      	cmp	r5, r6
 800283c:	d000      	beq.n	8002840 <__aeabi_dsub+0x208>
 800283e:	e721      	b.n	8002684 <__aeabi_dsub+0x4c>
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <__aeabi_dsub+0x360>)
 8002842:	4442      	add	r2, r8
 8002844:	2a00      	cmp	r2, #0
 8002846:	d100      	bne.n	800284a <__aeabi_dsub+0x212>
 8002848:	e0b5      	b.n	80029b6 <__aeabi_dsub+0x37e>
 800284a:	4642      	mov	r2, r8
 800284c:	4644      	mov	r4, r8
 800284e:	1a82      	subs	r2, r0, r2
 8002850:	2c00      	cmp	r4, #0
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x21e>
 8002854:	e138      	b.n	8002ac8 <__aeabi_dsub+0x490>
 8002856:	4e4e      	ldr	r6, [pc, #312]	; (8002990 <__aeabi_dsub+0x358>)
 8002858:	42b0      	cmp	r0, r6
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x226>
 800285c:	e1de      	b.n	8002c1c <__aeabi_dsub+0x5e4>
 800285e:	2680      	movs	r6, #128	; 0x80
 8002860:	4664      	mov	r4, ip
 8002862:	0436      	lsls	r6, r6, #16
 8002864:	4334      	orrs	r4, r6
 8002866:	46a4      	mov	ip, r4
 8002868:	2a38      	cmp	r2, #56	; 0x38
 800286a:	dd00      	ble.n	800286e <__aeabi_dsub+0x236>
 800286c:	e196      	b.n	8002b9c <__aeabi_dsub+0x564>
 800286e:	2a1f      	cmp	r2, #31
 8002870:	dd00      	ble.n	8002874 <__aeabi_dsub+0x23c>
 8002872:	e224      	b.n	8002cbe <__aeabi_dsub+0x686>
 8002874:	2620      	movs	r6, #32
 8002876:	1ab4      	subs	r4, r6, r2
 8002878:	46a2      	mov	sl, r4
 800287a:	4664      	mov	r4, ip
 800287c:	4656      	mov	r6, sl
 800287e:	40b4      	lsls	r4, r6
 8002880:	46a1      	mov	r9, r4
 8002882:	001c      	movs	r4, r3
 8002884:	464e      	mov	r6, r9
 8002886:	40d4      	lsrs	r4, r2
 8002888:	4326      	orrs	r6, r4
 800288a:	0034      	movs	r4, r6
 800288c:	4656      	mov	r6, sl
 800288e:	40b3      	lsls	r3, r6
 8002890:	1e5e      	subs	r6, r3, #1
 8002892:	41b3      	sbcs	r3, r6
 8002894:	431c      	orrs	r4, r3
 8002896:	4663      	mov	r3, ip
 8002898:	40d3      	lsrs	r3, r2
 800289a:	18c9      	adds	r1, r1, r3
 800289c:	19e4      	adds	r4, r4, r7
 800289e:	42bc      	cmp	r4, r7
 80028a0:	41bf      	sbcs	r7, r7
 80028a2:	427f      	negs	r7, r7
 80028a4:	46b9      	mov	r9, r7
 80028a6:	4680      	mov	r8, r0
 80028a8:	4489      	add	r9, r1
 80028aa:	e0d8      	b.n	8002a5e <__aeabi_dsub+0x426>
 80028ac:	4640      	mov	r0, r8
 80028ae:	4c3b      	ldr	r4, [pc, #236]	; (800299c <__aeabi_dsub+0x364>)
 80028b0:	3001      	adds	r0, #1
 80028b2:	4220      	tst	r0, r4
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x280>
 80028b6:	e0b4      	b.n	8002a22 <__aeabi_dsub+0x3ea>
 80028b8:	4640      	mov	r0, r8
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d000      	beq.n	80028c0 <__aeabi_dsub+0x288>
 80028be:	e144      	b.n	8002b4a <__aeabi_dsub+0x512>
 80028c0:	4660      	mov	r0, ip
 80028c2:	4318      	orrs	r0, r3
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x290>
 80028c6:	e190      	b.n	8002bea <__aeabi_dsub+0x5b2>
 80028c8:	0008      	movs	r0, r1
 80028ca:	4338      	orrs	r0, r7
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x298>
 80028ce:	e1aa      	b.n	8002c26 <__aeabi_dsub+0x5ee>
 80028d0:	4661      	mov	r1, ip
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	0749      	lsls	r1, r1, #29
 80028d6:	430b      	orrs	r3, r1
 80028d8:	4661      	mov	r1, ip
 80028da:	08cc      	lsrs	r4, r1, #3
 80028dc:	e027      	b.n	800292e <__aeabi_dsub+0x2f6>
 80028de:	0008      	movs	r0, r1
 80028e0:	4338      	orrs	r0, r7
 80028e2:	d061      	beq.n	80029a8 <__aeabi_dsub+0x370>
 80028e4:	1e50      	subs	r0, r2, #1
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x2b4>
 80028ea:	e139      	b.n	8002b60 <__aeabi_dsub+0x528>
 80028ec:	42a2      	cmp	r2, r4
 80028ee:	d027      	beq.n	8002940 <__aeabi_dsub+0x308>
 80028f0:	0002      	movs	r2, r0
 80028f2:	e75d      	b.n	80027b0 <__aeabi_dsub+0x178>
 80028f4:	0002      	movs	r2, r0
 80028f6:	391f      	subs	r1, #31
 80028f8:	40ca      	lsrs	r2, r1
 80028fa:	0011      	movs	r1, r2
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d003      	beq.n	8002908 <__aeabi_dsub+0x2d0>
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4098      	lsls	r0, r3
 8002906:	4304      	orrs	r4, r0
 8002908:	1e63      	subs	r3, r4, #1
 800290a:	419c      	sbcs	r4, r3
 800290c:	2300      	movs	r3, #0
 800290e:	4699      	mov	r9, r3
 8002910:	4698      	mov	r8, r3
 8002912:	430c      	orrs	r4, r1
 8002914:	0763      	lsls	r3, r4, #29
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x2e2>
 8002918:	e712      	b.n	8002740 <__aeabi_dsub+0x108>
 800291a:	464b      	mov	r3, r9
 800291c:	464a      	mov	r2, r9
 800291e:	08e4      	lsrs	r4, r4, #3
 8002920:	075b      	lsls	r3, r3, #29
 8002922:	4323      	orrs	r3, r4
 8002924:	08d4      	lsrs	r4, r2, #3
 8002926:	4642      	mov	r2, r8
 8002928:	4919      	ldr	r1, [pc, #100]	; (8002990 <__aeabi_dsub+0x358>)
 800292a:	428a      	cmp	r2, r1
 800292c:	d00e      	beq.n	800294c <__aeabi_dsub+0x314>
 800292e:	0324      	lsls	r4, r4, #12
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	0b24      	lsrs	r4, r4, #12
 8002934:	0d52      	lsrs	r2, r2, #21
 8002936:	e722      	b.n	800277e <__aeabi_dsub+0x146>
 8002938:	000a      	movs	r2, r1
 800293a:	2400      	movs	r4, #0
 800293c:	2300      	movs	r3, #0
 800293e:	e71e      	b.n	800277e <__aeabi_dsub+0x146>
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	4662      	mov	r2, ip
 8002944:	0752      	lsls	r2, r2, #29
 8002946:	4313      	orrs	r3, r2
 8002948:	4662      	mov	r2, ip
 800294a:	08d4      	lsrs	r4, r2, #3
 800294c:	001a      	movs	r2, r3
 800294e:	4322      	orrs	r2, r4
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x31c>
 8002952:	e1fc      	b.n	8002d4e <__aeabi_dsub+0x716>
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0312      	lsls	r2, r2, #12
 8002958:	4314      	orrs	r4, r2
 800295a:	0324      	lsls	r4, r4, #12
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <__aeabi_dsub+0x358>)
 800295e:	0b24      	lsrs	r4, r4, #12
 8002960:	e70d      	b.n	800277e <__aeabi_dsub+0x146>
 8002962:	0020      	movs	r0, r4
 8002964:	f000 fbae 	bl	80030c4 <__clzsi2>
 8002968:	0001      	movs	r1, r0
 800296a:	3118      	adds	r1, #24
 800296c:	291f      	cmp	r1, #31
 800296e:	dc00      	bgt.n	8002972 <__aeabi_dsub+0x33a>
 8002970:	e6c4      	b.n	80026fc <__aeabi_dsub+0xc4>
 8002972:	3808      	subs	r0, #8
 8002974:	4084      	lsls	r4, r0
 8002976:	4643      	mov	r3, r8
 8002978:	0020      	movs	r0, r4
 800297a:	2400      	movs	r4, #0
 800297c:	4588      	cmp	r8, r1
 800297e:	dc00      	bgt.n	8002982 <__aeabi_dsub+0x34a>
 8002980:	e6c8      	b.n	8002714 <__aeabi_dsub+0xdc>
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__aeabi_dsub+0x35c>)
 8002984:	1a5b      	subs	r3, r3, r1
 8002986:	4010      	ands	r0, r2
 8002988:	4698      	mov	r8, r3
 800298a:	4681      	mov	r9, r0
 800298c:	e6d6      	b.n	800273c <__aeabi_dsub+0x104>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	000007ff 	.word	0x000007ff
 8002994:	ff7fffff 	.word	0xff7fffff
 8002998:	fffff801 	.word	0xfffff801
 800299c:	000007fe 	.word	0x000007fe
 80029a0:	430f      	orrs	r7, r1
 80029a2:	1e7a      	subs	r2, r7, #1
 80029a4:	4197      	sbcs	r7, r2
 80029a6:	e691      	b.n	80026cc <__aeabi_dsub+0x94>
 80029a8:	4661      	mov	r1, ip
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	0749      	lsls	r1, r1, #29
 80029ae:	430b      	orrs	r3, r1
 80029b0:	4661      	mov	r1, ip
 80029b2:	08cc      	lsrs	r4, r1, #3
 80029b4:	e7b8      	b.n	8002928 <__aeabi_dsub+0x2f0>
 80029b6:	4640      	mov	r0, r8
 80029b8:	4cd3      	ldr	r4, [pc, #844]	; (8002d08 <__aeabi_dsub+0x6d0>)
 80029ba:	3001      	adds	r0, #1
 80029bc:	4220      	tst	r0, r4
 80029be:	d000      	beq.n	80029c2 <__aeabi_dsub+0x38a>
 80029c0:	e0a2      	b.n	8002b08 <__aeabi_dsub+0x4d0>
 80029c2:	4640      	mov	r0, r8
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d000      	beq.n	80029ca <__aeabi_dsub+0x392>
 80029c8:	e101      	b.n	8002bce <__aeabi_dsub+0x596>
 80029ca:	4660      	mov	r0, ip
 80029cc:	4318      	orrs	r0, r3
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x39a>
 80029d0:	e15e      	b.n	8002c90 <__aeabi_dsub+0x658>
 80029d2:	0008      	movs	r0, r1
 80029d4:	4338      	orrs	r0, r7
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3a2>
 80029d8:	e15f      	b.n	8002c9a <__aeabi_dsub+0x662>
 80029da:	4661      	mov	r1, ip
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	0749      	lsls	r1, r1, #29
 80029e0:	430b      	orrs	r3, r1
 80029e2:	4661      	mov	r1, ip
 80029e4:	08cc      	lsrs	r4, r1, #3
 80029e6:	e7a2      	b.n	800292e <__aeabi_dsub+0x2f6>
 80029e8:	4dc8      	ldr	r5, [pc, #800]	; (8002d0c <__aeabi_dsub+0x6d4>)
 80029ea:	42a8      	cmp	r0, r5
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x3b8>
 80029ee:	e0cf      	b.n	8002b90 <__aeabi_dsub+0x558>
 80029f0:	2580      	movs	r5, #128	; 0x80
 80029f2:	4664      	mov	r4, ip
 80029f4:	042d      	lsls	r5, r5, #16
 80029f6:	432c      	orrs	r4, r5
 80029f8:	46a4      	mov	ip, r4
 80029fa:	2a38      	cmp	r2, #56	; 0x38
 80029fc:	dc56      	bgt.n	8002aac <__aeabi_dsub+0x474>
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dd00      	ble.n	8002a04 <__aeabi_dsub+0x3cc>
 8002a02:	e0d1      	b.n	8002ba8 <__aeabi_dsub+0x570>
 8002a04:	2520      	movs	r5, #32
 8002a06:	001e      	movs	r6, r3
 8002a08:	1aad      	subs	r5, r5, r2
 8002a0a:	4664      	mov	r4, ip
 8002a0c:	40ab      	lsls	r3, r5
 8002a0e:	40ac      	lsls	r4, r5
 8002a10:	40d6      	lsrs	r6, r2
 8002a12:	1e5d      	subs	r5, r3, #1
 8002a14:	41ab      	sbcs	r3, r5
 8002a16:	4334      	orrs	r4, r6
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	4664      	mov	r4, ip
 8002a1c:	40d4      	lsrs	r4, r2
 8002a1e:	1b09      	subs	r1, r1, r4
 8002a20:	e049      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002a22:	4660      	mov	r0, ip
 8002a24:	1bdc      	subs	r4, r3, r7
 8002a26:	1a46      	subs	r6, r0, r1
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	4180      	sbcs	r0, r0
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	4681      	mov	r9, r0
 8002a30:	0030      	movs	r0, r6
 8002a32:	464e      	mov	r6, r9
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	4681      	mov	r9, r0
 8002a38:	0200      	lsls	r0, r0, #8
 8002a3a:	d476      	bmi.n	8002b2a <__aeabi_dsub+0x4f2>
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	d000      	beq.n	8002a44 <__aeabi_dsub+0x40c>
 8002a42:	e652      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002a44:	2400      	movs	r4, #0
 8002a46:	2500      	movs	r5, #0
 8002a48:	e771      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002a4a:	4339      	orrs	r1, r7
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	1e62      	subs	r2, r4, #1
 8002a50:	4194      	sbcs	r4, r2
 8002a52:	18e4      	adds	r4, r4, r3
 8002a54:	429c      	cmp	r4, r3
 8002a56:	419b      	sbcs	r3, r3
 8002a58:	425b      	negs	r3, r3
 8002a5a:	4463      	add	r3, ip
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	464b      	mov	r3, r9
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	d400      	bmi.n	8002a66 <__aeabi_dsub+0x42e>
 8002a64:	e756      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002a66:	2301      	movs	r3, #1
 8002a68:	469c      	mov	ip, r3
 8002a6a:	4ba8      	ldr	r3, [pc, #672]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002a6c:	44e0      	add	r8, ip
 8002a6e:	4598      	cmp	r8, r3
 8002a70:	d038      	beq.n	8002ae4 <__aeabi_dsub+0x4ac>
 8002a72:	464b      	mov	r3, r9
 8002a74:	48a6      	ldr	r0, [pc, #664]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	4003      	ands	r3, r0
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	0863      	lsrs	r3, r4, #1
 8002a7e:	4014      	ands	r4, r2
 8002a80:	431c      	orrs	r4, r3
 8002a82:	07c3      	lsls	r3, r0, #31
 8002a84:	431c      	orrs	r4, r3
 8002a86:	0843      	lsrs	r3, r0, #1
 8002a88:	4699      	mov	r9, r3
 8002a8a:	e657      	b.n	800273c <__aeabi_dsub+0x104>
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	000e      	movs	r6, r1
 8002a90:	3820      	subs	r0, #32
 8002a92:	40c6      	lsrs	r6, r0
 8002a94:	2a20      	cmp	r2, #32
 8002a96:	d004      	beq.n	8002aa2 <__aeabi_dsub+0x46a>
 8002a98:	2040      	movs	r0, #64	; 0x40
 8002a9a:	1a82      	subs	r2, r0, r2
 8002a9c:	4091      	lsls	r1, r2
 8002a9e:	430f      	orrs	r7, r1
 8002aa0:	46b9      	mov	r9, r7
 8002aa2:	464f      	mov	r7, r9
 8002aa4:	1e7a      	subs	r2, r7, #1
 8002aa6:	4197      	sbcs	r7, r2
 8002aa8:	4337      	orrs	r7, r6
 8002aaa:	e60f      	b.n	80026cc <__aeabi_dsub+0x94>
 8002aac:	4662      	mov	r2, ip
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	4193      	sbcs	r3, r2
 8002ab6:	1afc      	subs	r4, r7, r3
 8002ab8:	42a7      	cmp	r7, r4
 8002aba:	41bf      	sbcs	r7, r7
 8002abc:	427f      	negs	r7, r7
 8002abe:	1bcb      	subs	r3, r1, r7
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	465d      	mov	r5, fp
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	e608      	b.n	80026da <__aeabi_dsub+0xa2>
 8002ac8:	4666      	mov	r6, ip
 8002aca:	431e      	orrs	r6, r3
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x498>
 8002ace:	e0be      	b.n	8002c4e <__aeabi_dsub+0x616>
 8002ad0:	1e56      	subs	r6, r2, #1
 8002ad2:	2a01      	cmp	r2, #1
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x4a0>
 8002ad6:	e109      	b.n	8002cec <__aeabi_dsub+0x6b4>
 8002ad8:	4c8c      	ldr	r4, [pc, #560]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x4a8>
 8002ade:	e119      	b.n	8002d14 <__aeabi_dsub+0x6dc>
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	e6c1      	b.n	8002868 <__aeabi_dsub+0x230>
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	2400      	movs	r4, #0
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e648      	b.n	800277e <__aeabi_dsub+0x146>
 8002aec:	2020      	movs	r0, #32
 8002aee:	000c      	movs	r4, r1
 8002af0:	1a80      	subs	r0, r0, r2
 8002af2:	003e      	movs	r6, r7
 8002af4:	4087      	lsls	r7, r0
 8002af6:	4084      	lsls	r4, r0
 8002af8:	40d6      	lsrs	r6, r2
 8002afa:	1e78      	subs	r0, r7, #1
 8002afc:	4187      	sbcs	r7, r0
 8002afe:	40d1      	lsrs	r1, r2
 8002b00:	4334      	orrs	r4, r6
 8002b02:	433c      	orrs	r4, r7
 8002b04:	448c      	add	ip, r1
 8002b06:	e7a4      	b.n	8002a52 <__aeabi_dsub+0x41a>
 8002b08:	4a80      	ldr	r2, [pc, #512]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x4d8>
 8002b0e:	e0e9      	b.n	8002ce4 <__aeabi_dsub+0x6ac>
 8002b10:	19df      	adds	r7, r3, r7
 8002b12:	429f      	cmp	r7, r3
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	4461      	add	r1, ip
 8002b18:	425b      	negs	r3, r3
 8002b1a:	18c9      	adds	r1, r1, r3
 8002b1c:	07cc      	lsls	r4, r1, #31
 8002b1e:	087f      	lsrs	r7, r7, #1
 8002b20:	084b      	lsrs	r3, r1, #1
 8002b22:	4699      	mov	r9, r3
 8002b24:	4680      	mov	r8, r0
 8002b26:	433c      	orrs	r4, r7
 8002b28:	e6f4      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b2a:	1afc      	subs	r4, r7, r3
 8002b2c:	42a7      	cmp	r7, r4
 8002b2e:	41bf      	sbcs	r7, r7
 8002b30:	4663      	mov	r3, ip
 8002b32:	427f      	negs	r7, r7
 8002b34:	1ac9      	subs	r1, r1, r3
 8002b36:	1bcb      	subs	r3, r1, r7
 8002b38:	4699      	mov	r9, r3
 8002b3a:	465d      	mov	r5, fp
 8002b3c:	e5d5      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002b3e:	08ff      	lsrs	r7, r7, #3
 8002b40:	074b      	lsls	r3, r1, #29
 8002b42:	465d      	mov	r5, fp
 8002b44:	433b      	orrs	r3, r7
 8002b46:	08cc      	lsrs	r4, r1, #3
 8002b48:	e6ee      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002b4a:	4662      	mov	r2, ip
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_dsub+0x51a>
 8002b50:	e082      	b.n	8002c58 <__aeabi_dsub+0x620>
 8002b52:	000b      	movs	r3, r1
 8002b54:	433b      	orrs	r3, r7
 8002b56:	d11b      	bne.n	8002b90 <__aeabi_dsub+0x558>
 8002b58:	2480      	movs	r4, #128	; 0x80
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	0324      	lsls	r4, r4, #12
 8002b5e:	e6f9      	b.n	8002954 <__aeabi_dsub+0x31c>
 8002b60:	19dc      	adds	r4, r3, r7
 8002b62:	429c      	cmp	r4, r3
 8002b64:	419b      	sbcs	r3, r3
 8002b66:	4461      	add	r1, ip
 8002b68:	4689      	mov	r9, r1
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	4499      	add	r9, r3
 8002b6e:	464b      	mov	r3, r9
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	d444      	bmi.n	8002bfe <__aeabi_dsub+0x5c6>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4698      	mov	r8, r3
 8002b78:	e6cc      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b7a:	1bdc      	subs	r4, r3, r7
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	42a3      	cmp	r3, r4
 8002b80:	419b      	sbcs	r3, r3
 8002b82:	1a51      	subs	r1, r2, r1
 8002b84:	425b      	negs	r3, r3
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	4699      	mov	r9, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4698      	mov	r8, r3
 8002b8e:	e5a4      	b.n	80026da <__aeabi_dsub+0xa2>
 8002b90:	08ff      	lsrs	r7, r7, #3
 8002b92:	074b      	lsls	r3, r1, #29
 8002b94:	465d      	mov	r5, fp
 8002b96:	433b      	orrs	r3, r7
 8002b98:	08cc      	lsrs	r4, r1, #3
 8002b9a:	e6d7      	b.n	800294c <__aeabi_dsub+0x314>
 8002b9c:	4662      	mov	r2, ip
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	0014      	movs	r4, r2
 8002ba2:	1e63      	subs	r3, r4, #1
 8002ba4:	419c      	sbcs	r4, r3
 8002ba6:	e679      	b.n	800289c <__aeabi_dsub+0x264>
 8002ba8:	0015      	movs	r5, r2
 8002baa:	4664      	mov	r4, ip
 8002bac:	3d20      	subs	r5, #32
 8002bae:	40ec      	lsrs	r4, r5
 8002bb0:	46a0      	mov	r8, r4
 8002bb2:	2a20      	cmp	r2, #32
 8002bb4:	d005      	beq.n	8002bc2 <__aeabi_dsub+0x58a>
 8002bb6:	2540      	movs	r5, #64	; 0x40
 8002bb8:	4664      	mov	r4, ip
 8002bba:	1aaa      	subs	r2, r5, r2
 8002bbc:	4094      	lsls	r4, r2
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	469a      	mov	sl, r3
 8002bc2:	4654      	mov	r4, sl
 8002bc4:	1e63      	subs	r3, r4, #1
 8002bc6:	419c      	sbcs	r4, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	4323      	orrs	r3, r4
 8002bcc:	e773      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	d023      	beq.n	8002c1c <__aeabi_dsub+0x5e4>
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	433a      	orrs	r2, r7
 8002bd8:	d000      	beq.n	8002bdc <__aeabi_dsub+0x5a4>
 8002bda:	e0a0      	b.n	8002d1e <__aeabi_dsub+0x6e6>
 8002bdc:	4662      	mov	r2, ip
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	0752      	lsls	r2, r2, #29
 8002be2:	4313      	orrs	r3, r2
 8002be4:	4662      	mov	r2, ip
 8002be6:	08d4      	lsrs	r4, r2, #3
 8002be8:	e6b0      	b.n	800294c <__aeabi_dsub+0x314>
 8002bea:	000b      	movs	r3, r1
 8002bec:	433b      	orrs	r3, r7
 8002bee:	d100      	bne.n	8002bf2 <__aeabi_dsub+0x5ba>
 8002bf0:	e728      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002bf2:	08ff      	lsrs	r7, r7, #3
 8002bf4:	074b      	lsls	r3, r1, #29
 8002bf6:	465d      	mov	r5, fp
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	08cc      	lsrs	r4, r1, #3
 8002bfc:	e697      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	4698      	mov	r8, r3
 8002c02:	e736      	b.n	8002a72 <__aeabi_dsub+0x43a>
 8002c04:	1afc      	subs	r4, r7, r3
 8002c06:	42a7      	cmp	r7, r4
 8002c08:	41bf      	sbcs	r7, r7
 8002c0a:	4663      	mov	r3, ip
 8002c0c:	427f      	negs	r7, r7
 8002c0e:	1ac9      	subs	r1, r1, r3
 8002c10:	1bcb      	subs	r3, r1, r7
 8002c12:	4699      	mov	r9, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	465d      	mov	r5, fp
 8002c18:	4698      	mov	r8, r3
 8002c1a:	e55e      	b.n	80026da <__aeabi_dsub+0xa2>
 8002c1c:	074b      	lsls	r3, r1, #29
 8002c1e:	08ff      	lsrs	r7, r7, #3
 8002c20:	433b      	orrs	r3, r7
 8002c22:	08cc      	lsrs	r4, r1, #3
 8002c24:	e692      	b.n	800294c <__aeabi_dsub+0x314>
 8002c26:	1bdc      	subs	r4, r3, r7
 8002c28:	4660      	mov	r0, ip
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	41b6      	sbcs	r6, r6
 8002c2e:	1a40      	subs	r0, r0, r1
 8002c30:	4276      	negs	r6, r6
 8002c32:	1b80      	subs	r0, r0, r6
 8002c34:	4681      	mov	r9, r0
 8002c36:	0200      	lsls	r0, r0, #8
 8002c38:	d560      	bpl.n	8002cfc <__aeabi_dsub+0x6c4>
 8002c3a:	1afc      	subs	r4, r7, r3
 8002c3c:	42a7      	cmp	r7, r4
 8002c3e:	41bf      	sbcs	r7, r7
 8002c40:	4663      	mov	r3, ip
 8002c42:	427f      	negs	r7, r7
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	1bcb      	subs	r3, r1, r7
 8002c48:	4699      	mov	r9, r3
 8002c4a:	465d      	mov	r5, fp
 8002c4c:	e576      	b.n	800273c <__aeabi_dsub+0x104>
 8002c4e:	08ff      	lsrs	r7, r7, #3
 8002c50:	074b      	lsls	r3, r1, #29
 8002c52:	433b      	orrs	r3, r7
 8002c54:	08cc      	lsrs	r4, r1, #3
 8002c56:	e667      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002c58:	000a      	movs	r2, r1
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	433a      	orrs	r2, r7
 8002c5e:	d100      	bne.n	8002c62 <__aeabi_dsub+0x62a>
 8002c60:	e66f      	b.n	8002942 <__aeabi_dsub+0x30a>
 8002c62:	4662      	mov	r2, ip
 8002c64:	0752      	lsls	r2, r2, #29
 8002c66:	4313      	orrs	r3, r2
 8002c68:	4662      	mov	r2, ip
 8002c6a:	08d4      	lsrs	r4, r2, #3
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	0312      	lsls	r2, r2, #12
 8002c70:	4214      	tst	r4, r2
 8002c72:	d007      	beq.n	8002c84 <__aeabi_dsub+0x64c>
 8002c74:	08c8      	lsrs	r0, r1, #3
 8002c76:	4210      	tst	r0, r2
 8002c78:	d104      	bne.n	8002c84 <__aeabi_dsub+0x64c>
 8002c7a:	465d      	mov	r5, fp
 8002c7c:	0004      	movs	r4, r0
 8002c7e:	08fb      	lsrs	r3, r7, #3
 8002c80:	0749      	lsls	r1, r1, #29
 8002c82:	430b      	orrs	r3, r1
 8002c84:	0f5a      	lsrs	r2, r3, #29
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	0752      	lsls	r2, r2, #29
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	e65d      	b.n	800294c <__aeabi_dsub+0x314>
 8002c90:	074b      	lsls	r3, r1, #29
 8002c92:	08ff      	lsrs	r7, r7, #3
 8002c94:	433b      	orrs	r3, r7
 8002c96:	08cc      	lsrs	r4, r1, #3
 8002c98:	e649      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002c9a:	19dc      	adds	r4, r3, r7
 8002c9c:	429c      	cmp	r4, r3
 8002c9e:	419b      	sbcs	r3, r3
 8002ca0:	4461      	add	r1, ip
 8002ca2:	4689      	mov	r9, r1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	4499      	add	r9, r3
 8002ca8:	464b      	mov	r3, r9
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	d400      	bmi.n	8002cb0 <__aeabi_dsub+0x678>
 8002cae:	e631      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cb0:	464a      	mov	r2, r9
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4691      	mov	r9, r2
 8002cba:	4698      	mov	r8, r3
 8002cbc:	e62a      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cbe:	0016      	movs	r6, r2
 8002cc0:	4664      	mov	r4, ip
 8002cc2:	3e20      	subs	r6, #32
 8002cc4:	40f4      	lsrs	r4, r6
 8002cc6:	46a0      	mov	r8, r4
 8002cc8:	2a20      	cmp	r2, #32
 8002cca:	d005      	beq.n	8002cd8 <__aeabi_dsub+0x6a0>
 8002ccc:	2640      	movs	r6, #64	; 0x40
 8002cce:	4664      	mov	r4, ip
 8002cd0:	1ab2      	subs	r2, r6, r2
 8002cd2:	4094      	lsls	r4, r2
 8002cd4:	4323      	orrs	r3, r4
 8002cd6:	469a      	mov	sl, r3
 8002cd8:	4654      	mov	r4, sl
 8002cda:	1e63      	subs	r3, r4, #1
 8002cdc:	419c      	sbcs	r4, r3
 8002cde:	4643      	mov	r3, r8
 8002ce0:	431c      	orrs	r4, r3
 8002ce2:	e5db      	b.n	800289c <__aeabi_dsub+0x264>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e548      	b.n	800277e <__aeabi_dsub+0x146>
 8002cec:	19dc      	adds	r4, r3, r7
 8002cee:	42bc      	cmp	r4, r7
 8002cf0:	41bf      	sbcs	r7, r7
 8002cf2:	4461      	add	r1, ip
 8002cf4:	4689      	mov	r9, r1
 8002cf6:	427f      	negs	r7, r7
 8002cf8:	44b9      	add	r9, r7
 8002cfa:	e738      	b.n	8002b6e <__aeabi_dsub+0x536>
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	d100      	bne.n	8002d04 <__aeabi_dsub+0x6cc>
 8002d02:	e69f      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002d04:	e606      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	000007fe 	.word	0x000007fe
 8002d0c:	000007ff 	.word	0x000007ff
 8002d10:	ff7fffff 	.word	0xff7fffff
 8002d14:	08ff      	lsrs	r7, r7, #3
 8002d16:	074b      	lsls	r3, r1, #29
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	08cc      	lsrs	r4, r1, #3
 8002d1c:	e616      	b.n	800294c <__aeabi_dsub+0x314>
 8002d1e:	4662      	mov	r2, ip
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	0752      	lsls	r2, r2, #29
 8002d24:	4313      	orrs	r3, r2
 8002d26:	4662      	mov	r2, ip
 8002d28:	08d4      	lsrs	r4, r2, #3
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0312      	lsls	r2, r2, #12
 8002d2e:	4214      	tst	r4, r2
 8002d30:	d007      	beq.n	8002d42 <__aeabi_dsub+0x70a>
 8002d32:	08c8      	lsrs	r0, r1, #3
 8002d34:	4210      	tst	r0, r2
 8002d36:	d104      	bne.n	8002d42 <__aeabi_dsub+0x70a>
 8002d38:	465d      	mov	r5, fp
 8002d3a:	0004      	movs	r4, r0
 8002d3c:	08fb      	lsrs	r3, r7, #3
 8002d3e:	0749      	lsls	r1, r1, #29
 8002d40:	430b      	orrs	r3, r1
 8002d42:	0f5a      	lsrs	r2, r3, #29
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	0752      	lsls	r2, r2, #29
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	e5fe      	b.n	800294c <__aeabi_dsub+0x314>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4a01      	ldr	r2, [pc, #4]	; (8002d58 <__aeabi_dsub+0x720>)
 8002d52:	001c      	movs	r4, r3
 8002d54:	e513      	b.n	800277e <__aeabi_dsub+0x146>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	000007ff 	.word	0x000007ff

08002d5c <__aeabi_dcmpun>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	0005      	movs	r5, r0
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d62:	031c      	lsls	r4, r3, #12
 8002d64:	0016      	movs	r6, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	030a      	lsls	r2, r1, #12
 8002d6a:	0049      	lsls	r1, r1, #1
 8002d6c:	0b12      	lsrs	r2, r2, #12
 8002d6e:	0d49      	lsrs	r1, r1, #21
 8002d70:	0b24      	lsrs	r4, r4, #12
 8002d72:	0d5b      	lsrs	r3, r3, #21
 8002d74:	4281      	cmp	r1, r0
 8002d76:	d008      	beq.n	8002d8a <__aeabi_dcmpun+0x2e>
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d80:	0020      	movs	r0, r4
 8002d82:	4330      	orrs	r0, r6
 8002d84:	1e43      	subs	r3, r0, #1
 8002d86:	4198      	sbcs	r0, r3
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	432a      	orrs	r2, r5
 8002d8e:	d1fb      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d90:	e7f2      	b.n	8002d78 <__aeabi_dcmpun+0x1c>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	000007ff 	.word	0x000007ff

08002d98 <__aeabi_d2iz>:
 8002d98:	000a      	movs	r2, r1
 8002d9a:	b530      	push	{r4, r5, lr}
 8002d9c:	4c13      	ldr	r4, [pc, #76]	; (8002dec <__aeabi_d2iz+0x54>)
 8002d9e:	0053      	lsls	r3, r2, #1
 8002da0:	0309      	lsls	r1, r1, #12
 8002da2:	0005      	movs	r5, r0
 8002da4:	0b09      	lsrs	r1, r1, #12
 8002da6:	2000      	movs	r0, #0
 8002da8:	0d5b      	lsrs	r3, r3, #21
 8002daa:	0fd2      	lsrs	r2, r2, #31
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	dd04      	ble.n	8002dba <__aeabi_d2iz+0x22>
 8002db0:	480f      	ldr	r0, [pc, #60]	; (8002df0 <__aeabi_d2iz+0x58>)
 8002db2:	4283      	cmp	r3, r0
 8002db4:	dd02      	ble.n	8002dbc <__aeabi_d2iz+0x24>
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <__aeabi_d2iz+0x5c>)
 8002db8:	18d0      	adds	r0, r2, r3
 8002dba:	bd30      	pop	{r4, r5, pc}
 8002dbc:	2080      	movs	r0, #128	; 0x80
 8002dbe:	0340      	lsls	r0, r0, #13
 8002dc0:	4301      	orrs	r1, r0
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <__aeabi_d2iz+0x60>)
 8002dc4:	1ac0      	subs	r0, r0, r3
 8002dc6:	281f      	cmp	r0, #31
 8002dc8:	dd08      	ble.n	8002ddc <__aeabi_d2iz+0x44>
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <__aeabi_d2iz+0x64>)
 8002dcc:	1ac3      	subs	r3, r0, r3
 8002dce:	40d9      	lsrs	r1, r3
 8002dd0:	000b      	movs	r3, r1
 8002dd2:	4258      	negs	r0, r3
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d1f0      	bne.n	8002dba <__aeabi_d2iz+0x22>
 8002dd8:	0018      	movs	r0, r3
 8002dda:	e7ee      	b.n	8002dba <__aeabi_d2iz+0x22>
 8002ddc:	4c08      	ldr	r4, [pc, #32]	; (8002e00 <__aeabi_d2iz+0x68>)
 8002dde:	40c5      	lsrs	r5, r0
 8002de0:	46a4      	mov	ip, r4
 8002de2:	4463      	add	r3, ip
 8002de4:	4099      	lsls	r1, r3
 8002de6:	000b      	movs	r3, r1
 8002de8:	432b      	orrs	r3, r5
 8002dea:	e7f2      	b.n	8002dd2 <__aeabi_d2iz+0x3a>
 8002dec:	000003fe 	.word	0x000003fe
 8002df0:	0000041d 	.word	0x0000041d
 8002df4:	7fffffff 	.word	0x7fffffff
 8002df8:	00000433 	.word	0x00000433
 8002dfc:	00000413 	.word	0x00000413
 8002e00:	fffffbed 	.word	0xfffffbed

08002e04 <__aeabi_i2d>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d016      	beq.n	8002e38 <__aeabi_i2d+0x34>
 8002e0a:	17c3      	asrs	r3, r0, #31
 8002e0c:	18c5      	adds	r5, r0, r3
 8002e0e:	405d      	eors	r5, r3
 8002e10:	0fc4      	lsrs	r4, r0, #31
 8002e12:	0028      	movs	r0, r5
 8002e14:	f000 f956 	bl	80030c4 <__clzsi2>
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <__aeabi_i2d+0x5c>)
 8002e1a:	1a12      	subs	r2, r2, r0
 8002e1c:	280a      	cmp	r0, #10
 8002e1e:	dc16      	bgt.n	8002e4e <__aeabi_i2d+0x4a>
 8002e20:	0003      	movs	r3, r0
 8002e22:	002e      	movs	r6, r5
 8002e24:	3315      	adds	r3, #21
 8002e26:	409e      	lsls	r6, r3
 8002e28:	230b      	movs	r3, #11
 8002e2a:	1a18      	subs	r0, r3, r0
 8002e2c:	40c5      	lsrs	r5, r0
 8002e2e:	0552      	lsls	r2, r2, #21
 8002e30:	032d      	lsls	r5, r5, #12
 8002e32:	0b2d      	lsrs	r5, r5, #12
 8002e34:	0d53      	lsrs	r3, r2, #21
 8002e36:	e003      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e38:	2400      	movs	r4, #0
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2500      	movs	r5, #0
 8002e3e:	2600      	movs	r6, #0
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	432b      	orrs	r3, r5
 8002e44:	07e4      	lsls	r4, r4, #31
 8002e46:	4323      	orrs	r3, r4
 8002e48:	0030      	movs	r0, r6
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	380b      	subs	r0, #11
 8002e50:	4085      	lsls	r5, r0
 8002e52:	0552      	lsls	r2, r2, #21
 8002e54:	032d      	lsls	r5, r5, #12
 8002e56:	2600      	movs	r6, #0
 8002e58:	0b2d      	lsrs	r5, r5, #12
 8002e5a:	0d53      	lsrs	r3, r2, #21
 8002e5c:	e7f0      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	0000041e 	.word	0x0000041e

08002e64 <__aeabi_ui2d>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	1e04      	subs	r4, r0, #0
 8002e68:	d010      	beq.n	8002e8c <__aeabi_ui2d+0x28>
 8002e6a:	f000 f92b 	bl	80030c4 <__clzsi2>
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <__aeabi_ui2d+0x48>)
 8002e70:	1a1b      	subs	r3, r3, r0
 8002e72:	280a      	cmp	r0, #10
 8002e74:	dc11      	bgt.n	8002e9a <__aeabi_ui2d+0x36>
 8002e76:	220b      	movs	r2, #11
 8002e78:	0021      	movs	r1, r4
 8002e7a:	1a12      	subs	r2, r2, r0
 8002e7c:	40d1      	lsrs	r1, r2
 8002e7e:	3015      	adds	r0, #21
 8002e80:	030a      	lsls	r2, r1, #12
 8002e82:	055b      	lsls	r3, r3, #21
 8002e84:	4084      	lsls	r4, r0
 8002e86:	0b12      	lsrs	r2, r2, #12
 8002e88:	0d5b      	lsrs	r3, r3, #21
 8002e8a:	e001      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	051b      	lsls	r3, r3, #20
 8002e92:	4313      	orrs	r3, r2
 8002e94:	0020      	movs	r0, r4
 8002e96:	0019      	movs	r1, r3
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	0022      	movs	r2, r4
 8002e9c:	380b      	subs	r0, #11
 8002e9e:	4082      	lsls	r2, r0
 8002ea0:	055b      	lsls	r3, r3, #21
 8002ea2:	0312      	lsls	r2, r2, #12
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	0b12      	lsrs	r2, r2, #12
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	e7f1      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002eac:	0000041e 	.word	0x0000041e

08002eb0 <__aeabi_f2d>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	0043      	lsls	r3, r0, #1
 8002eb4:	0246      	lsls	r6, r0, #9
 8002eb6:	0fc4      	lsrs	r4, r0, #31
 8002eb8:	20fe      	movs	r0, #254	; 0xfe
 8002eba:	0e1b      	lsrs	r3, r3, #24
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	0a75      	lsrs	r5, r6, #9
 8002ec0:	4208      	tst	r0, r1
 8002ec2:	d00c      	beq.n	8002ede <__aeabi_f2d+0x2e>
 8002ec4:	22e0      	movs	r2, #224	; 0xe0
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	4694      	mov	ip, r2
 8002eca:	076d      	lsls	r5, r5, #29
 8002ecc:	0b36      	lsrs	r6, r6, #12
 8002ece:	4463      	add	r3, ip
 8002ed0:	051b      	lsls	r3, r3, #20
 8002ed2:	4333      	orrs	r3, r6
 8002ed4:	07e4      	lsls	r4, r4, #31
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	0028      	movs	r0, r5
 8002eda:	0019      	movs	r1, r3
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d114      	bne.n	8002f0c <__aeabi_f2d+0x5c>
 8002ee2:	2d00      	cmp	r5, #0
 8002ee4:	d01b      	beq.n	8002f1e <__aeabi_f2d+0x6e>
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	f000 f8ec 	bl	80030c4 <__clzsi2>
 8002eec:	280a      	cmp	r0, #10
 8002eee:	dc1c      	bgt.n	8002f2a <__aeabi_f2d+0x7a>
 8002ef0:	230b      	movs	r3, #11
 8002ef2:	002e      	movs	r6, r5
 8002ef4:	1a1b      	subs	r3, r3, r0
 8002ef6:	40de      	lsrs	r6, r3
 8002ef8:	0003      	movs	r3, r0
 8002efa:	3315      	adds	r3, #21
 8002efc:	409d      	lsls	r5, r3
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <__aeabi_f2d+0x88>)
 8002f00:	0336      	lsls	r6, r6, #12
 8002f02:	1a12      	subs	r2, r2, r0
 8002f04:	0552      	lsls	r2, r2, #21
 8002f06:	0b36      	lsrs	r6, r6, #12
 8002f08:	0d53      	lsrs	r3, r2, #21
 8002f0a:	e7e1      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f0c:	2d00      	cmp	r5, #0
 8002f0e:	d009      	beq.n	8002f24 <__aeabi_f2d+0x74>
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0b36      	lsrs	r6, r6, #12
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f18:	076d      	lsls	r5, r5, #29
 8002f1a:	4316      	orrs	r6, r2
 8002f1c:	e7d8      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2600      	movs	r6, #0
 8002f22:	e7d5      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f24:	2600      	movs	r6, #0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f28:	e7d2      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	3b0b      	subs	r3, #11
 8002f2e:	409d      	lsls	r5, r3
 8002f30:	002e      	movs	r6, r5
 8002f32:	2500      	movs	r5, #0
 8002f34:	e7e3      	b.n	8002efe <__aeabi_f2d+0x4e>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	00000389 	.word	0x00000389
 8002f3c:	000007ff 	.word	0x000007ff

08002f40 <__aeabi_d2f>:
 8002f40:	0002      	movs	r2, r0
 8002f42:	004b      	lsls	r3, r1, #1
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	030c      	lsls	r4, r1, #12
 8002f4a:	4e3d      	ldr	r6, [pc, #244]	; (8003040 <__aeabi_d2f+0x100>)
 8002f4c:	0a64      	lsrs	r4, r4, #9
 8002f4e:	0f40      	lsrs	r0, r0, #29
 8002f50:	1c5f      	adds	r7, r3, #1
 8002f52:	0fc9      	lsrs	r1, r1, #31
 8002f54:	4304      	orrs	r4, r0
 8002f56:	00d5      	lsls	r5, r2, #3
 8002f58:	4237      	tst	r7, r6
 8002f5a:	d00a      	beq.n	8002f72 <__aeabi_d2f+0x32>
 8002f5c:	4839      	ldr	r0, [pc, #228]	; (8003044 <__aeabi_d2f+0x104>)
 8002f5e:	181e      	adds	r6, r3, r0
 8002f60:	2efe      	cmp	r6, #254	; 0xfe
 8002f62:	dd16      	ble.n	8002f92 <__aeabi_d2f+0x52>
 8002f64:	20ff      	movs	r0, #255	; 0xff
 8002f66:	2400      	movs	r4, #0
 8002f68:	05c0      	lsls	r0, r0, #23
 8002f6a:	4320      	orrs	r0, r4
 8002f6c:	07c9      	lsls	r1, r1, #31
 8002f6e:	4308      	orrs	r0, r1
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <__aeabi_d2f+0x44>
 8002f76:	432c      	orrs	r4, r5
 8002f78:	d026      	beq.n	8002fc8 <__aeabi_d2f+0x88>
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	0192      	lsls	r2, r2, #6
 8002f7e:	0a54      	lsrs	r4, r2, #9
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	e7f1      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f84:	4325      	orrs	r5, r4
 8002f86:	d0ed      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002f88:	2080      	movs	r0, #128	; 0x80
 8002f8a:	03c0      	lsls	r0, r0, #15
 8002f8c:	4304      	orrs	r4, r0
 8002f8e:	20ff      	movs	r0, #255	; 0xff
 8002f90:	e7ea      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f92:	2e00      	cmp	r6, #0
 8002f94:	dd1b      	ble.n	8002fce <__aeabi_d2f+0x8e>
 8002f96:	0192      	lsls	r2, r2, #6
 8002f98:	1e53      	subs	r3, r2, #1
 8002f9a:	419a      	sbcs	r2, r3
 8002f9c:	00e4      	lsls	r4, r4, #3
 8002f9e:	0f6d      	lsrs	r5, r5, #29
 8002fa0:	4322      	orrs	r2, r4
 8002fa2:	432a      	orrs	r2, r5
 8002fa4:	0753      	lsls	r3, r2, #29
 8002fa6:	d048      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fa8:	230f      	movs	r3, #15
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d000      	beq.n	8002fb2 <__aeabi_d2f+0x72>
 8002fb0:	3204      	adds	r2, #4
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	04db      	lsls	r3, r3, #19
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d03f      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fba:	1c70      	adds	r0, r6, #1
 8002fbc:	2efe      	cmp	r6, #254	; 0xfe
 8002fbe:	d0d1      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002fc0:	0192      	lsls	r2, r2, #6
 8002fc2:	0a54      	lsrs	r4, r2, #9
 8002fc4:	b2c0      	uxtb	r0, r0
 8002fc6:	e7cf      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e7cc      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fce:	0032      	movs	r2, r6
 8002fd0:	3217      	adds	r2, #23
 8002fd2:	db22      	blt.n	800301a <__aeabi_d2f+0xda>
 8002fd4:	2080      	movs	r0, #128	; 0x80
 8002fd6:	0400      	lsls	r0, r0, #16
 8002fd8:	4320      	orrs	r0, r4
 8002fda:	241e      	movs	r4, #30
 8002fdc:	1ba4      	subs	r4, r4, r6
 8002fde:	2c1f      	cmp	r4, #31
 8002fe0:	dd1d      	ble.n	800301e <__aeabi_d2f+0xde>
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4252      	negs	r2, r2
 8002fe6:	1b96      	subs	r6, r2, r6
 8002fe8:	0002      	movs	r2, r0
 8002fea:	40f2      	lsrs	r2, r6
 8002fec:	0016      	movs	r6, r2
 8002fee:	2c20      	cmp	r4, #32
 8002ff0:	d004      	beq.n	8002ffc <__aeabi_d2f+0xbc>
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <__aeabi_d2f+0x108>)
 8002ff4:	4694      	mov	ip, r2
 8002ff6:	4463      	add	r3, ip
 8002ff8:	4098      	lsls	r0, r3
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	002a      	movs	r2, r5
 8002ffe:	1e53      	subs	r3, r2, #1
 8003000:	419a      	sbcs	r2, r3
 8003002:	4332      	orrs	r2, r6
 8003004:	2600      	movs	r6, #0
 8003006:	0753      	lsls	r3, r2, #29
 8003008:	d1ce      	bne.n	8002fa8 <__aeabi_d2f+0x68>
 800300a:	2480      	movs	r4, #128	; 0x80
 800300c:	0013      	movs	r3, r2
 800300e:	04e4      	lsls	r4, r4, #19
 8003010:	2001      	movs	r0, #1
 8003012:	4023      	ands	r3, r4
 8003014:	4222      	tst	r2, r4
 8003016:	d1d3      	bne.n	8002fc0 <__aeabi_d2f+0x80>
 8003018:	e7b0      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800301a:	2300      	movs	r3, #0
 800301c:	e7ad      	b.n	8002f7a <__aeabi_d2f+0x3a>
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <__aeabi_d2f+0x10c>)
 8003020:	4694      	mov	ip, r2
 8003022:	002a      	movs	r2, r5
 8003024:	40e2      	lsrs	r2, r4
 8003026:	0014      	movs	r4, r2
 8003028:	002a      	movs	r2, r5
 800302a:	4463      	add	r3, ip
 800302c:	409a      	lsls	r2, r3
 800302e:	4098      	lsls	r0, r3
 8003030:	1e55      	subs	r5, r2, #1
 8003032:	41aa      	sbcs	r2, r5
 8003034:	4302      	orrs	r2, r0
 8003036:	4322      	orrs	r2, r4
 8003038:	e7e4      	b.n	8003004 <__aeabi_d2f+0xc4>
 800303a:	0033      	movs	r3, r6
 800303c:	e79e      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	000007fe 	.word	0x000007fe
 8003044:	fffffc80 	.word	0xfffffc80
 8003048:	fffffca2 	.word	0xfffffca2
 800304c:	fffffc82 	.word	0xfffffc82

08003050 <__aeabi_cfrcmple>:
 8003050:	4684      	mov	ip, r0
 8003052:	0008      	movs	r0, r1
 8003054:	4661      	mov	r1, ip
 8003056:	e7ff      	b.n	8003058 <__aeabi_cfcmpeq>

08003058 <__aeabi_cfcmpeq>:
 8003058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800305a:	f000 f8c9 	bl	80031f0 <__lesf2>
 800305e:	2800      	cmp	r0, #0
 8003060:	d401      	bmi.n	8003066 <__aeabi_cfcmpeq+0xe>
 8003062:	2100      	movs	r1, #0
 8003064:	42c8      	cmn	r0, r1
 8003066:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003068 <__aeabi_fcmpeq>:
 8003068:	b510      	push	{r4, lr}
 800306a:	f000 f855 	bl	8003118 <__eqsf2>
 800306e:	4240      	negs	r0, r0
 8003070:	3001      	adds	r0, #1
 8003072:	bd10      	pop	{r4, pc}

08003074 <__aeabi_fcmplt>:
 8003074:	b510      	push	{r4, lr}
 8003076:	f000 f8bb 	bl	80031f0 <__lesf2>
 800307a:	2800      	cmp	r0, #0
 800307c:	db01      	blt.n	8003082 <__aeabi_fcmplt+0xe>
 800307e:	2000      	movs	r0, #0
 8003080:	bd10      	pop	{r4, pc}
 8003082:	2001      	movs	r0, #1
 8003084:	bd10      	pop	{r4, pc}
 8003086:	46c0      	nop			; (mov r8, r8)

08003088 <__aeabi_fcmple>:
 8003088:	b510      	push	{r4, lr}
 800308a:	f000 f8b1 	bl	80031f0 <__lesf2>
 800308e:	2800      	cmp	r0, #0
 8003090:	dd01      	ble.n	8003096 <__aeabi_fcmple+0xe>
 8003092:	2000      	movs	r0, #0
 8003094:	bd10      	pop	{r4, pc}
 8003096:	2001      	movs	r0, #1
 8003098:	bd10      	pop	{r4, pc}
 800309a:	46c0      	nop			; (mov r8, r8)

0800309c <__aeabi_fcmpgt>:
 800309c:	b510      	push	{r4, lr}
 800309e:	f000 f861 	bl	8003164 <__gesf2>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	dc01      	bgt.n	80030aa <__aeabi_fcmpgt+0xe>
 80030a6:	2000      	movs	r0, #0
 80030a8:	bd10      	pop	{r4, pc}
 80030aa:	2001      	movs	r0, #1
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)

080030b0 <__aeabi_fcmpge>:
 80030b0:	b510      	push	{r4, lr}
 80030b2:	f000 f857 	bl	8003164 <__gesf2>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	da01      	bge.n	80030be <__aeabi_fcmpge+0xe>
 80030ba:	2000      	movs	r0, #0
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	2001      	movs	r0, #1
 80030c0:	bd10      	pop	{r4, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)

080030c4 <__clzsi2>:
 80030c4:	211c      	movs	r1, #28
 80030c6:	2301      	movs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	4298      	cmp	r0, r3
 80030cc:	d301      	bcc.n	80030d2 <__clzsi2+0xe>
 80030ce:	0c00      	lsrs	r0, r0, #16
 80030d0:	3910      	subs	r1, #16
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	4298      	cmp	r0, r3
 80030d6:	d301      	bcc.n	80030dc <__clzsi2+0x18>
 80030d8:	0a00      	lsrs	r0, r0, #8
 80030da:	3908      	subs	r1, #8
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	4298      	cmp	r0, r3
 80030e0:	d301      	bcc.n	80030e6 <__clzsi2+0x22>
 80030e2:	0900      	lsrs	r0, r0, #4
 80030e4:	3904      	subs	r1, #4
 80030e6:	a202      	add	r2, pc, #8	; (adr r2, 80030f0 <__clzsi2+0x2c>)
 80030e8:	5c10      	ldrb	r0, [r2, r0]
 80030ea:	1840      	adds	r0, r0, r1
 80030ec:	4770      	bx	lr
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	02020304 	.word	0x02020304
 80030f4:	01010101 	.word	0x01010101
	...

08003100 <__clzdi2>:
 8003100:	b510      	push	{r4, lr}
 8003102:	2900      	cmp	r1, #0
 8003104:	d103      	bne.n	800310e <__clzdi2+0xe>
 8003106:	f7ff ffdd 	bl	80030c4 <__clzsi2>
 800310a:	3020      	adds	r0, #32
 800310c:	e002      	b.n	8003114 <__clzdi2+0x14>
 800310e:	0008      	movs	r0, r1
 8003110:	f7ff ffd8 	bl	80030c4 <__clzsi2>
 8003114:	bd10      	pop	{r4, pc}
 8003116:	46c0      	nop			; (mov r8, r8)

08003118 <__eqsf2>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	0042      	lsls	r2, r0, #1
 800311c:	0245      	lsls	r5, r0, #9
 800311e:	024e      	lsls	r6, r1, #9
 8003120:	004c      	lsls	r4, r1, #1
 8003122:	0fc3      	lsrs	r3, r0, #31
 8003124:	0a6d      	lsrs	r5, r5, #9
 8003126:	2001      	movs	r0, #1
 8003128:	0e12      	lsrs	r2, r2, #24
 800312a:	0a76      	lsrs	r6, r6, #9
 800312c:	0e24      	lsrs	r4, r4, #24
 800312e:	0fc9      	lsrs	r1, r1, #31
 8003130:	2aff      	cmp	r2, #255	; 0xff
 8003132:	d006      	beq.n	8003142 <__eqsf2+0x2a>
 8003134:	2cff      	cmp	r4, #255	; 0xff
 8003136:	d003      	beq.n	8003140 <__eqsf2+0x28>
 8003138:	42a2      	cmp	r2, r4
 800313a:	d101      	bne.n	8003140 <__eqsf2+0x28>
 800313c:	42b5      	cmp	r5, r6
 800313e:	d006      	beq.n	800314e <__eqsf2+0x36>
 8003140:	bd70      	pop	{r4, r5, r6, pc}
 8003142:	2d00      	cmp	r5, #0
 8003144:	d1fc      	bne.n	8003140 <__eqsf2+0x28>
 8003146:	2cff      	cmp	r4, #255	; 0xff
 8003148:	d1fa      	bne.n	8003140 <__eqsf2+0x28>
 800314a:	2e00      	cmp	r6, #0
 800314c:	d1f8      	bne.n	8003140 <__eqsf2+0x28>
 800314e:	428b      	cmp	r3, r1
 8003150:	d006      	beq.n	8003160 <__eqsf2+0x48>
 8003152:	2001      	movs	r0, #1
 8003154:	2a00      	cmp	r2, #0
 8003156:	d1f3      	bne.n	8003140 <__eqsf2+0x28>
 8003158:	0028      	movs	r0, r5
 800315a:	1e43      	subs	r3, r0, #1
 800315c:	4198      	sbcs	r0, r3
 800315e:	e7ef      	b.n	8003140 <__eqsf2+0x28>
 8003160:	2000      	movs	r0, #0
 8003162:	e7ed      	b.n	8003140 <__eqsf2+0x28>

08003164 <__gesf2>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	0042      	lsls	r2, r0, #1
 8003168:	0245      	lsls	r5, r0, #9
 800316a:	024e      	lsls	r6, r1, #9
 800316c:	004c      	lsls	r4, r1, #1
 800316e:	0fc3      	lsrs	r3, r0, #31
 8003170:	0a6d      	lsrs	r5, r5, #9
 8003172:	0e12      	lsrs	r2, r2, #24
 8003174:	0a76      	lsrs	r6, r6, #9
 8003176:	0e24      	lsrs	r4, r4, #24
 8003178:	0fc8      	lsrs	r0, r1, #31
 800317a:	2aff      	cmp	r2, #255	; 0xff
 800317c:	d01b      	beq.n	80031b6 <__gesf2+0x52>
 800317e:	2cff      	cmp	r4, #255	; 0xff
 8003180:	d00e      	beq.n	80031a0 <__gesf2+0x3c>
 8003182:	2a00      	cmp	r2, #0
 8003184:	d11b      	bne.n	80031be <__gesf2+0x5a>
 8003186:	2c00      	cmp	r4, #0
 8003188:	d101      	bne.n	800318e <__gesf2+0x2a>
 800318a:	2e00      	cmp	r6, #0
 800318c:	d01c      	beq.n	80031c8 <__gesf2+0x64>
 800318e:	2d00      	cmp	r5, #0
 8003190:	d00c      	beq.n	80031ac <__gesf2+0x48>
 8003192:	4283      	cmp	r3, r0
 8003194:	d01c      	beq.n	80031d0 <__gesf2+0x6c>
 8003196:	2102      	movs	r1, #2
 8003198:	1e58      	subs	r0, r3, #1
 800319a:	4008      	ands	r0, r1
 800319c:	3801      	subs	r0, #1
 800319e:	bd70      	pop	{r4, r5, r6, pc}
 80031a0:	2e00      	cmp	r6, #0
 80031a2:	d122      	bne.n	80031ea <__gesf2+0x86>
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	d1f4      	bne.n	8003192 <__gesf2+0x2e>
 80031a8:	2d00      	cmp	r5, #0
 80031aa:	d1f2      	bne.n	8003192 <__gesf2+0x2e>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d1f6      	bne.n	800319e <__gesf2+0x3a>
 80031b0:	2001      	movs	r0, #1
 80031b2:	4240      	negs	r0, r0
 80031b4:	e7f3      	b.n	800319e <__gesf2+0x3a>
 80031b6:	2d00      	cmp	r5, #0
 80031b8:	d117      	bne.n	80031ea <__gesf2+0x86>
 80031ba:	2cff      	cmp	r4, #255	; 0xff
 80031bc:	d0f0      	beq.n	80031a0 <__gesf2+0x3c>
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d1e7      	bne.n	8003192 <__gesf2+0x2e>
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	d1e5      	bne.n	8003192 <__gesf2+0x2e>
 80031c6:	e7e6      	b.n	8003196 <__gesf2+0x32>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2d00      	cmp	r5, #0
 80031cc:	d0e7      	beq.n	800319e <__gesf2+0x3a>
 80031ce:	e7e2      	b.n	8003196 <__gesf2+0x32>
 80031d0:	42a2      	cmp	r2, r4
 80031d2:	dc05      	bgt.n	80031e0 <__gesf2+0x7c>
 80031d4:	dbea      	blt.n	80031ac <__gesf2+0x48>
 80031d6:	42b5      	cmp	r5, r6
 80031d8:	d802      	bhi.n	80031e0 <__gesf2+0x7c>
 80031da:	d3e7      	bcc.n	80031ac <__gesf2+0x48>
 80031dc:	2000      	movs	r0, #0
 80031de:	e7de      	b.n	800319e <__gesf2+0x3a>
 80031e0:	4243      	negs	r3, r0
 80031e2:	4158      	adcs	r0, r3
 80031e4:	0040      	lsls	r0, r0, #1
 80031e6:	3801      	subs	r0, #1
 80031e8:	e7d9      	b.n	800319e <__gesf2+0x3a>
 80031ea:	2002      	movs	r0, #2
 80031ec:	4240      	negs	r0, r0
 80031ee:	e7d6      	b.n	800319e <__gesf2+0x3a>

080031f0 <__lesf2>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	0042      	lsls	r2, r0, #1
 80031f4:	0245      	lsls	r5, r0, #9
 80031f6:	024e      	lsls	r6, r1, #9
 80031f8:	004c      	lsls	r4, r1, #1
 80031fa:	0fc3      	lsrs	r3, r0, #31
 80031fc:	0a6d      	lsrs	r5, r5, #9
 80031fe:	0e12      	lsrs	r2, r2, #24
 8003200:	0a76      	lsrs	r6, r6, #9
 8003202:	0e24      	lsrs	r4, r4, #24
 8003204:	0fc8      	lsrs	r0, r1, #31
 8003206:	2aff      	cmp	r2, #255	; 0xff
 8003208:	d00b      	beq.n	8003222 <__lesf2+0x32>
 800320a:	2cff      	cmp	r4, #255	; 0xff
 800320c:	d00d      	beq.n	800322a <__lesf2+0x3a>
 800320e:	2a00      	cmp	r2, #0
 8003210:	d11f      	bne.n	8003252 <__lesf2+0x62>
 8003212:	2c00      	cmp	r4, #0
 8003214:	d116      	bne.n	8003244 <__lesf2+0x54>
 8003216:	2e00      	cmp	r6, #0
 8003218:	d114      	bne.n	8003244 <__lesf2+0x54>
 800321a:	2000      	movs	r0, #0
 800321c:	2d00      	cmp	r5, #0
 800321e:	d010      	beq.n	8003242 <__lesf2+0x52>
 8003220:	e009      	b.n	8003236 <__lesf2+0x46>
 8003222:	2d00      	cmp	r5, #0
 8003224:	d10c      	bne.n	8003240 <__lesf2+0x50>
 8003226:	2cff      	cmp	r4, #255	; 0xff
 8003228:	d113      	bne.n	8003252 <__lesf2+0x62>
 800322a:	2e00      	cmp	r6, #0
 800322c:	d108      	bne.n	8003240 <__lesf2+0x50>
 800322e:	2a00      	cmp	r2, #0
 8003230:	d008      	beq.n	8003244 <__lesf2+0x54>
 8003232:	4283      	cmp	r3, r0
 8003234:	d012      	beq.n	800325c <__lesf2+0x6c>
 8003236:	2102      	movs	r1, #2
 8003238:	1e58      	subs	r0, r3, #1
 800323a:	4008      	ands	r0, r1
 800323c:	3801      	subs	r0, #1
 800323e:	e000      	b.n	8003242 <__lesf2+0x52>
 8003240:	2002      	movs	r0, #2
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	2d00      	cmp	r5, #0
 8003246:	d1f4      	bne.n	8003232 <__lesf2+0x42>
 8003248:	2800      	cmp	r0, #0
 800324a:	d1fa      	bne.n	8003242 <__lesf2+0x52>
 800324c:	2001      	movs	r0, #1
 800324e:	4240      	negs	r0, r0
 8003250:	e7f7      	b.n	8003242 <__lesf2+0x52>
 8003252:	2c00      	cmp	r4, #0
 8003254:	d1ed      	bne.n	8003232 <__lesf2+0x42>
 8003256:	2e00      	cmp	r6, #0
 8003258:	d1eb      	bne.n	8003232 <__lesf2+0x42>
 800325a:	e7ec      	b.n	8003236 <__lesf2+0x46>
 800325c:	42a2      	cmp	r2, r4
 800325e:	dc05      	bgt.n	800326c <__lesf2+0x7c>
 8003260:	dbf2      	blt.n	8003248 <__lesf2+0x58>
 8003262:	42b5      	cmp	r5, r6
 8003264:	d802      	bhi.n	800326c <__lesf2+0x7c>
 8003266:	d3ef      	bcc.n	8003248 <__lesf2+0x58>
 8003268:	2000      	movs	r0, #0
 800326a:	e7ea      	b.n	8003242 <__lesf2+0x52>
 800326c:	4243      	negs	r3, r0
 800326e:	4158      	adcs	r0, r3
 8003270:	0040      	lsls	r0, r0, #1
 8003272:	3801      	subs	r0, #1
 8003274:	e7e5      	b.n	8003242 <__lesf2+0x52>
 8003276:	46c0      	nop			; (mov r8, r8)

08003278 <SimpleKalmanFilter>:
#include "SimpleKalmanFilter.h"
#include <math.h>


void SimpleKalmanFilter(Kalman_t *Kalman, float mea_e, float est_e, float q)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
	Kalman->_err_measure=mea_e;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	601a      	str	r2, [r3, #0]
	Kalman->_err_est=est_e;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	605a      	str	r2, [r3, #4]
	Kalman->_q = q;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bd80      	pop	{r7, pc}

080032a0 <updateEstimate>:

uint16_t updateEstimate(Kalman_t *Kalman, float mea)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
	Kalman->_kalman_gain = Kalman->_err_est/(Kalman->_err_est + Kalman->_err_measure);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685c      	ldr	r4, [r3, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	1c19      	adds	r1, r3, #0
 80032b8:	1c10      	adds	r0, r2, #0
 80032ba:	f7fd fa27 	bl	800070c <__aeabi_fadd>
 80032be:	1c03      	adds	r3, r0, #0
 80032c0:	1c19      	adds	r1, r3, #0
 80032c2:	1c20      	adds	r0, r4, #0
 80032c4:	f7fd fbc0 	bl	8000a48 <__aeabi_fdiv>
 80032c8:	1c03      	adds	r3, r0, #0
 80032ca:	1c1a      	adds	r2, r3, #0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	615a      	str	r2, [r3, #20]
	Kalman->_curr_est = Kalman->_last_est + Kalman->_kalman_gain * (mea - Kalman->_last_est);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	691c      	ldr	r4, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	695d      	ldr	r5, [r3, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	1c19      	adds	r1, r3, #0
 80032de:	68b8      	ldr	r0, [r7, #8]
 80032e0:	f7fd fdf0 	bl	8000ec4 <__aeabi_fsub>
 80032e4:	1c03      	adds	r3, r0, #0
 80032e6:	1c19      	adds	r1, r3, #0
 80032e8:	1c28      	adds	r0, r5, #0
 80032ea:	f7fd fcc5 	bl	8000c78 <__aeabi_fmul>
 80032ee:	1c03      	adds	r3, r0, #0
 80032f0:	1c19      	adds	r1, r3, #0
 80032f2:	1c20      	adds	r0, r4, #0
 80032f4:	f7fd fa0a 	bl	800070c <__aeabi_fadd>
 80032f8:	1c03      	adds	r3, r0, #0
 80032fa:	1c1a      	adds	r2, r3, #0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	60da      	str	r2, [r3, #12]
	Kalman->_err_est =  (1.0 - Kalman->_kalman_gain)*Kalman->_err_est + fabs(Kalman->_last_est-Kalman->_curr_est)*Kalman->_q;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	1c18      	adds	r0, r3, #0
 8003306:	f7ff fdd3 	bl	8002eb0 <__aeabi_f2d>
 800330a:	0002      	movs	r2, r0
 800330c:	000b      	movs	r3, r1
 800330e:	2000      	movs	r0, #0
 8003310:	4927      	ldr	r1, [pc, #156]	; (80033b0 <updateEstimate+0x110>)
 8003312:	f7ff f991 	bl	8002638 <__aeabi_dsub>
 8003316:	0002      	movs	r2, r0
 8003318:	000b      	movs	r3, r1
 800331a:	0014      	movs	r4, r2
 800331c:	001d      	movs	r5, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	1c18      	adds	r0, r3, #0
 8003324:	f7ff fdc4 	bl	8002eb0 <__aeabi_f2d>
 8003328:	0002      	movs	r2, r0
 800332a:	000b      	movs	r3, r1
 800332c:	0020      	movs	r0, r4
 800332e:	0029      	movs	r1, r5
 8003330:	f7fe ff16 	bl	8002160 <__aeabi_dmul>
 8003334:	0002      	movs	r2, r0
 8003336:	000b      	movs	r3, r1
 8003338:	603a      	str	r2, [r7, #0]
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	1c19      	adds	r1, r3, #0
 8003346:	1c10      	adds	r0, r2, #0
 8003348:	f7fd fdbc 	bl	8000ec4 <__aeabi_fsub>
 800334c:	1c03      	adds	r3, r0, #0
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	1c18      	adds	r0, r3, #0
 8003354:	f7ff fdac 	bl	8002eb0 <__aeabi_f2d>
 8003358:	0004      	movs	r4, r0
 800335a:	000d      	movs	r5, r1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	1c18      	adds	r0, r3, #0
 8003362:	f7ff fda5 	bl	8002eb0 <__aeabi_f2d>
 8003366:	0002      	movs	r2, r0
 8003368:	000b      	movs	r3, r1
 800336a:	0020      	movs	r0, r4
 800336c:	0029      	movs	r1, r5
 800336e:	f7fe fef7 	bl	8002160 <__aeabi_dmul>
 8003372:	0002      	movs	r2, r0
 8003374:	000b      	movs	r3, r1
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	f7fd ffb3 	bl	80012e4 <__aeabi_dadd>
 800337e:	0002      	movs	r2, r0
 8003380:	000b      	movs	r3, r1
 8003382:	0010      	movs	r0, r2
 8003384:	0019      	movs	r1, r3
 8003386:	f7ff fddb 	bl	8002f40 <__aeabi_d2f>
 800338a:	1c02      	adds	r2, r0, #0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
	Kalman->_last_est=Kalman->_curr_est;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	611a      	str	r2, [r3, #16]

  return Kalman->_curr_est;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	1c18      	adds	r0, r3, #0
 800339e:	f7fd f8d1 	bl	8000544 <__aeabi_f2uiz>
 80033a2:	0003      	movs	r3, r0
 80033a4:	b29b      	uxth	r3, r3
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bdb0      	pop	{r4, r5, r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	3ff00000 	.word	0x3ff00000

080033b4 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033ba:	003b      	movs	r3, r7
 80033bc:	0018      	movs	r0, r3
 80033be:	2308      	movs	r3, #8
 80033c0:	001a      	movs	r2, r3
 80033c2:	2100      	movs	r1, #0
 80033c4:	f007 fde0 	bl	800af88 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <MX_ADC_Init+0xd0>)
 80033ca:	4a2f      	ldr	r2, [pc, #188]	; (8003488 <MX_ADC_Init+0xd4>)
 80033cc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = ENABLE;
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <MX_ADC_Init+0xd0>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80033d4:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <MX_ADC_Init+0xd0>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <MX_ADC_Init+0xd0>)
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	645a      	str	r2, [r3, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80033e0:	4b28      	ldr	r3, [pc, #160]	; (8003484 <MX_ADC_Init+0xd0>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	649a      	str	r2, [r3, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80033e6:	4b27      	ldr	r3, [pc, #156]	; (8003484 <MX_ADC_Init+0xd0>)
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	05d2      	lsls	r2, r2, #23
 80033ec:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <MX_ADC_Init+0xd0>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80033f4:	4b23      	ldr	r3, [pc, #140]	; (8003484 <MX_ADC_Init+0xd0>)
 80033f6:	2207      	movs	r2, #7
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <MX_ADC_Init+0xd0>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003400:	4b20      	ldr	r3, [pc, #128]	; (8003484 <MX_ADC_Init+0xd0>)
 8003402:	2200      	movs	r2, #0
 8003404:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <MX_ADC_Init+0xd0>)
 8003408:	2220      	movs	r2, #32
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <MX_ADC_Init+0xd0>)
 8003410:	2221      	movs	r2, #33	; 0x21
 8003412:	2100      	movs	r1, #0
 8003414:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <MX_ADC_Init+0xd0>)
 8003418:	2200      	movs	r2, #0
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <MX_ADC_Init+0xd0>)
 800341e:	22c2      	movs	r2, #194	; 0xc2
 8003420:	32ff      	adds	r2, #255	; 0xff
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003424:	4b17      	ldr	r3, [pc, #92]	; (8003484 <MX_ADC_Init+0xd0>)
 8003426:	222c      	movs	r2, #44	; 0x2c
 8003428:	2101      	movs	r1, #1
 800342a:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <MX_ADC_Init+0xd0>)
 800342e:	2204      	movs	r2, #4
 8003430:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <MX_ADC_Init+0xd0>)
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <MX_ADC_Init+0xd0>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <MX_ADC_Init+0xd0>)
 8003440:	2200      	movs	r2, #0
 8003442:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <MX_ADC_Init+0xd0>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <MX_ADC_Init+0xd0>)
 800344c:	0018      	movs	r0, r3
 800344e:	f002 fa49 	bl	80058e4 <HAL_ADC_Init>
 8003452:	1e03      	subs	r3, r0, #0
 8003454:	d001      	beq.n	800345a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003456:	f000 fc7b 	bl	8003d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800345a:	003b      	movs	r3, r7
 800345c:	4a0b      	ldr	r2, [pc, #44]	; (800348c <MX_ADC_Init+0xd8>)
 800345e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003460:	003b      	movs	r3, r7
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	0152      	lsls	r2, r2, #5
 8003466:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003468:	003a      	movs	r2, r7
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <MX_ADC_Init+0xd0>)
 800346c:	0011      	movs	r1, r2
 800346e:	0018      	movs	r0, r3
 8003470:	f002 fc46 	bl	8005d00 <HAL_ADC_ConfigChannel>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d001      	beq.n	800347c <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 8003478:	f000 fc6a 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}
 8003484:	200001f8 	.word	0x200001f8
 8003488:	40012400 	.word	0x40012400
 800348c:	04000002 	.word	0x04000002

08003490 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	240c      	movs	r4, #12
 800349a:	193b      	adds	r3, r7, r4
 800349c:	0018      	movs	r0, r3
 800349e:	2314      	movs	r3, #20
 80034a0:	001a      	movs	r2, r3
 80034a2:	2100      	movs	r1, #0
 80034a4:	f007 fd70 	bl	800af88 <memset>
  if(adcHandle->Instance==ADC1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2a      	ldr	r2, [pc, #168]	; (8003558 <HAL_ADC_MspInit+0xc8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d14d      	bne.n	800354e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034b2:	4b2a      	ldr	r3, [pc, #168]	; (800355c <HAL_ADC_MspInit+0xcc>)
 80034b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_ADC_MspInit+0xcc>)
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	0089      	lsls	r1, r1, #2
 80034bc:	430a      	orrs	r2, r1
 80034be:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c0:	4b26      	ldr	r3, [pc, #152]	; (800355c <HAL_ADC_MspInit+0xcc>)
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_ADC_MspInit+0xcc>)
 80034c6:	2101      	movs	r1, #1
 80034c8:	430a      	orrs	r2, r1
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80034cc:	4b23      	ldr	r3, [pc, #140]	; (800355c <HAL_ADC_MspInit+0xcc>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	2202      	movs	r2, #2
 80034dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	2203      	movs	r2, #3
 80034e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	193a      	adds	r2, r7, r4
 80034ec:	23a0      	movs	r3, #160	; 0xa0
 80034ee:	05db      	lsls	r3, r3, #23
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f003 f8c0 	bl	8006678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 80034fa:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_ADC_MspInit+0xd4>)
 80034fc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80034fe:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 8003500:	2200      	movs	r2, #0
 8003502:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 800350c:	2200      	movs	r2, #0
 800350e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	0052      	lsls	r2, r2, #1
 800351c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	00d2      	lsls	r2, r2, #3
 8003524:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003526:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 8003528:	2220      	movs	r2, #32
 800352a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 800352e:	2200      	movs	r2, #0
 8003530:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 8003534:	0018      	movs	r0, r3
 8003536:	f002 ff0b 	bl	8006350 <HAL_DMA_Init>
 800353a:	1e03      	subs	r3, r0, #0
 800353c:	d001      	beq.n	8003542 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800353e:	f000 fc07 	bl	8003d50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a06      	ldr	r2, [pc, #24]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 8003546:	64da      	str	r2, [r3, #76]	; 0x4c
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b009      	add	sp, #36	; 0x24
 8003554:	bd90      	pop	{r4, r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	40012400 	.word	0x40012400
 800355c:	40021000 	.word	0x40021000
 8003560:	20000254 	.word	0x20000254
 8003564:	40020008 	.word	0x40020008

08003568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <MX_DMA_Init+0x28>)
 8003570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003572:	4b07      	ldr	r3, [pc, #28]	; (8003590 <MX_DMA_Init+0x28>)
 8003574:	2101      	movs	r1, #1
 8003576:	430a      	orrs	r2, r1
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <MX_DMA_Init+0x28>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]

}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	40021000 	.word	0x40021000

08003594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359a:	240c      	movs	r4, #12
 800359c:	193b      	adds	r3, r7, r4
 800359e:	0018      	movs	r0, r3
 80035a0:	2314      	movs	r3, #20
 80035a2:	001a      	movs	r2, r3
 80035a4:	2100      	movs	r1, #0
 80035a6:	f007 fcef 	bl	800af88 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035aa:	4b57      	ldr	r3, [pc, #348]	; (8003708 <MX_GPIO_Init+0x174>)
 80035ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ae:	4b56      	ldr	r3, [pc, #344]	; (8003708 <MX_GPIO_Init+0x174>)
 80035b0:	2104      	movs	r1, #4
 80035b2:	430a      	orrs	r2, r1
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <MX_GPIO_Init+0x174>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c2:	4b51      	ldr	r3, [pc, #324]	; (8003708 <MX_GPIO_Init+0x174>)
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4b50      	ldr	r3, [pc, #320]	; (8003708 <MX_GPIO_Init+0x174>)
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80035ce:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <MX_GPIO_Init+0x174>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	2201      	movs	r2, #1
 80035d4:	4013      	ands	r3, r2
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035da:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <MX_GPIO_Init+0x174>)
 80035dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <MX_GPIO_Init+0x174>)
 80035e0:	2102      	movs	r1, #2
 80035e2:	430a      	orrs	r2, r1
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80035e6:	4b48      	ldr	r3, [pc, #288]	; (8003708 <MX_GPIO_Init+0x174>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	2202      	movs	r2, #2
 80035ec:	4013      	ands	r3, r2
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, GPIO_PIN_RESET);
 80035f2:	23a0      	movs	r3, #160	; 0xa0
 80035f4:	05db      	lsls	r3, r3, #23
 80035f6:	2200      	movs	r2, #0
 80035f8:	2120      	movs	r1, #32
 80035fa:	0018      	movs	r0, r3
 80035fc:	f003 f9ba 	bl	8006974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8003600:	4b42      	ldr	r3, [pc, #264]	; (800370c <MX_GPIO_Init+0x178>)
 8003602:	2200      	movs	r2, #0
 8003604:	2144      	movs	r1, #68	; 0x44
 8003606:	0018      	movs	r0, r3
 8003608:	f003 f9b4 	bl	8006974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 800360c:	4b40      	ldr	r3, [pc, #256]	; (8003710 <MX_GPIO_Init+0x17c>)
 800360e:	2200      	movs	r2, #0
 8003610:	2180      	movs	r1, #128	; 0x80
 8003612:	0018      	movs	r0, r3
 8003614:	f003 f9ae 	bl	8006974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003618:	193b      	adds	r3, r7, r4
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	0192      	lsls	r2, r2, #6
 800361e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003620:	193b      	adds	r3, r7, r4
 8003622:	2200      	movs	r2, #0
 8003624:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	193b      	adds	r3, r7, r4
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800362c:	193b      	adds	r3, r7, r4
 800362e:	4a38      	ldr	r2, [pc, #224]	; (8003710 <MX_GPIO_Init+0x17c>)
 8003630:	0019      	movs	r1, r3
 8003632:	0010      	movs	r0, r2
 8003634:	f003 f820 	bl	8006678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin;
 8003638:	193b      	adds	r3, r7, r4
 800363a:	2220      	movs	r2, #32
 800363c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800363e:	193b      	adds	r3, r7, r4
 8003640:	2201      	movs	r2, #1
 8003642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	193b      	adds	r3, r7, r4
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	193b      	adds	r3, r7, r4
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M1_DIR_GPIO_Port, &GPIO_InitStruct);
 8003650:	193a      	adds	r2, r7, r4
 8003652:	23a0      	movs	r3, #160	; 0xa0
 8003654:	05db      	lsls	r3, r3, #23
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f003 f80d 	bl	8006678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|M2_DIR_Pin;
 800365e:	193b      	adds	r3, r7, r4
 8003660:	2244      	movs	r2, #68	; 0x44
 8003662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003664:	193b      	adds	r3, r7, r4
 8003666:	2201      	movs	r2, #1
 8003668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	193b      	adds	r3, r7, r4
 800366c:	2200      	movs	r2, #0
 800366e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003670:	193b      	adds	r3, r7, r4
 8003672:	2200      	movs	r2, #0
 8003674:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003676:	193b      	adds	r3, r7, r4
 8003678:	4a24      	ldr	r2, [pc, #144]	; (800370c <MX_GPIO_Init+0x178>)
 800367a:	0019      	movs	r1, r3
 800367c:	0010      	movs	r0, r2
 800367e:	f002 fffb 	bl	8006678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8003682:	193b      	adds	r3, r7, r4
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003688:	193b      	adds	r3, r7, r4
 800368a:	2201      	movs	r2, #1
 800368c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	193b      	adds	r3, r7, r4
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	193b      	adds	r3, r7, r4
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 800369a:	193b      	adds	r3, r7, r4
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <MX_GPIO_Init+0x17c>)
 800369e:	0019      	movs	r1, r3
 80036a0:	0010      	movs	r0, r2
 80036a2:	f002 ffe9 	bl	8006678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	0052      	lsls	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036ae:	193b      	adds	r3, r7, r4
 80036b0:	2288      	movs	r2, #136	; 0x88
 80036b2:	0352      	lsls	r2, r2, #13
 80036b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	2202      	movs	r2, #2
 80036ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80036bc:	193a      	adds	r2, r7, r4
 80036be:	23a0      	movs	r3, #160	; 0xa0
 80036c0:	05db      	lsls	r3, r3, #23
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f002 ffd7 	bl	8006678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80036ca:	0021      	movs	r1, r4
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	0092      	lsls	r2, r2, #2
 80036d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	2284      	movs	r2, #132	; 0x84
 80036d8:	0392      	lsls	r2, r2, #14
 80036da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80036e2:	187a      	adds	r2, r7, r1
 80036e4:	23a0      	movs	r3, #160	; 0xa0
 80036e6:	05db      	lsls	r3, r3, #23
 80036e8:	0011      	movs	r1, r2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f002 ffc4 	bl	8006678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	2103      	movs	r1, #3
 80036f4:	2007      	movs	r0, #7
 80036f6:	f002 fdf9 	bl	80062ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80036fa:	2007      	movs	r0, #7
 80036fc:	f002 fe0b 	bl	8006316 <HAL_NVIC_EnableIRQ>

}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b009      	add	sp, #36	; 0x24
 8003706:	bd90      	pop	{r4, r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	50000400 	.word	0x50000400
 8003710:	50000800 	.word	0x50000800

08003714 <HCSR04_Init>:
#else
volatile uint16_t  Hcsr04_Distance;
#endif

HCSR04_STATUS HCSR04_Init(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	htim_hcsr04 = htim;
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HCSR04_Init+0x48>)
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(htim_hcsr04);
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HCSR04_Init+0x48>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0018      	movs	r0, r3
 8003728:	f005 f85c 	bl	80087e4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_hcsr04, HCSR04_PWM_CHANNEL);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HCSR04_Init+0x48>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2108      	movs	r1, #8
 8003732:	0018      	movs	r0, r3
 8003734:	f005 f93a 	bl	80089ac <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start(htim_hcsr04, HCSR04_START_CHANNEL);
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <HCSR04_Init+0x48>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2104      	movs	r1, #4
 800373e:	0018      	movs	r0, r3
 8003740:	f005 fa06 	bl	8008b50 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(htim_hcsr04, HCSR04_STOP_CHANNEL);
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <HCSR04_Init+0x48>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2100      	movs	r1, #0
 800374a:	0018      	movs	r0, r3
 800374c:	f005 fa88 	bl	8008c60 <HAL_TIM_IC_Start_IT>

	return HCSR04_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	2000029c 	.word	0x2000029c

08003760 <HCSR04_Read>:

	return HCSR04_OK;
}
#else
HCSR04_STATUS HCSR04_Read(uint16_t *Result)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	*Result =  Hcsr04_Distance;
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <HCSR04_Read+0x1c>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29a      	uxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	801a      	strh	r2, [r3, #0]

	return HCSR04_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200002a0 	.word	0x200002a0

08003780 <HCSR04_TIM_IC_CaptureCallback>:
#endif

void HCSR04_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	if(htim == htim_hcsr04)
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HCSR04_TIM_IC_CaptureCallback+0x58>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d11d      	bne.n	80037ce <HCSR04_TIM_IC_CaptureCallback+0x4e>
	{
		uint16_t time;


		time = (uint16_t)((uint16_t)__HAL_TIM_GetCompare(htim_hcsr04, HCSR04_STOP_CHANNEL) - (uint16_t)__HAL_TIM_GetCompare(htim_hcsr04, HCSR04_START_CHANNEL));
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HCSR04_TIM_IC_CaptureCallback+0x58>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379a:	b299      	uxth	r1, r3
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HCSR04_TIM_IC_CaptureCallback+0x58>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	200e      	movs	r0, #14
 80037a8:	183b      	adds	r3, r7, r0
 80037aa:	1a8a      	subs	r2, r1, r2
 80037ac:	801a      	strh	r2, [r3, #0]
#ifdef HCSR04_HIGH_PRECISION
		Hcsr04_Distance = (float)time / 2.0 * 0.0343;
#else
		Hcsr04_Distance = time / 58;
 80037ae:	183b      	adds	r3, r7, r0
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	213a      	movs	r1, #58	; 0x3a
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fc fcc3 	bl	8000140 <__udivsi3>
 80037ba:	0003      	movs	r3, r0
 80037bc:	b29a      	uxth	r2, r3
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <HCSR04_TIM_IC_CaptureCallback+0x5c>)
 80037c0:	801a      	strh	r2, [r3, #0]
#endif
		HAL_TIM_IC_Start_IT(htim_hcsr04, HCSR04_STOP_CHANNEL);
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HCSR04_TIM_IC_CaptureCallback+0x58>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2100      	movs	r1, #0
 80037c8:	0018      	movs	r0, r3
 80037ca:	f005 fa49 	bl	8008c60 <HAL_TIM_IC_Start_IT>
	}
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b004      	add	sp, #16
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	2000029c 	.word	0x2000029c
 80037dc:	200002a0 	.word	0x200002a0

080037e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <MX_I2C2_Init+0x74>)
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <MX_I2C2_Init+0x78>)
 80037e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80037ea:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <MX_I2C2_Init+0x74>)
 80037ec:	4a1b      	ldr	r2, [pc, #108]	; (800385c <MX_I2C2_Init+0x7c>)
 80037ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80037f0:	4b18      	ldr	r3, [pc, #96]	; (8003854 <MX_I2C2_Init+0x74>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <MX_I2C2_Init+0x74>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <MX_I2C2_Init+0x74>)
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <MX_I2C2_Init+0x74>)
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <MX_I2C2_Init+0x74>)
 800380a:	2200      	movs	r2, #0
 800380c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <MX_I2C2_Init+0x74>)
 8003810:	2200      	movs	r2, #0
 8003812:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <MX_I2C2_Init+0x74>)
 8003816:	2200      	movs	r2, #0
 8003818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <MX_I2C2_Init+0x74>)
 800381c:	0018      	movs	r0, r3
 800381e:	f003 f8e3 	bl	80069e8 <HAL_I2C_Init>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d001      	beq.n	800382a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003826:	f000 fa93 	bl	8003d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <MX_I2C2_Init+0x74>)
 800382c:	2100      	movs	r1, #0
 800382e:	0018      	movs	r0, r3
 8003830:	f003 f970 	bl	8006b14 <HAL_I2CEx_ConfigAnalogFilter>
 8003834:	1e03      	subs	r3, r0, #0
 8003836:	d001      	beq.n	800383c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003838:	f000 fa8a 	bl	8003d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <MX_I2C2_Init+0x74>)
 800383e:	2100      	movs	r1, #0
 8003840:	0018      	movs	r0, r3
 8003842:	f003 f9b3 	bl	8006bac <HAL_I2CEx_ConfigDigitalFilter>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800384a:	f000 fa81 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200002a4 	.word	0x200002a4
 8003858:	40005800 	.word	0x40005800
 800385c:	00707cbb 	.word	0x00707cbb

08003860 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	240c      	movs	r4, #12
 800386a:	193b      	adds	r3, r7, r4
 800386c:	0018      	movs	r0, r3
 800386e:	2314      	movs	r3, #20
 8003870:	001a      	movs	r2, r3
 8003872:	2100      	movs	r1, #0
 8003874:	f007 fb88 	bl	800af88 <memset>
  if(i2cHandle->Instance==I2C2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a23      	ldr	r2, [pc, #140]	; (800390c <HAL_I2C_MspInit+0xac>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d13f      	bne.n	8003902 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <HAL_I2C_MspInit+0xb0>)
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_I2C_MspInit+0xb0>)
 8003888:	2102      	movs	r1, #2
 800388a:	430a      	orrs	r2, r1
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_I2C_MspInit+0xb0>)
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	2202      	movs	r2, #2
 8003894:	4013      	ands	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800389a:	193b      	adds	r3, r7, r4
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	2212      	movs	r2, #18
 80038a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	2203      	movs	r2, #3
 80038b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80038b4:	193b      	adds	r3, r7, r4
 80038b6:	2206      	movs	r2, #6
 80038b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ba:	193b      	adds	r3, r7, r4
 80038bc:	4a15      	ldr	r2, [pc, #84]	; (8003914 <HAL_I2C_MspInit+0xb4>)
 80038be:	0019      	movs	r1, r3
 80038c0:	0010      	movs	r0, r2
 80038c2:	f002 fed9 	bl	8006678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038c6:	0021      	movs	r1, r4
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	0192      	lsls	r2, r2, #6
 80038ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	2212      	movs	r2, #18
 80038d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	2203      	movs	r2, #3
 80038e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	2205      	movs	r2, #5
 80038e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_I2C_MspInit+0xb4>)
 80038ec:	0019      	movs	r1, r3
 80038ee:	0010      	movs	r0, r2
 80038f0:	f002 fec2 	bl	8006678 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_I2C_MspInit+0xb0>)
 80038f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_I2C_MspInit+0xb0>)
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	03c9      	lsls	r1, r1, #15
 80038fe:	430a      	orrs	r2, r1
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b009      	add	sp, #36	; 0x24
 8003908:	bd90      	pop	{r4, r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	40005800 	.word	0x40005800
 8003910:	40021000 	.word	0x40021000
 8003914:	50000400 	.word	0x50000400

08003918 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)ptr, len);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	b29a      	uxth	r2, r3
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	4b04      	ldr	r3, [pc, #16]	; (800393c <_write+0x24>)
 800392c:	0018      	movs	r0, r3
 800392e:	f006 f9b7 	bl	8009ca0 <HAL_UART_Transmit_IT>
	return len;
 8003932:	687b      	ldr	r3, [r7, #4]
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b004      	add	sp, #16
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20002378 	.word	0x20002378

08003940 <MessegeHandle>:

// Obsluga wiadomosci otrzymanej przez modul radiowy
void MessegeHandle(uint8_t Message[], Motors_t *DataStruct){
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
	switch(Message[0]){
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b73      	cmp	r3, #115	; 0x73
 8003950:	d168      	bne.n	8003a24 <MessegeHandle+0xe4>
	case('s'):
		{
		char pwmRm[] = {Message[5], Message[6]};
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3305      	adds	r3, #5
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	210c      	movs	r1, #12
 800395a:	187b      	adds	r3, r7, r1
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3306      	adds	r3, #6
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	187b      	adds	r3, r7, r1
 8003966:	705a      	strb	r2, [r3, #1]
		DataStruct->pwmMotorRight = atoi(pwmRm)*100;
 8003968:	187b      	adds	r3, r7, r1
 800396a:	0018      	movs	r0, r3
 800396c:	f007 fad1 	bl	800af12 <atoi>
 8003970:	0003      	movs	r3, r0
 8003972:	b29b      	uxth	r3, r3
 8003974:	2264      	movs	r2, #100	; 0x64
 8003976:	4353      	muls	r3, r2
 8003978:	b29b      	uxth	r3, r3
 800397a:	b21a      	sxth	r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	801a      	strh	r2, [r3, #0]
		if(Message[4] == '1'){
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b31      	cmp	r3, #49	; 0x31
 8003988:	d108      	bne.n	800399c <MessegeHandle+0x5c>
			DataStruct->pwmMotorRight = DataStruct->pwmMotorRight*-1;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	5e9b      	ldrsh	r3, [r3, r2]
 8003990:	b29b      	uxth	r3, r3
 8003992:	425b      	negs	r3, r3
 8003994:	b29b      	uxth	r3, r3
 8003996:	b21a      	sxth	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	801a      	strh	r2, [r3, #0]
		}
		char pwmLm[] = {Message[2], Message[3]};
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3302      	adds	r3, #2
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	2108      	movs	r1, #8
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3303      	adds	r3, #3
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	705a      	strb	r2, [r3, #1]
		DataStruct->pwmMotorLeft = atoi(pwmLm)*100;
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	0018      	movs	r0, r3
 80039b6:	f007 faac 	bl	800af12 <atoi>
 80039ba:	0003      	movs	r3, r0
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2264      	movs	r2, #100	; 0x64
 80039c0:	4353      	muls	r3, r2
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	b21a      	sxth	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	805a      	strh	r2, [r3, #2]
		if(Message[1] == '1'){
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3301      	adds	r3, #1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b31      	cmp	r3, #49	; 0x31
 80039d2:	d108      	bne.n	80039e6 <MessegeHandle+0xa6>
			DataStruct->pwmMotorLeft = DataStruct->pwmMotorLeft*-1;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2202      	movs	r2, #2
 80039d8:	5e9b      	ldrsh	r3, [r3, r2]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	425b      	negs	r3, r3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	b21a      	sxth	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	805a      	strh	r2, [r3, #2]
		}
		if((Distance<20) && ((DataStruct->pwmMotorLeft) > 0 || (DataStruct->pwmMotorRight) > 0)){
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <MessegeHandle+0xf0>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	2b13      	cmp	r3, #19
 80039ec:	d80e      	bhi.n	8003a0c <MessegeHandle+0xcc>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2202      	movs	r2, #2
 80039f2:	5e9b      	ldrsh	r3, [r3, r2]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	dc04      	bgt.n	8003a02 <MessegeHandle+0xc2>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	5e9b      	ldrsh	r3, [r3, r2]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	dd04      	ble.n	8003a0c <MessegeHandle+0xcc>
			setMotorPWM(0, 0);
 8003a02:	2100      	movs	r1, #0
 8003a04:	2000      	movs	r0, #0
 8003a06:	f000 faa1 	bl	8003f4c <setMotorPWM>
		}else{
			setMotorPWM(DataStruct->pwmMotorLeft, DataStruct->pwmMotorRight);
		}

		break;
 8003a0a:	e00c      	b.n	8003a26 <MessegeHandle+0xe6>
			setMotorPWM(DataStruct->pwmMotorLeft, DataStruct->pwmMotorRight);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	5e9b      	ldrsh	r3, [r3, r2]
 8003a12:	001a      	movs	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2100      	movs	r1, #0
 8003a18:	5e5b      	ldrsh	r3, [r3, r1]
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	0010      	movs	r0, r2
 8003a1e:	f000 fa95 	bl	8003f4c <setMotorPWM>
		break;
 8003a22:	e000      	b.n	8003a26 <MessegeHandle+0xe6>
		}

	default:
		break;
 8003a24:	46c0      	nop			; (mov r8, r8)
	}
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	2000223a 	.word	0x2000223a

08003a34 <nRF24_EventTxCallback>:


void nRF24_EventTxCallback(void){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
#ifdef DEBUG
      tMessageLength = sprintf(tMessage, "TX\n\r");
      HAL_UART_Transmit_IT(&huart2, tMessage, tMessageLength);
#endif
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void){
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	af00      	add	r7, sp, #0
#ifdef DEBUG
      tMessageLength = sprintf(tMessage, "MX\n\r");
      HAL_UART_Transmit_IT(&huart2, tMessage, tMessageLength);
#endif
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
	nRF24_ReadData(Message_RX, &MessageLength_RX);
 8003a4c:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <nRF24_EventRxCallback+0x2c>)
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <nRF24_EventRxCallback+0x30>)
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f001 fd44 	bl	80054e0 <nRF24_ReadData>
	if(MessageLength_RX > 0){
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <nRF24_EventRxCallback+0x2c>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <nRF24_EventRxCallback+0x24>
		MessegeHandle(Message_RX, &Car1);
 8003a60:	4a06      	ldr	r2, [pc, #24]	; (8003a7c <nRF24_EventRxCallback+0x34>)
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <nRF24_EventRxCallback+0x30>)
 8003a64:	0011      	movs	r1, r2
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff ff6a 	bl	8003940 <MessegeHandle>
#ifdef DEBUG
	HAL_UART_Transmit_IT(&huart2, Message_RX, MessageLength_RX);
#endif
	}
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	20002238 	.word	0x20002238
 8003a78:	20001298 	.word	0x20001298
 8003a7c:	200002f0 	.word	0x200002f0

08003a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a84:	f001 fe9a 	bl	80057bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a88:	f000 f87a 	bl	8003b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a8c:	f7ff fd82 	bl	8003594 <MX_GPIO_Init>
  MX_TIM3_Init();
 8003a90:	f000 fcec 	bl	800446c <MX_TIM3_Init>
  MX_SPI1_Init();
 8003a94:	f000 fa90 	bl	8003fb8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003a98:	f000 fea2 	bl	80047e0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003a9c:	f7ff fea0 	bl	80037e0 <MX_I2C2_Init>
  MX_DMA_Init();
 8003aa0:	f7ff fd62 	bl	8003568 <MX_DMA_Init>
  MX_ADC_Init();
 8003aa4:	f7ff fc86 	bl	80033b4 <MX_ADC_Init>
  MX_TIM2_Init();
 8003aa8:	f000 fc48 	bl	800433c <MX_TIM2_Init>
  MX_TIM6_Init();
 8003aac:	f000 fd72 	bl	8004594 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <main+0xd4>)
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f004 fee0 	bl	8008878 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003ab8:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <main+0xd4>)
 8003aba:	2100      	movs	r1, #0
 8003abc:	0018      	movs	r0, r3
 8003abe:	f004 ff75 	bl	80089ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <main+0xd4>)
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f004 ff70 	bl	80089ac <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <main+0xd8>)
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f004 fed2 	bl	8008878 <HAL_TIM_Base_Start_IT>


#ifdef USE_RADIO
  nRF24_Init(&hspi1);
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <main+0xdc>)
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f001 fdce 	bl	8005678 <nRF24_Init>
  nRF24_SetRXAddress(0, "Odb");
 8003adc:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <main+0xe0>)
 8003ade:	0019      	movs	r1, r3
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f001 fa79 	bl	8004fd8 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad");
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <main+0xe4>)
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f001 fabb 	bl	8005064 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 8003aee:	f000 ffe7 	bl	8004ac0 <nRF24_RX_Mode>
#endif

#ifdef USE_HCSR04
HCSR04_Init(&htim2);
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <main+0xe8>)
 8003af4:	0018      	movs	r0, r3
 8003af6:	f7ff fe0d 	bl	8003714 <HCSR04_Init>
SimpleKalmanFilter(&HCSR04, 2, 2, 3);
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <main+0xec>)
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	05d2      	lsls	r2, r2, #23
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	05c9      	lsls	r1, r1, #23
 8003b04:	481a      	ldr	r0, [pc, #104]	; (8003b70 <main+0xf0>)
 8003b06:	f7ff fbb7 	bl	8003278 <SimpleKalmanFilter>


HCSR04._curr_est=0;
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <main+0xf0>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]
HCSR04._kalman_gain=0;
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <main+0xf0>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	615a      	str	r2, [r3, #20]
//HCSR04._q=0;;
HCSR04._last_est=0;
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <main+0xf0>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	611a      	str	r2, [r3, #16]
Distance = 5;
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <main+0xf4>)
 8003b1e:	2205      	movs	r2, #5
 8003b20:	801a      	strh	r2, [r3, #0]
updateEstimate(&HCSR04, Distance);
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <main+0xf4>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fd fb9a 	bl	8001260 <__aeabi_ui2f>
 8003b2c:	1c02      	adds	r2, r0, #0
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <main+0xf0>)
 8003b30:	1c11      	adds	r1, r2, #0
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff fbb4 	bl	80032a0 <updateEstimate>
#ifdef USE_IMU
  while (MPU6050_Init(&hi2c2) == 1);
#endif

#ifdef USE_ADC
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <main+0xf8>)
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f002 fa8b 	bl	8006058 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)value, 2);
 8003b42:	490e      	ldr	r1, [pc, #56]	; (8003b7c <main+0xfc>)
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <main+0xf8>)
 8003b46:	2202      	movs	r2, #2
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f002 f83f 	bl	8005bcc <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	#ifdef USE_RADIO
	  nRF24_Event();
 8003b4e:	f001 fd5b 	bl	8005608 <nRF24_Event>
 8003b52:	e7fc      	b.n	8003b4e <main+0xce>
 8003b54:	200022f8 	.word	0x200022f8
 8003b58:	20002338 	.word	0x20002338
 8003b5c:	2000225c 	.word	0x2000225c
 8003b60:	0800e000 	.word	0x0800e000
 8003b64:	0800e004 	.word	0x0800e004
 8003b68:	200022b8 	.word	0x200022b8
 8003b6c:	40400000 	.word	0x40400000
 8003b70:	20002240 	.word	0x20002240
 8003b74:	2000223a 	.word	0x2000223a
 8003b78:	200001f8 	.word	0x200001f8
 8003b7c:	20002258 	.word	0x20002258

08003b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b09f      	sub	sp, #124	; 0x7c
 8003b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b86:	2440      	movs	r4, #64	; 0x40
 8003b88:	193b      	adds	r3, r7, r4
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	2338      	movs	r3, #56	; 0x38
 8003b8e:	001a      	movs	r2, r3
 8003b90:	2100      	movs	r1, #0
 8003b92:	f007 f9f9 	bl	800af88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b96:	232c      	movs	r3, #44	; 0x2c
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	2314      	movs	r3, #20
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f007 f9f1 	bl	800af88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ba6:	1d3b      	adds	r3, r7, #4
 8003ba8:	0018      	movs	r0, r3
 8003baa:	2328      	movs	r3, #40	; 0x28
 8003bac:	001a      	movs	r2, r3
 8003bae:	2100      	movs	r1, #0
 8003bb0:	f007 f9ea 	bl	800af88 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <SystemClock_Config+0xdc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a29      	ldr	r2, [pc, #164]	; (8003c60 <SystemClock_Config+0xe0>)
 8003bba:	401a      	ands	r2, r3
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <SystemClock_Config+0xdc>)
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	0109      	lsls	r1, r1, #4
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bc6:	0021      	movs	r1, r4
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	2202      	movs	r2, #2
 8003bcc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2202      	movs	r2, #2
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	2200      	movs	r2, #0
 8003be4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	2280      	movs	r2, #128	; 0x80
 8003bea:	02d2      	lsls	r2, r2, #11
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	2280      	movs	r2, #128	; 0x80
 8003bf2:	03d2      	lsls	r2, r2, #15
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f003 f83d 	bl	8006c78 <HAL_RCC_OscConfig>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d001      	beq.n	8003c06 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003c02:	f000 f8a5 	bl	8003d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	220f      	movs	r2, #15
 8003c0c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	2203      	movs	r2, #3
 8003c12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2101      	movs	r1, #1
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f003 fbf8 	bl	8007420 <HAL_RCC_ClockConfig>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d001      	beq.n	8003c38 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003c34:	f000 f88c 	bl	8003d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	2200      	movs	r2, #0
 8003c42:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	0018      	movs	r0, r3
 8003c48:	f003 fe0e 	bl	8007868 <HAL_RCCEx_PeriphCLKConfig>
 8003c4c:	1e03      	subs	r3, r0, #0
 8003c4e:	d001      	beq.n	8003c54 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003c50:	f000 f87e 	bl	8003d50 <Error_Handler>
  }
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b01f      	add	sp, #124	; 0x7c
 8003c5a:	bd90      	pop	{r4, r7, pc}
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	ffffe7ff 	.word	0xffffe7ff

08003c64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	1dbb      	adds	r3, r7, #6
 8003c6e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8003c70:	1dbb      	adds	r3, r7, #6
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d101      	bne.n	8003c80 <HAL_GPIO_EXTI_Callback+0x1c>
	{
#if (NRF24_USE_INTERRUPT == 1)
		nRF24_IRQ_Handler();
 8003c7c:	f001 fc64 	bl	8005548 <nRF24_IRQ_Handler>
		tMessageLength = sprintf(tMessage, "IRQ\n\r");
		HAL_UART_Transmit_IT(&huart2, tMessage, tMessageLength);
#endif
#endif
	}
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	HCSR04_TIM_IC_CaptureCallback(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7ff fd74 	bl	8003780 <HCSR04_TIM_IC_CaptureCallback>
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d139      	bne.n	8003d24 <HAL_TIM_PeriodElapsedCallback+0x84>

#ifdef USE_HCSR04
	  HCSR04_Read(&Distance);
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7ff fd54 	bl	8003760 <HCSR04_Read>
//	  uint16_t estimated_value = updateEstimate(&HCSR04, Distance);
	  MessageLength = sprintf(Message, "d%.3d\n\r", Distance);
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	491d      	ldr	r1, [pc, #116]	; (8003d34 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f007 feca 	bl	800ba5c <siprintf>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003cce:	701a      	strb	r2, [r3, #0]
	  last_estimated_value = updateEstimate(&HCSR04, Distance);
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fd fac3 	bl	8001260 <__aeabi_ui2f>
 8003cda:	1c02      	adds	r2, r0, #0
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003cde:	1c11      	adds	r1, r2, #0
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff fadd 	bl	80032a0 <updateEstimate>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	001a      	movs	r2, r3
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003cec:	801a      	strh	r2, [r3, #0]
#ifdef USE_RADIO_SENT
	  nRF24_SendData(Message, MessageLength);
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003cf4:	0011      	movs	r1, r2
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f001 fb3c 	bl	8005374 <nRF24_SendData>

#ifdef USE_ADC
//	  float voltage = 3.3f * value[0] / 4096.0f;
//	  printf("I = %lu (%.3f V)\n\r", value[0], 36.7*voltage/3.3 - 18.3);
#ifdef USE_RADIO_SENT
	  MessageLength = sprintf(Message, "v%.4d\n\r", value[0]);
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	001a      	movs	r2, r3
 8003d04:	4911      	ldr	r1, [pc, #68]	; (8003d4c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f007 fea7 	bl	800ba5c <siprintf>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003d14:	701a      	strb	r2, [r3, #0]
	  nRF24_SendData(Message, MessageLength);
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f001 fb28 	bl	8005374 <nRF24_SendData>
//		MessageLength = sprintf(Message, "s%d%d%d%d\n\r", dirL, pwmabs, dirR, pwmabs );
	}
	count++;
#endif
  }
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b002      	add	sp, #8
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20002338 	.word	0x20002338
 8003d30:	2000223a 	.word	0x2000223a
 8003d34:	0800e008 	.word	0x0800e008
 8003d38:	200002f4 	.word	0x200002f4
 8003d3c:	20001294 	.word	0x20001294
 8003d40:	20002240 	.word	0x20002240
 8003d44:	2000223c 	.word	0x2000223c
 8003d48:	20002258 	.word	0x20002258
 8003d4c:	0800e010 	.word	0x0800e010

08003d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <RB_CreateBuffer>:
#include "main.h"
#include "ring_buffer.h"
#include "stdlib.h"

RB_Status RB_CreateBuffer(RingBuffer **Buffer, uint8_t Size)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	000a      	movs	r2, r1
 8003d64:	1cfb      	adds	r3, r7, #3
 8003d66:	701a      	strb	r2, [r3, #0]
	*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));
 8003d68:	1cfb      	adds	r3, r7, #3
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f007 f900 	bl	800af74 <malloc>
 8003d74:	0003      	movs	r3, r0
 8003d76:	001a      	movs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]

	if(Buffer == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <RB_CreateBuffer+0x2c>
	{
		return RB_NOTCREATED;
 8003d82:	2302      	movs	r3, #2
 8003d84:	e011      	b.n	8003daa <RB_CreateBuffer+0x50>
	}

	(*Buffer)->Size = Size;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1cfa      	adds	r2, r7, #3
 8003d8c:	7812      	ldrb	r2, [r2, #0]
 8003d8e:	701a      	strb	r2, [r3, #0]
	(*Buffer)->Head = 0;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	705a      	strb	r2, [r3, #1]
	(*Buffer)->Tail = 0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	709a      	strb	r2, [r3, #2]
	(*Buffer)->Elements = 0;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	70da      	strb	r2, [r3, #3]

	return RB_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	000a      	movs	r2, r1
 8003dbc:	1cfb      	adds	r3, r7, #3
 8003dbe:	701a      	strb	r2, [r3, #0]
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	785b      	ldrb	r3, [r3, #1]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	0019      	movs	r1, r3
 8003dcc:	0010      	movs	r0, r2
 8003dce:	f7fc fb27 	bl	8000420 <__aeabi_idivmod>
 8003dd2:	000b      	movs	r3, r1
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	210f      	movs	r1, #15
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	701a      	strb	r2, [r3, #0]

	if( TempHead == Buffer->Tail) // No room for new data
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	789b      	ldrb	r3, [r3, #2]
 8003de0:	187a      	adds	r2, r7, r1
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d101      	bne.n	8003dec <RB_WriteToBuffer+0x3a>
	{
		return RB_NOFREESPACE;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e020      	b.n	8003e2e <RB_WriteToBuffer+0x7c>
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	001a      	movs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	1cfa      	adds	r2, r7, #3
 8003df8:	7812      	ldrb	r2, [r2, #0]
 8003dfa:	711a      	strb	r2, [r3, #4]

		Buffer->Head++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	3301      	adds	r3, #1
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	705a      	strb	r2, [r3, #1]
		Buffer->Head %= Buffer->Size;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	785a      	ldrb	r2, [r3, #1]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	0019      	movs	r1, r3
 8003e12:	0010      	movs	r0, r2
 8003e14:	f7fc fa1a 	bl	800024c <__aeabi_uidivmod>
 8003e18:	000b      	movs	r3, r1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	705a      	strb	r2, [r3, #1]

		Buffer->Elements++;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	3301      	adds	r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	70da      	strb	r2, [r3, #3]
	}

	return RB_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	0018      	movs	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b004      	add	sp, #16
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	789a      	ldrb	r2, [r3, #2]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d101      	bne.n	8003e50 <RB_ReadFromBuffer+0x1a>
	{
		return RB_NOELEMENTS;
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	e020      	b.n	8003e92 <RB_ReadFromBuffer+0x5c>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	789b      	ldrb	r3, [r3, #2]
 8003e54:	001a      	movs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	791a      	ldrb	r2, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	789b      	ldrb	r3, [r3, #2]
 8003e64:	3301      	adds	r3, #1
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	709a      	strb	r2, [r3, #2]
		Buffer->Tail %= Buffer->Size;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	789a      	ldrb	r2, [r3, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	0019      	movs	r1, r3
 8003e76:	0010      	movs	r0, r2
 8003e78:	f7fc f9e8 	bl	800024c <__aeabi_uidivmod>
 8003e7c:	000b      	movs	r3, r1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	709a      	strb	r2, [r3, #2]

		Buffer->Elements--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	78db      	ldrb	r3, [r3, #3]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	70da      	strb	r2, [r3, #3]
	}
	return RB_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b002      	add	sp, #8
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	return Buffer->Elements;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	78db      	ldrb	r3, [r3, #3]
}
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b002      	add	sp, #8
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <setPwmDrivenByTimer>:
#include "robot.h"


//set PWM Pulse on Timer Channels
void setPwmDrivenByTimer(uint8_t pwm, int duty) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	1dfb      	adds	r3, r7, #7
 8003ebc:	701a      	strb	r2, [r3, #0]
    switch (pwm) {
 8003ebe:	1dfb      	adds	r3, r7, #7
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d002      	beq.n	8003ecc <setPwmDrivenByTimer+0x1c>
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d004      	beq.n	8003ed4 <setPwmDrivenByTimer+0x24>
//        case 14: TIM4->CCR4 = duty; break;
        case 15: TIM3->CCR1 = duty; break;
        case 16: TIM3->CCR2 = duty; break;
//        case 17: TIM3->CCR3 = duty; break;
//        case 18: TIM3->CCR4 = duty; break;
        default: break;
 8003eca:	e007      	b.n	8003edc <setPwmDrivenByTimer+0x2c>
        case 15: TIM3->CCR1 = duty; break;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <setPwmDrivenByTimer+0x34>)
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ed2:	e003      	b.n	8003edc <setPwmDrivenByTimer+0x2c>
        case 16: TIM3->CCR2 = duty; break;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <setPwmDrivenByTimer+0x34>)
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8003eda:	46c0      	nop			; (mov r8, r8)
    }
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40000400 	.word	0x40000400

08003ee8 <setL298N>:

// L298N motor driver
void setL298N(GPIO_TypeDef * portPinDir, int pinDir, int pinPWM, int speed){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  if (speed < 0){
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da13      	bge.n	8003f24 <setL298N+0x3c>
	HAL_GPIO_WritePin(portPinDir, pinDir, GPIO_PIN_SET);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	b299      	uxth	r1, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	0018      	movs	r0, r3
 8003f06:	f002 fd35 	bl	8006974 <HAL_GPIO_WritePin>
	setPwmDrivenByTimer(pinPWM, 10000 - abs(speed));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	17d9      	asrs	r1, r3, #31
 8003f12:	185b      	adds	r3, r3, r1
 8003f14:	404b      	eors	r3, r1
 8003f16:	490c      	ldr	r1, [pc, #48]	; (8003f48 <setL298N+0x60>)
 8003f18:	1acb      	subs	r3, r1, r3
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	0010      	movs	r0, r2
 8003f1e:	f7ff ffc7 	bl	8003eb0 <setPwmDrivenByTimer>
  } else {
	HAL_GPIO_WritePin(portPinDir, pinDir, GPIO_PIN_RESET);
	  setPwmDrivenByTimer(pinPWM, speed);
  }
}
 8003f22:	e00d      	b.n	8003f40 <setL298N+0x58>
	HAL_GPIO_WritePin(portPinDir, pinDir, GPIO_PIN_RESET);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	b299      	uxth	r1, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f002 fd21 	bl	8006974 <HAL_GPIO_WritePin>
	  setPwmDrivenByTimer(pinPWM, speed);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	0011      	movs	r1, r2
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7ff ffb8 	bl	8003eb0 <setPwmDrivenByTimer>
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b004      	add	sp, #16
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	00002710 	.word	0x00002710

08003f4c <setMotorPWM>:

void setMotorPWM(int pwmLeft, int pwmRight){
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]

	setActuator(MOTOR_LEFT, pwmLeft);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0019      	movs	r1, r3
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f000 f80a 	bl	8003f74 <setActuator>
	setActuator(MOTOR_RIGHT, pwmRight);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	0019      	movs	r1, r3
 8003f64:	2001      	movs	r0, #1
 8003f66:	f000 f805 	bl	8003f74 <setActuator>
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b002      	add	sp, #8
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <setActuator>:


void setActuator(char type, int value){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	701a      	strb	r2, [r3, #0]

  switch (type){
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <setActuator+0x2a>
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10e      	bne.n	8003fac <setActuator+0x38>
    case MOTOR_RIGHT:setL298N(M1_DIR_GPIO_Port, M1_DIR_Pin, 15, value); break;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	22a0      	movs	r2, #160	; 0xa0
 8003f92:	05d0      	lsls	r0, r2, #23
 8003f94:	220f      	movs	r2, #15
 8003f96:	2120      	movs	r1, #32
 8003f98:	f7ff ffa6 	bl	8003ee8 <setL298N>
 8003f9c:	e006      	b.n	8003fac <setActuator+0x38>
    case MOTOR_LEFT:setL298N(M2_DIR_GPIO_Port, M2_DIR_Pin, 16, value); break;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	4804      	ldr	r0, [pc, #16]	; (8003fb4 <setActuator+0x40>)
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	2140      	movs	r1, #64	; 0x40
 8003fa6:	f7ff ff9f 	bl	8003ee8 <setL298N>
 8003faa:	46c0      	nop			; (mov r8, r8)
  }
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	50000400 	.word	0x50000400

08003fb8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <MX_SPI1_Init+0x68>)
 8003fbe:	4a19      	ldr	r2, [pc, #100]	; (8004024 <MX_SPI1_Init+0x6c>)
 8003fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <MX_SPI1_Init+0x68>)
 8003fc4:	2282      	movs	r2, #130	; 0x82
 8003fc6:	0052      	lsls	r2, r2, #1
 8003fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <MX_SPI1_Init+0x68>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <MX_SPI1_Init+0x68>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <MX_SPI1_Init+0x68>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <MX_SPI1_Init+0x68>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <MX_SPI1_Init+0x68>)
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	0092      	lsls	r2, r2, #2
 8003fe8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <MX_SPI1_Init+0x68>)
 8003fec:	2218      	movs	r2, #24
 8003fee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <MX_SPI1_Init+0x68>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <MX_SPI1_Init+0x68>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <MX_SPI1_Init+0x68>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <MX_SPI1_Init+0x68>)
 8004004:	2207      	movs	r2, #7
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <MX_SPI1_Init+0x68>)
 800400a:	0018      	movs	r0, r3
 800400c:	f003 fda0 	bl	8007b50 <HAL_SPI_Init>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d001      	beq.n	8004018 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004014:	f7ff fe9c 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	2000225c 	.word	0x2000225c
 8004024:	40013000 	.word	0x40013000

08004028 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b08b      	sub	sp, #44	; 0x2c
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	2414      	movs	r4, #20
 8004032:	193b      	adds	r3, r7, r4
 8004034:	0018      	movs	r0, r3
 8004036:	2314      	movs	r3, #20
 8004038:	001a      	movs	r2, r3
 800403a:	2100      	movs	r1, #0
 800403c:	f006 ffa4 	bl	800af88 <memset>
  if(spiHandle->Instance==SPI1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <HAL_SPI_MspInit+0xc4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d14b      	bne.n	80040e2 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800404a:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <HAL_SPI_MspInit+0xc8>)
 800404c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_SPI_MspInit+0xc8>)
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	0149      	lsls	r1, r1, #5
 8004054:	430a      	orrs	r2, r1
 8004056:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_SPI_MspInit+0xc8>)
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_SPI_MspInit+0xc8>)
 800405e:	2101      	movs	r1, #1
 8004060:	430a      	orrs	r2, r1
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c
 8004064:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_SPI_MspInit+0xc8>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2201      	movs	r2, #1
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004070:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <HAL_SPI_MspInit+0xc8>)
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <HAL_SPI_MspInit+0xc8>)
 8004076:	2102      	movs	r1, #2
 8004078:	430a      	orrs	r2, r1
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <HAL_SPI_MspInit+0xc8>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	2202      	movs	r2, #2
 8004082:	4013      	ands	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004088:	193b      	adds	r3, r7, r4
 800408a:	22c0      	movs	r2, #192	; 0xc0
 800408c:	0152      	lsls	r2, r2, #5
 800408e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	193b      	adds	r3, r7, r4
 8004092:	2202      	movs	r2, #2
 8004094:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	193b      	adds	r3, r7, r4
 8004098:	2200      	movs	r2, #0
 800409a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409c:	193b      	adds	r3, r7, r4
 800409e:	2203      	movs	r2, #3
 80040a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80040a2:	193b      	adds	r3, r7, r4
 80040a4:	2200      	movs	r2, #0
 80040a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	193a      	adds	r2, r7, r4
 80040aa:	23a0      	movs	r3, #160	; 0xa0
 80040ac:	05db      	lsls	r3, r3, #23
 80040ae:	0011      	movs	r1, r2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f002 fae1 	bl	8006678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80040b6:	0021      	movs	r1, r4
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	2208      	movs	r2, #8
 80040bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	2202      	movs	r2, #2
 80040c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	2203      	movs	r2, #3
 80040ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d6:	187b      	adds	r3, r7, r1
 80040d8:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <HAL_SPI_MspInit+0xcc>)
 80040da:	0019      	movs	r1, r3
 80040dc:	0010      	movs	r0, r2
 80040de:	f002 facb 	bl	8006678 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b00b      	add	sp, #44	; 0x2c
 80040e8:	bd90      	pop	{r4, r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	40013000 	.word	0x40013000
 80040f0:	40021000 	.word	0x40021000
 80040f4:	50000400 	.word	0x50000400

080040f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_MspInit+0x34>)
 80040fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_MspInit+0x34>)
 8004102:	2101      	movs	r1, #1
 8004104:	430a      	orrs	r2, r1
 8004106:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004108:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_MspInit+0x34>)
 800410a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_MspInit+0x34>)
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	0549      	lsls	r1, r1, #21
 8004112:	430a      	orrs	r2, r1
 8004114:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8004116:	2200      	movs	r2, #0
 8004118:	2100      	movs	r1, #0
 800411a:	2001      	movs	r0, #1
 800411c:	f002 f8e6 	bl	80062ec <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004120:	2001      	movs	r0, #1
 8004122:	f002 f8f8 	bl	8006316 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000

08004130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004134:	e7fe      	b.n	8004134 <NMI_Handler+0x4>

08004136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800413a:	e7fe      	b.n	800413a <HardFault_Handler+0x4>

0800413c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004154:	f001 fb86 	bl	8005864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8004162:	f002 fd6f 	bl	8006c44 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	0018      	movs	r0, r3
 8004176:	f002 fc1b 	bl	80069b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	0018      	movs	r0, r3
 8004180:	f002 fc16 	bl	80069b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <TIM2_IRQHandler+0x14>)
 8004192:	0018      	movs	r0, r3
 8004194:	f004 fe32 	bl	8008dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	200022b8 	.word	0x200022b8

080041a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <TIM3_IRQHandler+0x14>)
 80041aa:	0018      	movs	r0, r3
 80041ac:	f004 fe26 	bl	8008dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	200022f8 	.word	0x200022f8

080041bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <TIM6_DAC_IRQHandler+0x14>)
 80041c2:	0018      	movs	r0, r3
 80041c4:	f004 fe1a 	bl	8008dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20002338 	.word	0x20002338

080041d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <USART2_IRQHandler+0x14>)
 80041da:	0018      	movs	r0, r3
 80041dc:	f005 fde0 	bl	8009da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20002378 	.word	0x20002378

080041ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
	return 1;
 80041f0:	2301      	movs	r3, #1
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_kill>:

int _kill(int pid, int sig)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004202:	f006 fe8d 	bl	800af20 <__errno>
 8004206:	0003      	movs	r3, r0
 8004208:	2216      	movs	r2, #22
 800420a:	601a      	str	r2, [r3, #0]
	return -1;
 800420c:	2301      	movs	r3, #1
 800420e:	425b      	negs	r3, r3
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <_exit>:

void _exit (int status)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004220:	2301      	movs	r3, #1
 8004222:	425a      	negs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f7ff ffe5 	bl	80041f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800422e:	e7fe      	b.n	800422e <_exit+0x16>

08004230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e00a      	b.n	8004258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004242:	e000      	b.n	8004246 <_read+0x16>
 8004244:	bf00      	nop
 8004246:	0001      	movs	r1, r0
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	60ba      	str	r2, [r7, #8]
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3301      	adds	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	dbf0      	blt.n	8004242 <_read+0x12>
	}

return len;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b006      	add	sp, #24
 8004268:	bd80      	pop	{r7, pc}

0800426a <_close>:
	}
	return len;
}

int _close(int file)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
	return -1;
 8004272:	2301      	movs	r3, #1
 8004274:	425b      	negs	r3, r3
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b002      	add	sp, #8
 800427c:	bd80      	pop	{r7, pc}

0800427e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2280      	movs	r2, #128	; 0x80
 800428c:	0192      	lsls	r2, r2, #6
 800428e:	605a      	str	r2, [r3, #4]
	return 0;
 8004290:	2300      	movs	r3, #0
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b002      	add	sp, #8
 8004298:	bd80      	pop	{r7, pc}

0800429a <_isatty>:

int _isatty(int file)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
	return 1;
 80042a2:	2301      	movs	r3, #1
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b002      	add	sp, #8
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
	return 0;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <_sbrk+0x5c>)
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <_sbrk+0x60>)
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <_sbrk+0x64>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <_sbrk+0x64>)
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <_sbrk+0x68>)
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <_sbrk+0x64>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d207      	bcs.n	8004304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f4:	f006 fe14 	bl	800af20 <__errno>
 80042f8:	0003      	movs	r3, r0
 80042fa:	220c      	movs	r2, #12
 80042fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042fe:	2301      	movs	r3, #1
 8004300:	425b      	negs	r3, r3
 8004302:	e009      	b.n	8004318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <_sbrk+0x64>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <_sbrk+0x64>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	18d2      	adds	r2, r2, r3
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <_sbrk+0x64>)
 8004314:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20005000 	.word	0x20005000
 8004324:	00000400 	.word	0x00000400
 8004328:	200022b4 	.word	0x200022b4
 800432c:	20002428 	.word	0x20002428

08004330 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004342:	2320      	movs	r3, #32
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	0018      	movs	r0, r3
 8004348:	2308      	movs	r3, #8
 800434a:	001a      	movs	r2, r3
 800434c:	2100      	movs	r1, #0
 800434e:	f006 fe1b 	bl	800af88 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004352:	2310      	movs	r3, #16
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	0018      	movs	r0, r3
 8004358:	2310      	movs	r3, #16
 800435a:	001a      	movs	r2, r3
 800435c:	2100      	movs	r1, #0
 800435e:	f006 fe13 	bl	800af88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004362:	003b      	movs	r3, r7
 8004364:	0018      	movs	r0, r3
 8004366:	2310      	movs	r3, #16
 8004368:	001a      	movs	r2, r3
 800436a:	2100      	movs	r1, #0
 800436c:	f006 fe0c 	bl	800af88 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004370:	4b3c      	ldr	r3, [pc, #240]	; (8004464 <MX_TIM2_Init+0x128>)
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	05d2      	lsls	r2, r2, #23
 8004376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8004378:	4b3a      	ldr	r3, [pc, #232]	; (8004464 <MX_TIM2_Init+0x128>)
 800437a:	221f      	movs	r2, #31
 800437c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437e:	4b39      	ldr	r3, [pc, #228]	; (8004464 <MX_TIM2_Init+0x128>)
 8004380:	2200      	movs	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004384:	4b37      	ldr	r3, [pc, #220]	; (8004464 <MX_TIM2_Init+0x128>)
 8004386:	4a38      	ldr	r2, [pc, #224]	; (8004468 <MX_TIM2_Init+0x12c>)
 8004388:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <MX_TIM2_Init+0x128>)
 800438c:	2200      	movs	r2, #0
 800438e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004390:	4b34      	ldr	r3, [pc, #208]	; (8004464 <MX_TIM2_Init+0x128>)
 8004392:	2200      	movs	r2, #0
 8004394:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004396:	4b33      	ldr	r3, [pc, #204]	; (8004464 <MX_TIM2_Init+0x128>)
 8004398:	0018      	movs	r0, r3
 800439a:	f004 fb99 	bl	8008ad0 <HAL_TIM_IC_Init>
 800439e:	1e03      	subs	r3, r0, #0
 80043a0:	d001      	beq.n	80043a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80043a2:	f7ff fcd5 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80043a6:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <MX_TIM2_Init+0x128>)
 80043a8:	0018      	movs	r0, r3
 80043aa:	f004 fab7 	bl	800891c <HAL_TIM_PWM_Init>
 80043ae:	1e03      	subs	r3, r0, #0
 80043b0:	d001      	beq.n	80043b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80043b2:	f7ff fccd 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043b6:	2120      	movs	r1, #32
 80043b8:	187b      	adds	r3, r7, r1
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	2200      	movs	r2, #0
 80043c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043c4:	187a      	adds	r2, r7, r1
 80043c6:	4b27      	ldr	r3, [pc, #156]	; (8004464 <MX_TIM2_Init+0x128>)
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f005 fb98 	bl	8009b00 <HAL_TIMEx_MasterConfigSynchronization>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d001      	beq.n	80043d8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80043d4:	f7ff fcbc 	bl	8003d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80043d8:	2110      	movs	r1, #16
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	2202      	movs	r2, #2
 80043de:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	2201      	movs	r2, #1
 80043e4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	2200      	movs	r2, #0
 80043f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80043f2:	1879      	adds	r1, r7, r1
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <MX_TIM2_Init+0x128>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	0018      	movs	r0, r3
 80043fa:	f004 fde7 	bl	8008fcc <HAL_TIM_IC_ConfigChannel>
 80043fe:	1e03      	subs	r3, r0, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8004402:	f7ff fca5 	bl	8003d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004406:	2110      	movs	r1, #16
 8004408:	187b      	adds	r3, r7, r1
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800440e:	187b      	adds	r3, r7, r1
 8004410:	2202      	movs	r2, #2
 8004412:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004414:	1879      	adds	r1, r7, r1
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <MX_TIM2_Init+0x128>)
 8004418:	2204      	movs	r2, #4
 800441a:	0018      	movs	r0, r3
 800441c:	f004 fdd6 	bl	8008fcc <HAL_TIM_IC_ConfigChannel>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d001      	beq.n	8004428 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8004424:	f7ff fc94 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004428:	003b      	movs	r3, r7
 800442a:	2260      	movs	r2, #96	; 0x60
 800442c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 125;
 800442e:	003b      	movs	r3, r7
 8004430:	227d      	movs	r2, #125	; 0x7d
 8004432:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004434:	003b      	movs	r3, r7
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800443a:	003b      	movs	r3, r7
 800443c:	2200      	movs	r2, #0
 800443e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004440:	0039      	movs	r1, r7
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <MX_TIM2_Init+0x128>)
 8004444:	2208      	movs	r2, #8
 8004446:	0018      	movs	r0, r3
 8004448:	f004 fe64 	bl	8009114 <HAL_TIM_PWM_ConfigChannel>
 800444c:	1e03      	subs	r3, r0, #0
 800444e:	d001      	beq.n	8004454 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8004450:	f7ff fc7e 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <MX_TIM2_Init+0x128>)
 8004456:	0018      	movs	r0, r3
 8004458:	f000 f95a 	bl	8004710 <HAL_TIM_MspPostInit>

}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b00a      	add	sp, #40	; 0x28
 8004462:	bd80      	pop	{r7, pc}
 8004464:	200022b8 	.word	0x200022b8
 8004468:	0000ffff 	.word	0x0000ffff

0800446c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004472:	2318      	movs	r3, #24
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	0018      	movs	r0, r3
 8004478:	2310      	movs	r3, #16
 800447a:	001a      	movs	r2, r3
 800447c:	2100      	movs	r1, #0
 800447e:	f006 fd83 	bl	800af88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004482:	2310      	movs	r3, #16
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	0018      	movs	r0, r3
 8004488:	2308      	movs	r3, #8
 800448a:	001a      	movs	r2, r3
 800448c:	2100      	movs	r1, #0
 800448e:	f006 fd7b 	bl	800af88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004492:	003b      	movs	r3, r7
 8004494:	0018      	movs	r0, r3
 8004496:	2310      	movs	r3, #16
 8004498:	001a      	movs	r2, r3
 800449a:	2100      	movs	r1, #0
 800449c:	f006 fd74 	bl	800af88 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044a0:	4b39      	ldr	r3, [pc, #228]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044a2:	4a3a      	ldr	r2, [pc, #232]	; (800458c <MX_TIM3_Init+0x120>)
 80044a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 80044a6:	4b38      	ldr	r3, [pc, #224]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044a8:	221f      	movs	r2, #31
 80044aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ac:	4b36      	ldr	r3, [pc, #216]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80044b2:	4b35      	ldr	r3, [pc, #212]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044b4:	4a36      	ldr	r2, [pc, #216]	; (8004590 <MX_TIM3_Init+0x124>)
 80044b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b8:	4b33      	ldr	r3, [pc, #204]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044be:	4b32      	ldr	r3, [pc, #200]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80044c4:	4b30      	ldr	r3, [pc, #192]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044c6:	0018      	movs	r0, r3
 80044c8:	f004 f94c 	bl	8008764 <HAL_TIM_Base_Init>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80044d0:	f7ff fc3e 	bl	8003d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044d4:	2118      	movs	r1, #24
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	0152      	lsls	r2, r2, #5
 80044dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044de:	187a      	adds	r2, r7, r1
 80044e0:	4b29      	ldr	r3, [pc, #164]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044e2:	0011      	movs	r1, r2
 80044e4:	0018      	movs	r0, r3
 80044e6:	f004 fedb 	bl	80092a0 <HAL_TIM_ConfigClockSource>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80044ee:	f7ff fc2f 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80044f2:	4b25      	ldr	r3, [pc, #148]	; (8004588 <MX_TIM3_Init+0x11c>)
 80044f4:	0018      	movs	r0, r3
 80044f6:	f004 fa11 	bl	800891c <HAL_TIM_PWM_Init>
 80044fa:	1e03      	subs	r3, r0, #0
 80044fc:	d001      	beq.n	8004502 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80044fe:	f7ff fc27 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004502:	2110      	movs	r1, #16
 8004504:	187b      	adds	r3, r7, r1
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800450a:	187b      	adds	r3, r7, r1
 800450c:	2200      	movs	r2, #0
 800450e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004510:	187a      	adds	r2, r7, r1
 8004512:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <MX_TIM3_Init+0x11c>)
 8004514:	0011      	movs	r1, r2
 8004516:	0018      	movs	r0, r3
 8004518:	f005 faf2 	bl	8009b00 <HAL_TIMEx_MasterConfigSynchronization>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d001      	beq.n	8004524 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004520:	f7ff fc16 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004524:	003b      	movs	r3, r7
 8004526:	2260      	movs	r2, #96	; 0x60
 8004528:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800452a:	003b      	movs	r3, r7
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004530:	003b      	movs	r3, r7
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004536:	003b      	movs	r3, r7
 8004538:	2200      	movs	r2, #0
 800453a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800453c:	0039      	movs	r1, r7
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <MX_TIM3_Init+0x11c>)
 8004540:	2200      	movs	r2, #0
 8004542:	0018      	movs	r0, r3
 8004544:	f004 fde6 	bl	8009114 <HAL_TIM_PWM_ConfigChannel>
 8004548:	1e03      	subs	r3, r0, #0
 800454a:	d001      	beq.n	8004550 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800454c:	f7ff fc00 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <MX_TIM3_Init+0x11c>)
 8004552:	2104      	movs	r1, #4
 8004554:	0018      	movs	r0, r3
 8004556:	f005 fb31 	bl	8009bbc <HAL_TIMEx_RemapConfig>
 800455a:	1e03      	subs	r3, r0, #0
 800455c:	d001      	beq.n	8004562 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800455e:	f7ff fbf7 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004562:	0039      	movs	r1, r7
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <MX_TIM3_Init+0x11c>)
 8004566:	2204      	movs	r2, #4
 8004568:	0018      	movs	r0, r3
 800456a:	f004 fdd3 	bl	8009114 <HAL_TIM_PWM_ConfigChannel>
 800456e:	1e03      	subs	r3, r0, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8004572:	f7ff fbed 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <MX_TIM3_Init+0x11c>)
 8004578:	0018      	movs	r0, r3
 800457a:	f000 f8c9 	bl	8004710 <HAL_TIM_MspPostInit>

}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	46bd      	mov	sp, r7
 8004582:	b00a      	add	sp, #40	; 0x28
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	200022f8 	.word	0x200022f8
 800458c:	40000400 	.word	0x40000400
 8004590:	0000270f 	.word	0x0000270f

08004594 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800459a:	003b      	movs	r3, r7
 800459c:	0018      	movs	r0, r3
 800459e:	2308      	movs	r3, #8
 80045a0:	001a      	movs	r2, r3
 80045a2:	2100      	movs	r1, #0
 80045a4:	f006 fcf0 	bl	800af88 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <MX_TIM6_Init+0x6c>)
 80045aa:	4a16      	ldr	r2, [pc, #88]	; (8004604 <MX_TIM6_Init+0x70>)
 80045ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <MX_TIM6_Init+0x6c>)
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <MX_TIM6_Init+0x74>)
 80045b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <MX_TIM6_Init+0x6c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <MX_TIM6_Init+0x6c>)
 80045bc:	4a13      	ldr	r2, [pc, #76]	; (800460c <MX_TIM6_Init+0x78>)
 80045be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <MX_TIM6_Init+0x6c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <MX_TIM6_Init+0x6c>)
 80045c8:	0018      	movs	r0, r3
 80045ca:	f004 f8cb 	bl	8008764 <HAL_TIM_Base_Init>
 80045ce:	1e03      	subs	r3, r0, #0
 80045d0:	d001      	beq.n	80045d6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80045d2:	f7ff fbbd 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d6:	003b      	movs	r3, r7
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045dc:	003b      	movs	r3, r7
 80045de:	2200      	movs	r2, #0
 80045e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80045e2:	003a      	movs	r2, r7
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <MX_TIM6_Init+0x6c>)
 80045e6:	0011      	movs	r1, r2
 80045e8:	0018      	movs	r0, r3
 80045ea:	f005 fa89 	bl	8009b00 <HAL_TIMEx_MasterConfigSynchronization>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d001      	beq.n	80045f6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80045f2:	f7ff fbad 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b002      	add	sp, #8
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	20002338 	.word	0x20002338
 8004604:	40001000 	.word	0x40001000
 8004608:	00000c7f 	.word	0x00000c7f
 800460c:	0000270f 	.word	0x0000270f

08004610 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004610:	b590      	push	{r4, r7, lr}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004618:	240c      	movs	r4, #12
 800461a:	193b      	adds	r3, r7, r4
 800461c:	0018      	movs	r0, r3
 800461e:	2314      	movs	r3, #20
 8004620:	001a      	movs	r2, r3
 8004622:	2100      	movs	r1, #0
 8004624:	f006 fcb0 	bl	800af88 <memset>
  if(tim_icHandle->Instance==TIM2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	05db      	lsls	r3, r3, #23
 8004630:	429a      	cmp	r2, r3
 8004632:	d130      	bne.n	8004696 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004634:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <HAL_TIM_IC_MspInit+0x90>)
 8004636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_TIM_IC_MspInit+0x90>)
 800463a:	2101      	movs	r1, #1
 800463c:	430a      	orrs	r2, r1
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_TIM_IC_MspInit+0x90>)
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <HAL_TIM_IC_MspInit+0x90>)
 8004646:	2101      	movs	r1, #1
 8004648:	430a      	orrs	r2, r1
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_TIM_IC_MspInit+0x90>)
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	2201      	movs	r2, #1
 8004652:	4013      	ands	r3, r2
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HCSR04_Echo_Pin;
 8004658:	0021      	movs	r1, r4
 800465a:	187b      	adds	r3, r7, r1
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004660:	187b      	adds	r3, r7, r1
 8004662:	2202      	movs	r2, #2
 8004664:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	187b      	adds	r3, r7, r1
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800466c:	187b      	adds	r3, r7, r1
 800466e:	2201      	movs	r2, #1
 8004670:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004672:	187b      	adds	r3, r7, r1
 8004674:	2202      	movs	r2, #2
 8004676:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HCSR04_Echo_GPIO_Port, &GPIO_InitStruct);
 8004678:	187a      	adds	r2, r7, r1
 800467a:	23a0      	movs	r3, #160	; 0xa0
 800467c:	05db      	lsls	r3, r3, #23
 800467e:	0011      	movs	r1, r2
 8004680:	0018      	movs	r0, r3
 8004682:	f001 fff9 	bl	8006678 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2101      	movs	r1, #1
 800468a:	200f      	movs	r0, #15
 800468c:	f001 fe2e 	bl	80062ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004690:	200f      	movs	r0, #15
 8004692:	f001 fe40 	bl	8006316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	b009      	add	sp, #36	; 0x24
 800469c:	bd90      	pop	{r4, r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	40021000 	.word	0x40021000

080046a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a14      	ldr	r2, [pc, #80]	; (8004704 <HAL_TIM_Base_MspInit+0x60>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <HAL_TIM_Base_MspInit+0x64>)
 80046b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ba:	4b13      	ldr	r3, [pc, #76]	; (8004708 <HAL_TIM_Base_MspInit+0x64>)
 80046bc:	2102      	movs	r1, #2
 80046be:	430a      	orrs	r2, r1
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80046c2:	2200      	movs	r2, #0
 80046c4:	2101      	movs	r1, #1
 80046c6:	2010      	movs	r0, #16
 80046c8:	f001 fe10 	bl	80062ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046cc:	2010      	movs	r0, #16
 80046ce:	f001 fe22 	bl	8006316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80046d2:	e012      	b.n	80046fa <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0c      	ldr	r2, [pc, #48]	; (800470c <HAL_TIM_Base_MspInit+0x68>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10d      	bne.n	80046fa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_TIM_Base_MspInit+0x64>)
 80046e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_TIM_Base_MspInit+0x64>)
 80046e4:	2110      	movs	r1, #16
 80046e6:	430a      	orrs	r2, r1
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2102      	movs	r1, #2
 80046ee:	2011      	movs	r0, #17
 80046f0:	f001 fdfc 	bl	80062ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046f4:	2011      	movs	r0, #17
 80046f6:	f001 fe0e 	bl	8006316 <HAL_NVIC_EnableIRQ>
}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	40000400 	.word	0x40000400
 8004708:	40021000 	.word	0x40021000
 800470c:	40001000 	.word	0x40001000

08004710 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b08b      	sub	sp, #44	; 0x2c
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004718:	2414      	movs	r4, #20
 800471a:	193b      	adds	r3, r7, r4
 800471c:	0018      	movs	r0, r3
 800471e:	2314      	movs	r3, #20
 8004720:	001a      	movs	r2, r3
 8004722:	2100      	movs	r1, #0
 8004724:	f006 fc30 	bl	800af88 <memset>
  if(timHandle->Instance==TIM2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	05db      	lsls	r3, r3, #23
 8004730:	429a      	cmp	r2, r3
 8004732:	d123      	bne.n	800477c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004734:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <HAL_TIM_MspPostInit+0xc4>)
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <HAL_TIM_MspPostInit+0xc4>)
 800473a:	2102      	movs	r1, #2
 800473c:	430a      	orrs	r2, r1
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004740:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <HAL_TIM_MspPostInit+0xc4>)
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	2202      	movs	r2, #2
 8004746:	4013      	ands	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = HCSR04_Trig_Pin;
 800474c:	193b      	adds	r3, r7, r4
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	00d2      	lsls	r2, r2, #3
 8004752:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004754:	0021      	movs	r1, r4
 8004756:	187b      	adds	r3, r7, r1
 8004758:	2202      	movs	r2, #2
 800475a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475c:	187b      	adds	r3, r7, r1
 800475e:	2200      	movs	r2, #0
 8004760:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004762:	187b      	adds	r3, r7, r1
 8004764:	2201      	movs	r2, #1
 8004766:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004768:	187b      	adds	r3, r7, r1
 800476a:	2202      	movs	r2, #2
 800476c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HCSR04_Trig_GPIO_Port, &GPIO_InitStruct);
 800476e:	187b      	adds	r3, r7, r1
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_TIM_MspPostInit+0xc8>)
 8004772:	0019      	movs	r1, r3
 8004774:	0010      	movs	r0, r2
 8004776:	f001 ff7f 	bl	8006678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800477a:	e027      	b.n	80047cc <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a16      	ldr	r2, [pc, #88]	; (80047dc <HAL_TIM_MspPostInit+0xcc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d122      	bne.n	80047cc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_TIM_MspPostInit+0xc4>)
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <HAL_TIM_MspPostInit+0xc4>)
 800478c:	2101      	movs	r1, #1
 800478e:	430a      	orrs	r2, r1
 8004790:	62da      	str	r2, [r3, #44]	; 0x2c
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_TIM_MspPostInit+0xc4>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	2201      	movs	r2, #1
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800479e:	2114      	movs	r1, #20
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	22c0      	movs	r2, #192	; 0xc0
 80047a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	2202      	movs	r2, #2
 80047aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	2200      	movs	r2, #0
 80047b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b2:	187b      	adds	r3, r7, r1
 80047b4:	2200      	movs	r2, #0
 80047b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	2202      	movs	r2, #2
 80047bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047be:	187a      	adds	r2, r7, r1
 80047c0:	23a0      	movs	r3, #160	; 0xa0
 80047c2:	05db      	lsls	r3, r3, #23
 80047c4:	0011      	movs	r1, r2
 80047c6:	0018      	movs	r0, r3
 80047c8:	f001 ff56 	bl	8006678 <HAL_GPIO_Init>
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b00b      	add	sp, #44	; 0x2c
 80047d2:	bd90      	pop	{r4, r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	50000400 	.word	0x50000400
 80047dc:	40000400 	.word	0x40000400

080047e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047e4:	4b14      	ldr	r3, [pc, #80]	; (8004838 <MX_USART2_UART_Init+0x58>)
 80047e6:	4a15      	ldr	r2, [pc, #84]	; (800483c <MX_USART2_UART_Init+0x5c>)
 80047e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047ea:	4b13      	ldr	r3, [pc, #76]	; (8004838 <MX_USART2_UART_Init+0x58>)
 80047ec:	22e1      	movs	r2, #225	; 0xe1
 80047ee:	0252      	lsls	r2, r2, #9
 80047f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047f2:	4b11      	ldr	r3, [pc, #68]	; (8004838 <MX_USART2_UART_Init+0x58>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047f8:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <MX_USART2_UART_Init+0x58>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047fe:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <MX_USART2_UART_Init+0x58>)
 8004800:	2200      	movs	r2, #0
 8004802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <MX_USART2_UART_Init+0x58>)
 8004806:	220c      	movs	r2, #12
 8004808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <MX_USART2_UART_Init+0x58>)
 800480c:	2200      	movs	r2, #0
 800480e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <MX_USART2_UART_Init+0x58>)
 8004812:	2200      	movs	r2, #0
 8004814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <MX_USART2_UART_Init+0x58>)
 8004818:	2200      	movs	r2, #0
 800481a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <MX_USART2_UART_Init+0x58>)
 800481e:	2200      	movs	r2, #0
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <MX_USART2_UART_Init+0x58>)
 8004824:	0018      	movs	r0, r3
 8004826:	f005 f9e7 	bl	8009bf8 <HAL_UART_Init>
 800482a:	1e03      	subs	r3, r0, #0
 800482c:	d001      	beq.n	8004832 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800482e:	f7ff fa8f 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20002378 	.word	0x20002378
 800483c:	40004400 	.word	0x40004400

08004840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	240c      	movs	r4, #12
 800484a:	193b      	adds	r3, r7, r4
 800484c:	0018      	movs	r0, r3
 800484e:	2314      	movs	r3, #20
 8004850:	001a      	movs	r2, r3
 8004852:	2100      	movs	r1, #0
 8004854:	f006 fb98 	bl	800af88 <memset>
  if(uartHandle->Instance==USART2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1c      	ldr	r2, [pc, #112]	; (80048d0 <HAL_UART_MspInit+0x90>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d131      	bne.n	80048c6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <HAL_UART_MspInit+0x94>)
 8004864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_UART_MspInit+0x94>)
 8004868:	2180      	movs	r1, #128	; 0x80
 800486a:	0289      	lsls	r1, r1, #10
 800486c:	430a      	orrs	r2, r1
 800486e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004870:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <HAL_UART_MspInit+0x94>)
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <HAL_UART_MspInit+0x94>)
 8004876:	2101      	movs	r1, #1
 8004878:	430a      	orrs	r2, r1
 800487a:	62da      	str	r2, [r3, #44]	; 0x2c
 800487c:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_UART_MspInit+0x94>)
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	2201      	movs	r2, #1
 8004882:	4013      	ands	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004888:	0021      	movs	r1, r4
 800488a:	187b      	adds	r3, r7, r1
 800488c:	220c      	movs	r2, #12
 800488e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004890:	187b      	adds	r3, r7, r1
 8004892:	2202      	movs	r2, #2
 8004894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	187b      	adds	r3, r7, r1
 8004898:	2200      	movs	r2, #0
 800489a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800489c:	187b      	adds	r3, r7, r1
 800489e:	2203      	movs	r2, #3
 80048a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	2204      	movs	r2, #4
 80048a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a8:	187a      	adds	r2, r7, r1
 80048aa:	23a0      	movs	r3, #160	; 0xa0
 80048ac:	05db      	lsls	r3, r3, #23
 80048ae:	0011      	movs	r1, r2
 80048b0:	0018      	movs	r0, r3
 80048b2:	f001 fee1 	bl	8006678 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2103      	movs	r1, #3
 80048ba:	201c      	movs	r0, #28
 80048bc:	f001 fd16 	bl	80062ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048c0:	201c      	movs	r0, #28
 80048c2:	f001 fd28 	bl	8006316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b009      	add	sp, #36	; 0x24
 80048cc:	bd90      	pop	{r4, r7, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	40004400 	.word	0x40004400
 80048d4:	40021000 	.word	0x40021000

080048d8 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	0002      	movs	r2, r0
 80048e0:	1dfb      	adds	r3, r7, #7
 80048e2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(Time);
 80048e4:	1dfb      	adds	r3, r7, #7
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 ffd7 	bl	800589c <HAL_Delay>
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	000a      	movs	r2, r1
 8004902:	1cfb      	adds	r3, r7, #3
 8004904:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <nRF24_SendSpi+0x2c>)
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	1cfb      	adds	r3, r7, #3
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	b29a      	uxth	r2, r3
 8004910:	23fa      	movs	r3, #250	; 0xfa
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	f003 f9af 	bl	8007c78 <HAL_SPI_Transmit>
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b002      	add	sp, #8
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	200023fc 	.word	0x200023fc

08004928 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	000a      	movs	r2, r1
 8004932:	1cfb      	adds	r3, r7, #3
 8004934:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <nRF24_ReadSpi+0x2c>)
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	1cfb      	adds	r3, r7, #3
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	b29a      	uxth	r2, r3
 8004940:	23fa      	movs	r3, #250	; 0xfa
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	f003 faed 	bl	8007f24 <HAL_SPI_Receive>
}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	b002      	add	sp, #8
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	200023fc 	.word	0x200023fc

08004958 <nRF24_ReadRegister>:

//
// END OF BASIC READ/WRITE FUNCTIONS
//
static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	0002      	movs	r2, r0
 8004960:	1dfb      	adds	r3, r7, #7
 8004962:	701a      	strb	r2, [r3, #0]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8004964:	1dfb      	adds	r3, r7, #7
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	1dfb      	adds	r3, r7, #7
 800496a:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <nRF24_ReadRegister+0x50>)
 800496e:	2200      	movs	r2, #0
 8004970:	2180      	movs	r1, #128	; 0x80
 8004972:	0018      	movs	r0, r3
 8004974:	f001 fffe 	bl	8006974 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	2101      	movs	r1, #1
 800497c:	0018      	movs	r0, r3
 800497e:	f7ff ffbb 	bl	80048f8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8004982:	240f      	movs	r4, #15
 8004984:	193b      	adds	r3, r7, r4
 8004986:	2101      	movs	r1, #1
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff ffcd 	bl	8004928 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <nRF24_ReadRegister+0x50>)
 8004990:	2201      	movs	r2, #1
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	0018      	movs	r0, r3
 8004996:	f001 ffed 	bl	8006974 <HAL_GPIO_WritePin>

	return result;
 800499a:	193b      	adds	r3, r7, r4
 800499c:	781b      	ldrb	r3, [r3, #0]
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b005      	add	sp, #20
 80049a4:	bd90      	pop	{r4, r7, pc}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	50000800 	.word	0x50000800

080049ac <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6039      	str	r1, [r7, #0]
 80049b4:	0011      	movs	r1, r2
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	1c02      	adds	r2, r0, #0
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	1dbb      	adds	r3, r7, #6
 80049be:	1c0a      	adds	r2, r1, #0
 80049c0:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_R_REGISTER | reg;
 80049c2:	1dfb      	adds	r3, r7, #7
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	1dfb      	adds	r3, r7, #7
 80049c8:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <nRF24_ReadRegisters+0x58>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	2180      	movs	r1, #128	; 0x80
 80049d0:	0018      	movs	r0, r3
 80049d2:	f001 ffcf 	bl	8006974 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80049d6:	1dfb      	adds	r3, r7, #7
 80049d8:	2101      	movs	r1, #1
 80049da:	0018      	movs	r0, r3
 80049dc:	f7ff ff8c 	bl	80048f8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80049e0:	1dbb      	adds	r3, r7, #6
 80049e2:	781a      	ldrb	r2, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	0011      	movs	r1, r2
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7ff ff9d 	bl	8004928 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <nRF24_ReadRegisters+0x58>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	2180      	movs	r1, #128	; 0x80
 80049f4:	0018      	movs	r0, r3
 80049f6:	f001 ffbd 	bl	8006974 <HAL_GPIO_WritePin>
}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	50000800 	.word	0x50000800

08004a08 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	0002      	movs	r2, r0
 8004a10:	1dfb      	adds	r3, r7, #7
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	1dbb      	adds	r3, r7, #6
 8004a16:	1c0a      	adds	r2, r1, #0
 8004a18:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8004a1a:	1dfb      	adds	r3, r7, #7
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	240c      	movs	r4, #12
 8004a26:	193b      	adds	r3, r7, r4
 8004a28:	701a      	strb	r2, [r3, #0]
	tmp[1] = val;
 8004a2a:	193b      	adds	r3, r7, r4
 8004a2c:	1dba      	adds	r2, r7, #6
 8004a2e:	7812      	ldrb	r2, [r2, #0]
 8004a30:	705a      	strb	r2, [r3, #1]

	NRF24_CSN_LOW;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <nRF24_WriteRegister+0x54>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f001 ff9b 	bl	8006974 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	2102      	movs	r1, #2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7ff ff58 	bl	80048f8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <nRF24_WriteRegister+0x54>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	2180      	movs	r1, #128	; 0x80
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f001 ff90 	bl	8006974 <HAL_GPIO_WritePin>
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b005      	add	sp, #20
 8004a5a:	bd90      	pop	{r4, r7, pc}
 8004a5c:	50000800 	.word	0x50000800

08004a60 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6039      	str	r1, [r7, #0]
 8004a68:	0011      	movs	r1, r2
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	1c02      	adds	r2, r0, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	1dbb      	adds	r3, r7, #6
 8004a72:	1c0a      	adds	r2, r1, #0
 8004a74:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_W_REGISTER | reg;
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	1dfb      	adds	r3, r7, #7
 8004a82:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <nRF24_WriteRegisters+0x5c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	2180      	movs	r1, #128	; 0x80
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f001 ff72 	bl	8006974 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8004a90:	1dfb      	adds	r3, r7, #7
 8004a92:	2101      	movs	r1, #1
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7ff ff2f 	bl	80048f8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8004a9a:	1dbb      	adds	r3, r7, #6
 8004a9c:	781a      	ldrb	r2, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	0011      	movs	r1, r2
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7ff ff28 	bl	80048f8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <nRF24_WriteRegisters+0x5c>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	2180      	movs	r1, #128	; 0x80
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f001 ff60 	bl	8006974 <HAL_GPIO_WritePin>
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	50000800 	.word	0x50000800

08004ac0 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8004ac6:	1dfc      	adds	r4, r7, #7
 8004ac8:	f000 f860 	bl	8004b8c <nRF24_ReadConfig>
 8004acc:	0003      	movs	r3, r0
 8004ace:	7023      	strb	r3, [r4, #0]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <nRF24_RX_Mode+0x64>)
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f000 fa7f 	bl	8004fd8 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8004ada:	1dfb      	adds	r3, r7, #7
 8004adc:	1dfa      	adds	r2, r7, #7
 8004ade:	7812      	ldrb	r2, [r2, #0]
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	701a      	strb	r2, [r3, #0]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8004ae6:	1dfb      	adds	r3, r7, #7
 8004ae8:	1dfa      	adds	r2, r7, #7
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	2101      	movs	r1, #1
 8004aee:	430a      	orrs	r2, r1
 8004af0:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8004af2:	1dfb      	adds	r3, r7, #7
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 f851 	bl	8004b9e <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004afc:	2070      	movs	r0, #112	; 0x70
 8004afe:	f000 f8c5 	bl	8004c8c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8004b02:	f000 f901 	bl	8004d08 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8004b06:	f000 f91d 	bl	8004d44 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <nRF24_RX_Mode+0x68>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	2104      	movs	r1, #4
 8004b10:	0018      	movs	r0, r3
 8004b12:	f001 ff2f 	bl	8006974 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8004b16:	2001      	movs	r0, #1
 8004b18:	f7ff fede 	bl	80048d8 <nRF24_Delay_ms>
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b003      	add	sp, #12
 8004b22:	bd90      	pop	{r4, r7, pc}
 8004b24:	20002400 	.word	0x20002400
 8004b28:	50000400 	.word	0x50000400

08004b2c <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <nRF24_TX_Mode+0x5c>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	2104      	movs	r1, #4
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f001 ff1b 	bl	8006974 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8004b3e:	1dfc      	adds	r4, r7, #7
 8004b40:	f000 f824 	bl	8004b8c <nRF24_ReadConfig>
 8004b44:	0003      	movs	r3, r0
 8004b46:	7023      	strb	r3, [r4, #0]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8004b48:	1dfb      	adds	r3, r7, #7
 8004b4a:	1dfa      	adds	r2, r7, #7
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	2102      	movs	r1, #2
 8004b50:	430a      	orrs	r2, r1
 8004b52:	701a      	strb	r2, [r3, #0]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8004b54:	1dfb      	adds	r3, r7, #7
 8004b56:	1dfa      	adds	r2, r7, #7
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	438a      	bics	r2, r1
 8004b5e:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8004b60:	1dfb      	adds	r3, r7, #7
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f000 f81a 	bl	8004b9e <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004b6a:	2070      	movs	r0, #112	; 0x70
 8004b6c:	f000 f88e 	bl	8004c8c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8004b70:	f000 f8ca 	bl	8004d08 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8004b74:	f000 f8e6 	bl	8004d44 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 8004b78:	2001      	movs	r0, #1
 8004b7a:	f7ff fead 	bl	80048d8 <nRF24_Delay_ms>
}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b003      	add	sp, #12
 8004b84:	bd90      	pop	{r4, r7, pc}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	50000400 	.word	0x50000400

08004b8c <nRF24_ReadConfig>:

uint8_t nRF24_ReadConfig(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8004b90:	2000      	movs	r0, #0
 8004b92:	f7ff fee1 	bl	8004958 <nRF24_ReadRegister>
 8004b96:	0003      	movs	r3, r0
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	1dfb      	adds	r3, r7, #7
 8004ba8:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8004baa:	1dfb      	adds	r3, r7, #7
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	0019      	movs	r1, r3
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7ff ff29 	bl	8004a08 <nRF24_WriteRegister>
}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b002      	add	sp, #8
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8004bbe:	b5b0      	push	{r4, r5, r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	1dfb      	adds	r3, r7, #7
 8004bc8:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004bca:	250f      	movs	r5, #15
 8004bcc:	197c      	adds	r4, r7, r5
 8004bce:	2006      	movs	r0, #6
 8004bd0:	f7ff fec2 	bl	8004958 <nRF24_ReadRegister>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xF8; // Clear PWR bits
 8004bd8:	0028      	movs	r0, r5
 8004bda:	183b      	adds	r3, r7, r0
 8004bdc:	183a      	adds	r2, r7, r0
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	2107      	movs	r1, #7
 8004be2:	438a      	bics	r2, r1
 8004be4:	701a      	strb	r2, [r3, #0]
	rf_setup |= (lev<<1);
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	b25a      	sxtb	r2, r3
 8004bee:	183b      	adds	r3, r7, r0
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	b25a      	sxtb	r2, r3
 8004bf8:	183b      	adds	r3, r7, r0
 8004bfa:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004bfc:	183b      	adds	r3, r7, r0
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	0019      	movs	r1, r3
 8004c02:	2006      	movs	r0, #6
 8004c04:	f7ff ff00 	bl	8004a08 <nRF24_WriteRegister>
}
 8004c08:	46c0      	nop			; (mov r8, r8)
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b004      	add	sp, #16
 8004c0e:	bdb0      	pop	{r4, r5, r7, pc}

08004c10 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8004c10:	b5b0      	push	{r4, r5, r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	0002      	movs	r2, r0
 8004c18:	1dfb      	adds	r3, r7, #7
 8004c1a:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004c1c:	250f      	movs	r5, #15
 8004c1e:	197c      	adds	r4, r7, r5
 8004c20:	2006      	movs	r0, #6
 8004c22:	f7ff fe99 	bl	8004958 <nRF24_ReadRegister>
 8004c26:	0003      	movs	r3, r0
 8004c28:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8004c2a:	0028      	movs	r0, r5
 8004c2c:	183b      	adds	r3, r7, r0
 8004c2e:	183a      	adds	r2, r7, r0
 8004c30:	7812      	ldrb	r2, [r2, #0]
 8004c32:	2128      	movs	r1, #40	; 0x28
 8004c34:	438a      	bics	r2, r1
 8004c36:	701a      	strb	r2, [r3, #0]
	if(dr == NRF24_RF_DR_250KBPS)
 8004c38:	1dfb      	adds	r3, r7, #7
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d106      	bne.n	8004c4e <nRF24_SetDataRate+0x3e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8004c40:	183b      	adds	r3, r7, r0
 8004c42:	183a      	adds	r2, r7, r0
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	2120      	movs	r1, #32
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e00a      	b.n	8004c64 <nRF24_SetDataRate+0x54>
	else if(dr == NRF24_RF_DR_2MBPS)
 8004c4e:	1dfb      	adds	r3, r7, #7
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d106      	bne.n	8004c64 <nRF24_SetDataRate+0x54>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8004c56:	220f      	movs	r2, #15
 8004c58:	18bb      	adds	r3, r7, r2
 8004c5a:	18ba      	adds	r2, r7, r2
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	2108      	movs	r1, #8
 8004c60:	430a      	orrs	r2, r1
 8004c62:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004c64:	230f      	movs	r3, #15
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	2006      	movs	r0, #6
 8004c6e:	f7ff fecb 	bl	8004a08 <nRF24_WriteRegister>
}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b004      	add	sp, #16
 8004c78:	bdb0      	pop	{r4, r5, r7, pc}

08004c7a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8004c7e:	2007      	movs	r0, #7
 8004c80:	f7ff fe6a 	bl	8004958 <nRF24_ReadRegister>
 8004c84:	0003      	movs	r3, r0
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	0002      	movs	r2, r0
 8004c94:	1dfb      	adds	r3, r7, #7
 8004c96:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8004c98:	1dfb      	adds	r3, r7, #7
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	2007      	movs	r0, #7
 8004ca0:	f7ff feb2 	bl	8004a08 <nRF24_WriteRegister>
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd80      	pop	{r7, pc}

08004cac <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8004cb0:	2017      	movs	r0, #23
 8004cb2:	f7ff fe51 	bl	8004958 <nRF24_ReadRegister>
 8004cb6:	0003      	movs	r3, r0
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8004cbe:	b5b0      	push	{r4, r5, r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	0002      	movs	r2, r0
 8004cc6:	1dfb      	adds	r3, r7, #7
 8004cc8:	701a      	strb	r2, [r3, #0]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8004cca:	250f      	movs	r5, #15
 8004ccc:	197c      	adds	r4, r7, r5
 8004cce:	f7ff ffed 	bl	8004cac <nRF24_ReadFifoStatus>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	7023      	strb	r3, [r4, #0]

	if(FifoStatus & (1<<Bit))
 8004cd6:	197b      	adds	r3, r7, r5
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	1dfb      	adds	r3, r7, #7
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	411a      	asrs	r2, r3
 8004ce0:	0013      	movs	r3, r2
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d001      	beq.n	8004cec <nRF24_IsBitSetInFifoStatus+0x2e>
	{
		return 1;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <nRF24_IsBitSetInFifoStatus+0x30>
	}

	return 0;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	0018      	movs	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b004      	add	sp, #16
 8004cf4:	bdb0      	pop	{r4, r5, r7, pc}

08004cf6 <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	af00      	add	r7, sp, #0
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7ff ffdf 	bl	8004cbe <nRF24_IsBitSetInFifoStatus>
 8004d00:	0003      	movs	r3, r0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8004d0e:	1dfb      	adds	r3, r7, #7
 8004d10:	22e2      	movs	r2, #226	; 0xe2
 8004d12:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <nRF24_FlushRX+0x38>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f001 fe2a 	bl	8006974 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8004d20:	1dfb      	adds	r3, r7, #7
 8004d22:	2101      	movs	r1, #1
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7ff fde7 	bl	80048f8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <nRF24_FlushRX+0x38>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	2180      	movs	r1, #128	; 0x80
 8004d30:	0018      	movs	r0, r3
 8004d32:	f001 fe1f 	bl	8006974 <HAL_GPIO_WritePin>
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b002      	add	sp, #8
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	50000800 	.word	0x50000800

08004d44 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8004d4a:	1dfb      	adds	r3, r7, #7
 8004d4c:	22e1      	movs	r2, #225	; 0xe1
 8004d4e:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <nRF24_FlushTX+0x38>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	2180      	movs	r1, #128	; 0x80
 8004d56:	0018      	movs	r0, r3
 8004d58:	f001 fe0c 	bl	8006974 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8004d5c:	1dfb      	adds	r3, r7, #7
 8004d5e:	2101      	movs	r1, #1
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7ff fdc9 	bl	80048f8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <nRF24_FlushTX+0x38>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	2180      	movs	r1, #128	; 0x80
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f001 fe01 	bl	8006974 <HAL_GPIO_WritePin>
}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b002      	add	sp, #8
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	50000800 	.word	0x50000800

08004d80 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8004d80:	b5b0      	push	{r4, r5, r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	0002      	movs	r2, r0
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8004d8c:	250f      	movs	r5, #15
 8004d8e:	197c      	adds	r4, r7, r5
 8004d90:	f7ff fefc 	bl	8004b8c <nRF24_ReadConfig>
 8004d94:	0003      	movs	r3, r0
 8004d96:	7023      	strb	r3, [r4, #0]

	if(onoff)
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <nRF24_EnableCRC+0x2e>
		config |= (1<<NRF24_EN_CRC);
 8004da0:	197b      	adds	r3, r7, r5
 8004da2:	197a      	adds	r2, r7, r5
 8004da4:	7812      	ldrb	r2, [r2, #0]
 8004da6:	2108      	movs	r1, #8
 8004da8:	430a      	orrs	r2, r1
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e006      	b.n	8004dbc <nRF24_EnableCRC+0x3c>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8004dae:	220f      	movs	r2, #15
 8004db0:	18bb      	adds	r3, r7, r2
 8004db2:	18ba      	adds	r2, r7, r2
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	2108      	movs	r1, #8
 8004db8:	438a      	bics	r2, r1
 8004dba:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8004dbc:	230f      	movs	r3, #15
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f7ff feeb 	bl	8004b9e <nRF24_WriteConfig>
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b004      	add	sp, #16
 8004dce:	bdb0      	pop	{r4, r5, r7, pc}

08004dd0 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8004ddc:	250f      	movs	r5, #15
 8004dde:	197c      	adds	r4, r7, r5
 8004de0:	f7ff fed4 	bl	8004b8c <nRF24_ReadConfig>
 8004de4:	0003      	movs	r3, r0
 8004de6:	7023      	strb	r3, [r4, #0]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8004de8:	1dfb      	adds	r3, r7, #7
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <nRF24_SetCRCLength+0x2e>
		config |= (1<<NRF24_CRCO);
 8004df0:	197b      	adds	r3, r7, r5
 8004df2:	197a      	adds	r2, r7, r5
 8004df4:	7812      	ldrb	r2, [r2, #0]
 8004df6:	2104      	movs	r1, #4
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	e006      	b.n	8004e0c <nRF24_SetCRCLength+0x3c>
	else
		config &= ~(1<<NRF24_CRCO);
 8004dfe:	220f      	movs	r2, #15
 8004e00:	18bb      	adds	r3, r7, r2
 8004e02:	18ba      	adds	r2, r7, r2
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	2104      	movs	r1, #4
 8004e08:	438a      	bics	r2, r1
 8004e0a:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8004e0c:	230f      	movs	r3, #15
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7ff fec3 	bl	8004b9e <nRF24_WriteConfig>
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b004      	add	sp, #16
 8004e1e:	bdb0      	pop	{r4, r5, r7, pc}

08004e20 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	0002      	movs	r2, r0
 8004e28:	1dfb      	adds	r3, r7, #7
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	1dbb      	adds	r3, r7, #6
 8004e2e:	1c0a      	adds	r2, r1, #0
 8004e30:	701a      	strb	r2, [r3, #0]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8004e32:	1dfb      	adds	r3, r7, #7
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	b25a      	sxtb	r2, r3
 8004e3a:	1dbb      	adds	r3, r7, #6
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b25b      	sxtb	r3, r3
 8004e40:	210f      	movs	r1, #15
 8004e42:	400b      	ands	r3, r1
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	2004      	movs	r0, #4
 8004e50:	f7ff fdda 	bl	8004a08 <nRF24_WriteRegister>
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	0002      	movs	r2, r0
 8004e64:	1dfb      	adds	r3, r7, #7
 8004e66:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8004e68:	1dfb      	adds	r3, r7, #7
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	227f      	movs	r2, #127	; 0x7f
 8004e6e:	4013      	ands	r3, r2
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	0019      	movs	r1, r3
 8004e74:	2005      	movs	r0, #5
 8004e76:	f7ff fdc7 	bl	8004a08 <nRF24_WriteRegister>
}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b002      	add	sp, #8
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8004e82:	b5b0      	push	{r4, r5, r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	0002      	movs	r2, r0
 8004e8a:	1dfb      	adds	r3, r7, #7
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	1dbb      	adds	r3, r7, #6
 8004e90:	1c0a      	adds	r2, r1, #0
 8004e92:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b05      	cmp	r3, #5
 8004e9a:	d902      	bls.n	8004ea2 <nRF24_EnablePipe+0x20>
		pipe = 5; // Block too high pipe number
 8004e9c:	1dfb      	adds	r3, r7, #7
 8004e9e:	2205      	movs	r2, #5
 8004ea0:	701a      	strb	r2, [r3, #0]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8004ea2:	250f      	movs	r5, #15
 8004ea4:	197c      	adds	r4, r7, r5
 8004ea6:	2002      	movs	r0, #2
 8004ea8:	f7ff fd56 	bl	8004958 <nRF24_ReadRegister>
 8004eac:	0003      	movs	r3, r0
 8004eae:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 8004eb0:	1dbb      	adds	r3, r7, #6
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d10d      	bne.n	8004ed4 <nRF24_EnablePipe+0x52>
		enable_pipe |= (1<<pipe);
 8004eb8:	1dfb      	adds	r3, r7, #7
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	0013      	movs	r3, r2
 8004ec2:	b25a      	sxtb	r2, r3
 8004ec4:	197b      	adds	r3, r7, r5
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b25a      	sxtb	r2, r3
 8004ece:	197b      	adds	r3, r7, r5
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e00f      	b.n	8004ef4 <nRF24_EnablePipe+0x72>
	else
		enable_pipe &= ~(1<<pipe);
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	409a      	lsls	r2, r3
 8004edc:	0013      	movs	r3, r2
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	b25b      	sxtb	r3, r3
 8004ee4:	210f      	movs	r1, #15
 8004ee6:	187a      	adds	r2, r7, r1
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	b252      	sxtb	r2, r2
 8004eec:	4013      	ands	r3, r2
 8004eee:	b25a      	sxtb	r2, r3
 8004ef0:	187b      	adds	r3, r7, r1
 8004ef2:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8004ef4:	230f      	movs	r3, #15
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	0019      	movs	r1, r3
 8004efc:	2002      	movs	r0, #2
 8004efe:	f7ff fd83 	bl	8004a08 <nRF24_WriteRegister>
}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bdb0      	pop	{r4, r5, r7, pc}

08004f0a <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8004f0a:	b5b0      	push	{r4, r5, r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	0002      	movs	r2, r0
 8004f12:	1dfb      	adds	r3, r7, #7
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	1dbb      	adds	r3, r7, #6
 8004f18:	1c0a      	adds	r2, r1, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8004f1c:	1dfb      	adds	r3, r7, #7
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b05      	cmp	r3, #5
 8004f22:	d902      	bls.n	8004f2a <nRF24_AutoACK+0x20>
		pipe = 5; // Block too high pipe number
 8004f24:	1dfb      	adds	r3, r7, #7
 8004f26:	2205      	movs	r2, #5
 8004f28:	701a      	strb	r2, [r3, #0]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8004f2a:	250f      	movs	r5, #15
 8004f2c:	197c      	adds	r4, r7, r5
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f7ff fd12 	bl	8004958 <nRF24_ReadRegister>
 8004f34:	0003      	movs	r3, r0
 8004f36:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 8004f38:	1dbb      	adds	r3, r7, #6
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10d      	bne.n	8004f5c <nRF24_AutoACK+0x52>
		enaa |= (1<<pipe);
 8004f40:	1dfb      	adds	r3, r7, #7
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2201      	movs	r2, #1
 8004f46:	409a      	lsls	r2, r3
 8004f48:	0013      	movs	r3, r2
 8004f4a:	b25a      	sxtb	r2, r3
 8004f4c:	197b      	adds	r3, r7, r5
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b25b      	sxtb	r3, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	b25a      	sxtb	r2, r3
 8004f56:	197b      	adds	r3, r7, r5
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e00f      	b.n	8004f7c <nRF24_AutoACK+0x72>
	else
		enaa &= ~(1<<pipe);
 8004f5c:	1dfb      	adds	r3, r7, #7
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2201      	movs	r2, #1
 8004f62:	409a      	lsls	r2, r3
 8004f64:	0013      	movs	r3, r2
 8004f66:	b25b      	sxtb	r3, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	b25b      	sxtb	r3, r3
 8004f6c:	210f      	movs	r1, #15
 8004f6e:	187a      	adds	r2, r7, r1
 8004f70:	7812      	ldrb	r2, [r2, #0]
 8004f72:	b252      	sxtb	r2, r2
 8004f74:	4013      	ands	r3, r2
 8004f76:	b25a      	sxtb	r2, r3
 8004f78:	187b      	adds	r3, r7, r1
 8004f7a:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8004f7c:	230f      	movs	r3, #15
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	0019      	movs	r1, r3
 8004f84:	2001      	movs	r0, #1
 8004f86:	f7ff fd3f 	bl	8004a08 <nRF24_WriteRegister>
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b004      	add	sp, #16
 8004f90:	bdb0      	pop	{r4, r5, r7, pc}

08004f92 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	0002      	movs	r2, r0
 8004f9a:	1dfb      	adds	r3, r7, #7
 8004f9c:	701a      	strb	r2, [r3, #0]
	if(size > 5)
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b05      	cmp	r3, #5
 8004fa4:	d902      	bls.n	8004fac <nRF24_SetAddressWidth+0x1a>
		size = 5; // Maximum are 5 bytes
 8004fa6:	1dfb      	adds	r3, r7, #7
 8004fa8:	2205      	movs	r2, #5
 8004faa:	701a      	strb	r2, [r3, #0]
	if(size < 3)
 8004fac:	1dfb      	adds	r3, r7, #7
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d802      	bhi.n	8004fba <nRF24_SetAddressWidth+0x28>
		size = 3; // Minimum are 3 bytes
 8004fb4:	1dfb      	adds	r3, r7, #7
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8004fba:	1dfb      	adds	r3, r7, #7
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	3b02      	subs	r3, #2
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	0019      	movs	r1, r3
 8004fca:	2003      	movs	r0, #3
 8004fcc:	f7ff fd1c 	bl	8004a08 <nRF24_WriteRegister>
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	0002      	movs	r2, r0
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	1dfb      	adds	r3, r7, #7
 8004fe4:	701a      	strb	r2, [r3, #0]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8004fe6:	1dfb      	adds	r3, r7, #7
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <nRF24_SetRXAddress+0x1e>
 8004fee:	1dfb      	adds	r3, r7, #7
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d126      	bne.n	8005044 <nRF24_SetRXAddress+0x6c>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004ff6:	230f      	movs	r3, #15
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e011      	b.n	8005024 <nRF24_SetRXAddress+0x4c>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8005000:	200f      	movs	r0, #15
 8005002:	183b      	adds	r3, r7, r0
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	18d2      	adds	r2, r2, r3
 800500a:	183b      	adds	r3, r7, r0
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2102      	movs	r1, #2
 8005010:	1acb      	subs	r3, r1, r3
 8005012:	7811      	ldrb	r1, [r2, #0]
 8005014:	220c      	movs	r2, #12
 8005016:	18ba      	adds	r2, r7, r2
 8005018:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800501a:	183b      	adds	r3, r7, r0
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	183b      	adds	r3, r7, r0
 8005020:	3201      	adds	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	230f      	movs	r3, #15
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d9e8      	bls.n	8005000 <nRF24_SetRXAddress+0x28>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800502e:	1dfb      	adds	r3, r7, #7
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	330a      	adds	r3, #10
 8005034:	b2db      	uxtb	r3, r3
 8005036:	220c      	movs	r2, #12
 8005038:	18b9      	adds	r1, r7, r2
 800503a:	2203      	movs	r2, #3
 800503c:	0018      	movs	r0, r3
 800503e:	f7ff fd0f 	bl	8004a60 <nRF24_WriteRegisters>
	{
 8005042:	e00b      	b.n	800505c <nRF24_SetRXAddress+0x84>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8005044:	1dfb      	adds	r3, r7, #7
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	330a      	adds	r3, #10
 800504a:	b2da      	uxtb	r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	3302      	adds	r3, #2
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	0019      	movs	r1, r3
 8005054:	0010      	movs	r0, r2
 8005056:	f7ff fcd7 	bl	8004a08 <nRF24_WriteRegister>
}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b004      	add	sp, #16
 8005062:	bd80      	pop	{r7, pc}

08005064 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800506c:	230c      	movs	r3, #12
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	2203      	movs	r2, #3
 8005072:	0019      	movs	r1, r3
 8005074:	200a      	movs	r0, #10
 8005076:	f7ff fc99 	bl	80049ac <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800507a:	230f      	movs	r3, #15
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e010      	b.n	80050a6 <nRF24_SetTXAddress+0x42>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8005084:	200f      	movs	r0, #15
 8005086:	183b      	adds	r3, r7, r0
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	183b      	adds	r3, r7, r0
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2102      	movs	r1, #2
 8005090:	1acb      	subs	r3, r1, r3
 8005092:	210c      	movs	r1, #12
 8005094:	1879      	adds	r1, r7, r1
 8005096:	5c89      	ldrb	r1, [r1, r2]
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <nRF24_SetTXAddress+0xa4>)
 800509a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800509c:	183b      	adds	r3, r7, r0
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	183b      	adds	r3, r7, r0
 80050a2:	3201      	adds	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	220f      	movs	r2, #15
 80050a8:	18bb      	adds	r3, r7, r2
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d9e9      	bls.n	8005084 <nRF24_SetTXAddress+0x20>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80050b0:	18bb      	adds	r3, r7, r2
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e011      	b.n	80050dc <nRF24_SetTXAddress+0x78>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80050b8:	200f      	movs	r0, #15
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	18d2      	adds	r2, r2, r3
 80050c2:	183b      	adds	r3, r7, r0
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2102      	movs	r1, #2
 80050c8:	1acb      	subs	r3, r1, r3
 80050ca:	7811      	ldrb	r1, [r2, #0]
 80050cc:	220c      	movs	r2, #12
 80050ce:	18ba      	adds	r2, r7, r2
 80050d0:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80050d2:	183b      	adds	r3, r7, r0
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	183b      	adds	r3, r7, r0
 80050d8:	3201      	adds	r2, #1
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	230f      	movs	r3, #15
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d9e8      	bls.n	80050b8 <nRF24_SetTXAddress+0x54>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80050e6:	240c      	movs	r4, #12
 80050e8:	193b      	adds	r3, r7, r4
 80050ea:	2203      	movs	r2, #3
 80050ec:	0019      	movs	r1, r3
 80050ee:	200a      	movs	r0, #10
 80050f0:	f7ff fcb6 	bl	8004a60 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80050f4:	193b      	adds	r3, r7, r4
 80050f6:	2203      	movs	r2, #3
 80050f8:	0019      	movs	r1, r3
 80050fa:	2010      	movs	r0, #16
 80050fc:	f7ff fcb0 	bl	8004a60 <nRF24_WriteRegisters>
}
 8005100:	46c0      	nop			; (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b005      	add	sp, #20
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	20002400 	.word	0x20002400

0800510c <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8005112:	1dfc      	adds	r4, r7, #7
 8005114:	f7ff fdb1 	bl	8004c7a <nRF24_ReadStatus>
 8005118:	0003      	movs	r3, r0
 800511a:	7023      	strb	r3, [r4, #0]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800511c:	1dfb      	adds	r3, r7, #7
 800511e:	1dfa      	adds	r2, r7, #7
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	2170      	movs	r1, #112	; 0x70
 8005124:	430a      	orrs	r2, r1
 8005126:	701a      	strb	r2, [r3, #0]
	nRF24_WriteStatus(status);
 8005128:	1dfb      	adds	r3, r7, #7
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	0018      	movs	r0, r3
 800512e:	f7ff fdad 	bl	8004c8c <nRF24_WriteStatus>
}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b003      	add	sp, #12
 8005138:	bd90      	pop	{r4, r7, pc}

0800513a <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 800513a:	b590      	push	{r4, r7, lr}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8005140:	1dfb      	adds	r3, r7, #7
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8005146:	1dfc      	adds	r4, r7, #7
 8005148:	2060      	movs	r0, #96	; 0x60
 800514a:	f7ff fc05 	bl	8004958 <nRF24_ReadRegister>
 800514e:	0003      	movs	r3, r0
 8005150:	7023      	strb	r3, [r4, #0]

    if (result > 32) // Something went wrong :)
 8005152:	1dfb      	adds	r3, r7, #7
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b20      	cmp	r3, #32
 8005158:	d906      	bls.n	8005168 <nRF24_GetDynamicPayloadSize+0x2e>
    {
        nRF24_FlushRX();
 800515a:	f7ff fdd5 	bl	8004d08 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 800515e:	2002      	movs	r0, #2
 8005160:	f7ff fbba 	bl	80048d8 <nRF24_Delay_ms>
        return 0;
 8005164:	2300      	movs	r3, #0
 8005166:	e001      	b.n	800516c <nRF24_GetDynamicPayloadSize+0x32>
    }
    return result;
 8005168:	1dfb      	adds	r3, r7, #7
 800516a:	781b      	ldrb	r3, [r3, #0]
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b003      	add	sp, #12
 8005172:	bd90      	pop	{r4, r7, pc}

08005174 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8005174:	b5b0      	push	{r4, r5, r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	0002      	movs	r2, r0
 800517c:	1dfb      	adds	r3, r7, #7
 800517e:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8005180:	250f      	movs	r5, #15
 8005182:	197c      	adds	r4, r7, r5
 8005184:	f7ff fd02 	bl	8004b8c <nRF24_ReadConfig>
 8005188:	0003      	movs	r3, r0
 800518a:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 800518c:	1dfb      	adds	r3, r7, #7
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <nRF24_EnableRXDataReadyIRQ+0x2e>
		config |= (1<<NRF24_RX_DR);
 8005194:	197b      	adds	r3, r7, r5
 8005196:	197a      	adds	r2, r7, r5
 8005198:	7812      	ldrb	r2, [r2, #0]
 800519a:	2140      	movs	r1, #64	; 0x40
 800519c:	430a      	orrs	r2, r1
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e006      	b.n	80051b0 <nRF24_EnableRXDataReadyIRQ+0x3c>
	else
		config &= ~(1<<NRF24_RX_DR);
 80051a2:	220f      	movs	r2, #15
 80051a4:	18bb      	adds	r3, r7, r2
 80051a6:	18ba      	adds	r2, r7, r2
 80051a8:	7812      	ldrb	r2, [r2, #0]
 80051aa:	2140      	movs	r1, #64	; 0x40
 80051ac:	438a      	bics	r2, r1
 80051ae:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 80051b0:	230f      	movs	r3, #15
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f7ff fcf1 	bl	8004b9e <nRF24_WriteConfig>
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b004      	add	sp, #16
 80051c2:	bdb0      	pop	{r4, r5, r7, pc}

080051c4 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80051c4:	b5b0      	push	{r4, r5, r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	0002      	movs	r2, r0
 80051cc:	1dfb      	adds	r3, r7, #7
 80051ce:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 80051d0:	250f      	movs	r5, #15
 80051d2:	197c      	adds	r4, r7, r5
 80051d4:	f7ff fcda 	bl	8004b8c <nRF24_ReadConfig>
 80051d8:	0003      	movs	r3, r0
 80051da:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 80051dc:	1dfb      	adds	r3, r7, #7
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <nRF24_EnableTXDataSentIRQ+0x2e>
		config |= (1<<NRF24_TX_DS);
 80051e4:	197b      	adds	r3, r7, r5
 80051e6:	197a      	adds	r2, r7, r5
 80051e8:	7812      	ldrb	r2, [r2, #0]
 80051ea:	2120      	movs	r1, #32
 80051ec:	430a      	orrs	r2, r1
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e006      	b.n	8005200 <nRF24_EnableTXDataSentIRQ+0x3c>
	else
		config &= ~(1<<NRF24_TX_DS);
 80051f2:	220f      	movs	r2, #15
 80051f4:	18bb      	adds	r3, r7, r2
 80051f6:	18ba      	adds	r2, r7, r2
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	2120      	movs	r1, #32
 80051fc:	438a      	bics	r2, r1
 80051fe:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8005200:	230f      	movs	r3, #15
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	0018      	movs	r0, r3
 8005208:	f7ff fcc9 	bl	8004b9e <nRF24_WriteConfig>
}
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	b004      	add	sp, #16
 8005212:	bdb0      	pop	{r4, r5, r7, pc}

08005214 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8005214:	b5b0      	push	{r4, r5, r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	0002      	movs	r2, r0
 800521c:	1dfb      	adds	r3, r7, #7
 800521e:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8005220:	250f      	movs	r5, #15
 8005222:	197c      	adds	r4, r7, r5
 8005224:	f7ff fcb2 	bl	8004b8c <nRF24_ReadConfig>
 8005228:	0003      	movs	r3, r0
 800522a:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 800522c:	1dfb      	adds	r3, r7, #7
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <nRF24_EnableMaxRetransmitIRQ+0x2e>
		config |= (1<<NRF24_MAX_RT);
 8005234:	197b      	adds	r3, r7, r5
 8005236:	197a      	adds	r2, r7, r5
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	2110      	movs	r1, #16
 800523c:	430a      	orrs	r2, r1
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e006      	b.n	8005250 <nRF24_EnableMaxRetransmitIRQ+0x3c>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8005242:	220f      	movs	r2, #15
 8005244:	18bb      	adds	r3, r7, r2
 8005246:	18ba      	adds	r2, r7, r2
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	2110      	movs	r1, #16
 800524c:	438a      	bics	r2, r1
 800524e:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8005250:	230f      	movs	r3, #15
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	0018      	movs	r0, r3
 8005258:	f7ff fca1 	bl	8004b9e <nRF24_WriteConfig>
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	46bd      	mov	sp, r7
 8005260:	b004      	add	sp, #16
 8005262:	bdb0      	pop	{r4, r5, r7, pc}

08005264 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	000a      	movs	r2, r1
 800526e:	1cfb      	adds	r3, r7, #3
 8005270:	701a      	strb	r2, [r3, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8005272:	1cfb      	adds	r3, r7, #3
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0019      	movs	r1, r3
 800527a:	20a0      	movs	r0, #160	; 0xa0
 800527c:	f7ff fbf0 	bl	8004a60 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}

08005288 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8005292:	f7ff ff52 	bl	800513a <nRF24_GetDynamicPayloadSize>
 8005296:	0003      	movs	r3, r0
 8005298:	001a      	movs	r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781a      	ldrb	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	0019      	movs	r1, r3
 80052a6:	2061      	movs	r0, #97	; 0x61
 80052a8:	f7ff fb80 	bl	80049ac <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 80052ac:	2101      	movs	r1, #1
 80052ae:	2007      	movs	r0, #7
 80052b0:	f7ff fbaa 	bl	8004a08 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 80052b4:	f7ff fce1 	bl	8004c7a <nRF24_ReadStatus>
 80052b8:	0003      	movs	r3, r0
 80052ba:	001a      	movs	r2, r3
 80052bc:	2320      	movs	r3, #32
 80052be:	4013      	ands	r3, r2
 80052c0:	d003      	beq.n	80052ca <nRF24_ReadRXPaylaod+0x42>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80052c2:	2120      	movs	r1, #32
 80052c4:	2007      	movs	r0, #7
 80052c6:	f7ff fb9f 	bl	8004a08 <nRF24_WriteRegister>
#endif
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b002      	add	sp, #8
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	000a      	movs	r2, r1
 80052dc:	1cfb      	adds	r3, r7, #3
 80052de:	701a      	strb	r2, [r3, #0]
	if(Size > 32)
 80052e0:	1cfb      	adds	r3, r7, #3
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d901      	bls.n	80052ec <nRF24_SendPacket+0x1a>
		return NRF24_NO_TRANSMITTED_PACKET;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e007      	b.n	80052fc <nRF24_SendPacket+0x2a>

	nRF24_WriteTXPayload(Data, Size);
 80052ec:	1cfb      	adds	r3, r7, #3
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0011      	movs	r1, r2
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7ff ffb5 	bl	8005264 <nRF24_WriteTXPayload>
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}

08005304 <nRF24_IsSomtehingToRead>:

#if (NRF24_USE_RINGBUFFER == 1)
uint8_t nRF24_IsSomtehingToRead(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
	return RB_ElementsAvailable(RXBuffer)?1:0;
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <nRF24_IsSomtehingToRead+0x1c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	0018      	movs	r0, r3
 800530e:	f7fe fdc4 	bl	8003e9a <RB_ElementsAvailable>
 8005312:	0003      	movs	r3, r0
 8005314:	1e5a      	subs	r2, r3, #1
 8005316:	4193      	sbcs	r3, r2
 8005318:	b2db      	uxtb	r3, r3
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20002408 	.word	0x20002408

08005324 <nRF24_IsSomtehingToSend>:

uint8_t nRF24_IsSomtehingToSend(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
	return RB_ElementsAvailable(TXBuffer)?1:0;
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <nRF24_IsSomtehingToSend+0x1c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	0018      	movs	r0, r3
 800532e:	f7fe fdb4 	bl	8003e9a <RB_ElementsAvailable>
 8005332:	0003      	movs	r3, r0
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	4193      	sbcs	r3, r2
 8005338:	b2db      	uxtb	r3, r3
}
 800533a:	0018      	movs	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	2000240c 	.word	0x2000240c

08005344 <nRF24_RXAvailable>:
#endif

uint8_t nRF24_RXAvailable(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
		return 1;
	}
	return 0;
#endif
#if (NRF24_USE_RINGBUFFER == 1)
	return nRF24_IsSomtehingToRead();
 8005348:	f7ff ffdc 	bl	8005304 <nRF24_IsSomtehingToRead>
 800534c:	0003      	movs	r3, r0
#endif
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <nRF24_ReceivePacket>:

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	0011      	movs	r1, r2
 8005364:	0018      	movs	r0, r3
 8005366:	f7ff ff8f 	bl	8005288 <nRF24_ReadRXPaylaod>
		return NRF24_RECEIVED_PACKET;
 800536a:	2300      	movs	r3, #0
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b002      	add	sp, #8
 8005372:	bd80      	pop	{r7, pc}

08005374 <nRF24_SendData>:

nRF24_TX_Status nRF24_SendData(uint8_t* Data, uint8_t Size)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	000a      	movs	r2, r1
 800537e:	1cfb      	adds	r3, r7, #3
 8005380:	701a      	strb	r2, [r3, #0]
#if (NRF24_USE_RINGBUFFER != 1) // (NRF24_USE_INTERRUPT any)
	return nRF24_SendPacket(Data, Size);
#endif
#if (NRF24_USE_RINGBUFFER == 1)
	uint8_t i = 0;
 8005382:	230f      	movs	r3, #15
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]

	while(Size > 0)
 800538a:	e018      	b.n	80053be <nRF24_SendData+0x4a>
	{
		if(RB_OK == RB_WriteToBuffer(TXBuffer, Data[i++]))
 800538c:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <nRF24_SendData+0x5c>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	220f      	movs	r2, #15
 8005392:	18bb      	adds	r3, r7, r2
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	18ba      	adds	r2, r7, r2
 8005398:	1c59      	adds	r1, r3, #1
 800539a:	7011      	strb	r1, [r2, #0]
 800539c:	001a      	movs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	189b      	adds	r3, r3, r2
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	0019      	movs	r1, r3
 80053a6:	f7fe fd04 	bl	8003db2 <RB_WriteToBuffer>
 80053aa:	1e03      	subs	r3, r0, #0
 80053ac:	d105      	bne.n	80053ba <nRF24_SendData+0x46>
		{
			Size--;
 80053ae:	1cfb      	adds	r3, r7, #3
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	1cfb      	adds	r3, r7, #3
 80053b4:	3a01      	subs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	e001      	b.n	80053be <nRF24_SendData+0x4a>
		}
		else
		{
			return NRF24_NO_TRANSMITTED_PACKET;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e004      	b.n	80053c8 <nRF24_SendData+0x54>
	while(Size > 0)
 80053be:	1cfb      	adds	r3, r7, #3
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e2      	bne.n	800538c <nRF24_SendData+0x18>
		}
	}
	return NRF24_TRANSMITTED_PACKET;
 80053c6:	2300      	movs	r3, #0
#endif
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	2000240c 	.word	0x2000240c

080053d4 <nRF24_CheckTXAndSend>:
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af00      	add	r7, sp, #0
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

//	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
		if(nRF24_IsSomtehingToSend())
 80053da:	f7ff ffa3 	bl	8005324 <nRF24_IsSomtehingToSend>
 80053de:	1e03      	subs	r3, r0, #0
 80053e0:	d042      	beq.n	8005468 <nRF24_CheckTXAndSend+0x94>
	{
		nRF24_TX_Mode();
 80053e2:	f7ff fba3 	bl	8004b2c <nRF24_TX_Mode>

		Nrf24TXFreeFlag = 0;
 80053e6:	4b22      	ldr	r3, [pc, #136]	; (8005470 <nRF24_CheckTXAndSend+0x9c>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(TXBuffer);
 80053ec:	4b21      	ldr	r3, [pc, #132]	; (8005474 <nRF24_CheckTXAndSend+0xa0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2526      	movs	r5, #38	; 0x26
 80053f2:	197c      	adds	r4, r7, r5
 80053f4:	0018      	movs	r0, r3
 80053f6:	f7fe fd50 	bl	8003e9a <RB_ElementsAvailable>
 80053fa:	0003      	movs	r3, r0
 80053fc:	7023      	strb	r3, [r4, #0]
		if(DataCounter > 32)
 80053fe:	197b      	adds	r3, r7, r5
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b20      	cmp	r3, #32
 8005404:	d902      	bls.n	800540c <nRF24_CheckTXAndSend+0x38>
		{
			DataCounter = 32; // Max Payload
 8005406:	197b      	adds	r3, r7, r5
 8005408:	2220      	movs	r2, #32
 800540a:	701a      	strb	r2, [r3, #0]
		}

		for(i = 0; i < DataCounter; i++)
 800540c:	2327      	movs	r3, #39	; 0x27
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e00e      	b.n	8005434 <nRF24_CheckTXAndSend+0x60>
		{
			RB_ReadFromBuffer(TXBuffer, &TXPacket[i]);
 8005416:	4b17      	ldr	r3, [pc, #92]	; (8005474 <nRF24_CheckTXAndSend+0xa0>)
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	2427      	movs	r4, #39	; 0x27
 800541c:	193b      	adds	r3, r7, r4
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	1d3a      	adds	r2, r7, #4
 8005422:	18d3      	adds	r3, r2, r3
 8005424:	0019      	movs	r1, r3
 8005426:	f7fe fd06 	bl	8003e36 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 800542a:	193b      	adds	r3, r7, r4
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	193b      	adds	r3, r7, r4
 8005430:	3201      	adds	r2, #1
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	2327      	movs	r3, #39	; 0x27
 8005436:	18fa      	adds	r2, r7, r3
 8005438:	2126      	movs	r1, #38	; 0x26
 800543a:	187b      	adds	r3, r7, r1
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d3e8      	bcc.n	8005416 <nRF24_CheckTXAndSend+0x42>
		}

		nRF24_SendPacket(TXPacket, DataCounter);
 8005444:	187b      	adds	r3, r7, r1
 8005446:	781a      	ldrb	r2, [r3, #0]
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	0011      	movs	r1, r2
 800544c:	0018      	movs	r0, r3
 800544e:	f7ff ff40 	bl	80052d2 <nRF24_SendPacket>
		NRF24_CE_HIGH;
 8005452:	4b09      	ldr	r3, [pc, #36]	; (8005478 <nRF24_CheckTXAndSend+0xa4>)
 8005454:	2201      	movs	r2, #1
 8005456:	2104      	movs	r1, #4
 8005458:	0018      	movs	r0, r3
 800545a:	f001 fa8b 	bl	8006974 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(2);
 800545e:	2002      	movs	r0, #2
 8005460:	f7ff fa3a 	bl	80048d8 <nRF24_Delay_ms>
		nRF24_RX_Mode();
 8005464:	f7ff fb2c 	bl	8004ac0 <nRF24_RX_Mode>
//		NRF24_CE_LOW;
	}
}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b00a      	add	sp, #40	; 0x28
 800546e:	bdb0      	pop	{r4, r5, r7, pc}
 8005470:	20002407 	.word	0x20002407
 8005474:	2000240c 	.word	0x2000240c
 8005478:	50000400 	.word	0x50000400

0800547c <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b08b      	sub	sp, #44	; 0x2c
 8005480:	af00      	add	r7, sp, #0
#if (NRF24_USE_RINGBUFFER == 1)
	uint8_t i, DataCounter;
	uint8_t RXPacket[32];
	do
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 8005482:	2326      	movs	r3, #38	; 0x26
 8005484:	18fa      	adds	r2, r7, r3
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	0011      	movs	r1, r2
 800548a:	0018      	movs	r0, r3
 800548c:	f7ff ff62 	bl	8005354 <nRF24_ReceivePacket>

		for(i = 0; i < DataCounter; i++)
 8005490:	2327      	movs	r3, #39	; 0x27
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e00e      	b.n	80054b8 <nRF24_ReceiveData+0x3c>
		{
			RB_WriteToBuffer(RXBuffer, RXPacket[i]);
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <nRF24_ReceiveData+0x60>)
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	2427      	movs	r4, #39	; 0x27
 80054a0:	193b      	adds	r3, r7, r4
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	1d3a      	adds	r2, r7, #4
 80054a6:	5cd3      	ldrb	r3, [r2, r3]
 80054a8:	0019      	movs	r1, r3
 80054aa:	f7fe fc82 	bl	8003db2 <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 80054ae:	193b      	adds	r3, r7, r4
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	193b      	adds	r3, r7, r4
 80054b4:	3201      	adds	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	2326      	movs	r3, #38	; 0x26
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2227      	movs	r2, #39	; 0x27
 80054c0:	18ba      	adds	r2, r7, r2
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3e8      	bcc.n	800549a <nRF24_ReceiveData+0x1e>
		}

	}while(!nRF24_IsRxEmpty());
 80054c8:	f7ff fc15 	bl	8004cf6 <nRF24_IsRxEmpty>
 80054cc:	1e03      	subs	r3, r0, #0
 80054ce:	d0d8      	beq.n	8005482 <nRF24_ReceiveData+0x6>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b00b      	add	sp, #44	; 0x2c
 80054d8:	bd90      	pop	{r4, r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	20002408 	.word	0x20002408

080054e0 <nRF24_ReadData>:
#endif

nRF24_RX_Status nRF24_ReadData(uint8_t *Data, uint8_t *Size)
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	}
	*Size = 0;
	return NRF24_NO_RECEIVED_PACKET;
#endif
#if (NRF24_USE_INTERRUPT == 1)
	uint8_t i = 0;
 80054ea:	230f      	movs	r3, #15
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
	*Size = 0;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]

	  if(nRF24_RXAvailable())
 80054f8:	f7ff ff24 	bl	8005344 <nRF24_RXAvailable>
 80054fc:	1e03      	subs	r3, r0, #0
 80054fe:	d016      	beq.n	800552e <nRF24_ReadData+0x4e>
	  {
#if (NRF24_USE_RINGBUFFER == 1)
		while(RB_OK == RB_ReadFromBuffer(RXBuffer, &Data[i]))
 8005500:	e005      	b.n	800550e <nRF24_ReadData+0x2e>
		{
			i++;
 8005502:	210f      	movs	r1, #15
 8005504:	187b      	adds	r3, r7, r1
 8005506:	781a      	ldrb	r2, [r3, #0]
 8005508:	187b      	adds	r3, r7, r1
 800550a:	3201      	adds	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
		while(RB_OK == RB_ReadFromBuffer(RXBuffer, &Data[i]))
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <nRF24_ReadData+0x64>)
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	240f      	movs	r4, #15
 8005514:	193b      	adds	r3, r7, r4
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	0019      	movs	r1, r3
 800551e:	f7fe fc8a 	bl	8003e36 <RB_ReadFromBuffer>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d0ed      	beq.n	8005502 <nRF24_ReadData+0x22>
		}
		*Size = i;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	193a      	adds	r2, r7, r4
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	701a      	strb	r2, [r3, #0]
	  }
#if (NRF24_USE_RINGBUFFER == 0)
	*Size = RXDataCounter;
	RXDataCounter = 0;
#endif
	if(*Size == 0)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <nRF24_ReadData+0x5a>
	{
		return NRF24_NO_RECEIVED_PACKET;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <nRF24_ReadData+0x5c>
	}

	return NRF24_RECEIVED_PACKET;
 800553a:	2300      	movs	r3, #0
#endif
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	b005      	add	sp, #20
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	20002408 	.word	0x20002408

08005548 <nRF24_IRQ_Handler>:

#if (NRF24_USE_INTERRUPT == 1)
void nRF24_IRQ_Handler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
	Nrf24InterruptFlag = 1;
 800554c:	4b02      	ldr	r3, [pc, #8]	; (8005558 <nRF24_IRQ_Handler+0x10>)
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20002406 	.word	0x20002406

0800555c <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8005562:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <nRF24_IRQ_Read+0x98>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	d13f      	bne.n	80055ec <nRF24_IRQ_Read+0x90>
	{
		Nrf24InterruptFlag = 0;
 800556c:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <nRF24_IRQ_Read+0x98>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8005572:	1dbc      	adds	r4, r7, #6
 8005574:	f7ff fb81 	bl	8004c7a <nRF24_ReadStatus>
 8005578:	0003      	movs	r3, r0
 800557a:	7023      	strb	r3, [r4, #0]
		uint8_t ClearIrq = 0;
 800557c:	1dfb      	adds	r3, r7, #7
 800557e:	2200      	movs	r2, #0
 8005580:	701a      	strb	r2, [r3, #0]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8005582:	1dbb      	adds	r3, r7, #6
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2240      	movs	r2, #64	; 0x40
 8005588:	4013      	ands	r3, r2
 800558a:	d008      	beq.n	800559e <nRF24_IRQ_Read+0x42>
		{
			nrf24_rx_flag = 1;
 800558c:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <nRF24_IRQ_Read+0x9c>)
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8005592:	1dfb      	adds	r3, r7, #7
 8005594:	1dfa      	adds	r2, r7, #7
 8005596:	7812      	ldrb	r2, [r2, #0]
 8005598:	2140      	movs	r1, #64	; 0x40
 800559a:	430a      	orrs	r2, r1
 800559c:	701a      	strb	r2, [r3, #0]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 800559e:	1dbb      	adds	r3, r7, #6
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2220      	movs	r2, #32
 80055a4:	4013      	ands	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <nRF24_IRQ_Read+0x6a>
		{//
			NRF24_CE_LOW;
 80055a8:	4b14      	ldr	r3, [pc, #80]	; (80055fc <nRF24_IRQ_Read+0xa0>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	2104      	movs	r1, #4
 80055ae:	0018      	movs	r0, r3
 80055b0:	f001 f9e0 	bl	8006974 <HAL_GPIO_WritePin>
			nrf24_tx_flag = 1;
 80055b4:	4b12      	ldr	r3, [pc, #72]	; (8005600 <nRF24_IRQ_Read+0xa4>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 80055ba:	1dfb      	adds	r3, r7, #7
 80055bc:	1dfa      	adds	r2, r7, #7
 80055be:	7812      	ldrb	r2, [r2, #0]
 80055c0:	2120      	movs	r1, #32
 80055c2:	430a      	orrs	r2, r1
 80055c4:	701a      	strb	r2, [r3, #0]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 80055c6:	1dbb      	adds	r3, r7, #6
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2210      	movs	r2, #16
 80055cc:	4013      	ands	r3, r2
 80055ce:	d008      	beq.n	80055e2 <nRF24_IRQ_Read+0x86>
		{
			nrf24_mr_flag = 1;
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <nRF24_IRQ_Read+0xa8>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 80055d6:	1dfb      	adds	r3, r7, #7
 80055d8:	1dfa      	adds	r2, r7, #7
 80055da:	7812      	ldrb	r2, [r2, #0]
 80055dc:	2110      	movs	r1, #16
 80055de:	430a      	orrs	r2, r1
 80055e0:	701a      	strb	r2, [r3, #0]
		}

		nRF24_WriteStatus(ClearIrq);
 80055e2:	1dfb      	adds	r3, r7, #7
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f7ff fb50 	bl	8004c8c <nRF24_WriteStatus>
	}
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b003      	add	sp, #12
 80055f2:	bd90      	pop	{r4, r7, pc}
 80055f4:	20002406 	.word	0x20002406
 80055f8:	20002403 	.word	0x20002403
 80055fc:	50000400 	.word	0x50000400
 8005600:	20002404 	.word	0x20002404
 8005604:	20002405 	.word	0x20002405

08005608 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 800560c:	f7ff ffa6 	bl	800555c <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 8005610:	f7ff fee0 	bl	80053d4 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 8005614:	4b14      	ldr	r3, [pc, #80]	; (8005668 <nRF24_Event+0x60>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d006      	beq.n	800562a <nRF24_Event+0x22>
	{
#if (NRF24_USE_INTERRUPT == 1)
		nRF24_ReceiveData();
 800561c:	f7ff ff2e 	bl	800547c <nRF24_ReceiveData>
#endif
		nRF24_EventRxCallback();
 8005620:	f7fe fa12 	bl	8003a48 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8005624:	4b10      	ldr	r3, [pc, #64]	; (8005668 <nRF24_Event+0x60>)
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <nRF24_Event+0x64>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <nRF24_Event+0x3e>
	{
#if (NRF24_USE_RINGBUFFER == 1)

		Nrf24TXFreeFlag = 1;
 8005632:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <nRF24_Event+0x68>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
#endif
		nRF24_EventTxCallback();
 8005638:	f7fe f9fc 	bl	8003a34 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <nRF24_Event+0x64>)
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]

//		nRF24_WaitTX();
		nRF24_RX_Mode();
 8005642:	f7ff fa3d 	bl	8004ac0 <nRF24_RX_Mode>
//		NRF24_CE_LOW;
	}

	if(nrf24_mr_flag)
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <nRF24_Event+0x6c>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <nRF24_Event+0x58>
	{
//		nRF24_WaitTX();
		nRF24_RX_Mode();
 800564e:	f7ff fa37 	bl	8004ac0 <nRF24_RX_Mode>
//		NRF24_CE_LOW;
		nRF24_EventMrCallback();
 8005652:	f7fe f9f4 	bl	8003a3e <nRF24_EventMrCallback>
//		Nrf24TXFreeFlag = 1;
		nrf24_mr_flag = 0;
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <nRF24_Event+0x6c>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
		nRF24_RX_Mode();
 800565c:	f7ff fa30 	bl	8004ac0 <nRF24_RX_Mode>

	}
}
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	20002403 	.word	0x20002403
 800566c:	20002404 	.word	0x20002404
 8005670:	20002407 	.word	0x20002407
 8005674:	20002405 	.word	0x20002405

08005678 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8005680:	4b33      	ldr	r3, [pc, #204]	; (8005750 <nRF24_Init+0xd8>)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]

	NRF24_CE_LOW;
 8005686:	4b33      	ldr	r3, [pc, #204]	; (8005754 <nRF24_Init+0xdc>)
 8005688:	2200      	movs	r2, #0
 800568a:	2104      	movs	r1, #4
 800568c:	0018      	movs	r0, r3
 800568e:	f001 f971 	bl	8006974 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8005692:	4b31      	ldr	r3, [pc, #196]	; (8005758 <nRF24_Init+0xe0>)
 8005694:	2201      	movs	r2, #1
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	0018      	movs	r0, r3
 800569a:	f001 f96b 	bl	8006974 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 800569e:	2005      	movs	r0, #5
 80056a0:	f7ff f91a 	bl	80048d8 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80056a4:	2003      	movs	r0, #3
 80056a6:	f7ff fa8a 	bl	8004bbe <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80056aa:	2002      	movs	r0, #2
 80056ac:	f7ff fab0 	bl	8004c10 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80056b0:	2001      	movs	r0, #1
 80056b2:	f7ff fb65 	bl	8004d80 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7ff fb8a 	bl	8004dd0 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80056bc:	2107      	movs	r1, #7
 80056be:	2004      	movs	r0, #4
 80056c0:	f7ff fbae 	bl	8004e20 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80056c4:	201d      	movs	r0, #29
 80056c6:	f7ff f947 	bl	8004958 <nRF24_ReadRegister>
 80056ca:	0003      	movs	r3, r0
 80056cc:	001a      	movs	r2, r3
 80056ce:	2304      	movs	r3, #4
 80056d0:	4313      	orrs	r3, r2
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	0019      	movs	r1, r3
 80056d6:	201d      	movs	r0, #29
 80056d8:	f7ff f996 	bl	8004a08 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80056dc:	213f      	movs	r1, #63	; 0x3f
 80056de:	201c      	movs	r0, #28
 80056e0:	f7ff f992 	bl	8004a08 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80056e4:	200a      	movs	r0, #10
 80056e6:	f7ff fbb9 	bl	8004e5c <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80056ea:	2101      	movs	r1, #1
 80056ec:	2000      	movs	r0, #0
 80056ee:	f7ff fbc8 	bl	8004e82 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80056f2:	2101      	movs	r1, #1
 80056f4:	2000      	movs	r0, #0
 80056f6:	f7ff fc08 	bl	8004f0a <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80056fa:	2003      	movs	r0, #3
 80056fc:	f7ff fc49 	bl	8004f92 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8005700:	2001      	movs	r0, #1
 8005702:	f7ff f8e9 	bl	80048d8 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005706:	2001      	movs	r0, #1
 8005708:	f7ff fd34 	bl	8005174 <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 800570c:	2000      	movs	r0, #0
 800570e:	f7ff fd59 	bl	80051c4 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8005712:	2000      	movs	r0, #0
 8005714:	f7ff fd7e 	bl	8005214 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8005718:	2001      	movs	r0, #1
 800571a:	f7ff f8dd 	bl	80048d8 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 800571e:	f7ff fcf5 	bl	800510c <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005722:	2001      	movs	r0, #1
 8005724:	f7ff fd26 	bl	8005174 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8005728:	2001      	movs	r0, #1
 800572a:	f7ff fd4b 	bl	80051c4 <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <nRF24_Init+0xe4>)
 8005730:	2201      	movs	r2, #1
 8005732:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 8005734:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <nRF24_Init+0xe8>)
 8005736:	21f0      	movs	r1, #240	; 0xf0
 8005738:	0018      	movs	r0, r3
 800573a:	f7fe fb0e 	bl	8003d5a <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <nRF24_Init+0xec>)
 8005740:	21f0      	movs	r1, #240	; 0xf0
 8005742:	0018      	movs	r0, r3
 8005744:	f7fe fb09 	bl	8003d5a <RB_CreateBuffer>
#endif
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	b002      	add	sp, #8
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200023fc 	.word	0x200023fc
 8005754:	50000400 	.word	0x50000400
 8005758:	50000800 	.word	0x50000800
 800575c:	20002407 	.word	0x20002407
 8005760:	2000240c 	.word	0x2000240c
 8005764:	20002408 	.word	0x20002408

08005768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005768:	480d      	ldr	r0, [pc, #52]	; (80057a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800576a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800576c:	480d      	ldr	r0, [pc, #52]	; (80057a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800576e:	490e      	ldr	r1, [pc, #56]	; (80057a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005770:	4a0e      	ldr	r2, [pc, #56]	; (80057ac <LoopForever+0xe>)
  movs r3, #0
 8005772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005774:	e002      	b.n	800577c <LoopCopyDataInit>

08005776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800577a:	3304      	adds	r3, #4

0800577c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800577c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800577e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005780:	d3f9      	bcc.n	8005776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005782:	4a0b      	ldr	r2, [pc, #44]	; (80057b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005784:	4c0b      	ldr	r4, [pc, #44]	; (80057b4 <LoopForever+0x16>)
  movs r3, #0
 8005786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005788:	e001      	b.n	800578e <LoopFillZerobss>

0800578a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800578a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800578c:	3204      	adds	r2, #4

0800578e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800578e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005790:	d3fb      	bcc.n	800578a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005792:	f7fe fdcd 	bl	8004330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005796:	f005 fbc9 	bl	800af2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800579a:	f7fe f971 	bl	8003a80 <main>

0800579e <LoopForever>:

LoopForever:
    b LoopForever
 800579e:	e7fe      	b.n	800579e <LoopForever>
   ldr   r0, =_estack
 80057a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80057a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057a8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80057ac:	0800e5b4 	.word	0x0800e5b4
  ldr r2, =_sbss
 80057b0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80057b4:	20002424 	.word	0x20002424

080057b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057b8:	e7fe      	b.n	80057b8 <ADC1_COMP_IRQHandler>
	...

080057bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80057c2:	1dfb      	adds	r3, r7, #7
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_Init+0x3c>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <HAL_Init+0x3c>)
 80057ce:	2140      	movs	r1, #64	; 0x40
 80057d0:	430a      	orrs	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057d4:	2000      	movs	r0, #0
 80057d6:	f000 f811 	bl	80057fc <HAL_InitTick>
 80057da:	1e03      	subs	r3, r0, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80057de:	1dfb      	adds	r3, r7, #7
 80057e0:	2201      	movs	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e001      	b.n	80057ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057e6:	f7fe fc87 	bl	80040f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057ea:	1dfb      	adds	r3, r7, #7
 80057ec:	781b      	ldrb	r3, [r3, #0]
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b002      	add	sp, #8
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	40022000 	.word	0x40022000

080057fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005804:	4b14      	ldr	r3, [pc, #80]	; (8005858 <HAL_InitTick+0x5c>)
 8005806:	681c      	ldr	r4, [r3, #0]
 8005808:	4b14      	ldr	r3, [pc, #80]	; (800585c <HAL_InitTick+0x60>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	0019      	movs	r1, r3
 800580e:	23fa      	movs	r3, #250	; 0xfa
 8005810:	0098      	lsls	r0, r3, #2
 8005812:	f7fa fc95 	bl	8000140 <__udivsi3>
 8005816:	0003      	movs	r3, r0
 8005818:	0019      	movs	r1, r3
 800581a:	0020      	movs	r0, r4
 800581c:	f7fa fc90 	bl	8000140 <__udivsi3>
 8005820:	0003      	movs	r3, r0
 8005822:	0018      	movs	r0, r3
 8005824:	f000 fd87 	bl	8006336 <HAL_SYSTICK_Config>
 8005828:	1e03      	subs	r3, r0, #0
 800582a:	d001      	beq.n	8005830 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e00f      	b.n	8005850 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d80b      	bhi.n	800584e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	2301      	movs	r3, #1
 800583a:	425b      	negs	r3, r3
 800583c:	2200      	movs	r2, #0
 800583e:	0018      	movs	r0, r3
 8005840:	f000 fd54 	bl	80062ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_InitTick+0x64>)
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e000      	b.n	8005850 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
}
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b003      	add	sp, #12
 8005856:	bd90      	pop	{r4, r7, pc}
 8005858:	20000000 	.word	0x20000000
 800585c:	20000008 	.word	0x20000008
 8005860:	20000004 	.word	0x20000004

08005864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_IncTick+0x1c>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	001a      	movs	r2, r3
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_IncTick+0x20>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	18d2      	adds	r2, r2, r3
 8005874:	4b03      	ldr	r3, [pc, #12]	; (8005884 <HAL_IncTick+0x20>)
 8005876:	601a      	str	r2, [r3, #0]
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	20000008 	.word	0x20000008
 8005884:	20002410 	.word	0x20002410

08005888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  return uwTick;
 800588c:	4b02      	ldr	r3, [pc, #8]	; (8005898 <HAL_GetTick+0x10>)
 800588e:	681b      	ldr	r3, [r3, #0]
}
 8005890:	0018      	movs	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	20002410 	.word	0x20002410

0800589c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058a4:	f7ff fff0 	bl	8005888 <HAL_GetTick>
 80058a8:	0003      	movs	r3, r0
 80058aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	d005      	beq.n	80058c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <HAL_Delay+0x44>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	001a      	movs	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	189b      	adds	r3, r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	f7ff ffe0 	bl	8005888 <HAL_GetTick>
 80058c8:	0002      	movs	r2, r0
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d8f7      	bhi.n	80058c4 <HAL_Delay+0x28>
  {
  }
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	46bd      	mov	sp, r7
 80058da:	b004      	add	sp, #16
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	20000008 	.word	0x20000008

080058e4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e159      	b.n	8005baa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2250      	movs	r2, #80	; 0x50
 8005908:	2100      	movs	r1, #0
 800590a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	0018      	movs	r0, r3
 8005910:	f7fd fdbe 	bl	8003490 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	2210      	movs	r2, #16
 800591a:	4013      	ands	r3, r2
 800591c:	2b10      	cmp	r3, #16
 800591e:	d005      	beq.n	800592c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2204      	movs	r2, #4
 8005928:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800592a:	d00b      	beq.n	8005944 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	2210      	movs	r2, #16
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2250      	movs	r2, #80	; 0x50
 800593c:	2100      	movs	r1, #0
 800593e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e132      	b.n	8005baa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	4a9a      	ldr	r2, [pc, #616]	; (8005bb4 <HAL_ADC_Init+0x2d0>)
 800594a:	4013      	ands	r3, r2
 800594c:	2202      	movs	r2, #2
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2203      	movs	r2, #3
 800595c:	4013      	ands	r3, r2
 800595e:	2b01      	cmp	r3, #1
 8005960:	d108      	bne.n	8005974 <HAL_ADC_Init+0x90>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2201      	movs	r2, #1
 800596a:	4013      	ands	r3, r2
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_ADC_Init+0x90>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <HAL_ADC_Init+0x92>
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d149      	bne.n	8005a0e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	23c0      	movs	r3, #192	; 0xc0
 8005980:	061b      	lsls	r3, r3, #24
 8005982:	429a      	cmp	r2, r3
 8005984:	d00b      	beq.n	800599e <HAL_ADC_Init+0xba>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	05db      	lsls	r3, r3, #23
 800598e:	429a      	cmp	r2, r3
 8005990:	d005      	beq.n	800599e <HAL_ADC_Init+0xba>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	061b      	lsls	r3, r3, #24
 800599a:	429a      	cmp	r2, r3
 800599c:	d111      	bne.n	80059c2 <HAL_ADC_Init+0xde>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	0092      	lsls	r2, r2, #2
 80059aa:	0892      	lsrs	r2, r2, #2
 80059ac:	611a      	str	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6919      	ldr	r1, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	611a      	str	r2, [r3, #16]
 80059c0:	e014      	b.n	80059ec <HAL_ADC_Init+0x108>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	0092      	lsls	r2, r2, #2
 80059ce:	0892      	lsrs	r2, r2, #2
 80059d0:	611a      	str	r2, [r3, #16]
 80059d2:	4b79      	ldr	r3, [pc, #484]	; (8005bb8 <HAL_ADC_Init+0x2d4>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b78      	ldr	r3, [pc, #480]	; (8005bb8 <HAL_ADC_Init+0x2d4>)
 80059d8:	4978      	ldr	r1, [pc, #480]	; (8005bbc <HAL_ADC_Init+0x2d8>)
 80059da:	400a      	ands	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	4b76      	ldr	r3, [pc, #472]	; (8005bb8 <HAL_ADC_Init+0x2d4>)
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4b74      	ldr	r3, [pc, #464]	; (8005bb8 <HAL_ADC_Init+0x2d4>)
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2118      	movs	r1, #24
 80059f8:	438a      	bics	r2, r1
 80059fa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68d9      	ldr	r1, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005a0e:	4b6a      	ldr	r3, [pc, #424]	; (8005bb8 <HAL_ADC_Init+0x2d4>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b69      	ldr	r3, [pc, #420]	; (8005bb8 <HAL_ADC_Init+0x2d4>)
 8005a14:	496a      	ldr	r1, [pc, #424]	; (8005bc0 <HAL_ADC_Init+0x2dc>)
 8005a16:	400a      	ands	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8005a1a:	4b67      	ldr	r3, [pc, #412]	; (8005bb8 <HAL_ADC_Init+0x2d4>)
 8005a1c:	6819      	ldr	r1, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	065a      	lsls	r2, r3, #25
 8005a24:	4b64      	ldr	r3, [pc, #400]	; (8005bb8 <HAL_ADC_Init+0x2d4>)
 8005a26:	430a      	orrs	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	055b      	lsls	r3, r3, #21
 8005a34:	4013      	ands	r3, r2
 8005a36:	d108      	bne.n	8005a4a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2180      	movs	r1, #128	; 0x80
 8005a44:	0549      	lsls	r1, r1, #21
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	495b      	ldr	r1, [pc, #364]	; (8005bc4 <HAL_ADC_Init+0x2e0>)
 8005a56:	400a      	ands	r2, r1
 8005a58:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68d9      	ldr	r1, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_Init+0x18c>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	e000      	b.n	8005a72 <HAL_ADC_Init+0x18e>
 8005a70:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005a72:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2020      	movs	r0, #32
 8005a78:	5c1b      	ldrb	r3, [r3, r0]
 8005a7a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005a7c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	202c      	movs	r0, #44	; 0x2c
 8005a82:	5c1b      	ldrb	r3, [r3, r0]
 8005a84:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005a86:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005a8c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005a94:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005a9c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aaa:	23c2      	movs	r3, #194	; 0xc2
 8005aac:	33ff      	adds	r3, #255	; 0xff
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d00b      	beq.n	8005aca <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68d9      	ldr	r1, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2221      	movs	r2, #33	; 0x21
 8005ace:	5c9b      	ldrb	r3, [r3, r2]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d11a      	bne.n	8005b0a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	5c9b      	ldrb	r3, [r3, r2]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2180      	movs	r1, #128	; 0x80
 8005aea:	0249      	lsls	r1, r1, #9
 8005aec:	430a      	orrs	r2, r1
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	e00b      	b.n	8005b0a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	2220      	movs	r2, #32
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b02:	2201      	movs	r2, #1
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d11f      	bne.n	8005b52 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	492a      	ldr	r1, [pc, #168]	; (8005bc8 <HAL_ADC_Init+0x2e4>)
 8005b1e:	400a      	ands	r2, r1
 8005b20:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6919      	ldr	r1, [r3, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005b30:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8005b36:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	611a      	str	r2, [r3, #16]
 8005b50:	e00e      	b.n	8005b70 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d107      	bne.n	8005b70 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	438a      	bics	r2, r1
 8005b6e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2107      	movs	r1, #7
 8005b7c:	438a      	bics	r2, r1
 8005b7e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6959      	ldr	r1, [r3, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b002      	add	sp, #8
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	fffffefd 	.word	0xfffffefd
 8005bb8:	40012708 	.word	0x40012708
 8005bbc:	ffc3ffff 	.word	0xffc3ffff
 8005bc0:	fdffffff 	.word	0xfdffffff
 8005bc4:	fffe0219 	.word	0xfffe0219
 8005bc8:	fffffc03 	.word	0xfffffc03

08005bcc <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005bcc:	b590      	push	{r4, r7, lr}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bd8:	2317      	movs	r3, #23
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2204      	movs	r2, #4
 8005be8:	4013      	ands	r3, r2
 8005bea:	d15e      	bne.n	8005caa <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2250      	movs	r2, #80	; 0x50
 8005bf0:	5c9b      	ldrb	r3, [r3, r2]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_ADC_Start_DMA+0x2e>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e05e      	b.n	8005cb8 <HAL_ADC_Start_DMA+0xec>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2250      	movs	r2, #80	; 0x50
 8005bfe:	2101      	movs	r1, #1
 8005c00:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d007      	beq.n	8005c2a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005c1a:	2317      	movs	r3, #23
 8005c1c:	18fc      	adds	r4, r7, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 f90d 	bl	8005e40 <ADC_Enable>
 8005c26:	0003      	movs	r3, r0
 8005c28:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005c2a:	2317      	movs	r3, #23
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d13e      	bne.n	8005cb2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <HAL_ADC_Start_DMA+0xf4>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2280      	movs	r2, #128	; 0x80
 8005c3e:	0052      	lsls	r2, r2, #1
 8005c40:	431a      	orrs	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2250      	movs	r2, #80	; 0x50
 8005c50:	2100      	movs	r1, #0
 8005c52:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c58:	4a1a      	ldr	r2, [pc, #104]	; (8005cc4 <HAL_ADC_Start_DMA+0xf8>)
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <HAL_ADC_Start_DMA+0xfc>)
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c68:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <HAL_ADC_Start_DMA+0x100>)
 8005c6a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	221c      	movs	r2, #28
 8005c72:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2110      	movs	r1, #16
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3340      	adds	r3, #64	; 0x40
 8005c8e:	0019      	movs	r1, r3
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f000 fbd4 	bl	8006440 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
 8005ca8:	e003      	b.n	8005cb2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005caa:	2317      	movs	r3, #23
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	2202      	movs	r2, #2
 8005cb0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005cb2:	2317      	movs	r3, #23
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	781b      	ldrb	r3, [r3, #0]
}
 8005cb8:	0018      	movs	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b007      	add	sp, #28
 8005cbe:	bd90      	pop	{r4, r7, pc}
 8005cc0:	fffff0fe 	.word	0xfffff0fe
 8005cc4:	08005f11 	.word	0x08005f11
 8005cc8:	08005fc5 	.word	0x08005fc5
 8005ccc:	08005fe3 	.word	0x08005fe3

08005cd0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005ce8:	46c0      	nop			; (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b002      	add	sp, #8
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005cf8:	46c0      	nop			; (mov r8, r8)
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b002      	add	sp, #8
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2250      	movs	r2, #80	; 0x50
 8005d0e:	5c9b      	ldrb	r3, [r3, r2]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_ADC_ConfigChannel+0x18>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e085      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x124>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2250      	movs	r2, #80	; 0x50
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2204      	movs	r2, #4
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d00b      	beq.n	8005d44 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	2220      	movs	r2, #32
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2250      	movs	r2, #80	; 0x50
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e06f      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a38      	ldr	r2, [pc, #224]	; (8005e2c <HAL_ADC_ConfigChannel+0x12c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d035      	beq.n	8005dba <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	035b      	lsls	r3, r3, #13
 8005d5a:	0b5a      	lsrs	r2, r3, #13
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	02db      	lsls	r3, r3, #11
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8005d70:	4b2f      	ldr	r3, [pc, #188]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b2e      	ldr	r3, [pc, #184]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005d76:	2180      	movs	r1, #128	; 0x80
 8005d78:	0409      	lsls	r1, r1, #16
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005d7e:	200a      	movs	r0, #10
 8005d80:	f000 f94a 	bl	8006018 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	029b      	lsls	r3, r3, #10
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d006      	beq.n	8005d9e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005d96:	2180      	movs	r1, #128	; 0x80
 8005d98:	03c9      	lsls	r1, r1, #15
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	025b      	lsls	r3, r3, #9
 8005da6:	4013      	ands	r3, r2
 8005da8:	d037      	beq.n	8005e1a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8005daa:	4b21      	ldr	r3, [pc, #132]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	0449      	lsls	r1, r1, #17
 8005db4:	430a      	orrs	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e02f      	b.n	8005e1a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	035b      	lsls	r3, r3, #13
 8005dc6:	0b5b      	lsrs	r3, r3, #13
 8005dc8:	43d9      	mvns	r1, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	400a      	ands	r2, r1
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	2380      	movs	r3, #128	; 0x80
 8005dd8:	02db      	lsls	r3, r3, #11
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d005      	beq.n	8005dea <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005dde:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005de4:	4913      	ldr	r1, [pc, #76]	; (8005e34 <HAL_ADC_ConfigChannel+0x134>)
 8005de6:	400a      	ands	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	029b      	lsls	r3, r3, #10
 8005df2:	4013      	ands	r3, r2
 8005df4:	d005      	beq.n	8005e02 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005dfc:	490e      	ldr	r1, [pc, #56]	; (8005e38 <HAL_ADC_ConfigChannel+0x138>)
 8005dfe:	400a      	ands	r2, r1
 8005e00:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	025b      	lsls	r3, r3, #9
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d005      	beq.n	8005e1a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8005e0e:	4b08      	ldr	r3, [pc, #32]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <HAL_ADC_ConfigChannel+0x130>)
 8005e14:	4909      	ldr	r1, [pc, #36]	; (8005e3c <HAL_ADC_ConfigChannel+0x13c>)
 8005e16:	400a      	ands	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2250      	movs	r2, #80	; 0x50
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	00001001 	.word	0x00001001
 8005e30:	40012708 	.word	0x40012708
 8005e34:	ff7fffff 	.word	0xff7fffff
 8005e38:	ffbfffff 	.word	0xffbfffff
 8005e3c:	feffffff 	.word	0xfeffffff

08005e40 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2203      	movs	r2, #3
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d108      	bne.n	8005e6c <ADC_Enable+0x2c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <ADC_Enable+0x2c>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <ADC_Enable+0x2e>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d146      	bne.n	8005f00 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a24      	ldr	r2, [pc, #144]	; (8005f0c <ADC_Enable+0xcc>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d00d      	beq.n	8005e9a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	2210      	movs	r2, #16
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8e:	2201      	movs	r2, #1
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e033      	b.n	8005f02 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8005eaa:	2001      	movs	r0, #1
 8005eac:	f000 f8b4 	bl	8006018 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eb0:	f7ff fcea 	bl	8005888 <HAL_GetTick>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005eb8:	e01b      	b.n	8005ef2 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005eba:	f7ff fce5 	bl	8005888 <HAL_GetTick>
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b0a      	cmp	r3, #10
 8005ec6:	d914      	bls.n	8005ef2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d00d      	beq.n	8005ef2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eda:	2210      	movs	r2, #16
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e007      	b.n	8005f02 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d1dc      	bne.n	8005eba <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	0018      	movs	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b004      	add	sp, #16
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	80000017 	.word	0x80000017

08005f10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	2250      	movs	r2, #80	; 0x50
 8005f24:	4013      	ands	r3, r2
 8005f26:	d141      	bne.n	8005fac <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2c:	2280      	movs	r2, #128	; 0x80
 8005f2e:	0092      	lsls	r2, r2, #2
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	23c0      	movs	r3, #192	; 0xc0
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	4013      	ands	r3, r2
 8005f42:	d12e      	bne.n	8005fa2 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d129      	bne.n	8005fa2 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2208      	movs	r2, #8
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d122      	bne.n	8005fa2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2204      	movs	r2, #4
 8005f64:	4013      	ands	r3, r2
 8005f66:	d110      	bne.n	8005f8a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	210c      	movs	r1, #12
 8005f74:	438a      	bics	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	4a10      	ldr	r2, [pc, #64]	; (8005fc0 <ADC_DMAConvCplt+0xb0>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2201      	movs	r2, #1
 8005f82:	431a      	orrs	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
 8005f88:	e00b      	b.n	8005fa2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8e:	2220      	movs	r2, #32
 8005f90:	431a      	orrs	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7ff fe93 	bl	8005cd0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005faa:	e005      	b.n	8005fb8 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	0010      	movs	r0, r2
 8005fb6:	4798      	blx	r3
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b004      	add	sp, #16
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	fffffefe 	.word	0xfffffefe

08005fc4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f7ff fe83 	bl	8005ce0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b004      	add	sp, #16
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	2240      	movs	r2, #64	; 0x40
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006000:	2204      	movs	r2, #4
 8006002:	431a      	orrs	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	0018      	movs	r0, r3
 800600c:	f7ff fe70 	bl	8005cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	b004      	add	sp, #16
 8006016:	bd80      	pop	{r7, pc}

08006018 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <ADC_DelayMicroSecond+0x38>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	490b      	ldr	r1, [pc, #44]	; (8006054 <ADC_DelayMicroSecond+0x3c>)
 8006026:	0018      	movs	r0, r3
 8006028:	f7fa f88a 	bl	8000140 <__udivsi3>
 800602c:	0003      	movs	r3, r0
 800602e:	001a      	movs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4353      	muls	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006036:	e002      	b.n	800603e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3b01      	subs	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f9      	bne.n	8006038 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006044:	46c0      	nop			; (mov r8, r8)
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	46bd      	mov	sp, r7
 800604a:	b004      	add	sp, #16
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	20000000 	.word	0x20000000
 8006054:	000f4240 	.word	0x000f4240

08006058 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006062:	2317      	movs	r3, #23
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2250      	movs	r2, #80	; 0x50
 8006076:	5c9b      	ldrb	r3, [r3, r2]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_ADCEx_Calibration_Start+0x28>
 800607c:	2302      	movs	r3, #2
 800607e:	e083      	b.n	8006188 <HAL_ADCEx_Calibration_Start+0x130>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2250      	movs	r2, #80	; 0x50
 8006084:	2101      	movs	r1, #1
 8006086:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2203      	movs	r2, #3
 8006090:	4013      	ands	r3, r2
 8006092:	2b01      	cmp	r3, #1
 8006094:	d108      	bne.n	80060a8 <HAL_ADCEx_Calibration_Start+0x50>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2201      	movs	r2, #1
 800609e:	4013      	ands	r3, r2
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_ADCEx_Calibration_Start+0x50>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_ADCEx_Calibration_Start+0x52>
 80060a8:	2300      	movs	r3, #0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d15b      	bne.n	8006166 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b2:	4a37      	ldr	r2, [pc, #220]	; (8006190 <HAL_ADCEx_Calibration_Start+0x138>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	2202      	movs	r2, #2
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2203      	movs	r2, #3
 80060c6:	4013      	ands	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2103      	movs	r1, #3
 80060d6:	438a      	bics	r2, r1
 80060d8:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2180      	movs	r1, #128	; 0x80
 80060e6:	0609      	lsls	r1, r1, #24
 80060e8:	430a      	orrs	r2, r1
 80060ea:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80060ec:	f7ff fbcc 	bl	8005888 <HAL_GetTick>
 80060f0:	0003      	movs	r3, r0
 80060f2:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80060f4:	e01d      	b.n	8006132 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80060f6:	f7ff fbc7 	bl	8005888 <HAL_GetTick>
 80060fa:	0002      	movs	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b0a      	cmp	r3, #10
 8006102:	d916      	bls.n	8006132 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	0fdb      	lsrs	r3, r3, #31
 800610c:	07da      	lsls	r2, r3, #31
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	429a      	cmp	r2, r3
 8006114:	d10d      	bne.n	8006132 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	2212      	movs	r2, #18
 800611c:	4393      	bics	r3, r2
 800611e:	2210      	movs	r2, #16
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2250      	movs	r2, #80	; 0x50
 800612a:	2100      	movs	r1, #0
 800612c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e02a      	b.n	8006188 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	0fdb      	lsrs	r3, r3, #31
 800613a:	07da      	lsls	r2, r3, #31
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	061b      	lsls	r3, r3, #24
 8006140:	429a      	cmp	r2, r3
 8006142:	d0d8      	beq.n	80060f6 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68d9      	ldr	r1, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	430a      	orrs	r2, r1
 8006152:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006158:	2203      	movs	r2, #3
 800615a:	4393      	bics	r3, r2
 800615c:	2201      	movs	r2, #1
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	655a      	str	r2, [r3, #84]	; 0x54
 8006164:	e009      	b.n	800617a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	2220      	movs	r2, #32
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006172:	2317      	movs	r3, #23
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2250      	movs	r2, #80	; 0x50
 800617e:	2100      	movs	r1, #0
 8006180:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006182:	2317      	movs	r3, #23
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	781b      	ldrb	r3, [r3, #0]
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b006      	add	sp, #24
 800618e:	bd80      	pop	{r7, pc}
 8006190:	fffffefd 	.word	0xfffffefd

08006194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	0002      	movs	r2, r0
 800619c:	1dfb      	adds	r3, r7, #7
 800619e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80061a0:	1dfb      	adds	r3, r7, #7
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b7f      	cmp	r3, #127	; 0x7f
 80061a6:	d809      	bhi.n	80061bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061a8:	1dfb      	adds	r3, r7, #7
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	001a      	movs	r2, r3
 80061ae:	231f      	movs	r3, #31
 80061b0:	401a      	ands	r2, r3
 80061b2:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <__NVIC_EnableIRQ+0x30>)
 80061b4:	2101      	movs	r1, #1
 80061b6:	4091      	lsls	r1, r2
 80061b8:	000a      	movs	r2, r1
 80061ba:	601a      	str	r2, [r3, #0]
  }
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b002      	add	sp, #8
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	e000e100 	.word	0xe000e100

080061c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061c8:	b590      	push	{r4, r7, lr}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	0002      	movs	r2, r0
 80061d0:	6039      	str	r1, [r7, #0]
 80061d2:	1dfb      	adds	r3, r7, #7
 80061d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80061d6:	1dfb      	adds	r3, r7, #7
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b7f      	cmp	r3, #127	; 0x7f
 80061dc:	d828      	bhi.n	8006230 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061de:	4a2f      	ldr	r2, [pc, #188]	; (800629c <__NVIC_SetPriority+0xd4>)
 80061e0:	1dfb      	adds	r3, r7, #7
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b25b      	sxtb	r3, r3
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	33c0      	adds	r3, #192	; 0xc0
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	589b      	ldr	r3, [r3, r2]
 80061ee:	1dfa      	adds	r2, r7, #7
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	0011      	movs	r1, r2
 80061f4:	2203      	movs	r2, #3
 80061f6:	400a      	ands	r2, r1
 80061f8:	00d2      	lsls	r2, r2, #3
 80061fa:	21ff      	movs	r1, #255	; 0xff
 80061fc:	4091      	lsls	r1, r2
 80061fe:	000a      	movs	r2, r1
 8006200:	43d2      	mvns	r2, r2
 8006202:	401a      	ands	r2, r3
 8006204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	019b      	lsls	r3, r3, #6
 800620a:	22ff      	movs	r2, #255	; 0xff
 800620c:	401a      	ands	r2, r3
 800620e:	1dfb      	adds	r3, r7, #7
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	0018      	movs	r0, r3
 8006214:	2303      	movs	r3, #3
 8006216:	4003      	ands	r3, r0
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800621c:	481f      	ldr	r0, [pc, #124]	; (800629c <__NVIC_SetPriority+0xd4>)
 800621e:	1dfb      	adds	r3, r7, #7
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	b25b      	sxtb	r3, r3
 8006224:	089b      	lsrs	r3, r3, #2
 8006226:	430a      	orrs	r2, r1
 8006228:	33c0      	adds	r3, #192	; 0xc0
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800622e:	e031      	b.n	8006294 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006230:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <__NVIC_SetPriority+0xd8>)
 8006232:	1dfb      	adds	r3, r7, #7
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	0019      	movs	r1, r3
 8006238:	230f      	movs	r3, #15
 800623a:	400b      	ands	r3, r1
 800623c:	3b08      	subs	r3, #8
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	3306      	adds	r3, #6
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	18d3      	adds	r3, r2, r3
 8006246:	3304      	adds	r3, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	1dfa      	adds	r2, r7, #7
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	0011      	movs	r1, r2
 8006250:	2203      	movs	r2, #3
 8006252:	400a      	ands	r2, r1
 8006254:	00d2      	lsls	r2, r2, #3
 8006256:	21ff      	movs	r1, #255	; 0xff
 8006258:	4091      	lsls	r1, r2
 800625a:	000a      	movs	r2, r1
 800625c:	43d2      	mvns	r2, r2
 800625e:	401a      	ands	r2, r3
 8006260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	019b      	lsls	r3, r3, #6
 8006266:	22ff      	movs	r2, #255	; 0xff
 8006268:	401a      	ands	r2, r3
 800626a:	1dfb      	adds	r3, r7, #7
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	0018      	movs	r0, r3
 8006270:	2303      	movs	r3, #3
 8006272:	4003      	ands	r3, r0
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006278:	4809      	ldr	r0, [pc, #36]	; (80062a0 <__NVIC_SetPriority+0xd8>)
 800627a:	1dfb      	adds	r3, r7, #7
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	001c      	movs	r4, r3
 8006280:	230f      	movs	r3, #15
 8006282:	4023      	ands	r3, r4
 8006284:	3b08      	subs	r3, #8
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	430a      	orrs	r2, r1
 800628a:	3306      	adds	r3, #6
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	18c3      	adds	r3, r0, r3
 8006290:	3304      	adds	r3, #4
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	46c0      	nop			; (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	b003      	add	sp, #12
 800629a:	bd90      	pop	{r4, r7, pc}
 800629c:	e000e100 	.word	0xe000e100
 80062a0:	e000ed00 	.word	0xe000ed00

080062a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	045b      	lsls	r3, r3, #17
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d301      	bcc.n	80062bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062b8:	2301      	movs	r3, #1
 80062ba:	e010      	b.n	80062de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <SysTick_Config+0x44>)
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	3a01      	subs	r2, #1
 80062c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062c4:	2301      	movs	r3, #1
 80062c6:	425b      	negs	r3, r3
 80062c8:	2103      	movs	r1, #3
 80062ca:	0018      	movs	r0, r3
 80062cc:	f7ff ff7c 	bl	80061c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <SysTick_Config+0x44>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062d6:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <SysTick_Config+0x44>)
 80062d8:	2207      	movs	r2, #7
 80062da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062dc:	2300      	movs	r3, #0
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b002      	add	sp, #8
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	e000e010 	.word	0xe000e010

080062ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	210f      	movs	r1, #15
 80062f8:	187b      	adds	r3, r7, r1
 80062fa:	1c02      	adds	r2, r0, #0
 80062fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	187b      	adds	r3, r7, r1
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b25b      	sxtb	r3, r3
 8006306:	0011      	movs	r1, r2
 8006308:	0018      	movs	r0, r3
 800630a:	f7ff ff5d 	bl	80061c8 <__NVIC_SetPriority>
}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b004      	add	sp, #16
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	0002      	movs	r2, r0
 800631e:	1dfb      	adds	r3, r7, #7
 8006320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006322:	1dfb      	adds	r3, r7, #7
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	b25b      	sxtb	r3, r3
 8006328:	0018      	movs	r0, r3
 800632a:	f7ff ff33 	bl	8006194 <__NVIC_EnableIRQ>
}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	b002      	add	sp, #8
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f7ff ffaf 	bl	80062a4 <SysTick_Config>
 8006346:	0003      	movs	r3, r0
}
 8006348:	0018      	movs	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	b002      	add	sp, #8
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e061      	b.n	8006426 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a32      	ldr	r2, [pc, #200]	; (8006430 <HAL_DMA_Init+0xe0>)
 8006368:	4694      	mov	ip, r2
 800636a:	4463      	add	r3, ip
 800636c:	2114      	movs	r1, #20
 800636e:	0018      	movs	r0, r3
 8006370:	f7f9 fee6 	bl	8000140 <__udivsi3>
 8006374:	0003      	movs	r3, r0
 8006376:	009a      	lsls	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <HAL_DMA_Init+0xe4>)
 8006380:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2225      	movs	r2, #37	; 0x25
 8006386:	2102      	movs	r1, #2
 8006388:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a28      	ldr	r2, [pc, #160]	; (8006438 <HAL_DMA_Init+0xe8>)
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80063a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	2380      	movs	r3, #128	; 0x80
 80063d6:	01db      	lsls	r3, r3, #7
 80063d8:	429a      	cmp	r2, r3
 80063da:	d018      	beq.n	800640e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80063dc:	4b17      	ldr	r3, [pc, #92]	; (800643c <HAL_DMA_Init+0xec>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e4:	211c      	movs	r1, #28
 80063e6:	400b      	ands	r3, r1
 80063e8:	210f      	movs	r1, #15
 80063ea:	4099      	lsls	r1, r3
 80063ec:	000b      	movs	r3, r1
 80063ee:	43d9      	mvns	r1, r3
 80063f0:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_DMA_Init+0xec>)
 80063f2:	400a      	ands	r2, r1
 80063f4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80063f6:	4b11      	ldr	r3, [pc, #68]	; (800643c <HAL_DMA_Init+0xec>)
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	201c      	movs	r0, #28
 8006404:	4003      	ands	r3, r0
 8006406:	409a      	lsls	r2, r3
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <HAL_DMA_Init+0xec>)
 800640a:	430a      	orrs	r2, r1
 800640c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2225      	movs	r2, #37	; 0x25
 8006418:	2101      	movs	r1, #1
 800641a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2224      	movs	r2, #36	; 0x24
 8006420:	2100      	movs	r1, #0
 8006422:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	0018      	movs	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	b004      	add	sp, #16
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	bffdfff8 	.word	0xbffdfff8
 8006434:	40020000 	.word	0x40020000
 8006438:	ffff800f 	.word	0xffff800f
 800643c:	400200a8 	.word	0x400200a8

08006440 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800644e:	2317      	movs	r3, #23
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2224      	movs	r2, #36	; 0x24
 800645a:	5c9b      	ldrb	r3, [r3, r2]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_DMA_Start_IT+0x24>
 8006460:	2302      	movs	r3, #2
 8006462:	e04f      	b.n	8006504 <HAL_DMA_Start_IT+0xc4>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2224      	movs	r2, #36	; 0x24
 8006468:	2101      	movs	r1, #1
 800646a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2225      	movs	r2, #37	; 0x25
 8006470:	5c9b      	ldrb	r3, [r3, r2]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	d13a      	bne.n	80064ee <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2225      	movs	r2, #37	; 0x25
 800647c:	2102      	movs	r1, #2
 800647e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2101      	movs	r1, #1
 8006492:	438a      	bics	r2, r1
 8006494:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f8bc 	bl	800661a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d008      	beq.n	80064bc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	210e      	movs	r1, #14
 80064b6:	430a      	orrs	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e00f      	b.n	80064dc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2104      	movs	r1, #4
 80064c8:	438a      	bics	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	210a      	movs	r1, #10
 80064d8:	430a      	orrs	r2, r1
 80064da:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2101      	movs	r1, #1
 80064e8:	430a      	orrs	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e007      	b.n	80064fe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2224      	movs	r2, #36	; 0x24
 80064f2:	2100      	movs	r1, #0
 80064f4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80064f6:	2317      	movs	r3, #23
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	2202      	movs	r2, #2
 80064fc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80064fe:	2317      	movs	r3, #23
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	781b      	ldrb	r3, [r3, #0]
}
 8006504:	0018      	movs	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	b006      	add	sp, #24
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006514:	230f      	movs	r3, #15
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2225      	movs	r2, #37	; 0x25
 8006520:	5c9b      	ldrb	r3, [r3, r2]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d008      	beq.n	800653a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2204      	movs	r2, #4
 800652c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2224      	movs	r2, #36	; 0x24
 8006532:	2100      	movs	r1, #0
 8006534:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e024      	b.n	8006584 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	210e      	movs	r1, #14
 8006546:	438a      	bics	r2, r1
 8006548:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2101      	movs	r1, #1
 8006556:	438a      	bics	r2, r1
 8006558:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	221c      	movs	r2, #28
 8006560:	401a      	ands	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	2101      	movs	r1, #1
 8006568:	4091      	lsls	r1, r2
 800656a:	000a      	movs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2225      	movs	r2, #37	; 0x25
 8006572:	2101      	movs	r1, #1
 8006574:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2224      	movs	r2, #36	; 0x24
 800657a:	2100      	movs	r1, #0
 800657c:	5499      	strb	r1, [r3, r2]

    return status;
 800657e:	230f      	movs	r3, #15
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006584:	0018      	movs	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	b004      	add	sp, #16
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006594:	210f      	movs	r1, #15
 8006596:	187b      	adds	r3, r7, r1
 8006598:	2200      	movs	r2, #0
 800659a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2225      	movs	r2, #37	; 0x25
 80065a0:	5c9b      	ldrb	r3, [r3, r2]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d006      	beq.n	80065b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2204      	movs	r2, #4
 80065ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80065ae:	187b      	adds	r3, r7, r1
 80065b0:	2201      	movs	r2, #1
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	e02a      	b.n	800660c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	210e      	movs	r1, #14
 80065c2:	438a      	bics	r2, r1
 80065c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2101      	movs	r1, #1
 80065d2:	438a      	bics	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	221c      	movs	r2, #28
 80065dc:	401a      	ands	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	2101      	movs	r1, #1
 80065e4:	4091      	lsls	r1, r2
 80065e6:	000a      	movs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2225      	movs	r2, #37	; 0x25
 80065ee:	2101      	movs	r1, #1
 80065f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2224      	movs	r2, #36	; 0x24
 80065f6:	2100      	movs	r1, #0
 80065f8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	0010      	movs	r0, r2
 800660a:	4798      	blx	r3
    }
  }
  return status;
 800660c:	230f      	movs	r3, #15
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	781b      	ldrb	r3, [r3, #0]
}
 8006612:	0018      	movs	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	b004      	add	sp, #16
 8006618:	bd80      	pop	{r7, pc}

0800661a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	607a      	str	r2, [r7, #4]
 8006626:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662c:	221c      	movs	r2, #28
 800662e:	401a      	ands	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	2101      	movs	r1, #1
 8006636:	4091      	lsls	r1, r2
 8006638:	000a      	movs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b10      	cmp	r3, #16
 800664a:	d108      	bne.n	800665e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800665c:	e007      	b.n	800666e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	60da      	str	r2, [r3, #12]
}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	46bd      	mov	sp, r7
 8006672:	b004      	add	sp, #16
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800668e:	e155      	b.n	800693c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2101      	movs	r1, #1
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4091      	lsls	r1, r2
 800669a:	000a      	movs	r2, r1
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d100      	bne.n	80066a8 <HAL_GPIO_Init+0x30>
 80066a6:	e146      	b.n	8006936 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2203      	movs	r2, #3
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d005      	beq.n	80066c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2203      	movs	r2, #3
 80066ba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d130      	bne.n	8006722 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	2203      	movs	r2, #3
 80066cc:	409a      	lsls	r2, r3
 80066ce:	0013      	movs	r3, r2
 80066d0:	43da      	mvns	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4013      	ands	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	409a      	lsls	r2, r3
 80066e2:	0013      	movs	r3, r2
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066f6:	2201      	movs	r2, #1
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	409a      	lsls	r2, r3
 80066fc:	0013      	movs	r3, r2
 80066fe:	43da      	mvns	r2, r3
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4013      	ands	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	091b      	lsrs	r3, r3, #4
 800670c:	2201      	movs	r2, #1
 800670e:	401a      	ands	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	409a      	lsls	r2, r3
 8006714:	0013      	movs	r3, r2
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2203      	movs	r2, #3
 8006728:	4013      	ands	r3, r2
 800672a:	2b03      	cmp	r3, #3
 800672c:	d017      	beq.n	800675e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	2203      	movs	r2, #3
 800673a:	409a      	lsls	r2, r3
 800673c:	0013      	movs	r3, r2
 800673e:	43da      	mvns	r2, r3
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4013      	ands	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	409a      	lsls	r2, r3
 8006750:	0013      	movs	r3, r2
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2203      	movs	r2, #3
 8006764:	4013      	ands	r3, r2
 8006766:	2b02      	cmp	r3, #2
 8006768:	d123      	bne.n	80067b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	08da      	lsrs	r2, r3, #3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3208      	adds	r2, #8
 8006772:	0092      	lsls	r2, r2, #2
 8006774:	58d3      	ldr	r3, [r2, r3]
 8006776:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2207      	movs	r2, #7
 800677c:	4013      	ands	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	220f      	movs	r2, #15
 8006782:	409a      	lsls	r2, r3
 8006784:	0013      	movs	r3, r2
 8006786:	43da      	mvns	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4013      	ands	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2107      	movs	r1, #7
 8006796:	400b      	ands	r3, r1
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	409a      	lsls	r2, r3
 800679c:	0013      	movs	r3, r2
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	08da      	lsrs	r2, r3, #3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3208      	adds	r2, #8
 80067ac:	0092      	lsls	r2, r2, #2
 80067ae:	6939      	ldr	r1, [r7, #16]
 80067b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	2203      	movs	r2, #3
 80067be:	409a      	lsls	r2, r3
 80067c0:	0013      	movs	r3, r2
 80067c2:	43da      	mvns	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4013      	ands	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2203      	movs	r2, #3
 80067d0:	401a      	ands	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	409a      	lsls	r2, r3
 80067d8:	0013      	movs	r3, r2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	23c0      	movs	r3, #192	; 0xc0
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	4013      	ands	r3, r2
 80067f0:	d100      	bne.n	80067f4 <HAL_GPIO_Init+0x17c>
 80067f2:	e0a0      	b.n	8006936 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067f4:	4b57      	ldr	r3, [pc, #348]	; (8006954 <HAL_GPIO_Init+0x2dc>)
 80067f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f8:	4b56      	ldr	r3, [pc, #344]	; (8006954 <HAL_GPIO_Init+0x2dc>)
 80067fa:	2101      	movs	r1, #1
 80067fc:	430a      	orrs	r2, r1
 80067fe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006800:	4a55      	ldr	r2, [pc, #340]	; (8006958 <HAL_GPIO_Init+0x2e0>)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	3302      	adds	r3, #2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	589b      	ldr	r3, [r3, r2]
 800680c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2203      	movs	r2, #3
 8006812:	4013      	ands	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	220f      	movs	r2, #15
 8006818:	409a      	lsls	r2, r3
 800681a:	0013      	movs	r3, r2
 800681c:	43da      	mvns	r2, r3
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4013      	ands	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	23a0      	movs	r3, #160	; 0xa0
 8006828:	05db      	lsls	r3, r3, #23
 800682a:	429a      	cmp	r2, r3
 800682c:	d01f      	beq.n	800686e <HAL_GPIO_Init+0x1f6>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a4a      	ldr	r2, [pc, #296]	; (800695c <HAL_GPIO_Init+0x2e4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d019      	beq.n	800686a <HAL_GPIO_Init+0x1f2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a49      	ldr	r2, [pc, #292]	; (8006960 <HAL_GPIO_Init+0x2e8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <HAL_GPIO_Init+0x1ee>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a48      	ldr	r2, [pc, #288]	; (8006964 <HAL_GPIO_Init+0x2ec>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00d      	beq.n	8006862 <HAL_GPIO_Init+0x1ea>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a47      	ldr	r2, [pc, #284]	; (8006968 <HAL_GPIO_Init+0x2f0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <HAL_GPIO_Init+0x1e6>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a46      	ldr	r2, [pc, #280]	; (800696c <HAL_GPIO_Init+0x2f4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d101      	bne.n	800685a <HAL_GPIO_Init+0x1e2>
 8006856:	2305      	movs	r3, #5
 8006858:	e00a      	b.n	8006870 <HAL_GPIO_Init+0x1f8>
 800685a:	2306      	movs	r3, #6
 800685c:	e008      	b.n	8006870 <HAL_GPIO_Init+0x1f8>
 800685e:	2304      	movs	r3, #4
 8006860:	e006      	b.n	8006870 <HAL_GPIO_Init+0x1f8>
 8006862:	2303      	movs	r3, #3
 8006864:	e004      	b.n	8006870 <HAL_GPIO_Init+0x1f8>
 8006866:	2302      	movs	r3, #2
 8006868:	e002      	b.n	8006870 <HAL_GPIO_Init+0x1f8>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <HAL_GPIO_Init+0x1f8>
 800686e:	2300      	movs	r3, #0
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	2103      	movs	r1, #3
 8006874:	400a      	ands	r2, r1
 8006876:	0092      	lsls	r2, r2, #2
 8006878:	4093      	lsls	r3, r2
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006880:	4935      	ldr	r1, [pc, #212]	; (8006958 <HAL_GPIO_Init+0x2e0>)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	3302      	adds	r3, #2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800688e:	4b38      	ldr	r3, [pc, #224]	; (8006970 <HAL_GPIO_Init+0x2f8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	43da      	mvns	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4013      	ands	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	025b      	lsls	r3, r3, #9
 80068a6:	4013      	ands	r3, r2
 80068a8:	d003      	beq.n	80068b2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80068b2:	4b2f      	ldr	r3, [pc, #188]	; (8006970 <HAL_GPIO_Init+0x2f8>)
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80068b8:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <HAL_GPIO_Init+0x2f8>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	43da      	mvns	r2, r3
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4013      	ands	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	029b      	lsls	r3, r3, #10
 80068d0:	4013      	ands	r3, r2
 80068d2:	d003      	beq.n	80068dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80068dc:	4b24      	ldr	r3, [pc, #144]	; (8006970 <HAL_GPIO_Init+0x2f8>)
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068e2:	4b23      	ldr	r3, [pc, #140]	; (8006970 <HAL_GPIO_Init+0x2f8>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	43da      	mvns	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	4013      	ands	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	2380      	movs	r3, #128	; 0x80
 80068f8:	035b      	lsls	r3, r3, #13
 80068fa:	4013      	ands	r3, r2
 80068fc:	d003      	beq.n	8006906 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006906:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <HAL_GPIO_Init+0x2f8>)
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <HAL_GPIO_Init+0x2f8>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	43da      	mvns	r2, r3
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	4013      	ands	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	039b      	lsls	r3, r3, #14
 8006924:	4013      	ands	r3, r2
 8006926:	d003      	beq.n	8006930 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006930:	4b0f      	ldr	r3, [pc, #60]	; (8006970 <HAL_GPIO_Init+0x2f8>)
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	3301      	adds	r3, #1
 800693a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	40da      	lsrs	r2, r3
 8006944:	1e13      	subs	r3, r2, #0
 8006946:	d000      	beq.n	800694a <HAL_GPIO_Init+0x2d2>
 8006948:	e6a2      	b.n	8006690 <HAL_GPIO_Init+0x18>
  }
}
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	46c0      	nop			; (mov r8, r8)
 800694e:	46bd      	mov	sp, r7
 8006950:	b006      	add	sp, #24
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40021000 	.word	0x40021000
 8006958:	40010000 	.word	0x40010000
 800695c:	50000400 	.word	0x50000400
 8006960:	50000800 	.word	0x50000800
 8006964:	50000c00 	.word	0x50000c00
 8006968:	50001000 	.word	0x50001000
 800696c:	50001c00 	.word	0x50001c00
 8006970:	40010400 	.word	0x40010400

08006974 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	0008      	movs	r0, r1
 800697e:	0011      	movs	r1, r2
 8006980:	1cbb      	adds	r3, r7, #2
 8006982:	1c02      	adds	r2, r0, #0
 8006984:	801a      	strh	r2, [r3, #0]
 8006986:	1c7b      	adds	r3, r7, #1
 8006988:	1c0a      	adds	r2, r1, #0
 800698a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800698c:	1c7b      	adds	r3, r7, #1
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006994:	1cbb      	adds	r3, r7, #2
 8006996:	881a      	ldrh	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800699c:	e003      	b.n	80069a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800699e:	1cbb      	adds	r3, r7, #2
 80069a0:	881a      	ldrh	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b002      	add	sp, #8
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	0002      	movs	r2, r0
 80069b8:	1dbb      	adds	r3, r7, #6
 80069ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80069bc:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	1dba      	adds	r2, r7, #6
 80069c2:	8812      	ldrh	r2, [r2, #0]
 80069c4:	4013      	ands	r3, r2
 80069c6:	d008      	beq.n	80069da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80069ca:	1dba      	adds	r2, r7, #6
 80069cc:	8812      	ldrh	r2, [r2, #0]
 80069ce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069d0:	1dbb      	adds	r3, r7, #6
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7fd f945 	bl	8003c64 <HAL_GPIO_EXTI_Callback>
  }
}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	46bd      	mov	sp, r7
 80069de:	b002      	add	sp, #8
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	40010400 	.word	0x40010400

080069e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e082      	b.n	8006b00 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2241      	movs	r2, #65	; 0x41
 80069fe:	5c9b      	ldrb	r3, [r3, r2]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d107      	bne.n	8006a16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2240      	movs	r2, #64	; 0x40
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7fc ff25 	bl	8003860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2241      	movs	r2, #65	; 0x41
 8006a1a:	2124      	movs	r1, #36	; 0x24
 8006a1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2101      	movs	r1, #1
 8006a2a:	438a      	bics	r2, r1
 8006a2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4934      	ldr	r1, [pc, #208]	; (8006b08 <HAL_I2C_Init+0x120>)
 8006a38:	400a      	ands	r2, r1
 8006a3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4931      	ldr	r1, [pc, #196]	; (8006b0c <HAL_I2C_Init+0x124>)
 8006a48:	400a      	ands	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d108      	bne.n	8006a66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2180      	movs	r1, #128	; 0x80
 8006a5e:	0209      	lsls	r1, r1, #8
 8006a60:	430a      	orrs	r2, r1
 8006a62:	609a      	str	r2, [r3, #8]
 8006a64:	e007      	b.n	8006a76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2184      	movs	r1, #132	; 0x84
 8006a70:	0209      	lsls	r1, r1, #8
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d104      	bne.n	8006a88 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2280      	movs	r2, #128	; 0x80
 8006a84:	0112      	lsls	r2, r2, #4
 8006a86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	491f      	ldr	r1, [pc, #124]	; (8006b10 <HAL_I2C_Init+0x128>)
 8006a94:	430a      	orrs	r2, r1
 8006a96:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	491a      	ldr	r1, [pc, #104]	; (8006b0c <HAL_I2C_Init+0x124>)
 8006aa4:	400a      	ands	r2, r1
 8006aa6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69d9      	ldr	r1, [r3, #28]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1a      	ldr	r2, [r3, #32]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2101      	movs	r1, #1
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2241      	movs	r2, #65	; 0x41
 8006aec:	2120      	movs	r1, #32
 8006aee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2242      	movs	r2, #66	; 0x42
 8006afa:	2100      	movs	r1, #0
 8006afc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b002      	add	sp, #8
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	f0ffffff 	.word	0xf0ffffff
 8006b0c:	ffff7fff 	.word	0xffff7fff
 8006b10:	02008000 	.word	0x02008000

08006b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2241      	movs	r2, #65	; 0x41
 8006b22:	5c9b      	ldrb	r3, [r3, r2]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d138      	bne.n	8006b9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2240      	movs	r2, #64	; 0x40
 8006b2e:	5c9b      	ldrb	r3, [r3, r2]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e032      	b.n	8006b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2240      	movs	r2, #64	; 0x40
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2241      	movs	r2, #65	; 0x41
 8006b44:	2124      	movs	r1, #36	; 0x24
 8006b46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2101      	movs	r1, #1
 8006b54:	438a      	bics	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4911      	ldr	r1, [pc, #68]	; (8006ba8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006b64:	400a      	ands	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2101      	movs	r1, #1
 8006b84:	430a      	orrs	r2, r1
 8006b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2241      	movs	r2, #65	; 0x41
 8006b8c:	2120      	movs	r1, #32
 8006b8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2240      	movs	r2, #64	; 0x40
 8006b94:	2100      	movs	r1, #0
 8006b96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	b002      	add	sp, #8
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	ffffefff 	.word	0xffffefff

08006bac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2241      	movs	r2, #65	; 0x41
 8006bba:	5c9b      	ldrb	r3, [r3, r2]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	d139      	bne.n	8006c36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2240      	movs	r2, #64	; 0x40
 8006bc6:	5c9b      	ldrb	r3, [r3, r2]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e033      	b.n	8006c38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2240      	movs	r2, #64	; 0x40
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2241      	movs	r2, #65	; 0x41
 8006bdc:	2124      	movs	r1, #36	; 0x24
 8006bde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2101      	movs	r1, #1
 8006bec:	438a      	bics	r2, r1
 8006bee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a11      	ldr	r2, [pc, #68]	; (8006c40 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2241      	movs	r2, #65	; 0x41
 8006c26:	2120      	movs	r1, #32
 8006c28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2240      	movs	r2, #64	; 0x40
 8006c2e:	2100      	movs	r1, #0
 8006c30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e000      	b.n	8006c38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c36:	2302      	movs	r3, #2
  }
}
 8006c38:	0018      	movs	r0, r3
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b004      	add	sp, #16
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	fffff0ff 	.word	0xfffff0ff

08006c44 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <HAL_PWR_PVD_IRQHandler+0x24>)
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	025b      	lsls	r3, r3, #9
 8006c50:	4013      	ands	r3, r2
 8006c52:	d005      	beq.n	8006c60 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006c54:	f000 f80a 	bl	8006c6c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006c58:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <HAL_PWR_PVD_IRQHandler+0x24>)
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	0252      	lsls	r2, r2, #9
 8006c5e:	615a      	str	r2, [r3, #20]
  }
}
 8006c60:	46c0      	nop			; (mov r8, r8)
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	40010400 	.word	0x40010400

08006c6c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c78:	b5b0      	push	{r4, r5, r7, lr}
 8006c7a:	b08a      	sub	sp, #40	; 0x28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d102      	bne.n	8006c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f000 fbbf 	bl	800740a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c8c:	4bc9      	ldr	r3, [pc, #804]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	220c      	movs	r2, #12
 8006c92:	4013      	ands	r3, r2
 8006c94:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c96:	4bc7      	ldr	r3, [pc, #796]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	2380      	movs	r3, #128	; 0x80
 8006c9c:	025b      	lsls	r3, r3, #9
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d100      	bne.n	8006cae <HAL_RCC_OscConfig+0x36>
 8006cac:	e07e      	b.n	8006dac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d007      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b0c      	cmp	r3, #12
 8006cb8:	d112      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x68>
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	025b      	lsls	r3, r3, #9
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d10d      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc4:	4bbb      	ldr	r3, [pc, #748]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	2380      	movs	r3, #128	; 0x80
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d100      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x5a>
 8006cd0:	e06b      	b.n	8006daa <HAL_RCC_OscConfig+0x132>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d167      	bne.n	8006daa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f000 fb95 	bl	800740a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	2380      	movs	r3, #128	; 0x80
 8006ce6:	025b      	lsls	r3, r3, #9
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d107      	bne.n	8006cfc <HAL_RCC_OscConfig+0x84>
 8006cec:	4bb1      	ldr	r3, [pc, #708]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4bb0      	ldr	r3, [pc, #704]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006cf2:	2180      	movs	r1, #128	; 0x80
 8006cf4:	0249      	lsls	r1, r1, #9
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	e027      	b.n	8006d4c <HAL_RCC_OscConfig+0xd4>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	23a0      	movs	r3, #160	; 0xa0
 8006d02:	02db      	lsls	r3, r3, #11
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d10e      	bne.n	8006d26 <HAL_RCC_OscConfig+0xae>
 8006d08:	4baa      	ldr	r3, [pc, #680]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	4ba9      	ldr	r3, [pc, #676]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d0e:	2180      	movs	r1, #128	; 0x80
 8006d10:	02c9      	lsls	r1, r1, #11
 8006d12:	430a      	orrs	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	4ba7      	ldr	r3, [pc, #668]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4ba6      	ldr	r3, [pc, #664]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d1c:	2180      	movs	r1, #128	; 0x80
 8006d1e:	0249      	lsls	r1, r1, #9
 8006d20:	430a      	orrs	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e012      	b.n	8006d4c <HAL_RCC_OscConfig+0xd4>
 8006d26:	4ba3      	ldr	r3, [pc, #652]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4ba2      	ldr	r3, [pc, #648]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d2c:	49a2      	ldr	r1, [pc, #648]	; (8006fb8 <HAL_RCC_OscConfig+0x340>)
 8006d2e:	400a      	ands	r2, r1
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	4ba0      	ldr	r3, [pc, #640]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	2380      	movs	r3, #128	; 0x80
 8006d38:	025b      	lsls	r3, r3, #9
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4b9c      	ldr	r3, [pc, #624]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	4b9b      	ldr	r3, [pc, #620]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d46:	499d      	ldr	r1, [pc, #628]	; (8006fbc <HAL_RCC_OscConfig+0x344>)
 8006d48:	400a      	ands	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d015      	beq.n	8006d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d54:	f7fe fd98 	bl	8005888 <HAL_GetTick>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d5c:	e009      	b.n	8006d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d5e:	f7fe fd93 	bl	8005888 <HAL_GetTick>
 8006d62:	0002      	movs	r2, r0
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b64      	cmp	r3, #100	; 0x64
 8006d6a:	d902      	bls.n	8006d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	f000 fb4c 	bl	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d72:	4b90      	ldr	r3, [pc, #576]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	2380      	movs	r3, #128	; 0x80
 8006d78:	029b      	lsls	r3, r3, #10
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d0ef      	beq.n	8006d5e <HAL_RCC_OscConfig+0xe6>
 8006d7e:	e015      	b.n	8006dac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d80:	f7fe fd82 	bl	8005888 <HAL_GetTick>
 8006d84:	0003      	movs	r3, r0
 8006d86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d8a:	f7fe fd7d 	bl	8005888 <HAL_GetTick>
 8006d8e:	0002      	movs	r2, r0
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b64      	cmp	r3, #100	; 0x64
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e336      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d9c:	4b85      	ldr	r3, [pc, #532]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	4013      	ands	r3, r2
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0x112>
 8006da8:	e000      	b.n	8006dac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006daa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2202      	movs	r2, #2
 8006db2:	4013      	ands	r3, r2
 8006db4:	d100      	bne.n	8006db8 <HAL_RCC_OscConfig+0x140>
 8006db6:	e099      	b.n	8006eec <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006dc6:	4b7b      	ldr	r3, [pc, #492]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b7a      	ldr	r3, [pc, #488]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006dcc:	2120      	movs	r1, #32
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	4393      	bics	r3, r2
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d005      	beq.n	8006dec <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2b0c      	cmp	r3, #12
 8006de4:	d13e      	bne.n	8006e64 <HAL_RCC_OscConfig+0x1ec>
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d13b      	bne.n	8006e64 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006dec:	4b71      	ldr	r3, [pc, #452]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2204      	movs	r2, #4
 8006df2:	4013      	ands	r3, r2
 8006df4:	d004      	beq.n	8006e00 <HAL_RCC_OscConfig+0x188>
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e304      	b.n	800740a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e00:	4b6c      	ldr	r3, [pc, #432]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4a6e      	ldr	r2, [pc, #440]	; (8006fc0 <HAL_RCC_OscConfig+0x348>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	0019      	movs	r1, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	021a      	lsls	r2, r3, #8
 8006e10:	4b68      	ldr	r3, [pc, #416]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006e16:	4b67      	ldr	r3, [pc, #412]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2209      	movs	r2, #9
 8006e1c:	4393      	bics	r3, r2
 8006e1e:	0019      	movs	r1, r3
 8006e20:	4b64      	ldr	r3, [pc, #400]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e24:	430a      	orrs	r2, r1
 8006e26:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e28:	f000 fc42 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 8006e2c:	0001      	movs	r1, r0
 8006e2e:	4b61      	ldr	r3, [pc, #388]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	220f      	movs	r2, #15
 8006e36:	4013      	ands	r3, r2
 8006e38:	4a62      	ldr	r2, [pc, #392]	; (8006fc4 <HAL_RCC_OscConfig+0x34c>)
 8006e3a:	5cd3      	ldrb	r3, [r2, r3]
 8006e3c:	000a      	movs	r2, r1
 8006e3e:	40da      	lsrs	r2, r3
 8006e40:	4b61      	ldr	r3, [pc, #388]	; (8006fc8 <HAL_RCC_OscConfig+0x350>)
 8006e42:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006e44:	4b61      	ldr	r3, [pc, #388]	; (8006fcc <HAL_RCC_OscConfig+0x354>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2513      	movs	r5, #19
 8006e4a:	197c      	adds	r4, r7, r5
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f7fe fcd5 	bl	80057fc <HAL_InitTick>
 8006e52:	0003      	movs	r3, r0
 8006e54:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006e56:	197b      	adds	r3, r7, r5
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d046      	beq.n	8006eec <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006e5e:	197b      	adds	r3, r7, r5
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	e2d2      	b.n	800740a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d027      	beq.n	8006eba <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006e6a:	4b52      	ldr	r3, [pc, #328]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2209      	movs	r2, #9
 8006e70:	4393      	bics	r3, r2
 8006e72:	0019      	movs	r1, r3
 8006e74:	4b4f      	ldr	r3, [pc, #316]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e7c:	f7fe fd04 	bl	8005888 <HAL_GetTick>
 8006e80:	0003      	movs	r3, r0
 8006e82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e86:	f7fe fcff 	bl	8005888 <HAL_GetTick>
 8006e8a:	0002      	movs	r2, r0
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e2b8      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e98:	4b46      	ldr	r3, [pc, #280]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d0f1      	beq.n	8006e86 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea2:	4b44      	ldr	r3, [pc, #272]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4a46      	ldr	r2, [pc, #280]	; (8006fc0 <HAL_RCC_OscConfig+0x348>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	021a      	lsls	r2, r3, #8
 8006eb2:	4b40      	ldr	r3, [pc, #256]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	605a      	str	r2, [r3, #4]
 8006eb8:	e018      	b.n	8006eec <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eba:	4b3e      	ldr	r3, [pc, #248]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b3d      	ldr	r3, [pc, #244]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	438a      	bics	r2, r1
 8006ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec6:	f7fe fcdf 	bl	8005888 <HAL_GetTick>
 8006eca:	0003      	movs	r3, r0
 8006ecc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ed0:	f7fe fcda 	bl	8005888 <HAL_GetTick>
 8006ed4:	0002      	movs	r2, r0
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e293      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ee2:	4b34      	ldr	r3, [pc, #208]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	4013      	ands	r3, r2
 8006eea:	d1f1      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2210      	movs	r2, #16
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d100      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x280>
 8006ef6:	e0a2      	b.n	800703e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d140      	bne.n	8006f80 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006efe:	4b2d      	ldr	r3, [pc, #180]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	2380      	movs	r3, #128	; 0x80
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4013      	ands	r3, r2
 8006f08:	d005      	beq.n	8006f16 <HAL_RCC_OscConfig+0x29e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e279      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f16:	4b27      	ldr	r3, [pc, #156]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <HAL_RCC_OscConfig+0x358>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	0019      	movs	r1, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f24:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f2a:	4b22      	ldr	r3, [pc, #136]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	0a19      	lsrs	r1, r3, #8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	061a      	lsls	r2, r3, #24
 8006f38:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	0b5b      	lsrs	r3, r3, #13
 8006f44:	3301      	adds	r3, #1
 8006f46:	2280      	movs	r2, #128	; 0x80
 8006f48:	0212      	lsls	r2, r2, #8
 8006f4a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	210f      	movs	r1, #15
 8006f54:	400b      	ands	r3, r1
 8006f56:	491b      	ldr	r1, [pc, #108]	; (8006fc4 <HAL_RCC_OscConfig+0x34c>)
 8006f58:	5ccb      	ldrb	r3, [r1, r3]
 8006f5a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006f5c:	4b1a      	ldr	r3, [pc, #104]	; (8006fc8 <HAL_RCC_OscConfig+0x350>)
 8006f5e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006f60:	4b1a      	ldr	r3, [pc, #104]	; (8006fcc <HAL_RCC_OscConfig+0x354>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2513      	movs	r5, #19
 8006f66:	197c      	adds	r4, r7, r5
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7fe fc47 	bl	80057fc <HAL_InitTick>
 8006f6e:	0003      	movs	r3, r0
 8006f70:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006f72:	197b      	adds	r3, r7, r5
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d061      	beq.n	800703e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8006f7a:	197b      	adds	r3, r7, r5
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	e244      	b.n	800740a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d040      	beq.n	800700a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <HAL_RCC_OscConfig+0x33c>)
 8006f8e:	2180      	movs	r1, #128	; 0x80
 8006f90:	0049      	lsls	r1, r1, #1
 8006f92:	430a      	orrs	r2, r1
 8006f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f96:	f7fe fc77 	bl	8005888 <HAL_GetTick>
 8006f9a:	0003      	movs	r3, r0
 8006f9c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006f9e:	e019      	b.n	8006fd4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fa0:	f7fe fc72 	bl	8005888 <HAL_GetTick>
 8006fa4:	0002      	movs	r2, r0
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d912      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e22b      	b.n	800740a <HAL_RCC_OscConfig+0x792>
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	fffeffff 	.word	0xfffeffff
 8006fbc:	fffbffff 	.word	0xfffbffff
 8006fc0:	ffffe0ff 	.word	0xffffe0ff
 8006fc4:	0800e158 	.word	0x0800e158
 8006fc8:	20000000 	.word	0x20000000
 8006fcc:	20000004 	.word	0x20000004
 8006fd0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006fd4:	4bca      	ldr	r3, [pc, #808]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	2380      	movs	r3, #128	; 0x80
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d0df      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fe0:	4bc7      	ldr	r3, [pc, #796]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4ac7      	ldr	r2, [pc, #796]	; (8007304 <HAL_RCC_OscConfig+0x68c>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	0019      	movs	r1, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fee:	4bc4      	ldr	r3, [pc, #784]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ff4:	4bc2      	ldr	r3, [pc, #776]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	0a19      	lsrs	r1, r3, #8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	061a      	lsls	r2, r3, #24
 8007002:	4bbf      	ldr	r3, [pc, #764]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007004:	430a      	orrs	r2, r1
 8007006:	605a      	str	r2, [r3, #4]
 8007008:	e019      	b.n	800703e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800700a:	4bbd      	ldr	r3, [pc, #756]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4bbc      	ldr	r3, [pc, #752]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007010:	49bd      	ldr	r1, [pc, #756]	; (8007308 <HAL_RCC_OscConfig+0x690>)
 8007012:	400a      	ands	r2, r1
 8007014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007016:	f7fe fc37 	bl	8005888 <HAL_GetTick>
 800701a:	0003      	movs	r3, r0
 800701c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007020:	f7fe fc32 	bl	8005888 <HAL_GetTick>
 8007024:	0002      	movs	r2, r0
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e1eb      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007032:	4bb3      	ldr	r3, [pc, #716]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	2380      	movs	r3, #128	; 0x80
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4013      	ands	r3, r2
 800703c:	d1f0      	bne.n	8007020 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2208      	movs	r2, #8
 8007044:	4013      	ands	r3, r2
 8007046:	d036      	beq.n	80070b6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d019      	beq.n	8007084 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007050:	4bab      	ldr	r3, [pc, #684]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007054:	4baa      	ldr	r3, [pc, #680]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007056:	2101      	movs	r1, #1
 8007058:	430a      	orrs	r2, r1
 800705a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705c:	f7fe fc14 	bl	8005888 <HAL_GetTick>
 8007060:	0003      	movs	r3, r0
 8007062:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007066:	f7fe fc0f 	bl	8005888 <HAL_GetTick>
 800706a:	0002      	movs	r2, r0
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e1c8      	b.n	800740a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007078:	4ba1      	ldr	r3, [pc, #644]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	2202      	movs	r2, #2
 800707e:	4013      	ands	r3, r2
 8007080:	d0f1      	beq.n	8007066 <HAL_RCC_OscConfig+0x3ee>
 8007082:	e018      	b.n	80070b6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007084:	4b9e      	ldr	r3, [pc, #632]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007088:	4b9d      	ldr	r3, [pc, #628]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800708a:	2101      	movs	r1, #1
 800708c:	438a      	bics	r2, r1
 800708e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007090:	f7fe fbfa 	bl	8005888 <HAL_GetTick>
 8007094:	0003      	movs	r3, r0
 8007096:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800709a:	f7fe fbf5 	bl	8005888 <HAL_GetTick>
 800709e:	0002      	movs	r2, r0
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e1ae      	b.n	800740a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070ac:	4b94      	ldr	r3, [pc, #592]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80070ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b0:	2202      	movs	r2, #2
 80070b2:	4013      	ands	r3, r2
 80070b4:	d1f1      	bne.n	800709a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2204      	movs	r2, #4
 80070bc:	4013      	ands	r3, r2
 80070be:	d100      	bne.n	80070c2 <HAL_RCC_OscConfig+0x44a>
 80070c0:	e0ae      	b.n	8007220 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070c2:	2023      	movs	r0, #35	; 0x23
 80070c4:	183b      	adds	r3, r7, r0
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070ca:	4b8d      	ldr	r3, [pc, #564]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80070cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ce:	2380      	movs	r3, #128	; 0x80
 80070d0:	055b      	lsls	r3, r3, #21
 80070d2:	4013      	ands	r3, r2
 80070d4:	d109      	bne.n	80070ea <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070d6:	4b8a      	ldr	r3, [pc, #552]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80070d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070da:	4b89      	ldr	r3, [pc, #548]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	0549      	lsls	r1, r1, #21
 80070e0:	430a      	orrs	r2, r1
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80070e4:	183b      	adds	r3, r7, r0
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ea:	4b88      	ldr	r3, [pc, #544]	; (800730c <HAL_RCC_OscConfig+0x694>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	2380      	movs	r3, #128	; 0x80
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4013      	ands	r3, r2
 80070f4:	d11a      	bne.n	800712c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070f6:	4b85      	ldr	r3, [pc, #532]	; (800730c <HAL_RCC_OscConfig+0x694>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4b84      	ldr	r3, [pc, #528]	; (800730c <HAL_RCC_OscConfig+0x694>)
 80070fc:	2180      	movs	r1, #128	; 0x80
 80070fe:	0049      	lsls	r1, r1, #1
 8007100:	430a      	orrs	r2, r1
 8007102:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007104:	f7fe fbc0 	bl	8005888 <HAL_GetTick>
 8007108:	0003      	movs	r3, r0
 800710a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800710e:	f7fe fbbb 	bl	8005888 <HAL_GetTick>
 8007112:	0002      	movs	r2, r0
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b64      	cmp	r3, #100	; 0x64
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e174      	b.n	800740a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007120:	4b7a      	ldr	r3, [pc, #488]	; (800730c <HAL_RCC_OscConfig+0x694>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	2380      	movs	r3, #128	; 0x80
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	4013      	ands	r3, r2
 800712a:	d0f0      	beq.n	800710e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	429a      	cmp	r2, r3
 8007136:	d107      	bne.n	8007148 <HAL_RCC_OscConfig+0x4d0>
 8007138:	4b71      	ldr	r3, [pc, #452]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800713a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800713c:	4b70      	ldr	r3, [pc, #448]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800713e:	2180      	movs	r1, #128	; 0x80
 8007140:	0049      	lsls	r1, r1, #1
 8007142:	430a      	orrs	r2, r1
 8007144:	651a      	str	r2, [r3, #80]	; 0x50
 8007146:	e031      	b.n	80071ac <HAL_RCC_OscConfig+0x534>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10c      	bne.n	800716a <HAL_RCC_OscConfig+0x4f2>
 8007150:	4b6b      	ldr	r3, [pc, #428]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007154:	4b6a      	ldr	r3, [pc, #424]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007156:	496c      	ldr	r1, [pc, #432]	; (8007308 <HAL_RCC_OscConfig+0x690>)
 8007158:	400a      	ands	r2, r1
 800715a:	651a      	str	r2, [r3, #80]	; 0x50
 800715c:	4b68      	ldr	r3, [pc, #416]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800715e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007160:	4b67      	ldr	r3, [pc, #412]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007162:	496b      	ldr	r1, [pc, #428]	; (8007310 <HAL_RCC_OscConfig+0x698>)
 8007164:	400a      	ands	r2, r1
 8007166:	651a      	str	r2, [r3, #80]	; 0x50
 8007168:	e020      	b.n	80071ac <HAL_RCC_OscConfig+0x534>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	23a0      	movs	r3, #160	; 0xa0
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	429a      	cmp	r2, r3
 8007174:	d10e      	bne.n	8007194 <HAL_RCC_OscConfig+0x51c>
 8007176:	4b62      	ldr	r3, [pc, #392]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800717a:	4b61      	ldr	r3, [pc, #388]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800717c:	2180      	movs	r1, #128	; 0x80
 800717e:	00c9      	lsls	r1, r1, #3
 8007180:	430a      	orrs	r2, r1
 8007182:	651a      	str	r2, [r3, #80]	; 0x50
 8007184:	4b5e      	ldr	r3, [pc, #376]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007188:	4b5d      	ldr	r3, [pc, #372]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800718a:	2180      	movs	r1, #128	; 0x80
 800718c:	0049      	lsls	r1, r1, #1
 800718e:	430a      	orrs	r2, r1
 8007190:	651a      	str	r2, [r3, #80]	; 0x50
 8007192:	e00b      	b.n	80071ac <HAL_RCC_OscConfig+0x534>
 8007194:	4b5a      	ldr	r3, [pc, #360]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007198:	4b59      	ldr	r3, [pc, #356]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800719a:	495b      	ldr	r1, [pc, #364]	; (8007308 <HAL_RCC_OscConfig+0x690>)
 800719c:	400a      	ands	r2, r1
 800719e:	651a      	str	r2, [r3, #80]	; 0x50
 80071a0:	4b57      	ldr	r3, [pc, #348]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80071a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071a4:	4b56      	ldr	r3, [pc, #344]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80071a6:	495a      	ldr	r1, [pc, #360]	; (8007310 <HAL_RCC_OscConfig+0x698>)
 80071a8:	400a      	ands	r2, r1
 80071aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d015      	beq.n	80071e0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b4:	f7fe fb68 	bl	8005888 <HAL_GetTick>
 80071b8:	0003      	movs	r3, r0
 80071ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071bc:	e009      	b.n	80071d2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071be:	f7fe fb63 	bl	8005888 <HAL_GetTick>
 80071c2:	0002      	movs	r2, r0
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	4a52      	ldr	r2, [pc, #328]	; (8007314 <HAL_RCC_OscConfig+0x69c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e11b      	b.n	800740a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071d2:	4b4b      	ldr	r3, [pc, #300]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80071d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071d6:	2380      	movs	r3, #128	; 0x80
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4013      	ands	r3, r2
 80071dc:	d0ef      	beq.n	80071be <HAL_RCC_OscConfig+0x546>
 80071de:	e014      	b.n	800720a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e0:	f7fe fb52 	bl	8005888 <HAL_GetTick>
 80071e4:	0003      	movs	r3, r0
 80071e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071e8:	e009      	b.n	80071fe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ea:	f7fe fb4d 	bl	8005888 <HAL_GetTick>
 80071ee:	0002      	movs	r2, r0
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	4a47      	ldr	r2, [pc, #284]	; (8007314 <HAL_RCC_OscConfig+0x69c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e105      	b.n	800740a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071fe:	4b40      	ldr	r3, [pc, #256]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4013      	ands	r3, r2
 8007208:	d1ef      	bne.n	80071ea <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800720a:	2323      	movs	r3, #35	; 0x23
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d105      	bne.n	8007220 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007214:	4b3a      	ldr	r3, [pc, #232]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007218:	4b39      	ldr	r3, [pc, #228]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 800721a:	493f      	ldr	r1, [pc, #252]	; (8007318 <HAL_RCC_OscConfig+0x6a0>)
 800721c:	400a      	ands	r2, r1
 800721e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2220      	movs	r2, #32
 8007226:	4013      	ands	r3, r2
 8007228:	d049      	beq.n	80072be <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d026      	beq.n	8007280 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007232:	4b33      	ldr	r3, [pc, #204]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	4b32      	ldr	r3, [pc, #200]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007238:	2101      	movs	r1, #1
 800723a:	430a      	orrs	r2, r1
 800723c:	609a      	str	r2, [r3, #8]
 800723e:	4b30      	ldr	r3, [pc, #192]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007242:	4b2f      	ldr	r3, [pc, #188]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007244:	2101      	movs	r1, #1
 8007246:	430a      	orrs	r2, r1
 8007248:	635a      	str	r2, [r3, #52]	; 0x34
 800724a:	4b34      	ldr	r3, [pc, #208]	; (800731c <HAL_RCC_OscConfig+0x6a4>)
 800724c:	6a1a      	ldr	r2, [r3, #32]
 800724e:	4b33      	ldr	r3, [pc, #204]	; (800731c <HAL_RCC_OscConfig+0x6a4>)
 8007250:	2180      	movs	r1, #128	; 0x80
 8007252:	0189      	lsls	r1, r1, #6
 8007254:	430a      	orrs	r2, r1
 8007256:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007258:	f7fe fb16 	bl	8005888 <HAL_GetTick>
 800725c:	0003      	movs	r3, r0
 800725e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007262:	f7fe fb11 	bl	8005888 <HAL_GetTick>
 8007266:	0002      	movs	r2, r0
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e0ca      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007274:	4b22      	ldr	r3, [pc, #136]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2202      	movs	r2, #2
 800727a:	4013      	ands	r3, r2
 800727c:	d0f1      	beq.n	8007262 <HAL_RCC_OscConfig+0x5ea>
 800727e:	e01e      	b.n	80072be <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007280:	4b1f      	ldr	r3, [pc, #124]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	4b1e      	ldr	r3, [pc, #120]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 8007286:	2101      	movs	r1, #1
 8007288:	438a      	bics	r2, r1
 800728a:	609a      	str	r2, [r3, #8]
 800728c:	4b23      	ldr	r3, [pc, #140]	; (800731c <HAL_RCC_OscConfig+0x6a4>)
 800728e:	6a1a      	ldr	r2, [r3, #32]
 8007290:	4b22      	ldr	r3, [pc, #136]	; (800731c <HAL_RCC_OscConfig+0x6a4>)
 8007292:	4923      	ldr	r1, [pc, #140]	; (8007320 <HAL_RCC_OscConfig+0x6a8>)
 8007294:	400a      	ands	r2, r1
 8007296:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007298:	f7fe faf6 	bl	8005888 <HAL_GetTick>
 800729c:	0003      	movs	r3, r0
 800729e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072a2:	f7fe faf1 	bl	8005888 <HAL_GetTick>
 80072a6:	0002      	movs	r2, r0
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e0aa      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072b4:	4b12      	ldr	r3, [pc, #72]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2202      	movs	r2, #2
 80072ba:	4013      	ands	r3, r2
 80072bc:	d1f1      	bne.n	80072a2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d100      	bne.n	80072c8 <HAL_RCC_OscConfig+0x650>
 80072c6:	e09f      	b.n	8007408 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	2b0c      	cmp	r3, #12
 80072cc:	d100      	bne.n	80072d0 <HAL_RCC_OscConfig+0x658>
 80072ce:	e078      	b.n	80073c2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d159      	bne.n	800738c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4b08      	ldr	r3, [pc, #32]	; (8007300 <HAL_RCC_OscConfig+0x688>)
 80072de:	4911      	ldr	r1, [pc, #68]	; (8007324 <HAL_RCC_OscConfig+0x6ac>)
 80072e0:	400a      	ands	r2, r1
 80072e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e4:	f7fe fad0 	bl	8005888 <HAL_GetTick>
 80072e8:	0003      	movs	r3, r0
 80072ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80072ec:	e01c      	b.n	8007328 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ee:	f7fe facb 	bl	8005888 <HAL_GetTick>
 80072f2:	0002      	movs	r2, r0
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d915      	bls.n	8007328 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e084      	b.n	800740a <HAL_RCC_OscConfig+0x792>
 8007300:	40021000 	.word	0x40021000
 8007304:	ffff1fff 	.word	0xffff1fff
 8007308:	fffffeff 	.word	0xfffffeff
 800730c:	40007000 	.word	0x40007000
 8007310:	fffffbff 	.word	0xfffffbff
 8007314:	00001388 	.word	0x00001388
 8007318:	efffffff 	.word	0xefffffff
 800731c:	40010000 	.word	0x40010000
 8007320:	ffffdfff 	.word	0xffffdfff
 8007324:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007328:	4b3a      	ldr	r3, [pc, #232]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	2380      	movs	r3, #128	; 0x80
 800732e:	049b      	lsls	r3, r3, #18
 8007330:	4013      	ands	r3, r2
 8007332:	d1dc      	bne.n	80072ee <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007334:	4b37      	ldr	r3, [pc, #220]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	4a37      	ldr	r2, [pc, #220]	; (8007418 <HAL_RCC_OscConfig+0x7a0>)
 800733a:	4013      	ands	r3, r2
 800733c:	0019      	movs	r1, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734c:	431a      	orrs	r2, r3
 800734e:	4b31      	ldr	r3, [pc, #196]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 8007350:	430a      	orrs	r2, r1
 8007352:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007354:	4b2f      	ldr	r3, [pc, #188]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	4b2e      	ldr	r3, [pc, #184]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 800735a:	2180      	movs	r1, #128	; 0x80
 800735c:	0449      	lsls	r1, r1, #17
 800735e:	430a      	orrs	r2, r1
 8007360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007362:	f7fe fa91 	bl	8005888 <HAL_GetTick>
 8007366:	0003      	movs	r3, r0
 8007368:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800736c:	f7fe fa8c 	bl	8005888 <HAL_GetTick>
 8007370:	0002      	movs	r2, r0
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e045      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800737e:	4b25      	ldr	r3, [pc, #148]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	2380      	movs	r3, #128	; 0x80
 8007384:	049b      	lsls	r3, r3, #18
 8007386:	4013      	ands	r3, r2
 8007388:	d0f0      	beq.n	800736c <HAL_RCC_OscConfig+0x6f4>
 800738a:	e03d      	b.n	8007408 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800738c:	4b21      	ldr	r3, [pc, #132]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b20      	ldr	r3, [pc, #128]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 8007392:	4922      	ldr	r1, [pc, #136]	; (800741c <HAL_RCC_OscConfig+0x7a4>)
 8007394:	400a      	ands	r2, r1
 8007396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fe fa76 	bl	8005888 <HAL_GetTick>
 800739c:	0003      	movs	r3, r0
 800739e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073a2:	f7fe fa71 	bl	8005888 <HAL_GetTick>
 80073a6:	0002      	movs	r2, r0
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e02a      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80073b4:	4b17      	ldr	r3, [pc, #92]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	2380      	movs	r3, #128	; 0x80
 80073ba:	049b      	lsls	r3, r3, #18
 80073bc:	4013      	ands	r3, r2
 80073be:	d1f0      	bne.n	80073a2 <HAL_RCC_OscConfig+0x72a>
 80073c0:	e022      	b.n	8007408 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e01d      	b.n	800740a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80073ce:	4b11      	ldr	r3, [pc, #68]	; (8007414 <HAL_RCC_OscConfig+0x79c>)
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	2380      	movs	r3, #128	; 0x80
 80073d8:	025b      	lsls	r3, r3, #9
 80073da:	401a      	ands	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d10f      	bne.n	8007404 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	23f0      	movs	r3, #240	; 0xf0
 80073e8:	039b      	lsls	r3, r3, #14
 80073ea:	401a      	ands	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d107      	bne.n	8007404 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	23c0      	movs	r3, #192	; 0xc0
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	401a      	ands	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e000      	b.n	800740a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	0018      	movs	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	b00a      	add	sp, #40	; 0x28
 8007410:	bdb0      	pop	{r4, r5, r7, pc}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	40021000 	.word	0x40021000
 8007418:	ff02ffff 	.word	0xff02ffff
 800741c:	feffffff 	.word	0xfeffffff

08007420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007420:	b5b0      	push	{r4, r5, r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e128      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007434:	4b96      	ldr	r3, [pc, #600]	; (8007690 <HAL_RCC_ClockConfig+0x270>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2201      	movs	r2, #1
 800743a:	4013      	ands	r3, r2
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d91e      	bls.n	8007480 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007442:	4b93      	ldr	r3, [pc, #588]	; (8007690 <HAL_RCC_ClockConfig+0x270>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2201      	movs	r2, #1
 8007448:	4393      	bics	r3, r2
 800744a:	0019      	movs	r1, r3
 800744c:	4b90      	ldr	r3, [pc, #576]	; (8007690 <HAL_RCC_ClockConfig+0x270>)
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007454:	f7fe fa18 	bl	8005888 <HAL_GetTick>
 8007458:	0003      	movs	r3, r0
 800745a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800745c:	e009      	b.n	8007472 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800745e:	f7fe fa13 	bl	8005888 <HAL_GetTick>
 8007462:	0002      	movs	r2, r0
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	4a8a      	ldr	r2, [pc, #552]	; (8007694 <HAL_RCC_ClockConfig+0x274>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e109      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b87      	ldr	r3, [pc, #540]	; (8007690 <HAL_RCC_ClockConfig+0x270>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2201      	movs	r2, #1
 8007478:	4013      	ands	r3, r2
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d1ee      	bne.n	800745e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2202      	movs	r2, #2
 8007486:	4013      	ands	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800748a:	4b83      	ldr	r3, [pc, #524]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	22f0      	movs	r2, #240	; 0xf0
 8007490:	4393      	bics	r3, r2
 8007492:	0019      	movs	r1, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	4b7f      	ldr	r3, [pc, #508]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 800749a:	430a      	orrs	r2, r1
 800749c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	4013      	ands	r3, r2
 80074a6:	d100      	bne.n	80074aa <HAL_RCC_ClockConfig+0x8a>
 80074a8:	e089      	b.n	80075be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074b2:	4b79      	ldr	r3, [pc, #484]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	029b      	lsls	r3, r3, #10
 80074ba:	4013      	ands	r3, r2
 80074bc:	d120      	bne.n	8007500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e0e1      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d107      	bne.n	80074da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074ca:	4b73      	ldr	r3, [pc, #460]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	2380      	movs	r3, #128	; 0x80
 80074d0:	049b      	lsls	r3, r3, #18
 80074d2:	4013      	ands	r3, r2
 80074d4:	d114      	bne.n	8007500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e0d5      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d106      	bne.n	80074f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074e2:	4b6d      	ldr	r3, [pc, #436]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2204      	movs	r2, #4
 80074e8:	4013      	ands	r3, r2
 80074ea:	d109      	bne.n	8007500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0ca      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80074f0:	4b69      	ldr	r3, [pc, #420]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	2380      	movs	r3, #128	; 0x80
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4013      	ands	r3, r2
 80074fa:	d101      	bne.n	8007500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0c2      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007500:	4b65      	ldr	r3, [pc, #404]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2203      	movs	r2, #3
 8007506:	4393      	bics	r3, r2
 8007508:	0019      	movs	r1, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	4b62      	ldr	r3, [pc, #392]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007510:	430a      	orrs	r2, r1
 8007512:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007514:	f7fe f9b8 	bl	8005888 <HAL_GetTick>
 8007518:	0003      	movs	r3, r0
 800751a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d111      	bne.n	8007548 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007524:	e009      	b.n	800753a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007526:	f7fe f9af 	bl	8005888 <HAL_GetTick>
 800752a:	0002      	movs	r2, r0
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	4a58      	ldr	r2, [pc, #352]	; (8007694 <HAL_RCC_ClockConfig+0x274>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d901      	bls.n	800753a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e0a5      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800753a:	4b57      	ldr	r3, [pc, #348]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	220c      	movs	r2, #12
 8007540:	4013      	ands	r3, r2
 8007542:	2b08      	cmp	r3, #8
 8007544:	d1ef      	bne.n	8007526 <HAL_RCC_ClockConfig+0x106>
 8007546:	e03a      	b.n	80075be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d111      	bne.n	8007574 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007550:	e009      	b.n	8007566 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007552:	f7fe f999 	bl	8005888 <HAL_GetTick>
 8007556:	0002      	movs	r2, r0
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	4a4d      	ldr	r2, [pc, #308]	; (8007694 <HAL_RCC_ClockConfig+0x274>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e08f      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007566:	4b4c      	ldr	r3, [pc, #304]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	220c      	movs	r2, #12
 800756c:	4013      	ands	r3, r2
 800756e:	2b0c      	cmp	r3, #12
 8007570:	d1ef      	bne.n	8007552 <HAL_RCC_ClockConfig+0x132>
 8007572:	e024      	b.n	80075be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d11b      	bne.n	80075b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800757c:	e009      	b.n	8007592 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800757e:	f7fe f983 	bl	8005888 <HAL_GetTick>
 8007582:	0002      	movs	r2, r0
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	4a42      	ldr	r2, [pc, #264]	; (8007694 <HAL_RCC_ClockConfig+0x274>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e079      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007592:	4b41      	ldr	r3, [pc, #260]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	220c      	movs	r2, #12
 8007598:	4013      	ands	r3, r2
 800759a:	2b04      	cmp	r3, #4
 800759c:	d1ef      	bne.n	800757e <HAL_RCC_ClockConfig+0x15e>
 800759e:	e00e      	b.n	80075be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a0:	f7fe f972 	bl	8005888 <HAL_GetTick>
 80075a4:	0002      	movs	r2, r0
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	4a3a      	ldr	r2, [pc, #232]	; (8007694 <HAL_RCC_ClockConfig+0x274>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e068      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80075b4:	4b38      	ldr	r3, [pc, #224]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	220c      	movs	r2, #12
 80075ba:	4013      	ands	r3, r2
 80075bc:	d1f0      	bne.n	80075a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075be:	4b34      	ldr	r3, [pc, #208]	; (8007690 <HAL_RCC_ClockConfig+0x270>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	4013      	ands	r3, r2
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d21e      	bcs.n	800760a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075cc:	4b30      	ldr	r3, [pc, #192]	; (8007690 <HAL_RCC_ClockConfig+0x270>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2201      	movs	r2, #1
 80075d2:	4393      	bics	r3, r2
 80075d4:	0019      	movs	r1, r3
 80075d6:	4b2e      	ldr	r3, [pc, #184]	; (8007690 <HAL_RCC_ClockConfig+0x270>)
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80075de:	f7fe f953 	bl	8005888 <HAL_GetTick>
 80075e2:	0003      	movs	r3, r0
 80075e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e6:	e009      	b.n	80075fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e8:	f7fe f94e 	bl	8005888 <HAL_GetTick>
 80075ec:	0002      	movs	r2, r0
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	4a28      	ldr	r2, [pc, #160]	; (8007694 <HAL_RCC_ClockConfig+0x274>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e044      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fc:	4b24      	ldr	r3, [pc, #144]	; (8007690 <HAL_RCC_ClockConfig+0x270>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2201      	movs	r2, #1
 8007602:	4013      	ands	r3, r2
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d1ee      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2204      	movs	r2, #4
 8007610:	4013      	ands	r3, r2
 8007612:	d009      	beq.n	8007628 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007614:	4b20      	ldr	r3, [pc, #128]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4a20      	ldr	r2, [pc, #128]	; (800769c <HAL_RCC_ClockConfig+0x27c>)
 800761a:	4013      	ands	r3, r2
 800761c:	0019      	movs	r1, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	4b1d      	ldr	r3, [pc, #116]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007624:	430a      	orrs	r2, r1
 8007626:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2208      	movs	r2, #8
 800762e:	4013      	ands	r3, r2
 8007630:	d00a      	beq.n	8007648 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007632:	4b19      	ldr	r3, [pc, #100]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	4a1a      	ldr	r2, [pc, #104]	; (80076a0 <HAL_RCC_ClockConfig+0x280>)
 8007638:	4013      	ands	r3, r2
 800763a:	0019      	movs	r1, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	00da      	lsls	r2, r3, #3
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007644:	430a      	orrs	r2, r1
 8007646:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007648:	f000 f832 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 800764c:	0001      	movs	r1, r0
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <HAL_RCC_ClockConfig+0x278>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	091b      	lsrs	r3, r3, #4
 8007654:	220f      	movs	r2, #15
 8007656:	4013      	ands	r3, r2
 8007658:	4a12      	ldr	r2, [pc, #72]	; (80076a4 <HAL_RCC_ClockConfig+0x284>)
 800765a:	5cd3      	ldrb	r3, [r2, r3]
 800765c:	000a      	movs	r2, r1
 800765e:	40da      	lsrs	r2, r3
 8007660:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <HAL_RCC_ClockConfig+0x288>)
 8007662:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007664:	4b11      	ldr	r3, [pc, #68]	; (80076ac <HAL_RCC_ClockConfig+0x28c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	250b      	movs	r5, #11
 800766a:	197c      	adds	r4, r7, r5
 800766c:	0018      	movs	r0, r3
 800766e:	f7fe f8c5 	bl	80057fc <HAL_InitTick>
 8007672:	0003      	movs	r3, r0
 8007674:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007676:	197b      	adds	r3, r7, r5
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800767e:	197b      	adds	r3, r7, r5
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	e000      	b.n	8007686 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	0018      	movs	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	b004      	add	sp, #16
 800768c:	bdb0      	pop	{r4, r5, r7, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	40022000 	.word	0x40022000
 8007694:	00001388 	.word	0x00001388
 8007698:	40021000 	.word	0x40021000
 800769c:	fffff8ff 	.word	0xfffff8ff
 80076a0:	ffffc7ff 	.word	0xffffc7ff
 80076a4:	0800e158 	.word	0x0800e158
 80076a8:	20000000 	.word	0x20000000
 80076ac:	20000004 	.word	0x20000004

080076b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076b0:	b5b0      	push	{r4, r5, r7, lr}
 80076b2:	b08e      	sub	sp, #56	; 0x38
 80076b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80076b6:	4b4c      	ldr	r3, [pc, #304]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076be:	230c      	movs	r3, #12
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b0c      	cmp	r3, #12
 80076c4:	d014      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0x40>
 80076c6:	d900      	bls.n	80076ca <HAL_RCC_GetSysClockFreq+0x1a>
 80076c8:	e07b      	b.n	80077c2 <HAL_RCC_GetSysClockFreq+0x112>
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d002      	beq.n	80076d4 <HAL_RCC_GetSysClockFreq+0x24>
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	d00b      	beq.n	80076ea <HAL_RCC_GetSysClockFreq+0x3a>
 80076d2:	e076      	b.n	80077c2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80076d4:	4b44      	ldr	r3, [pc, #272]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2210      	movs	r2, #16
 80076da:	4013      	ands	r3, r2
 80076dc:	d002      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80076de:	4b43      	ldr	r3, [pc, #268]	; (80077ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80076e0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80076e2:	e07c      	b.n	80077de <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80076e4:	4b42      	ldr	r3, [pc, #264]	; (80077f0 <HAL_RCC_GetSysClockFreq+0x140>)
 80076e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80076e8:	e079      	b.n	80077de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076ea:	4b42      	ldr	r3, [pc, #264]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x144>)
 80076ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80076ee:	e076      	b.n	80077de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	0c9a      	lsrs	r2, r3, #18
 80076f4:	230f      	movs	r3, #15
 80076f6:	401a      	ands	r2, r3
 80076f8:	4b3f      	ldr	r3, [pc, #252]	; (80077f8 <HAL_RCC_GetSysClockFreq+0x148>)
 80076fa:	5c9b      	ldrb	r3, [r3, r2]
 80076fc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	0d9a      	lsrs	r2, r3, #22
 8007702:	2303      	movs	r3, #3
 8007704:	4013      	ands	r3, r2
 8007706:	3301      	adds	r3, #1
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800770a:	4b37      	ldr	r3, [pc, #220]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	2380      	movs	r3, #128	; 0x80
 8007710:	025b      	lsls	r3, r3, #9
 8007712:	4013      	ands	r3, r2
 8007714:	d01a      	beq.n	800774c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	4a35      	ldr	r2, [pc, #212]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x144>)
 8007720:	2300      	movs	r3, #0
 8007722:	69b8      	ldr	r0, [r7, #24]
 8007724:	69f9      	ldr	r1, [r7, #28]
 8007726:	f7f8 fedf 	bl	80004e8 <__aeabi_lmul>
 800772a:	0002      	movs	r2, r0
 800772c:	000b      	movs	r3, r1
 800772e:	0010      	movs	r0, r2
 8007730:	0019      	movs	r1, r3
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f7f8 feb3 	bl	80004a8 <__aeabi_uldivmod>
 8007742:	0002      	movs	r2, r0
 8007744:	000b      	movs	r3, r1
 8007746:	0013      	movs	r3, r2
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
 800774a:	e037      	b.n	80077bc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800774c:	4b26      	ldr	r3, [pc, #152]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2210      	movs	r2, #16
 8007752:	4013      	ands	r3, r2
 8007754:	d01a      	beq.n	800778c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	4a23      	ldr	r2, [pc, #140]	; (80077ec <HAL_RCC_GetSysClockFreq+0x13c>)
 8007760:	2300      	movs	r3, #0
 8007762:	68b8      	ldr	r0, [r7, #8]
 8007764:	68f9      	ldr	r1, [r7, #12]
 8007766:	f7f8 febf 	bl	80004e8 <__aeabi_lmul>
 800776a:	0002      	movs	r2, r0
 800776c:	000b      	movs	r3, r1
 800776e:	0010      	movs	r0, r2
 8007770:	0019      	movs	r1, r3
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f7f8 fe93 	bl	80004a8 <__aeabi_uldivmod>
 8007782:	0002      	movs	r2, r0
 8007784:	000b      	movs	r3, r1
 8007786:	0013      	movs	r3, r2
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
 800778a:	e017      	b.n	80077bc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	0018      	movs	r0, r3
 8007790:	2300      	movs	r3, #0
 8007792:	0019      	movs	r1, r3
 8007794:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <HAL_RCC_GetSysClockFreq+0x140>)
 8007796:	2300      	movs	r3, #0
 8007798:	f7f8 fea6 	bl	80004e8 <__aeabi_lmul>
 800779c:	0002      	movs	r2, r0
 800779e:	000b      	movs	r3, r1
 80077a0:	0010      	movs	r0, r2
 80077a2:	0019      	movs	r1, r3
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	001c      	movs	r4, r3
 80077a8:	2300      	movs	r3, #0
 80077aa:	001d      	movs	r5, r3
 80077ac:	0022      	movs	r2, r4
 80077ae:	002b      	movs	r3, r5
 80077b0:	f7f8 fe7a 	bl	80004a8 <__aeabi_uldivmod>
 80077b4:	0002      	movs	r2, r0
 80077b6:	000b      	movs	r3, r1
 80077b8:	0013      	movs	r3, r2
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80077bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80077c0:	e00d      	b.n	80077de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80077c2:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	0b5b      	lsrs	r3, r3, #13
 80077c8:	2207      	movs	r2, #7
 80077ca:	4013      	ands	r3, r2
 80077cc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	3301      	adds	r3, #1
 80077d2:	2280      	movs	r2, #128	; 0x80
 80077d4:	0212      	lsls	r2, r2, #8
 80077d6:	409a      	lsls	r2, r3
 80077d8:	0013      	movs	r3, r2
 80077da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80077dc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b00e      	add	sp, #56	; 0x38
 80077e6:	bdb0      	pop	{r4, r5, r7, pc}
 80077e8:	40021000 	.word	0x40021000
 80077ec:	003d0900 	.word	0x003d0900
 80077f0:	00f42400 	.word	0x00f42400
 80077f4:	007a1200 	.word	0x007a1200
 80077f8:	0800e170 	.word	0x0800e170

080077fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <HAL_RCC_GetHCLKFreq+0x10>)
 8007802:	681b      	ldr	r3, [r3, #0]
}
 8007804:	0018      	movs	r0, r3
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	20000000 	.word	0x20000000

08007810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007814:	f7ff fff2 	bl	80077fc <HAL_RCC_GetHCLKFreq>
 8007818:	0001      	movs	r1, r0
 800781a:	4b06      	ldr	r3, [pc, #24]	; (8007834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	2207      	movs	r2, #7
 8007822:	4013      	ands	r3, r2
 8007824:	4a04      	ldr	r2, [pc, #16]	; (8007838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007826:	5cd3      	ldrb	r3, [r2, r3]
 8007828:	40d9      	lsrs	r1, r3
 800782a:	000b      	movs	r3, r1
}
 800782c:	0018      	movs	r0, r3
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	40021000 	.word	0x40021000
 8007838:	0800e168 	.word	0x0800e168

0800783c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007840:	f7ff ffdc 	bl	80077fc <HAL_RCC_GetHCLKFreq>
 8007844:	0001      	movs	r1, r0
 8007846:	4b06      	ldr	r3, [pc, #24]	; (8007860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	0adb      	lsrs	r3, r3, #11
 800784c:	2207      	movs	r2, #7
 800784e:	4013      	ands	r3, r2
 8007850:	4a04      	ldr	r2, [pc, #16]	; (8007864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007852:	5cd3      	ldrb	r3, [r2, r3]
 8007854:	40d9      	lsrs	r1, r3
 8007856:	000b      	movs	r3, r1
}
 8007858:	0018      	movs	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	40021000 	.word	0x40021000
 8007864:	0800e168 	.word	0x0800e168

08007868 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007870:	2317      	movs	r3, #23
 8007872:	18fb      	adds	r3, r7, r3
 8007874:	2200      	movs	r2, #0
 8007876:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2220      	movs	r2, #32
 800787e:	4013      	ands	r3, r2
 8007880:	d106      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	2380      	movs	r3, #128	; 0x80
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	4013      	ands	r3, r2
 800788c:	d100      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800788e:	e0d9      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007890:	4ba4      	ldr	r3, [pc, #656]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007894:	2380      	movs	r3, #128	; 0x80
 8007896:	055b      	lsls	r3, r3, #21
 8007898:	4013      	ands	r3, r2
 800789a:	d10a      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800789c:	4ba1      	ldr	r3, [pc, #644]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800789e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078a0:	4ba0      	ldr	r3, [pc, #640]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80078a2:	2180      	movs	r1, #128	; 0x80
 80078a4:	0549      	lsls	r1, r1, #21
 80078a6:	430a      	orrs	r2, r1
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80078aa:	2317      	movs	r3, #23
 80078ac:	18fb      	adds	r3, r7, r3
 80078ae:	2201      	movs	r2, #1
 80078b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b2:	4b9d      	ldr	r3, [pc, #628]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	2380      	movs	r3, #128	; 0x80
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	4013      	ands	r3, r2
 80078bc:	d11a      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078be:	4b9a      	ldr	r3, [pc, #616]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	4b99      	ldr	r3, [pc, #612]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80078c4:	2180      	movs	r1, #128	; 0x80
 80078c6:	0049      	lsls	r1, r1, #1
 80078c8:	430a      	orrs	r2, r1
 80078ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078cc:	f7fd ffdc 	bl	8005888 <HAL_GetTick>
 80078d0:	0003      	movs	r3, r0
 80078d2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d4:	e008      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d6:	f7fd ffd7 	bl	8005888 <HAL_GetTick>
 80078da:	0002      	movs	r2, r0
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b64      	cmp	r3, #100	; 0x64
 80078e2:	d901      	bls.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e118      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e8:	4b8f      	ldr	r3, [pc, #572]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	2380      	movs	r3, #128	; 0x80
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	4013      	ands	r3, r2
 80078f2:	d0f0      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80078f4:	4b8b      	ldr	r3, [pc, #556]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	23c0      	movs	r3, #192	; 0xc0
 80078fa:	039b      	lsls	r3, r3, #14
 80078fc:	4013      	ands	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	23c0      	movs	r3, #192	; 0xc0
 8007906:	039b      	lsls	r3, r3, #14
 8007908:	4013      	ands	r3, r2
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	429a      	cmp	r2, r3
 800790e:	d107      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	23c0      	movs	r3, #192	; 0xc0
 8007916:	039b      	lsls	r3, r3, #14
 8007918:	4013      	ands	r3, r2
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	429a      	cmp	r2, r3
 800791e:	d013      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	23c0      	movs	r3, #192	; 0xc0
 8007926:	029b      	lsls	r3, r3, #10
 8007928:	401a      	ands	r2, r3
 800792a:	23c0      	movs	r3, #192	; 0xc0
 800792c:	029b      	lsls	r3, r3, #10
 800792e:	429a      	cmp	r2, r3
 8007930:	d10a      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007932:	4b7c      	ldr	r3, [pc, #496]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	2380      	movs	r3, #128	; 0x80
 8007938:	029b      	lsls	r3, r3, #10
 800793a:	401a      	ands	r2, r3
 800793c:	2380      	movs	r3, #128	; 0x80
 800793e:	029b      	lsls	r3, r3, #10
 8007940:	429a      	cmp	r2, r3
 8007942:	d101      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e0e8      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007948:	4b76      	ldr	r3, [pc, #472]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800794a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800794c:	23c0      	movs	r3, #192	; 0xc0
 800794e:	029b      	lsls	r3, r3, #10
 8007950:	4013      	ands	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d049      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x186>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	23c0      	movs	r3, #192	; 0xc0
 8007960:	029b      	lsls	r3, r3, #10
 8007962:	4013      	ands	r3, r2
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	429a      	cmp	r2, r3
 8007968:	d004      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2220      	movs	r2, #32
 8007970:	4013      	ands	r3, r2
 8007972:	d10d      	bne.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	23c0      	movs	r3, #192	; 0xc0
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	4013      	ands	r3, r2
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	429a      	cmp	r2, r3
 8007982:	d034      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	2380      	movs	r3, #128	; 0x80
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	4013      	ands	r3, r2
 800798e:	d02e      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007990:	4b64      	ldr	r3, [pc, #400]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007994:	4a65      	ldr	r2, [pc, #404]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007996:	4013      	ands	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800799a:	4b62      	ldr	r3, [pc, #392]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800799c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800799e:	4b61      	ldr	r3, [pc, #388]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80079a0:	2180      	movs	r1, #128	; 0x80
 80079a2:	0309      	lsls	r1, r1, #12
 80079a4:	430a      	orrs	r2, r1
 80079a6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079a8:	4b5e      	ldr	r3, [pc, #376]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80079aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079ac:	4b5d      	ldr	r3, [pc, #372]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80079ae:	4960      	ldr	r1, [pc, #384]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80079b0:	400a      	ands	r2, r1
 80079b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80079b4:	4b5b      	ldr	r3, [pc, #364]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	2380      	movs	r3, #128	; 0x80
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	4013      	ands	r3, r2
 80079c2:	d014      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079c4:	f7fd ff60 	bl	8005888 <HAL_GetTick>
 80079c8:	0003      	movs	r3, r0
 80079ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079cc:	e009      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079ce:	f7fd ff5b 	bl	8005888 <HAL_GetTick>
 80079d2:	0002      	movs	r2, r0
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	4a56      	ldr	r2, [pc, #344]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e09b      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079e2:	4b50      	ldr	r3, [pc, #320]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80079e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4013      	ands	r3, r2
 80079ec:	d0ef      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	23c0      	movs	r3, #192	; 0xc0
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	401a      	ands	r2, r3
 80079f8:	23c0      	movs	r3, #192	; 0xc0
 80079fa:	029b      	lsls	r3, r3, #10
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d10c      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007a00:	4b48      	ldr	r3, [pc, #288]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a4c      	ldr	r2, [pc, #304]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	0019      	movs	r1, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	23c0      	movs	r3, #192	; 0xc0
 8007a10:	039b      	lsls	r3, r3, #14
 8007a12:	401a      	ands	r2, r3
 8007a14:	4b43      	ldr	r3, [pc, #268]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a16:	430a      	orrs	r2, r1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	4b42      	ldr	r3, [pc, #264]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	23c0      	movs	r3, #192	; 0xc0
 8007a24:	029b      	lsls	r3, r3, #10
 8007a26:	401a      	ands	r2, r3
 8007a28:	4b3e      	ldr	r3, [pc, #248]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007a2e:	2317      	movs	r3, #23
 8007a30:	18fb      	adds	r3, r7, r3
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d105      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a38:	4b3a      	ldr	r3, [pc, #232]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a3c:	4b39      	ldr	r3, [pc, #228]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a3e:	493f      	ldr	r1, [pc, #252]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a40:	400a      	ands	r2, r1
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	d009      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a4e:	4b35      	ldr	r3, [pc, #212]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a52:	2203      	movs	r2, #3
 8007a54:	4393      	bics	r3, r2
 8007a56:	0019      	movs	r1, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	4b31      	ldr	r3, [pc, #196]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2202      	movs	r2, #2
 8007a68:	4013      	ands	r3, r2
 8007a6a:	d009      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a6c:	4b2d      	ldr	r3, [pc, #180]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a70:	220c      	movs	r2, #12
 8007a72:	4393      	bics	r3, r2
 8007a74:	0019      	movs	r1, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691a      	ldr	r2, [r3, #16]
 8007a7a:	4b2a      	ldr	r3, [pc, #168]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2204      	movs	r2, #4
 8007a86:	4013      	ands	r3, r2
 8007a88:	d009      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a8a:	4b26      	ldr	r3, [pc, #152]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	0019      	movs	r1, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	695a      	ldr	r2, [r3, #20]
 8007a98:	4b22      	ldr	r3, [pc, #136]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	d009      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aac:	4a25      	ldr	r2, [pc, #148]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	0019      	movs	r1, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	4b1b      	ldr	r3, [pc, #108]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	2380      	movs	r3, #128	; 0x80
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	d009      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ac8:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007acc:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	0019      	movs	r1, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69da      	ldr	r2, [r3, #28]
 8007ad6:	4b13      	ldr	r3, [pc, #76]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2240      	movs	r2, #64	; 0x40
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	d009      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aea:	4a17      	ldr	r2, [pc, #92]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	0019      	movs	r1, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007af4:	4b0b      	ldr	r3, [pc, #44]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007af6:	430a      	orrs	r2, r1
 8007af8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2280      	movs	r2, #128	; 0x80
 8007b00:	4013      	ands	r3, r2
 8007b02:	d009      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b08:	4a10      	ldr	r2, [pc, #64]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	0019      	movs	r1, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1a      	ldr	r2, [r3, #32]
 8007b12:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b14:	430a      	orrs	r2, r1
 8007b16:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b006      	add	sp, #24
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	40021000 	.word	0x40021000
 8007b28:	40007000 	.word	0x40007000
 8007b2c:	fffcffff 	.word	0xfffcffff
 8007b30:	fff7ffff 	.word	0xfff7ffff
 8007b34:	00001388 	.word	0x00001388
 8007b38:	ffcfffff 	.word	0xffcfffff
 8007b3c:	efffffff 	.word	0xefffffff
 8007b40:	fffff3ff 	.word	0xfffff3ff
 8007b44:	ffffcfff 	.word	0xffffcfff
 8007b48:	fbffffff 	.word	0xfbffffff
 8007b4c:	fff3ffff 	.word	0xfff3ffff

08007b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e083      	b.n	8007c6a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	2382      	movs	r3, #130	; 0x82
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d009      	beq.n	8007b8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	61da      	str	r2, [r3, #28]
 8007b7c:	e005      	b.n	8007b8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2251      	movs	r2, #81	; 0x51
 8007b94:	5c9b      	ldrb	r3, [r3, r2]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d107      	bne.n	8007bac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2250      	movs	r2, #80	; 0x50
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f7fc fa3e 	bl	8004028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2251      	movs	r2, #81	; 0x51
 8007bb0:	2102      	movs	r1, #2
 8007bb2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2140      	movs	r1, #64	; 0x40
 8007bc0:	438a      	bics	r2, r1
 8007bc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	2382      	movs	r3, #130	; 0x82
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	401a      	ands	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6899      	ldr	r1, [r3, #8]
 8007bd2:	2384      	movs	r3, #132	; 0x84
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	400b      	ands	r3, r1
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68d9      	ldr	r1, [r3, #12]
 8007bde:	2380      	movs	r3, #128	; 0x80
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	400b      	ands	r3, r1
 8007be4:	431a      	orrs	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2102      	movs	r1, #2
 8007bec:	400b      	ands	r3, r1
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	400b      	ands	r3, r1
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6999      	ldr	r1, [r3, #24]
 8007bfe:	2380      	movs	r3, #128	; 0x80
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	400b      	ands	r3, r1
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	2138      	movs	r1, #56	; 0x38
 8007c0c:	400b      	ands	r3, r1
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	2180      	movs	r1, #128	; 0x80
 8007c16:	400b      	ands	r3, r1
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	0011      	movs	r1, r2
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c20:	2380      	movs	r3, #128	; 0x80
 8007c22:	019b      	lsls	r3, r3, #6
 8007c24:	401a      	ands	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	0c1b      	lsrs	r3, r3, #16
 8007c34:	2204      	movs	r2, #4
 8007c36:	4013      	ands	r3, r2
 8007c38:	0019      	movs	r1, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	2210      	movs	r2, #16
 8007c40:	401a      	ands	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4907      	ldr	r1, [pc, #28]	; (8007c74 <HAL_SPI_Init+0x124>)
 8007c56:	400a      	ands	r2, r1
 8007c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2251      	movs	r2, #81	; 0x51
 8007c64:	2101      	movs	r1, #1
 8007c66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b002      	add	sp, #8
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	fffff7ff 	.word	0xfffff7ff

08007c78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	1dbb      	adds	r3, r7, #6
 8007c86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c88:	231f      	movs	r3, #31
 8007c8a:	18fb      	adds	r3, r7, r3
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2250      	movs	r2, #80	; 0x50
 8007c94:	5c9b      	ldrb	r3, [r3, r2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_SPI_Transmit+0x26>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e13e      	b.n	8007f1c <HAL_SPI_Transmit+0x2a4>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2250      	movs	r2, #80	; 0x50
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ca6:	f7fd fdef 	bl	8005888 <HAL_GetTick>
 8007caa:	0003      	movs	r3, r0
 8007cac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007cae:	2316      	movs	r3, #22
 8007cb0:	18fb      	adds	r3, r7, r3
 8007cb2:	1dba      	adds	r2, r7, #6
 8007cb4:	8812      	ldrh	r2, [r2, #0]
 8007cb6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2251      	movs	r2, #81	; 0x51
 8007cbc:	5c9b      	ldrb	r3, [r3, r2]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d004      	beq.n	8007cce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007cc4:	231f      	movs	r3, #31
 8007cc6:	18fb      	adds	r3, r7, r3
 8007cc8:	2202      	movs	r2, #2
 8007cca:	701a      	strb	r2, [r3, #0]
    goto error;
 8007ccc:	e11b      	b.n	8007f06 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_SPI_Transmit+0x64>
 8007cd4:	1dbb      	adds	r3, r7, #6
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007cdc:	231f      	movs	r3, #31
 8007cde:	18fb      	adds	r3, r7, r3
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
    goto error;
 8007ce4:	e10f      	b.n	8007f06 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2251      	movs	r2, #81	; 0x51
 8007cea:	2103      	movs	r1, #3
 8007cec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	1dba      	adds	r2, r7, #6
 8007cfe:	8812      	ldrh	r2, [r2, #0]
 8007d00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1dba      	adds	r2, r7, #6
 8007d06:	8812      	ldrh	r2, [r2, #0]
 8007d08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	2380      	movs	r3, #128	; 0x80
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d110      	bne.n	8007d56 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2140      	movs	r1, #64	; 0x40
 8007d40:	438a      	bics	r2, r1
 8007d42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2180      	movs	r1, #128	; 0x80
 8007d50:	01c9      	lsls	r1, r1, #7
 8007d52:	430a      	orrs	r2, r1
 8007d54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2240      	movs	r2, #64	; 0x40
 8007d5e:	4013      	ands	r3, r2
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d007      	beq.n	8007d74 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2140      	movs	r1, #64	; 0x40
 8007d70:	430a      	orrs	r2, r1
 8007d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	2380      	movs	r3, #128	; 0x80
 8007d7a:	011b      	lsls	r3, r3, #4
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d14e      	bne.n	8007e1e <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <HAL_SPI_Transmit+0x11a>
 8007d88:	2316      	movs	r3, #22
 8007d8a:	18fb      	adds	r3, r7, r3
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d13f      	bne.n	8007e12 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d96:	881a      	ldrh	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	1c9a      	adds	r2, r3, #2
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007db6:	e02c      	b.n	8007e12 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d112      	bne.n	8007dec <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	881a      	ldrh	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd6:	1c9a      	adds	r2, r3, #2
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	86da      	strh	r2, [r3, #54]	; 0x36
 8007dea:	e012      	b.n	8007e12 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dec:	f7fd fd4c 	bl	8005888 <HAL_GetTick>
 8007df0:	0002      	movs	r2, r0
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d802      	bhi.n	8007e02 <HAL_SPI_Transmit+0x18a>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	d102      	bne.n	8007e08 <HAL_SPI_Transmit+0x190>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8007e08:	231f      	movs	r3, #31
 8007e0a:	18fb      	adds	r3, r7, r3
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	701a      	strb	r2, [r3, #0]
          goto error;
 8007e10:	e079      	b.n	8007f06 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1cd      	bne.n	8007db8 <HAL_SPI_Transmit+0x140>
 8007e1c:	e04f      	b.n	8007ebe <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <HAL_SPI_Transmit+0x1b8>
 8007e26:	2316      	movs	r3, #22
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d141      	bne.n	8007eb4 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e56:	e02d      	b.n	8007eb4 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d113      	bne.n	8007e8e <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	330c      	adds	r3, #12
 8007e70:	7812      	ldrb	r2, [r2, #0]
 8007e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e8c:	e012      	b.n	8007eb4 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e8e:	f7fd fcfb 	bl	8005888 <HAL_GetTick>
 8007e92:	0002      	movs	r2, r0
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d802      	bhi.n	8007ea4 <HAL_SPI_Transmit+0x22c>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	d102      	bne.n	8007eaa <HAL_SPI_Transmit+0x232>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8007eaa:	231f      	movs	r3, #31
 8007eac:	18fb      	adds	r3, r7, r3
 8007eae:	2203      	movs	r2, #3
 8007eb0:	701a      	strb	r2, [r3, #0]
          goto error;
 8007eb2:	e028      	b.n	8007f06 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1cc      	bne.n	8007e58 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	f000 fc07 	bl	80086d8 <SPI_EndRxTxTransaction>
 8007eca:	1e03      	subs	r3, r0, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8007efa:	231f      	movs	r3, #31
 8007efc:	18fb      	adds	r3, r7, r3
 8007efe:	2201      	movs	r2, #1
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e000      	b.n	8007f06 <HAL_SPI_Transmit+0x28e>
  }

error:
 8007f04:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2251      	movs	r2, #81	; 0x51
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2250      	movs	r2, #80	; 0x50
 8007f12:	2100      	movs	r1, #0
 8007f14:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007f16:	231f      	movs	r3, #31
 8007f18:	18fb      	adds	r3, r7, r3
 8007f1a:	781b      	ldrb	r3, [r3, #0]
}
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b008      	add	sp, #32
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b089      	sub	sp, #36	; 0x24
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	1dbb      	adds	r3, r7, #6
 8007f32:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f34:	2317      	movs	r3, #23
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	2382      	movs	r3, #130	; 0x82
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d113      	bne.n	8007f70 <HAL_SPI_Receive+0x4c>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10f      	bne.n	8007f70 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2251      	movs	r2, #81	; 0x51
 8007f54:	2104      	movs	r1, #4
 8007f56:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f58:	1dbb      	adds	r3, r7, #6
 8007f5a:	881c      	ldrh	r4, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	0023      	movs	r3, r4
 8007f68:	f000 f902 	bl	8008170 <HAL_SPI_TransmitReceive>
 8007f6c:	0003      	movs	r3, r0
 8007f6e:	e0f9      	b.n	8008164 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2250      	movs	r2, #80	; 0x50
 8007f74:	5c9b      	ldrb	r3, [r3, r2]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <HAL_SPI_Receive+0x5a>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e0f2      	b.n	8008164 <HAL_SPI_Receive+0x240>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2250      	movs	r2, #80	; 0x50
 8007f82:	2101      	movs	r1, #1
 8007f84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f86:	f7fd fc7f 	bl	8005888 <HAL_GetTick>
 8007f8a:	0003      	movs	r3, r0
 8007f8c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2251      	movs	r2, #81	; 0x51
 8007f92:	5c9b      	ldrb	r3, [r3, r2]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d004      	beq.n	8007fa4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8007f9a:	2317      	movs	r3, #23
 8007f9c:	18fb      	adds	r3, r7, r3
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	701a      	strb	r2, [r3, #0]
    goto error;
 8007fa2:	e0d4      	b.n	800814e <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_SPI_Receive+0x8e>
 8007faa:	1dbb      	adds	r3, r7, #6
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8007fb2:	2317      	movs	r3, #23
 8007fb4:	18fb      	adds	r3, r7, r3
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	701a      	strb	r2, [r3, #0]
    goto error;
 8007fba:	e0c8      	b.n	800814e <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2251      	movs	r2, #81	; 0x51
 8007fc0:	2104      	movs	r1, #4
 8007fc2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	1dba      	adds	r2, r7, #6
 8007fd4:	8812      	ldrh	r2, [r2, #0]
 8007fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	1dba      	adds	r2, r7, #6
 8007fdc:	8812      	ldrh	r2, [r2, #0]
 8007fde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	2380      	movs	r3, #128	; 0x80
 8008004:	021b      	lsls	r3, r3, #8
 8008006:	429a      	cmp	r2, r3
 8008008:	d10f      	bne.n	800802a <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2140      	movs	r1, #64	; 0x40
 8008016:	438a      	bics	r2, r1
 8008018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4951      	ldr	r1, [pc, #324]	; (800816c <HAL_SPI_Receive+0x248>)
 8008026:	400a      	ands	r2, r1
 8008028:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2240      	movs	r2, #64	; 0x40
 8008032:	4013      	ands	r3, r2
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d007      	beq.n	8008048 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2140      	movs	r1, #64	; 0x40
 8008044:	430a      	orrs	r2, r1
 8008046:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d164      	bne.n	800811a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008050:	e02f      	b.n	80080b2 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2201      	movs	r2, #1
 800805a:	4013      	ands	r3, r2
 800805c:	2b01      	cmp	r3, #1
 800805e:	d115      	bne.n	800808c <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	330c      	adds	r3, #12
 8008066:	001a      	movs	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008080:	b29b      	uxth	r3, r3
 8008082:	3b01      	subs	r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	87da      	strh	r2, [r3, #62]	; 0x3e
 800808a:	e012      	b.n	80080b2 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800808c:	f7fd fbfc 	bl	8005888 <HAL_GetTick>
 8008090:	0002      	movs	r2, r0
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	429a      	cmp	r2, r3
 800809a:	d802      	bhi.n	80080a2 <HAL_SPI_Receive+0x17e>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	d102      	bne.n	80080a8 <HAL_SPI_Receive+0x184>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d104      	bne.n	80080b2 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80080a8:	2317      	movs	r3, #23
 80080aa:	18fb      	adds	r3, r7, r3
 80080ac:	2203      	movs	r2, #3
 80080ae:	701a      	strb	r2, [r3, #0]
          goto error;
 80080b0:	e04d      	b.n	800814e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1ca      	bne.n	8008052 <HAL_SPI_Receive+0x12e>
 80080bc:	e032      	b.n	8008124 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	2201      	movs	r2, #1
 80080c6:	4013      	ands	r3, r2
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d113      	bne.n	80080f4 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	b292      	uxth	r2, r2
 80080d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	1c9a      	adds	r2, r3, #2
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080f2:	e012      	b.n	800811a <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f4:	f7fd fbc8 	bl	8005888 <HAL_GetTick>
 80080f8:	0002      	movs	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d802      	bhi.n	800810a <HAL_SPI_Receive+0x1e6>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	3301      	adds	r3, #1
 8008108:	d102      	bne.n	8008110 <HAL_SPI_Receive+0x1ec>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d104      	bne.n	800811a <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8008110:	2317      	movs	r3, #23
 8008112:	18fb      	adds	r3, r7, r3
 8008114:	2203      	movs	r2, #3
 8008116:	701a      	strb	r2, [r3, #0]
          goto error;
 8008118:	e019      	b.n	800814e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1cc      	bne.n	80080be <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	0018      	movs	r0, r3
 800812c:	f000 fa6a 	bl	8008604 <SPI_EndRxTransaction>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d002      	beq.n	800813a <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813e:	2b00      	cmp	r3, #0
 8008140:	d004      	beq.n	800814c <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8008142:	2317      	movs	r3, #23
 8008144:	18fb      	adds	r3, r7, r3
 8008146:	2201      	movs	r2, #1
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e000      	b.n	800814e <HAL_SPI_Receive+0x22a>
  }

error :
 800814c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2251      	movs	r2, #81	; 0x51
 8008152:	2101      	movs	r1, #1
 8008154:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2250      	movs	r2, #80	; 0x50
 800815a:	2100      	movs	r1, #0
 800815c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800815e:	2317      	movs	r3, #23
 8008160:	18fb      	adds	r3, r7, r3
 8008162:	781b      	ldrb	r3, [r3, #0]
}
 8008164:	0018      	movs	r0, r3
 8008166:	46bd      	mov	sp, r7
 8008168:	b007      	add	sp, #28
 800816a:	bd90      	pop	{r4, r7, pc}
 800816c:	ffffbfff 	.word	0xffffbfff

08008170 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08c      	sub	sp, #48	; 0x30
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	001a      	movs	r2, r3
 800817e:	1cbb      	adds	r3, r7, #2
 8008180:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008182:	2301      	movs	r3, #1
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008186:	232b      	movs	r3, #43	; 0x2b
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2250      	movs	r2, #80	; 0x50
 8008192:	5c9b      	ldrb	r3, [r3, r2]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_SPI_TransmitReceive+0x2c>
 8008198:	2302      	movs	r3, #2
 800819a:	e1a0      	b.n	80084de <HAL_SPI_TransmitReceive+0x36e>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2250      	movs	r2, #80	; 0x50
 80081a0:	2101      	movs	r1, #1
 80081a2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081a4:	f7fd fb70 	bl	8005888 <HAL_GetTick>
 80081a8:	0003      	movs	r3, r0
 80081aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081ac:	2023      	movs	r0, #35	; 0x23
 80081ae:	183b      	adds	r3, r7, r0
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	2151      	movs	r1, #81	; 0x51
 80081b4:	5c52      	ldrb	r2, [r2, r1]
 80081b6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081be:	231a      	movs	r3, #26
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	1cba      	adds	r2, r7, #2
 80081c4:	8812      	ldrh	r2, [r2, #0]
 80081c6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081c8:	183b      	adds	r3, r7, r0
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d011      	beq.n	80081f4 <HAL_SPI_TransmitReceive+0x84>
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	2382      	movs	r3, #130	; 0x82
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d107      	bne.n	80081ea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d103      	bne.n	80081ea <HAL_SPI_TransmitReceive+0x7a>
 80081e2:	183b      	adds	r3, r7, r0
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d004      	beq.n	80081f4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80081ea:	232b      	movs	r3, #43	; 0x2b
 80081ec:	18fb      	adds	r3, r7, r3
 80081ee:	2202      	movs	r2, #2
 80081f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80081f2:	e169      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d006      	beq.n	8008208 <HAL_SPI_TransmitReceive+0x98>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_SPI_TransmitReceive+0x98>
 8008200:	1cbb      	adds	r3, r7, #2
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008208:	232b      	movs	r3, #43	; 0x2b
 800820a:	18fb      	adds	r3, r7, r3
 800820c:	2201      	movs	r2, #1
 800820e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008210:	e15a      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2251      	movs	r2, #81	; 0x51
 8008216:	5c9b      	ldrb	r3, [r3, r2]
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b04      	cmp	r3, #4
 800821c:	d003      	beq.n	8008226 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2251      	movs	r2, #81	; 0x51
 8008222:	2105      	movs	r1, #5
 8008224:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1cba      	adds	r2, r7, #2
 8008236:	8812      	ldrh	r2, [r2, #0]
 8008238:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1cba      	adds	r2, r7, #2
 800823e:	8812      	ldrh	r2, [r2, #0]
 8008240:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	1cba      	adds	r2, r7, #2
 800824c:	8812      	ldrh	r2, [r2, #0]
 800824e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	1cba      	adds	r2, r7, #2
 8008254:	8812      	ldrh	r2, [r2, #0]
 8008256:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2240      	movs	r2, #64	; 0x40
 800826c:	4013      	ands	r3, r2
 800826e:	2b40      	cmp	r3, #64	; 0x40
 8008270:	d007      	beq.n	8008282 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2140      	movs	r1, #64	; 0x40
 800827e:	430a      	orrs	r2, r1
 8008280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	2380      	movs	r3, #128	; 0x80
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	429a      	cmp	r2, r3
 800828c:	d000      	beq.n	8008290 <HAL_SPI_TransmitReceive+0x120>
 800828e:	e07a      	b.n	8008386 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <HAL_SPI_TransmitReceive+0x132>
 8008298:	231a      	movs	r3, #26
 800829a:	18fb      	adds	r3, r7, r3
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d166      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	881a      	ldrh	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	1c9a      	adds	r2, r3, #2
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082c6:	e053      	b.n	8008370 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2202      	movs	r2, #2
 80082d0:	4013      	ands	r3, r2
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d11b      	bne.n	800830e <HAL_SPI_TransmitReceive+0x19e>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082da:	b29b      	uxth	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d016      	beq.n	800830e <HAL_SPI_TransmitReceive+0x19e>
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d113      	bne.n	800830e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ea:	881a      	ldrh	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	1c9a      	adds	r2, r3, #2
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b01      	subs	r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	2201      	movs	r2, #1
 8008316:	4013      	ands	r3, r2
 8008318:	2b01      	cmp	r3, #1
 800831a:	d119      	bne.n	8008350 <HAL_SPI_TransmitReceive+0x1e0>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d014      	beq.n	8008350 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	b292      	uxth	r2, r2
 8008332:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	1c9a      	adds	r2, r3, #2
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008342:	b29b      	uxth	r3, r3
 8008344:	3b01      	subs	r3, #1
 8008346:	b29a      	uxth	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800834c:	2301      	movs	r3, #1
 800834e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008350:	f7fd fa9a 	bl	8005888 <HAL_GetTick>
 8008354:	0002      	movs	r2, r0
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800835c:	429a      	cmp	r2, r3
 800835e:	d807      	bhi.n	8008370 <HAL_SPI_TransmitReceive+0x200>
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	3301      	adds	r3, #1
 8008364:	d004      	beq.n	8008370 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8008366:	232b      	movs	r3, #43	; 0x2b
 8008368:	18fb      	adds	r3, r7, r3
 800836a:	2203      	movs	r2, #3
 800836c:	701a      	strb	r2, [r3, #0]
        goto error;
 800836e:	e0ab      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008374:	b29b      	uxth	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1a6      	bne.n	80082c8 <HAL_SPI_TransmitReceive+0x158>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1a1      	bne.n	80082c8 <HAL_SPI_TransmitReceive+0x158>
 8008384:	e07f      	b.n	8008486 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d005      	beq.n	800839a <HAL_SPI_TransmitReceive+0x22a>
 800838e:	231a      	movs	r3, #26
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d000      	beq.n	800839a <HAL_SPI_TransmitReceive+0x22a>
 8008398:	e06b      	b.n	8008472 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	330c      	adds	r3, #12
 80083a4:	7812      	ldrb	r2, [r2, #0]
 80083a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	3b01      	subs	r3, #1
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c0:	e057      	b.n	8008472 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	2202      	movs	r2, #2
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d11c      	bne.n	800840a <HAL_SPI_TransmitReceive+0x29a>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d017      	beq.n	800840a <HAL_SPI_TransmitReceive+0x29a>
 80083da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d114      	bne.n	800840a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	330c      	adds	r3, #12
 80083ea:	7812      	ldrb	r2, [r2, #0]
 80083ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	b29a      	uxth	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	2201      	movs	r2, #1
 8008412:	4013      	ands	r3, r2
 8008414:	2b01      	cmp	r3, #1
 8008416:	d119      	bne.n	800844c <HAL_SPI_TransmitReceive+0x2dc>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d014      	beq.n	800844c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	b2d2      	uxtb	r2, r2
 800842e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800843e:	b29b      	uxth	r3, r3
 8008440:	3b01      	subs	r3, #1
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008448:	2301      	movs	r3, #1
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800844c:	f7fd fa1c 	bl	8005888 <HAL_GetTick>
 8008450:	0002      	movs	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008458:	429a      	cmp	r2, r3
 800845a:	d802      	bhi.n	8008462 <HAL_SPI_TransmitReceive+0x2f2>
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	3301      	adds	r3, #1
 8008460:	d102      	bne.n	8008468 <HAL_SPI_TransmitReceive+0x2f8>
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8008468:	232b      	movs	r3, #43	; 0x2b
 800846a:	18fb      	adds	r3, r7, r3
 800846c:	2203      	movs	r2, #3
 800846e:	701a      	strb	r2, [r3, #0]
        goto error;
 8008470:	e02a      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1a2      	bne.n	80083c2 <HAL_SPI_TransmitReceive+0x252>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d19d      	bne.n	80083c2 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008488:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	0018      	movs	r0, r3
 800848e:	f000 f923 	bl	80086d8 <SPI_EndRxTxTransaction>
 8008492:	1e03      	subs	r3, r0, #0
 8008494:	d007      	beq.n	80084a6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8008496:	232b      	movs	r3, #43	; 0x2b
 8008498:	18fb      	adds	r3, r7, r3
 800849a:	2201      	movs	r2, #1
 800849c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084a4:	e010      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10b      	bne.n	80084c6 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	e000      	b.n	80084c8 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80084c6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2251      	movs	r2, #81	; 0x51
 80084cc:	2101      	movs	r1, #1
 80084ce:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2250      	movs	r2, #80	; 0x50
 80084d4:	2100      	movs	r1, #0
 80084d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80084d8:	232b      	movs	r3, #43	; 0x2b
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	781b      	ldrb	r3, [r3, #0]
}
 80084de:	0018      	movs	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	b00c      	add	sp, #48	; 0x30
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	1dfb      	adds	r3, r7, #7
 80084f6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084f8:	f7fd f9c6 	bl	8005888 <HAL_GetTick>
 80084fc:	0002      	movs	r2, r0
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	18d3      	adds	r3, r2, r3
 8008506:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008508:	f7fd f9be 	bl	8005888 <HAL_GetTick>
 800850c:	0003      	movs	r3, r0
 800850e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008510:	4b3a      	ldr	r3, [pc, #232]	; (80085fc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	015b      	lsls	r3, r3, #5
 8008516:	0d1b      	lsrs	r3, r3, #20
 8008518:	69fa      	ldr	r2, [r7, #28]
 800851a:	4353      	muls	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800851e:	e058      	b.n	80085d2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	d055      	beq.n	80085d2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008526:	f7fd f9af 	bl	8005888 <HAL_GetTick>
 800852a:	0002      	movs	r2, r0
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	69fa      	ldr	r2, [r7, #28]
 8008532:	429a      	cmp	r2, r3
 8008534:	d902      	bls.n	800853c <SPI_WaitFlagStateUntilTimeout+0x54>
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d142      	bne.n	80085c2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	21e0      	movs	r1, #224	; 0xe0
 8008548:	438a      	bics	r2, r1
 800854a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	2382      	movs	r3, #130	; 0x82
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	429a      	cmp	r2, r3
 8008556:	d113      	bne.n	8008580 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	2380      	movs	r3, #128	; 0x80
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	429a      	cmp	r2, r3
 8008562:	d005      	beq.n	8008570 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	2380      	movs	r3, #128	; 0x80
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	429a      	cmp	r2, r3
 800856e:	d107      	bne.n	8008580 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2140      	movs	r1, #64	; 0x40
 800857c:	438a      	bics	r2, r1
 800857e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008584:	2380      	movs	r3, #128	; 0x80
 8008586:	019b      	lsls	r3, r3, #6
 8008588:	429a      	cmp	r2, r3
 800858a:	d110      	bne.n	80085ae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	491a      	ldr	r1, [pc, #104]	; (8008600 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008598:	400a      	ands	r2, r1
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2180      	movs	r1, #128	; 0x80
 80085a8:	0189      	lsls	r1, r1, #6
 80085aa:	430a      	orrs	r2, r1
 80085ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2251      	movs	r2, #81	; 0x51
 80085b2:	2101      	movs	r1, #1
 80085b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2250      	movs	r2, #80	; 0x50
 80085ba:	2100      	movs	r1, #0
 80085bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e017      	b.n	80085f2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	4013      	ands	r3, r2
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	425a      	negs	r2, r3
 80085e2:	4153      	adcs	r3, r2
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	001a      	movs	r2, r3
 80085e8:	1dfb      	adds	r3, r7, #7
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d197      	bne.n	8008520 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	0018      	movs	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b008      	add	sp, #32
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	20000000 	.word	0x20000000
 8008600:	ffffdfff 	.word	0xffffdfff

08008604 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af02      	add	r7, sp, #8
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	2382      	movs	r3, #130	; 0x82
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	429a      	cmp	r2, r3
 800861a:	d113      	bne.n	8008644 <SPI_EndRxTransaction+0x40>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	2380      	movs	r3, #128	; 0x80
 8008622:	021b      	lsls	r3, r3, #8
 8008624:	429a      	cmp	r2, r3
 8008626:	d005      	beq.n	8008634 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	2380      	movs	r3, #128	; 0x80
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	429a      	cmp	r2, r3
 8008632:	d107      	bne.n	8008644 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2140      	movs	r1, #64	; 0x40
 8008640:	438a      	bics	r2, r1
 8008642:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	2382      	movs	r3, #130	; 0x82
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	429a      	cmp	r2, r3
 800864e:	d12b      	bne.n	80086a8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	2380      	movs	r3, #128	; 0x80
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	429a      	cmp	r2, r3
 800865a:	d012      	beq.n	8008682 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	0013      	movs	r3, r2
 8008666:	2200      	movs	r2, #0
 8008668:	2180      	movs	r1, #128	; 0x80
 800866a:	f7ff ff3d 	bl	80084e8 <SPI_WaitFlagStateUntilTimeout>
 800866e:	1e03      	subs	r3, r0, #0
 8008670:	d02d      	beq.n	80086ce <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008676:	2220      	movs	r2, #32
 8008678:	431a      	orrs	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e026      	b.n	80086d0 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	0013      	movs	r3, r2
 800868c:	2200      	movs	r2, #0
 800868e:	2101      	movs	r1, #1
 8008690:	f7ff ff2a 	bl	80084e8 <SPI_WaitFlagStateUntilTimeout>
 8008694:	1e03      	subs	r3, r0, #0
 8008696:	d01a      	beq.n	80086ce <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869c:	2220      	movs	r2, #32
 800869e:	431a      	orrs	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e013      	b.n	80086d0 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	0013      	movs	r3, r2
 80086b2:	2200      	movs	r2, #0
 80086b4:	2101      	movs	r1, #1
 80086b6:	f7ff ff17 	bl	80084e8 <SPI_WaitFlagStateUntilTimeout>
 80086ba:	1e03      	subs	r3, r0, #0
 80086bc:	d007      	beq.n	80086ce <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c2:	2220      	movs	r2, #32
 80086c4:	431a      	orrs	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e000      	b.n	80086d0 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	0018      	movs	r0, r3
 80086d2:	46bd      	mov	sp, r7
 80086d4:	b004      	add	sp, #16
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086e4:	4b1d      	ldr	r3, [pc, #116]	; (800875c <SPI_EndRxTxTransaction+0x84>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	491d      	ldr	r1, [pc, #116]	; (8008760 <SPI_EndRxTxTransaction+0x88>)
 80086ea:	0018      	movs	r0, r3
 80086ec:	f7f7 fd28 	bl	8000140 <__udivsi3>
 80086f0:	0003      	movs	r3, r0
 80086f2:	001a      	movs	r2, r3
 80086f4:	0013      	movs	r3, r2
 80086f6:	015b      	lsls	r3, r3, #5
 80086f8:	1a9b      	subs	r3, r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	189b      	adds	r3, r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	2382      	movs	r3, #130	; 0x82
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	429a      	cmp	r2, r3
 800870c:	d112      	bne.n	8008734 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	0013      	movs	r3, r2
 8008718:	2200      	movs	r2, #0
 800871a:	2180      	movs	r1, #128	; 0x80
 800871c:	f7ff fee4 	bl	80084e8 <SPI_WaitFlagStateUntilTimeout>
 8008720:	1e03      	subs	r3, r0, #0
 8008722:	d016      	beq.n	8008752 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008728:	2220      	movs	r2, #32
 800872a:	431a      	orrs	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e00f      	b.n	8008754 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	3b01      	subs	r3, #1
 800873e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	2280      	movs	r2, #128	; 0x80
 8008748:	4013      	ands	r3, r2
 800874a:	2b80      	cmp	r3, #128	; 0x80
 800874c:	d0f2      	beq.n	8008734 <SPI_EndRxTxTransaction+0x5c>
 800874e:	e000      	b.n	8008752 <SPI_EndRxTxTransaction+0x7a>
        break;
 8008750:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	0018      	movs	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	b006      	add	sp, #24
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000000 	.word	0x20000000
 8008760:	016e3600 	.word	0x016e3600

08008764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e032      	b.n	80087dc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2239      	movs	r2, #57	; 0x39
 800877a:	5c9b      	ldrb	r3, [r3, r2]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d107      	bne.n	8008792 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2238      	movs	r2, #56	; 0x38
 8008786:	2100      	movs	r1, #0
 8008788:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	0018      	movs	r0, r3
 800878e:	f7fb ff89 	bl	80046a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2239      	movs	r2, #57	; 0x39
 8008796:	2102      	movs	r1, #2
 8008798:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3304      	adds	r3, #4
 80087a2:	0019      	movs	r1, r3
 80087a4:	0010      	movs	r0, r2
 80087a6:	f000 fe67 	bl	8009478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	223e      	movs	r2, #62	; 0x3e
 80087ae:	2101      	movs	r1, #1
 80087b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	223a      	movs	r2, #58	; 0x3a
 80087b6:	2101      	movs	r1, #1
 80087b8:	5499      	strb	r1, [r3, r2]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	223b      	movs	r2, #59	; 0x3b
 80087be:	2101      	movs	r1, #1
 80087c0:	5499      	strb	r1, [r3, r2]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	223c      	movs	r2, #60	; 0x3c
 80087c6:	2101      	movs	r1, #1
 80087c8:	5499      	strb	r1, [r3, r2]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	223d      	movs	r2, #61	; 0x3d
 80087ce:	2101      	movs	r1, #1
 80087d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2239      	movs	r2, #57	; 0x39
 80087d6:	2101      	movs	r1, #1
 80087d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	0018      	movs	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	b002      	add	sp, #8
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2239      	movs	r2, #57	; 0x39
 80087f0:	5c9b      	ldrb	r3, [r3, r2]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d001      	beq.n	80087fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e033      	b.n	8008864 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2239      	movs	r2, #57	; 0x39
 8008800:	2102      	movs	r1, #2
 8008802:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	2380      	movs	r3, #128	; 0x80
 800880a:	05db      	lsls	r3, r3, #23
 800880c:	429a      	cmp	r2, r3
 800880e:	d00e      	beq.n	800882e <HAL_TIM_Base_Start+0x4a>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a15      	ldr	r2, [pc, #84]	; (800886c <HAL_TIM_Base_Start+0x88>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d009      	beq.n	800882e <HAL_TIM_Base_Start+0x4a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a14      	ldr	r2, [pc, #80]	; (8008870 <HAL_TIM_Base_Start+0x8c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d004      	beq.n	800882e <HAL_TIM_Base_Start+0x4a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a12      	ldr	r2, [pc, #72]	; (8008874 <HAL_TIM_Base_Start+0x90>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d111      	bne.n	8008852 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	2207      	movs	r2, #7
 8008836:	4013      	ands	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b06      	cmp	r3, #6
 800883e:	d010      	beq.n	8008862 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2101      	movs	r1, #1
 800884c:	430a      	orrs	r2, r1
 800884e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008850:	e007      	b.n	8008862 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2101      	movs	r1, #1
 800885e:	430a      	orrs	r2, r1
 8008860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	0018      	movs	r0, r3
 8008866:	46bd      	mov	sp, r7
 8008868:	b004      	add	sp, #16
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40000400 	.word	0x40000400
 8008870:	40010800 	.word	0x40010800
 8008874:	40011400 	.word	0x40011400

08008878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2239      	movs	r2, #57	; 0x39
 8008884:	5c9b      	ldrb	r3, [r3, r2]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b01      	cmp	r3, #1
 800888a:	d001      	beq.n	8008890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e03b      	b.n	8008908 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2239      	movs	r2, #57	; 0x39
 8008894:	2102      	movs	r1, #2
 8008896:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2101      	movs	r1, #1
 80088a4:	430a      	orrs	r2, r1
 80088a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	2380      	movs	r3, #128	; 0x80
 80088ae:	05db      	lsls	r3, r3, #23
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d00e      	beq.n	80088d2 <HAL_TIM_Base_Start_IT+0x5a>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a15      	ldr	r2, [pc, #84]	; (8008910 <HAL_TIM_Base_Start_IT+0x98>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d009      	beq.n	80088d2 <HAL_TIM_Base_Start_IT+0x5a>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a14      	ldr	r2, [pc, #80]	; (8008914 <HAL_TIM_Base_Start_IT+0x9c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d004      	beq.n	80088d2 <HAL_TIM_Base_Start_IT+0x5a>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a12      	ldr	r2, [pc, #72]	; (8008918 <HAL_TIM_Base_Start_IT+0xa0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d111      	bne.n	80088f6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2207      	movs	r2, #7
 80088da:	4013      	ands	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b06      	cmp	r3, #6
 80088e2:	d010      	beq.n	8008906 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2101      	movs	r1, #1
 80088f0:	430a      	orrs	r2, r1
 80088f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f4:	e007      	b.n	8008906 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2101      	movs	r1, #1
 8008902:	430a      	orrs	r2, r1
 8008904:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	0018      	movs	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	b004      	add	sp, #16
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40000400 	.word	0x40000400
 8008914:	40010800 	.word	0x40010800
 8008918:	40011400 	.word	0x40011400

0800891c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e032      	b.n	8008994 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2239      	movs	r2, #57	; 0x39
 8008932:	5c9b      	ldrb	r3, [r3, r2]
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d107      	bne.n	800894a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2238      	movs	r2, #56	; 0x38
 800893e:	2100      	movs	r1, #0
 8008940:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	0018      	movs	r0, r3
 8008946:	f000 f829 	bl	800899c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2239      	movs	r2, #57	; 0x39
 800894e:	2102      	movs	r1, #2
 8008950:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3304      	adds	r3, #4
 800895a:	0019      	movs	r1, r3
 800895c:	0010      	movs	r0, r2
 800895e:	f000 fd8b 	bl	8009478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	223e      	movs	r2, #62	; 0x3e
 8008966:	2101      	movs	r1, #1
 8008968:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	223a      	movs	r2, #58	; 0x3a
 800896e:	2101      	movs	r1, #1
 8008970:	5499      	strb	r1, [r3, r2]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	223b      	movs	r2, #59	; 0x3b
 8008976:	2101      	movs	r1, #1
 8008978:	5499      	strb	r1, [r3, r2]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	223c      	movs	r2, #60	; 0x3c
 800897e:	2101      	movs	r1, #1
 8008980:	5499      	strb	r1, [r3, r2]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	223d      	movs	r2, #61	; 0x3d
 8008986:	2101      	movs	r1, #1
 8008988:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2239      	movs	r2, #57	; 0x39
 800898e:	2101      	movs	r1, #1
 8008990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	0018      	movs	r0, r3
 8008996:	46bd      	mov	sp, r7
 8008998:	b002      	add	sp, #8
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089a4:	46c0      	nop			; (mov r8, r8)
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b002      	add	sp, #8
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d108      	bne.n	80089ce <HAL_TIM_PWM_Start+0x22>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	223a      	movs	r2, #58	; 0x3a
 80089c0:	5c9b      	ldrb	r3, [r3, r2]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	1e5a      	subs	r2, r3, #1
 80089c8:	4193      	sbcs	r3, r2
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	e01f      	b.n	8008a0e <HAL_TIM_PWM_Start+0x62>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d108      	bne.n	80089e6 <HAL_TIM_PWM_Start+0x3a>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	223b      	movs	r2, #59	; 0x3b
 80089d8:	5c9b      	ldrb	r3, [r3, r2]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	1e5a      	subs	r2, r3, #1
 80089e0:	4193      	sbcs	r3, r2
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	e013      	b.n	8008a0e <HAL_TIM_PWM_Start+0x62>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d108      	bne.n	80089fe <HAL_TIM_PWM_Start+0x52>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	223c      	movs	r2, #60	; 0x3c
 80089f0:	5c9b      	ldrb	r3, [r3, r2]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	1e5a      	subs	r2, r3, #1
 80089f8:	4193      	sbcs	r3, r2
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	e007      	b.n	8008a0e <HAL_TIM_PWM_Start+0x62>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	223d      	movs	r2, #61	; 0x3d
 8008a02:	5c9b      	ldrb	r3, [r3, r2]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	1e5a      	subs	r2, r3, #1
 8008a0a:	4193      	sbcs	r3, r2
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e052      	b.n	8008abc <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <HAL_TIM_PWM_Start+0x7a>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	223a      	movs	r2, #58	; 0x3a
 8008a20:	2102      	movs	r1, #2
 8008a22:	5499      	strb	r1, [r3, r2]
 8008a24:	e013      	b.n	8008a4e <HAL_TIM_PWM_Start+0xa2>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_PWM_Start+0x8a>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	223b      	movs	r2, #59	; 0x3b
 8008a30:	2102      	movs	r1, #2
 8008a32:	5499      	strb	r1, [r3, r2]
 8008a34:	e00b      	b.n	8008a4e <HAL_TIM_PWM_Start+0xa2>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d104      	bne.n	8008a46 <HAL_TIM_PWM_Start+0x9a>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	223c      	movs	r2, #60	; 0x3c
 8008a40:	2102      	movs	r1, #2
 8008a42:	5499      	strb	r1, [r3, r2]
 8008a44:	e003      	b.n	8008a4e <HAL_TIM_PWM_Start+0xa2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	223d      	movs	r2, #61	; 0x3d
 8008a4a:	2102      	movs	r1, #2
 8008a4c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	2201      	movs	r2, #1
 8008a56:	0018      	movs	r0, r3
 8008a58:	f001 f82e 	bl	8009ab8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	2380      	movs	r3, #128	; 0x80
 8008a62:	05db      	lsls	r3, r3, #23
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d00e      	beq.n	8008a86 <HAL_TIM_PWM_Start+0xda>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a15      	ldr	r2, [pc, #84]	; (8008ac4 <HAL_TIM_PWM_Start+0x118>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d009      	beq.n	8008a86 <HAL_TIM_PWM_Start+0xda>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a14      	ldr	r2, [pc, #80]	; (8008ac8 <HAL_TIM_PWM_Start+0x11c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d004      	beq.n	8008a86 <HAL_TIM_PWM_Start+0xda>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a12      	ldr	r2, [pc, #72]	; (8008acc <HAL_TIM_PWM_Start+0x120>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d111      	bne.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	4013      	ands	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b06      	cmp	r3, #6
 8008a96:	d010      	beq.n	8008aba <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa8:	e007      	b.n	8008aba <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	0018      	movs	r0, r3
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	b004      	add	sp, #16
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	40000400 	.word	0x40000400
 8008ac8:	40010800 	.word	0x40010800
 8008acc:	40011400 	.word	0x40011400

08008ad0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e032      	b.n	8008b48 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2239      	movs	r2, #57	; 0x39
 8008ae6:	5c9b      	ldrb	r3, [r3, r2]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d107      	bne.n	8008afe <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2238      	movs	r2, #56	; 0x38
 8008af2:	2100      	movs	r1, #0
 8008af4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7fb fd89 	bl	8004610 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2239      	movs	r2, #57	; 0x39
 8008b02:	2102      	movs	r1, #2
 8008b04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	0019      	movs	r1, r3
 8008b10:	0010      	movs	r0, r2
 8008b12:	f000 fcb1 	bl	8009478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	223e      	movs	r2, #62	; 0x3e
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	223a      	movs	r2, #58	; 0x3a
 8008b22:	2101      	movs	r1, #1
 8008b24:	5499      	strb	r1, [r3, r2]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	223b      	movs	r2, #59	; 0x3b
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	5499      	strb	r1, [r3, r2]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	223c      	movs	r2, #60	; 0x3c
 8008b32:	2101      	movs	r1, #1
 8008b34:	5499      	strb	r1, [r3, r2]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	223d      	movs	r2, #61	; 0x3d
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2239      	movs	r2, #57	; 0x39
 8008b42:	2101      	movs	r1, #1
 8008b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	0018      	movs	r0, r3
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	b002      	add	sp, #8
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <HAL_TIM_IC_Start+0x1a>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	223a      	movs	r2, #58	; 0x3a
 8008b64:	5c9b      	ldrb	r3, [r3, r2]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	e013      	b.n	8008b92 <HAL_TIM_IC_Start+0x42>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d104      	bne.n	8008b7a <HAL_TIM_IC_Start+0x2a>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	223b      	movs	r2, #59	; 0x3b
 8008b74:	5c9b      	ldrb	r3, [r3, r2]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	e00b      	b.n	8008b92 <HAL_TIM_IC_Start+0x42>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	d104      	bne.n	8008b8a <HAL_TIM_IC_Start+0x3a>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	223c      	movs	r2, #60	; 0x3c
 8008b84:	5c9b      	ldrb	r3, [r3, r2]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	e003      	b.n	8008b92 <HAL_TIM_IC_Start+0x42>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	223d      	movs	r2, #61	; 0x3d
 8008b8e:	5c9b      	ldrb	r3, [r3, r2]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	210f      	movs	r1, #15
 8008b94:	187a      	adds	r2, r7, r1
 8008b96:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b98:	187b      	adds	r3, r7, r1
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d001      	beq.n	8008ba4 <HAL_TIM_IC_Start+0x54>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e052      	b.n	8008c4a <HAL_TIM_IC_Start+0xfa>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <HAL_TIM_IC_Start+0x64>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	223a      	movs	r2, #58	; 0x3a
 8008bae:	2102      	movs	r1, #2
 8008bb0:	5499      	strb	r1, [r3, r2]
 8008bb2:	e013      	b.n	8008bdc <HAL_TIM_IC_Start+0x8c>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d104      	bne.n	8008bc4 <HAL_TIM_IC_Start+0x74>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	223b      	movs	r2, #59	; 0x3b
 8008bbe:	2102      	movs	r1, #2
 8008bc0:	5499      	strb	r1, [r3, r2]
 8008bc2:	e00b      	b.n	8008bdc <HAL_TIM_IC_Start+0x8c>
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	d104      	bne.n	8008bd4 <HAL_TIM_IC_Start+0x84>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	223c      	movs	r2, #60	; 0x3c
 8008bce:	2102      	movs	r1, #2
 8008bd0:	5499      	strb	r1, [r3, r2]
 8008bd2:	e003      	b.n	8008bdc <HAL_TIM_IC_Start+0x8c>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	223d      	movs	r2, #61	; 0x3d
 8008bd8:	2102      	movs	r1, #2
 8008bda:	5499      	strb	r1, [r3, r2]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	2201      	movs	r2, #1
 8008be4:	0018      	movs	r0, r3
 8008be6:	f000 ff67 	bl	8009ab8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	2380      	movs	r3, #128	; 0x80
 8008bf0:	05db      	lsls	r3, r3, #23
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d00e      	beq.n	8008c14 <HAL_TIM_IC_Start+0xc4>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a16      	ldr	r2, [pc, #88]	; (8008c54 <HAL_TIM_IC_Start+0x104>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d009      	beq.n	8008c14 <HAL_TIM_IC_Start+0xc4>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <HAL_TIM_IC_Start+0x108>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d004      	beq.n	8008c14 <HAL_TIM_IC_Start+0xc4>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a13      	ldr	r2, [pc, #76]	; (8008c5c <HAL_TIM_IC_Start+0x10c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d111      	bne.n	8008c38 <HAL_TIM_IC_Start+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	2207      	movs	r2, #7
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b06      	cmp	r3, #6
 8008c24:	d010      	beq.n	8008c48 <HAL_TIM_IC_Start+0xf8>
    {
      __HAL_TIM_ENABLE(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2101      	movs	r1, #1
 8008c32:	430a      	orrs	r2, r1
 8008c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c36:	e007      	b.n	8008c48 <HAL_TIM_IC_Start+0xf8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2101      	movs	r1, #1
 8008c44:	430a      	orrs	r2, r1
 8008c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	b004      	add	sp, #16
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	46c0      	nop			; (mov r8, r8)
 8008c54:	40000400 	.word	0x40000400
 8008c58:	40010800 	.word	0x40010800
 8008c5c:	40011400 	.word	0x40011400

08008c60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c6a:	230f      	movs	r3, #15
 8008c6c:	18fb      	adds	r3, r7, r3
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d104      	bne.n	8008c82 <HAL_TIM_IC_Start_IT+0x22>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	223a      	movs	r2, #58	; 0x3a
 8008c7c:	5c9b      	ldrb	r3, [r3, r2]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	e013      	b.n	8008caa <HAL_TIM_IC_Start_IT+0x4a>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d104      	bne.n	8008c92 <HAL_TIM_IC_Start_IT+0x32>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	223b      	movs	r2, #59	; 0x3b
 8008c8c:	5c9b      	ldrb	r3, [r3, r2]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	e00b      	b.n	8008caa <HAL_TIM_IC_Start_IT+0x4a>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d104      	bne.n	8008ca2 <HAL_TIM_IC_Start_IT+0x42>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	223c      	movs	r2, #60	; 0x3c
 8008c9c:	5c9b      	ldrb	r3, [r3, r2]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	e003      	b.n	8008caa <HAL_TIM_IC_Start_IT+0x4a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	223d      	movs	r2, #61	; 0x3d
 8008ca6:	5c9b      	ldrb	r3, [r3, r2]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	210e      	movs	r1, #14
 8008cac:	187a      	adds	r2, r7, r1
 8008cae:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cb0:	187b      	adds	r3, r7, r1
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d001      	beq.n	8008cbc <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e095      	b.n	8008de8 <HAL_TIM_IC_Start_IT+0x188>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <HAL_TIM_IC_Start_IT+0x6c>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	223a      	movs	r2, #58	; 0x3a
 8008cc6:	2102      	movs	r1, #2
 8008cc8:	5499      	strb	r1, [r3, r2]
 8008cca:	e013      	b.n	8008cf4 <HAL_TIM_IC_Start_IT+0x94>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d104      	bne.n	8008cdc <HAL_TIM_IC_Start_IT+0x7c>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	223b      	movs	r2, #59	; 0x3b
 8008cd6:	2102      	movs	r1, #2
 8008cd8:	5499      	strb	r1, [r3, r2]
 8008cda:	e00b      	b.n	8008cf4 <HAL_TIM_IC_Start_IT+0x94>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b08      	cmp	r3, #8
 8008ce0:	d104      	bne.n	8008cec <HAL_TIM_IC_Start_IT+0x8c>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	223c      	movs	r2, #60	; 0x3c
 8008ce6:	2102      	movs	r1, #2
 8008ce8:	5499      	strb	r1, [r3, r2]
 8008cea:	e003      	b.n	8008cf4 <HAL_TIM_IC_Start_IT+0x94>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	223d      	movs	r2, #61	; 0x3d
 8008cf0:	2102      	movs	r1, #2
 8008cf2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2b0c      	cmp	r3, #12
 8008cf8:	d02a      	beq.n	8008d50 <HAL_TIM_IC_Start_IT+0xf0>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b0c      	cmp	r3, #12
 8008cfe:	d830      	bhi.n	8008d62 <HAL_TIM_IC_Start_IT+0x102>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b08      	cmp	r3, #8
 8008d04:	d01b      	beq.n	8008d3e <HAL_TIM_IC_Start_IT+0xde>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d82a      	bhi.n	8008d62 <HAL_TIM_IC_Start_IT+0x102>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <HAL_TIM_IC_Start_IT+0xba>
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d009      	beq.n	8008d2c <HAL_TIM_IC_Start_IT+0xcc>
 8008d18:	e023      	b.n	8008d62 <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2102      	movs	r1, #2
 8008d26:	430a      	orrs	r2, r1
 8008d28:	60da      	str	r2, [r3, #12]
      break;
 8008d2a:	e01f      	b.n	8008d6c <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2104      	movs	r1, #4
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	60da      	str	r2, [r3, #12]
      break;
 8008d3c:	e016      	b.n	8008d6c <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2108      	movs	r1, #8
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	60da      	str	r2, [r3, #12]
      break;
 8008d4e:	e00d      	b.n	8008d6c <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2110      	movs	r1, #16
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	60da      	str	r2, [r3, #12]
      break;
 8008d60:	e004      	b.n	8008d6c <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8008d62:	230f      	movs	r3, #15
 8008d64:	18fb      	adds	r3, r7, r3
 8008d66:	2201      	movs	r2, #1
 8008d68:	701a      	strb	r2, [r3, #0]
      break;
 8008d6a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8008d6c:	230f      	movs	r3, #15
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d135      	bne.n	8008de2 <HAL_TIM_IC_Start_IT+0x182>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f000 fe9a 	bl	8009ab8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	2380      	movs	r3, #128	; 0x80
 8008d8a:	05db      	lsls	r3, r3, #23
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d00e      	beq.n	8008dae <HAL_TIM_IC_Start_IT+0x14e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <HAL_TIM_IC_Start_IT+0x190>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d009      	beq.n	8008dae <HAL_TIM_IC_Start_IT+0x14e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a15      	ldr	r2, [pc, #84]	; (8008df4 <HAL_TIM_IC_Start_IT+0x194>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d004      	beq.n	8008dae <HAL_TIM_IC_Start_IT+0x14e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a13      	ldr	r2, [pc, #76]	; (8008df8 <HAL_TIM_IC_Start_IT+0x198>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d111      	bne.n	8008dd2 <HAL_TIM_IC_Start_IT+0x172>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	2207      	movs	r2, #7
 8008db6:	4013      	ands	r3, r2
 8008db8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b06      	cmp	r3, #6
 8008dbe:	d010      	beq.n	8008de2 <HAL_TIM_IC_Start_IT+0x182>
      {
        __HAL_TIM_ENABLE(htim);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2101      	movs	r1, #1
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd0:	e007      	b.n	8008de2 <HAL_TIM_IC_Start_IT+0x182>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2101      	movs	r1, #1
 8008dde:	430a      	orrs	r2, r1
 8008de0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008de2:	230f      	movs	r3, #15
 8008de4:	18fb      	adds	r3, r7, r3
 8008de6:	781b      	ldrb	r3, [r3, #0]
}
 8008de8:	0018      	movs	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	b004      	add	sp, #16
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40010800 	.word	0x40010800
 8008df8:	40011400 	.word	0x40011400

08008dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d124      	bne.n	8008e5c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d11d      	bne.n	8008e5c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2203      	movs	r2, #3
 8008e26:	4252      	negs	r2, r2
 8008e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	2203      	movs	r2, #3
 8008e38:	4013      	ands	r3, r2
 8008e3a:	d004      	beq.n	8008e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f7fa ff22 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 8008e44:	e007      	b.n	8008e56 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f000 fafd 	bl	8009448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	0018      	movs	r0, r3
 8008e52:	f000 fb01 	bl	8009458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2204      	movs	r2, #4
 8008e64:	4013      	ands	r3, r2
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d125      	bne.n	8008eb6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	2204      	movs	r2, #4
 8008e72:	4013      	ands	r3, r2
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	d11e      	bne.n	8008eb6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	4252      	negs	r2, r2
 8008e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2202      	movs	r2, #2
 8008e86:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699a      	ldr	r2, [r3, #24]
 8008e8e:	23c0      	movs	r3, #192	; 0xc0
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4013      	ands	r3, r2
 8008e94:	d004      	beq.n	8008ea0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7fa fef5 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 8008e9e:	e007      	b.n	8008eb0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f000 fad0 	bl	8009448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f000 fad4 	bl	8009458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	2208      	movs	r2, #8
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d124      	bne.n	8008f0e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	2208      	movs	r2, #8
 8008ecc:	4013      	ands	r3, r2
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	d11d      	bne.n	8008f0e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2209      	movs	r2, #9
 8008ed8:	4252      	negs	r2, r2
 8008eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2204      	movs	r2, #4
 8008ee0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	2203      	movs	r2, #3
 8008eea:	4013      	ands	r3, r2
 8008eec:	d004      	beq.n	8008ef8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f7fa fec9 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 8008ef6:	e007      	b.n	8008f08 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	0018      	movs	r0, r3
 8008efc:	f000 faa4 	bl	8009448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	0018      	movs	r0, r3
 8008f04:	f000 faa8 	bl	8009458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	2210      	movs	r2, #16
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b10      	cmp	r3, #16
 8008f1a:	d125      	bne.n	8008f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	2210      	movs	r2, #16
 8008f24:	4013      	ands	r3, r2
 8008f26:	2b10      	cmp	r3, #16
 8008f28:	d11e      	bne.n	8008f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2211      	movs	r2, #17
 8008f30:	4252      	negs	r2, r2
 8008f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2208      	movs	r2, #8
 8008f38:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69da      	ldr	r2, [r3, #28]
 8008f40:	23c0      	movs	r3, #192	; 0xc0
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4013      	ands	r3, r2
 8008f46:	d004      	beq.n	8008f52 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f7fa fe9c 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 8008f50:	e007      	b.n	8008f62 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	0018      	movs	r0, r3
 8008f56:	f000 fa77 	bl	8009448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f000 fa7b 	bl	8009458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4013      	ands	r3, r2
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d10f      	bne.n	8008f96 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	4013      	ands	r3, r2
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d108      	bne.n	8008f96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	4252      	negs	r2, r2
 8008f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	0018      	movs	r0, r3
 8008f92:	f7fa fe85 	bl	8003ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	2240      	movs	r2, #64	; 0x40
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b40      	cmp	r3, #64	; 0x40
 8008fa2:	d10f      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	2240      	movs	r2, #64	; 0x40
 8008fac:	4013      	ands	r3, r2
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	d108      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2241      	movs	r2, #65	; 0x41
 8008fb8:	4252      	negs	r2, r2
 8008fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f000 fa52 	bl	8009468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fc4:	46c0      	nop			; (mov r8, r8)
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	b002      	add	sp, #8
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fd8:	2317      	movs	r3, #23
 8008fda:	18fb      	adds	r3, r7, r3
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2238      	movs	r2, #56	; 0x38
 8008fe4:	5c9b      	ldrb	r3, [r3, r2]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d101      	bne.n	8008fee <HAL_TIM_IC_ConfigChannel+0x22>
 8008fea:	2302      	movs	r3, #2
 8008fec:	e08c      	b.n	8009108 <HAL_TIM_IC_ConfigChannel+0x13c>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2238      	movs	r2, #56	; 0x38
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d11b      	bne.n	8009034 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6818      	ldr	r0, [r3, #0]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f000 fb96 	bl	800973c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	699a      	ldr	r2, [r3, #24]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	210c      	movs	r1, #12
 800901c:	438a      	bics	r2, r1
 800901e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6999      	ldr	r1, [r3, #24]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	619a      	str	r2, [r3, #24]
 8009032:	e062      	b.n	80090fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b04      	cmp	r3, #4
 8009038:	d11c      	bne.n	8009074 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6819      	ldr	r1, [r3, #0]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f000 fc01 	bl	8009850 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	492d      	ldr	r1, [pc, #180]	; (8009110 <HAL_TIM_IC_ConfigChannel+0x144>)
 800905a:	400a      	ands	r2, r1
 800905c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6999      	ldr	r1, [r3, #24]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	021a      	lsls	r2, r3, #8
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	619a      	str	r2, [r3, #24]
 8009072:	e042      	b.n	80090fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b08      	cmp	r3, #8
 8009078:	d11b      	bne.n	80090b2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6819      	ldr	r1, [r3, #0]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f000 fc55 	bl	8009938 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69da      	ldr	r2, [r3, #28]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	210c      	movs	r1, #12
 800909a:	438a      	bics	r2, r1
 800909c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69d9      	ldr	r1, [r3, #28]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	61da      	str	r2, [r3, #28]
 80090b0:	e023      	b.n	80090fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b0c      	cmp	r3, #12
 80090b6:	d11c      	bne.n	80090f2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	6819      	ldr	r1, [r3, #0]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f000 fc76 	bl	80099b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69da      	ldr	r2, [r3, #28]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	490e      	ldr	r1, [pc, #56]	; (8009110 <HAL_TIM_IC_ConfigChannel+0x144>)
 80090d8:	400a      	ands	r2, r1
 80090da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69d9      	ldr	r1, [r3, #28]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	021a      	lsls	r2, r3, #8
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	61da      	str	r2, [r3, #28]
 80090f0:	e003      	b.n	80090fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80090f2:	2317      	movs	r3, #23
 80090f4:	18fb      	adds	r3, r7, r3
 80090f6:	2201      	movs	r2, #1
 80090f8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2238      	movs	r2, #56	; 0x38
 80090fe:	2100      	movs	r1, #0
 8009100:	5499      	strb	r1, [r3, r2]

  return status;
 8009102:	2317      	movs	r3, #23
 8009104:	18fb      	adds	r3, r7, r3
 8009106:	781b      	ldrb	r3, [r3, #0]
}
 8009108:	0018      	movs	r0, r3
 800910a:	46bd      	mov	sp, r7
 800910c:	b006      	add	sp, #24
 800910e:	bd80      	pop	{r7, pc}
 8009110:	fffff3ff 	.word	0xfffff3ff

08009114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009120:	2317      	movs	r3, #23
 8009122:	18fb      	adds	r3, r7, r3
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2238      	movs	r2, #56	; 0x38
 800912c:	5c9b      	ldrb	r3, [r3, r2]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d101      	bne.n	8009136 <HAL_TIM_PWM_ConfigChannel+0x22>
 8009132:	2302      	movs	r3, #2
 8009134:	e0ad      	b.n	8009292 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2238      	movs	r2, #56	; 0x38
 800913a:	2101      	movs	r1, #1
 800913c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b0c      	cmp	r3, #12
 8009142:	d100      	bne.n	8009146 <HAL_TIM_PWM_ConfigChannel+0x32>
 8009144:	e076      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x120>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b0c      	cmp	r3, #12
 800914a:	d900      	bls.n	800914e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800914c:	e095      	b.n	800927a <HAL_TIM_PWM_ConfigChannel+0x166>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b08      	cmp	r3, #8
 8009152:	d04e      	beq.n	80091f2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b08      	cmp	r3, #8
 8009158:	d900      	bls.n	800915c <HAL_TIM_PWM_ConfigChannel+0x48>
 800915a:	e08e      	b.n	800927a <HAL_TIM_PWM_ConfigChannel+0x166>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_TIM_PWM_ConfigChannel+0x56>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b04      	cmp	r3, #4
 8009166:	d021      	beq.n	80091ac <HAL_TIM_PWM_ConfigChannel+0x98>
 8009168:	e087      	b.n	800927a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	0011      	movs	r1, r2
 8009172:	0018      	movs	r0, r3
 8009174:	f000 f9de 	bl	8009534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	699a      	ldr	r2, [r3, #24]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2108      	movs	r1, #8
 8009184:	430a      	orrs	r2, r1
 8009186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699a      	ldr	r2, [r3, #24]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2104      	movs	r1, #4
 8009194:	438a      	bics	r2, r1
 8009196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6999      	ldr	r1, [r3, #24]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	619a      	str	r2, [r3, #24]
      break;
 80091aa:	e06b      	b.n	8009284 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	0011      	movs	r1, r2
 80091b4:	0018      	movs	r0, r3
 80091b6:	f000 f9f9 	bl	80095ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2180      	movs	r1, #128	; 0x80
 80091c6:	0109      	lsls	r1, r1, #4
 80091c8:	430a      	orrs	r2, r1
 80091ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	699a      	ldr	r2, [r3, #24]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4931      	ldr	r1, [pc, #196]	; (800929c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80091d8:	400a      	ands	r2, r1
 80091da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6999      	ldr	r1, [r3, #24]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	021a      	lsls	r2, r3, #8
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	619a      	str	r2, [r3, #24]
      break;
 80091f0:	e048      	b.n	8009284 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	0011      	movs	r1, r2
 80091fa:	0018      	movs	r0, r3
 80091fc:	f000 fa18 	bl	8009630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69da      	ldr	r2, [r3, #28]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2108      	movs	r1, #8
 800920c:	430a      	orrs	r2, r1
 800920e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	69da      	ldr	r2, [r3, #28]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2104      	movs	r1, #4
 800921c:	438a      	bics	r2, r1
 800921e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	69d9      	ldr	r1, [r3, #28]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	61da      	str	r2, [r3, #28]
      break;
 8009232:	e027      	b.n	8009284 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	0011      	movs	r1, r2
 800923c:	0018      	movs	r0, r3
 800923e:	f000 fa37 	bl	80096b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69da      	ldr	r2, [r3, #28]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2180      	movs	r1, #128	; 0x80
 800924e:	0109      	lsls	r1, r1, #4
 8009250:	430a      	orrs	r2, r1
 8009252:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69da      	ldr	r2, [r3, #28]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	490f      	ldr	r1, [pc, #60]	; (800929c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009260:	400a      	ands	r2, r1
 8009262:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69d9      	ldr	r1, [r3, #28]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	021a      	lsls	r2, r3, #8
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	61da      	str	r2, [r3, #28]
      break;
 8009278:	e004      	b.n	8009284 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800927a:	2317      	movs	r3, #23
 800927c:	18fb      	adds	r3, r7, r3
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
      break;
 8009282:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2238      	movs	r2, #56	; 0x38
 8009288:	2100      	movs	r1, #0
 800928a:	5499      	strb	r1, [r3, r2]

  return status;
 800928c:	2317      	movs	r3, #23
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	781b      	ldrb	r3, [r3, #0]
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	b006      	add	sp, #24
 8009298:	bd80      	pop	{r7, pc}
 800929a:	46c0      	nop			; (mov r8, r8)
 800929c:	fffffbff 	.word	0xfffffbff

080092a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092aa:	230f      	movs	r3, #15
 80092ac:	18fb      	adds	r3, r7, r3
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2238      	movs	r2, #56	; 0x38
 80092b6:	5c9b      	ldrb	r3, [r3, r2]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_TIM_ConfigClockSource+0x20>
 80092bc:	2302      	movs	r3, #2
 80092be:	e0bc      	b.n	800943a <HAL_TIM_ConfigClockSource+0x19a>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2238      	movs	r2, #56	; 0x38
 80092c4:	2101      	movs	r1, #1
 80092c6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2239      	movs	r2, #57	; 0x39
 80092cc:	2102      	movs	r1, #2
 80092ce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2277      	movs	r2, #119	; 0x77
 80092dc:	4393      	bics	r3, r2
 80092de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4a58      	ldr	r2, [pc, #352]	; (8009444 <HAL_TIM_ConfigClockSource+0x1a4>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2280      	movs	r2, #128	; 0x80
 80092f6:	0192      	lsls	r2, r2, #6
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d040      	beq.n	800937e <HAL_TIM_ConfigClockSource+0xde>
 80092fc:	2280      	movs	r2, #128	; 0x80
 80092fe:	0192      	lsls	r2, r2, #6
 8009300:	4293      	cmp	r3, r2
 8009302:	d900      	bls.n	8009306 <HAL_TIM_ConfigClockSource+0x66>
 8009304:	e088      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
 8009306:	2280      	movs	r2, #128	; 0x80
 8009308:	0152      	lsls	r2, r2, #5
 800930a:	4293      	cmp	r3, r2
 800930c:	d100      	bne.n	8009310 <HAL_TIM_ConfigClockSource+0x70>
 800930e:	e088      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x182>
 8009310:	2280      	movs	r2, #128	; 0x80
 8009312:	0152      	lsls	r2, r2, #5
 8009314:	4293      	cmp	r3, r2
 8009316:	d900      	bls.n	800931a <HAL_TIM_ConfigClockSource+0x7a>
 8009318:	e07e      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
 800931a:	2b70      	cmp	r3, #112	; 0x70
 800931c:	d018      	beq.n	8009350 <HAL_TIM_ConfigClockSource+0xb0>
 800931e:	d900      	bls.n	8009322 <HAL_TIM_ConfigClockSource+0x82>
 8009320:	e07a      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
 8009322:	2b60      	cmp	r3, #96	; 0x60
 8009324:	d04f      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x126>
 8009326:	d900      	bls.n	800932a <HAL_TIM_ConfigClockSource+0x8a>
 8009328:	e076      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
 800932a:	2b50      	cmp	r3, #80	; 0x50
 800932c:	d03b      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x106>
 800932e:	d900      	bls.n	8009332 <HAL_TIM_ConfigClockSource+0x92>
 8009330:	e072      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
 8009332:	2b40      	cmp	r3, #64	; 0x40
 8009334:	d057      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x146>
 8009336:	d900      	bls.n	800933a <HAL_TIM_ConfigClockSource+0x9a>
 8009338:	e06e      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
 800933a:	2b30      	cmp	r3, #48	; 0x30
 800933c:	d063      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x166>
 800933e:	d86b      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
 8009340:	2b20      	cmp	r3, #32
 8009342:	d060      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x166>
 8009344:	d868      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d05d      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x166>
 800934a:	2b10      	cmp	r3, #16
 800934c:	d05b      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x166>
 800934e:	e063      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	6899      	ldr	r1, [r3, #8]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f000 fb8a 	bl	8009a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2277      	movs	r2, #119	; 0x77
 8009370:	4313      	orrs	r3, r2
 8009372:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	609a      	str	r2, [r3, #8]
      break;
 800937c:	e052      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6899      	ldr	r1, [r3, #8]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f000 fb73 	bl	8009a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2180      	movs	r1, #128	; 0x80
 800939e:	01c9      	lsls	r1, r1, #7
 80093a0:	430a      	orrs	r2, r1
 80093a2:	609a      	str	r2, [r3, #8]
      break;
 80093a4:	e03e      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	6859      	ldr	r1, [r3, #4]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	001a      	movs	r2, r3
 80093b4:	f000 fa1e 	bl	80097f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2150      	movs	r1, #80	; 0x50
 80093be:	0018      	movs	r0, r3
 80093c0:	f000 fb40 	bl	8009a44 <TIM_ITRx_SetConfig>
      break;
 80093c4:	e02e      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	6859      	ldr	r1, [r3, #4]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	001a      	movs	r2, r3
 80093d4:	f000 fa7e 	bl	80098d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2160      	movs	r1, #96	; 0x60
 80093de:	0018      	movs	r0, r3
 80093e0:	f000 fb30 	bl	8009a44 <TIM_ITRx_SetConfig>
      break;
 80093e4:	e01e      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6859      	ldr	r1, [r3, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	001a      	movs	r2, r3
 80093f4:	f000 f9fe 	bl	80097f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2140      	movs	r1, #64	; 0x40
 80093fe:	0018      	movs	r0, r3
 8009400:	f000 fb20 	bl	8009a44 <TIM_ITRx_SetConfig>
      break;
 8009404:	e00e      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	0019      	movs	r1, r3
 8009410:	0010      	movs	r0, r2
 8009412:	f000 fb17 	bl	8009a44 <TIM_ITRx_SetConfig>
      break;
 8009416:	e005      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8009418:	230f      	movs	r3, #15
 800941a:	18fb      	adds	r3, r7, r3
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
      break;
 8009420:	e000      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8009422:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2239      	movs	r2, #57	; 0x39
 8009428:	2101      	movs	r1, #1
 800942a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2238      	movs	r2, #56	; 0x38
 8009430:	2100      	movs	r1, #0
 8009432:	5499      	strb	r1, [r3, r2]

  return status;
 8009434:	230f      	movs	r3, #15
 8009436:	18fb      	adds	r3, r7, r3
 8009438:	781b      	ldrb	r3, [r3, #0]
}
 800943a:	0018      	movs	r0, r3
 800943c:	46bd      	mov	sp, r7
 800943e:	b004      	add	sp, #16
 8009440:	bd80      	pop	{r7, pc}
 8009442:	46c0      	nop			; (mov r8, r8)
 8009444:	ffff00ff 	.word	0xffff00ff

08009448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009450:	46c0      	nop			; (mov r8, r8)
 8009452:	46bd      	mov	sp, r7
 8009454:	b002      	add	sp, #8
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009460:	46c0      	nop			; (mov r8, r8)
 8009462:	46bd      	mov	sp, r7
 8009464:	b002      	add	sp, #8
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009470:	46c0      	nop			; (mov r8, r8)
 8009472:	46bd      	mov	sp, r7
 8009474:	b002      	add	sp, #8
 8009476:	bd80      	pop	{r7, pc}

08009478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	2380      	movs	r3, #128	; 0x80
 800948c:	05db      	lsls	r3, r3, #23
 800948e:	429a      	cmp	r2, r3
 8009490:	d00b      	beq.n	80094aa <TIM_Base_SetConfig+0x32>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a23      	ldr	r2, [pc, #140]	; (8009524 <TIM_Base_SetConfig+0xac>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d007      	beq.n	80094aa <TIM_Base_SetConfig+0x32>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a22      	ldr	r2, [pc, #136]	; (8009528 <TIM_Base_SetConfig+0xb0>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d003      	beq.n	80094aa <TIM_Base_SetConfig+0x32>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a21      	ldr	r2, [pc, #132]	; (800952c <TIM_Base_SetConfig+0xb4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d108      	bne.n	80094bc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2270      	movs	r2, #112	; 0x70
 80094ae:	4393      	bics	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	2380      	movs	r3, #128	; 0x80
 80094c0:	05db      	lsls	r3, r3, #23
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d00b      	beq.n	80094de <TIM_Base_SetConfig+0x66>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a16      	ldr	r2, [pc, #88]	; (8009524 <TIM_Base_SetConfig+0xac>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d007      	beq.n	80094de <TIM_Base_SetConfig+0x66>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a15      	ldr	r2, [pc, #84]	; (8009528 <TIM_Base_SetConfig+0xb0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d003      	beq.n	80094de <TIM_Base_SetConfig+0x66>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a14      	ldr	r2, [pc, #80]	; (800952c <TIM_Base_SetConfig+0xb4>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d108      	bne.n	80094f0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4a13      	ldr	r2, [pc, #76]	; (8009530 <TIM_Base_SetConfig+0xb8>)
 80094e2:	4013      	ands	r3, r2
 80094e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2280      	movs	r2, #128	; 0x80
 80094f4:	4393      	bics	r3, r2
 80094f6:	001a      	movs	r2, r3
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	689a      	ldr	r2, [r3, #8]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	615a      	str	r2, [r3, #20]
}
 800951c:	46c0      	nop			; (mov r8, r8)
 800951e:	46bd      	mov	sp, r7
 8009520:	b004      	add	sp, #16
 8009522:	bd80      	pop	{r7, pc}
 8009524:	40000400 	.word	0x40000400
 8009528:	40010800 	.word	0x40010800
 800952c:	40011400 	.word	0x40011400
 8009530:	fffffcff 	.word	0xfffffcff

08009534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	2201      	movs	r2, #1
 8009544:	4393      	bics	r3, r2
 8009546:	001a      	movs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2270      	movs	r2, #112	; 0x70
 8009562:	4393      	bics	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2203      	movs	r2, #3
 800956a:	4393      	bics	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2202      	movs	r2, #2
 800957c:	4393      	bics	r3, r2
 800957e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	621a      	str	r2, [r3, #32]
}
 80095a4:	46c0      	nop			; (mov r8, r8)
 80095a6:	46bd      	mov	sp, r7
 80095a8:	b006      	add	sp, #24
 80095aa:	bd80      	pop	{r7, pc}

080095ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	2210      	movs	r2, #16
 80095bc:	4393      	bics	r3, r2
 80095be:	001a      	movs	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4a13      	ldr	r2, [pc, #76]	; (8009628 <TIM_OC2_SetConfig+0x7c>)
 80095da:	4013      	ands	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4a12      	ldr	r2, [pc, #72]	; (800962c <TIM_OC2_SetConfig+0x80>)
 80095e2:	4013      	ands	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2220      	movs	r2, #32
 80095f6:	4393      	bics	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	4313      	orrs	r3, r2
 8009604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	621a      	str	r2, [r3, #32]
}
 8009620:	46c0      	nop			; (mov r8, r8)
 8009622:	46bd      	mov	sp, r7
 8009624:	b006      	add	sp, #24
 8009626:	bd80      	pop	{r7, pc}
 8009628:	ffff8fff 	.word	0xffff8fff
 800962c:	fffffcff 	.word	0xfffffcff

08009630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	4a1a      	ldr	r2, [pc, #104]	; (80096a8 <TIM_OC3_SetConfig+0x78>)
 8009640:	401a      	ands	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2270      	movs	r2, #112	; 0x70
 800965c:	4393      	bics	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2203      	movs	r2, #3
 8009664:	4393      	bics	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	4313      	orrs	r3, r2
 8009670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	4a0d      	ldr	r2, [pc, #52]	; (80096ac <TIM_OC3_SetConfig+0x7c>)
 8009676:	4013      	ands	r3, r2
 8009678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	021b      	lsls	r3, r3, #8
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	4313      	orrs	r3, r2
 8009684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	621a      	str	r2, [r3, #32]
}
 80096a0:	46c0      	nop			; (mov r8, r8)
 80096a2:	46bd      	mov	sp, r7
 80096a4:	b006      	add	sp, #24
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	fffffeff 	.word	0xfffffeff
 80096ac:	fffffdff 	.word	0xfffffdff

080096b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	4a1b      	ldr	r2, [pc, #108]	; (800972c <TIM_OC4_SetConfig+0x7c>)
 80096c0:	401a      	ands	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4a15      	ldr	r2, [pc, #84]	; (8009730 <TIM_OC4_SetConfig+0x80>)
 80096dc:	4013      	ands	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4a14      	ldr	r2, [pc, #80]	; (8009734 <TIM_OC4_SetConfig+0x84>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	4a10      	ldr	r2, [pc, #64]	; (8009738 <TIM_OC4_SetConfig+0x88>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	031b      	lsls	r3, r3, #12
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4313      	orrs	r3, r2
 8009706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	621a      	str	r2, [r3, #32]
}
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	46bd      	mov	sp, r7
 8009726:	b006      	add	sp, #24
 8009728:	bd80      	pop	{r7, pc}
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	ffffefff 	.word	0xffffefff
 8009730:	ffff8fff 	.word	0xffff8fff
 8009734:	fffffcff 	.word	0xfffffcff
 8009738:	ffffdfff 	.word	0xffffdfff

0800973c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	2201      	movs	r2, #1
 8009750:	4393      	bics	r3, r2
 8009752:	001a      	movs	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	2380      	movs	r3, #128	; 0x80
 8009768:	05db      	lsls	r3, r3, #23
 800976a:	429a      	cmp	r2, r3
 800976c:	d00b      	beq.n	8009786 <TIM_TI1_SetConfig+0x4a>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4a1d      	ldr	r2, [pc, #116]	; (80097e8 <TIM_TI1_SetConfig+0xac>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d007      	beq.n	8009786 <TIM_TI1_SetConfig+0x4a>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4a1c      	ldr	r2, [pc, #112]	; (80097ec <TIM_TI1_SetConfig+0xb0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d003      	beq.n	8009786 <TIM_TI1_SetConfig+0x4a>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4a1b      	ldr	r2, [pc, #108]	; (80097f0 <TIM_TI1_SetConfig+0xb4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d101      	bne.n	800978a <TIM_TI1_SetConfig+0x4e>
 8009786:	2301      	movs	r3, #1
 8009788:	e000      	b.n	800978c <TIM_TI1_SetConfig+0x50>
 800978a:	2300      	movs	r3, #0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2203      	movs	r2, #3
 8009794:	4393      	bics	r3, r2
 8009796:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	e003      	b.n	80097aa <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2201      	movs	r2, #1
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	22f0      	movs	r2, #240	; 0xf0
 80097ae:	4393      	bics	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	22ff      	movs	r2, #255	; 0xff
 80097b8:	4013      	ands	r3, r2
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	220a      	movs	r2, #10
 80097c4:	4393      	bics	r3, r2
 80097c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	220a      	movs	r2, #10
 80097cc:	4013      	ands	r3, r2
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	621a      	str	r2, [r3, #32]
}
 80097e0:	46c0      	nop			; (mov r8, r8)
 80097e2:	46bd      	mov	sp, r7
 80097e4:	b006      	add	sp, #24
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	40000400 	.word	0x40000400
 80097ec:	40010800 	.word	0x40010800
 80097f0:	40011400 	.word	0x40011400

080097f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	2201      	movs	r2, #1
 800980c:	4393      	bics	r3, r2
 800980e:	001a      	movs	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	22f0      	movs	r2, #240	; 0xf0
 800981e:	4393      	bics	r3, r2
 8009820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	4313      	orrs	r3, r2
 800982a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	220a      	movs	r2, #10
 8009830:	4393      	bics	r3, r2
 8009832:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	697a      	ldr	r2, [r7, #20]
 8009846:	621a      	str	r2, [r3, #32]
}
 8009848:	46c0      	nop			; (mov r8, r8)
 800984a:	46bd      	mov	sp, r7
 800984c:	b006      	add	sp, #24
 800984e:	bd80      	pop	{r7, pc}

08009850 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	2210      	movs	r2, #16
 8009864:	4393      	bics	r3, r2
 8009866:	001a      	movs	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	4a14      	ldr	r2, [pc, #80]	; (80098cc <TIM_TI2_SetConfig+0x7c>)
 800987c:	4013      	ands	r3, r2
 800987e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	021b      	lsls	r3, r3, #8
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4313      	orrs	r3, r2
 8009888:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	4a10      	ldr	r2, [pc, #64]	; (80098d0 <TIM_TI2_SetConfig+0x80>)
 800988e:	4013      	ands	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	041b      	lsls	r3, r3, #16
 8009898:	0c1b      	lsrs	r3, r3, #16
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	4313      	orrs	r3, r2
 800989e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	22a0      	movs	r2, #160	; 0xa0
 80098a4:	4393      	bics	r3, r2
 80098a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	011b      	lsls	r3, r3, #4
 80098ac:	22a0      	movs	r2, #160	; 0xa0
 80098ae:	4013      	ands	r3, r2
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	621a      	str	r2, [r3, #32]
}
 80098c2:	46c0      	nop			; (mov r8, r8)
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b006      	add	sp, #24
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	46c0      	nop			; (mov r8, r8)
 80098cc:	fffffcff 	.word	0xfffffcff
 80098d0:	ffff0fff 	.word	0xffff0fff

080098d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	2210      	movs	r2, #16
 80098e6:	4393      	bics	r3, r2
 80098e8:	001a      	movs	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	4a0d      	ldr	r2, [pc, #52]	; (8009934 <TIM_TI2_ConfigInputStage+0x60>)
 80098fe:	4013      	ands	r3, r2
 8009900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	031b      	lsls	r3, r3, #12
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	4313      	orrs	r3, r2
 800990a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	22a0      	movs	r2, #160	; 0xa0
 8009910:	4393      	bics	r3, r2
 8009912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	4313      	orrs	r3, r2
 800991c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	46c0      	nop			; (mov r8, r8)
 800992c:	46bd      	mov	sp, r7
 800992e:	b006      	add	sp, #24
 8009930:	bd80      	pop	{r7, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	ffff0fff 	.word	0xffff0fff

08009938 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	4a19      	ldr	r2, [pc, #100]	; (80099b0 <TIM_TI3_SetConfig+0x78>)
 800994c:	401a      	ands	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2203      	movs	r2, #3
 8009962:	4393      	bics	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4313      	orrs	r3, r2
 800996c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	22f0      	movs	r2, #240	; 0xf0
 8009972:	4393      	bics	r3, r2
 8009974:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	011b      	lsls	r3, r3, #4
 800997a:	22ff      	movs	r2, #255	; 0xff
 800997c:	4013      	ands	r3, r2
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4313      	orrs	r3, r2
 8009982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	4a0b      	ldr	r2, [pc, #44]	; (80099b4 <TIM_TI3_SetConfig+0x7c>)
 8009988:	4013      	ands	r3, r2
 800998a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	021a      	lsls	r2, r3, #8
 8009990:	23a0      	movs	r3, #160	; 0xa0
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	4013      	ands	r3, r2
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	4313      	orrs	r3, r2
 800999a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	621a      	str	r2, [r3, #32]
}
 80099a8:	46c0      	nop			; (mov r8, r8)
 80099aa:	46bd      	mov	sp, r7
 80099ac:	b006      	add	sp, #24
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	fffffeff 	.word	0xfffffeff
 80099b4:	fffff5ff 	.word	0xfffff5ff

080099b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	4a1a      	ldr	r2, [pc, #104]	; (8009a34 <TIM_TI4_SetConfig+0x7c>)
 80099cc:	401a      	ands	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <TIM_TI4_SetConfig+0x80>)
 80099e2:	4013      	ands	r3, r2
 80099e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	021b      	lsls	r3, r3, #8
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	4a12      	ldr	r2, [pc, #72]	; (8009a3c <TIM_TI4_SetConfig+0x84>)
 80099f4:	4013      	ands	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	031b      	lsls	r3, r3, #12
 80099fc:	041b      	lsls	r3, r3, #16
 80099fe:	0c1b      	lsrs	r3, r3, #16
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	4a0d      	ldr	r2, [pc, #52]	; (8009a40 <TIM_TI4_SetConfig+0x88>)
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	031a      	lsls	r2, r3, #12
 8009a12:	23a0      	movs	r3, #160	; 0xa0
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	4013      	ands	r3, r2
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	621a      	str	r2, [r3, #32]
}
 8009a2a:	46c0      	nop			; (mov r8, r8)
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	b006      	add	sp, #24
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	ffffefff 	.word	0xffffefff
 8009a38:	fffffcff 	.word	0xfffffcff
 8009a3c:	ffff0fff 	.word	0xffff0fff
 8009a40:	ffff5fff 	.word	0xffff5fff

08009a44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2270      	movs	r2, #112	; 0x70
 8009a58:	4393      	bics	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	2207      	movs	r2, #7
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	609a      	str	r2, [r3, #8]
}
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	46bd      	mov	sp, r7
 8009a72:	b004      	add	sp, #16
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	4a09      	ldr	r2, [pc, #36]	; (8009ab4 <TIM_ETR_SetConfig+0x3c>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	021a      	lsls	r2, r3, #8
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	609a      	str	r2, [r3, #8]
}
 8009aac:	46c0      	nop			; (mov r8, r8)
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	b006      	add	sp, #24
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	ffff00ff 	.word	0xffff00ff

08009ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	221f      	movs	r2, #31
 8009ac8:	4013      	ands	r3, r2
 8009aca:	2201      	movs	r2, #1
 8009acc:	409a      	lsls	r2, r3
 8009ace:	0013      	movs	r3, r2
 8009ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	43d2      	mvns	r2, r2
 8009ada:	401a      	ands	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a1a      	ldr	r2, [r3, #32]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	211f      	movs	r1, #31
 8009ae8:	400b      	ands	r3, r1
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	4099      	lsls	r1, r3
 8009aee:	000b      	movs	r3, r1
 8009af0:	431a      	orrs	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	621a      	str	r2, [r3, #32]
}
 8009af6:	46c0      	nop			; (mov r8, r8)
 8009af8:	46bd      	mov	sp, r7
 8009afa:	b006      	add	sp, #24
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2238      	movs	r2, #56	; 0x38
 8009b0e:	5c9b      	ldrb	r3, [r3, r2]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d101      	bne.n	8009b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e047      	b.n	8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2238      	movs	r2, #56	; 0x38
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2239      	movs	r2, #57	; 0x39
 8009b24:	2102      	movs	r1, #2
 8009b26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2270      	movs	r2, #112	; 0x70
 8009b3c:	4393      	bics	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	2380      	movs	r3, #128	; 0x80
 8009b58:	05db      	lsls	r3, r3, #23
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d00e      	beq.n	8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d009      	beq.n	8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a11      	ldr	r2, [pc, #68]	; (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d004      	beq.n	8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a10      	ldr	r2, [pc, #64]	; (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d10c      	bne.n	8009b96 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2280      	movs	r2, #128	; 0x80
 8009b80:	4393      	bics	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2239      	movs	r2, #57	; 0x39
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2238      	movs	r2, #56	; 0x38
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	0018      	movs	r0, r3
 8009baa:	46bd      	mov	sp, r7
 8009bac:	b004      	add	sp, #16
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	40000400 	.word	0x40000400
 8009bb4:	40010800 	.word	0x40010800
 8009bb8:	40011400 	.word	0x40011400

08009bbc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2238      	movs	r2, #56	; 0x38
 8009bca:	5c9b      	ldrb	r3, [r3, r2]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d101      	bne.n	8009bd4 <HAL_TIMEx_RemapConfig+0x18>
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e00c      	b.n	8009bee <HAL_TIMEx_RemapConfig+0x32>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2238      	movs	r2, #56	; 0x38
 8009bd8:	2101      	movs	r1, #1
 8009bda:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2238      	movs	r2, #56	; 0x38
 8009be8:	2100      	movs	r1, #0
 8009bea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	0018      	movs	r0, r3
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	b002      	add	sp, #8
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e044      	b.n	8009c94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d107      	bne.n	8009c22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2274      	movs	r2, #116	; 0x74
 8009c16:	2100      	movs	r1, #0
 8009c18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	f7fa fe0f 	bl	8004840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2224      	movs	r2, #36	; 0x24
 8009c26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2101      	movs	r1, #1
 8009c34:	438a      	bics	r2, r1
 8009c36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f000 fba6 	bl	800a38c <UART_SetConfig>
 8009c40:	0003      	movs	r3, r0
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d101      	bne.n	8009c4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e024      	b.n	8009c94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	0018      	movs	r0, r3
 8009c56:	f000 fe39 	bl	800a8cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	490d      	ldr	r1, [pc, #52]	; (8009c9c <HAL_UART_Init+0xa4>)
 8009c66:	400a      	ands	r2, r1
 8009c68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	212a      	movs	r1, #42	; 0x2a
 8009c76:	438a      	bics	r2, r1
 8009c78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2101      	movs	r1, #1
 8009c86:	430a      	orrs	r2, r1
 8009c88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	0018      	movs	r0, r3
 8009c8e:	f000 fed1 	bl	800aa34 <UART_CheckIdleState>
 8009c92:	0003      	movs	r3, r0
}
 8009c94:	0018      	movs	r0, r3
 8009c96:	46bd      	mov	sp, r7
 8009c98:	b002      	add	sp, #8
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	ffffb7ff 	.word	0xffffb7ff

08009ca0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	1dbb      	adds	r3, r7, #6
 8009cac:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d000      	beq.n	8009cb8 <HAL_UART_Transmit_IT+0x18>
 8009cb6:	e06a      	b.n	8009d8e <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_UART_Transmit_IT+0x26>
 8009cbe:	1dbb      	adds	r3, r7, #6
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e062      	b.n	8009d90 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	2380      	movs	r3, #128	; 0x80
 8009cd0:	015b      	lsls	r3, r3, #5
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d109      	bne.n	8009cea <HAL_UART_Transmit_IT+0x4a>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d105      	bne.n	8009cea <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	d001      	beq.n	8009cea <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e052      	b.n	8009d90 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2274      	movs	r2, #116	; 0x74
 8009cee:	5c9b      	ldrb	r3, [r3, r2]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d101      	bne.n	8009cf8 <HAL_UART_Transmit_IT+0x58>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e04b      	b.n	8009d90 <HAL_UART_Transmit_IT+0xf0>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2274      	movs	r2, #116	; 0x74
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	1dba      	adds	r2, r7, #6
 8009d0a:	2150      	movs	r1, #80	; 0x50
 8009d0c:	8812      	ldrh	r2, [r2, #0]
 8009d0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	1dba      	adds	r2, r7, #6
 8009d14:	2152      	movs	r1, #82	; 0x52
 8009d16:	8812      	ldrh	r2, [r2, #0]
 8009d18:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2280      	movs	r2, #128	; 0x80
 8009d24:	2100      	movs	r1, #0
 8009d26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2221      	movs	r2, #33	; 0x21
 8009d2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	2380      	movs	r3, #128	; 0x80
 8009d34:	015b      	lsls	r3, r3, #5
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d107      	bne.n	8009d4a <HAL_UART_Transmit_IT+0xaa>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d103      	bne.n	8009d4a <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4a14      	ldr	r2, [pc, #80]	; (8009d98 <HAL_UART_Transmit_IT+0xf8>)
 8009d46:	669a      	str	r2, [r3, #104]	; 0x68
 8009d48:	e002      	b.n	8009d50 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <HAL_UART_Transmit_IT+0xfc>)
 8009d4e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2274      	movs	r2, #116	; 0x74
 8009d54:	2100      	movs	r1, #0
 8009d56:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d58:	f3ef 8310 	mrs	r3, PRIMASK
 8009d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8009d5e:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	2301      	movs	r3, #1
 8009d64:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f383 8810 	msr	PRIMASK, r3
}
 8009d6c:	46c0      	nop			; (mov r8, r8)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2180      	movs	r1, #128	; 0x80
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	f383 8810 	msr	PRIMASK, r3
}
 8009d88:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e000      	b.n	8009d90 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8009d8e:	2302      	movs	r3, #2
  }
}
 8009d90:	0018      	movs	r0, r3
 8009d92:	46bd      	mov	sp, r7
 8009d94:	b008      	add	sp, #32
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	0800adf1 	.word	0x0800adf1
 8009d9c:	0800ad3f 	.word	0x0800ad3f

08009da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009da0:	b590      	push	{r4, r7, lr}
 8009da2:	b0ab      	sub	sp, #172	; 0xac
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	22a4      	movs	r2, #164	; 0xa4
 8009db0:	18b9      	adds	r1, r7, r2
 8009db2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	20a0      	movs	r0, #160	; 0xa0
 8009dbc:	1839      	adds	r1, r7, r0
 8009dbe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	219c      	movs	r1, #156	; 0x9c
 8009dc8:	1879      	adds	r1, r7, r1
 8009dca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009dcc:	0011      	movs	r1, r2
 8009dce:	18bb      	adds	r3, r7, r2
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a99      	ldr	r2, [pc, #612]	; (800a038 <HAL_UART_IRQHandler+0x298>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	2298      	movs	r2, #152	; 0x98
 8009dd8:	18bc      	adds	r4, r7, r2
 8009dda:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8009ddc:	18bb      	adds	r3, r7, r2
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d114      	bne.n	8009e0e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009de4:	187b      	adds	r3, r7, r1
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2220      	movs	r2, #32
 8009dea:	4013      	ands	r3, r2
 8009dec:	d00f      	beq.n	8009e0e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009dee:	183b      	adds	r3, r7, r0
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2220      	movs	r2, #32
 8009df4:	4013      	ands	r3, r2
 8009df6:	d00a      	beq.n	8009e0e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d100      	bne.n	8009e02 <HAL_UART_IRQHandler+0x62>
 8009e00:	e298      	b.n	800a334 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	0010      	movs	r0, r2
 8009e0a:	4798      	blx	r3
      }
      return;
 8009e0c:	e292      	b.n	800a334 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e0e:	2398      	movs	r3, #152	; 0x98
 8009e10:	18fb      	adds	r3, r7, r3
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d100      	bne.n	8009e1a <HAL_UART_IRQHandler+0x7a>
 8009e18:	e114      	b.n	800a044 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009e1a:	239c      	movs	r3, #156	; 0x9c
 8009e1c:	18fb      	adds	r3, r7, r3
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2201      	movs	r2, #1
 8009e22:	4013      	ands	r3, r2
 8009e24:	d106      	bne.n	8009e34 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009e26:	23a0      	movs	r3, #160	; 0xa0
 8009e28:	18fb      	adds	r3, r7, r3
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a83      	ldr	r2, [pc, #524]	; (800a03c <HAL_UART_IRQHandler+0x29c>)
 8009e2e:	4013      	ands	r3, r2
 8009e30:	d100      	bne.n	8009e34 <HAL_UART_IRQHandler+0x94>
 8009e32:	e107      	b.n	800a044 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e34:	23a4      	movs	r3, #164	; 0xa4
 8009e36:	18fb      	adds	r3, r7, r3
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	d012      	beq.n	8009e66 <HAL_UART_IRQHandler+0xc6>
 8009e40:	23a0      	movs	r3, #160	; 0xa0
 8009e42:	18fb      	adds	r3, r7, r3
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	2380      	movs	r3, #128	; 0x80
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	d00b      	beq.n	8009e66 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2201      	movs	r2, #1
 8009e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2280      	movs	r2, #128	; 0x80
 8009e5a:	589b      	ldr	r3, [r3, r2]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2180      	movs	r1, #128	; 0x80
 8009e64:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e66:	23a4      	movs	r3, #164	; 0xa4
 8009e68:	18fb      	adds	r3, r7, r3
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	4013      	ands	r3, r2
 8009e70:	d011      	beq.n	8009e96 <HAL_UART_IRQHandler+0xf6>
 8009e72:	239c      	movs	r3, #156	; 0x9c
 8009e74:	18fb      	adds	r3, r7, r3
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	d00b      	beq.n	8009e96 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2202      	movs	r2, #2
 8009e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2280      	movs	r2, #128	; 0x80
 8009e8a:	589b      	ldr	r3, [r3, r2]
 8009e8c:	2204      	movs	r2, #4
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2180      	movs	r1, #128	; 0x80
 8009e94:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e96:	23a4      	movs	r3, #164	; 0xa4
 8009e98:	18fb      	adds	r3, r7, r3
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2204      	movs	r2, #4
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	d011      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x126>
 8009ea2:	239c      	movs	r3, #156	; 0x9c
 8009ea4:	18fb      	adds	r3, r7, r3
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	4013      	ands	r3, r2
 8009eac:	d00b      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2280      	movs	r2, #128	; 0x80
 8009eba:	589b      	ldr	r3, [r3, r2]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ec6:	23a4      	movs	r3, #164	; 0xa4
 8009ec8:	18fb      	adds	r3, r7, r3
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2208      	movs	r2, #8
 8009ece:	4013      	ands	r3, r2
 8009ed0:	d017      	beq.n	8009f02 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ed2:	23a0      	movs	r3, #160	; 0xa0
 8009ed4:	18fb      	adds	r3, r7, r3
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	4013      	ands	r3, r2
 8009edc:	d105      	bne.n	8009eea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009ede:	239c      	movs	r3, #156	; 0x9c
 8009ee0:	18fb      	adds	r3, r7, r3
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ee8:	d00b      	beq.n	8009f02 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2208      	movs	r2, #8
 8009ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2280      	movs	r2, #128	; 0x80
 8009ef6:	589b      	ldr	r3, [r3, r2]
 8009ef8:	2208      	movs	r2, #8
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2180      	movs	r1, #128	; 0x80
 8009f00:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f02:	23a4      	movs	r3, #164	; 0xa4
 8009f04:	18fb      	adds	r3, r7, r3
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	2380      	movs	r3, #128	; 0x80
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	d013      	beq.n	8009f38 <HAL_UART_IRQHandler+0x198>
 8009f10:	23a0      	movs	r3, #160	; 0xa0
 8009f12:	18fb      	adds	r3, r7, r3
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	2380      	movs	r3, #128	; 0x80
 8009f18:	04db      	lsls	r3, r3, #19
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	d00c      	beq.n	8009f38 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2280      	movs	r2, #128	; 0x80
 8009f24:	0112      	lsls	r2, r2, #4
 8009f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2280      	movs	r2, #128	; 0x80
 8009f2c:	589b      	ldr	r3, [r3, r2]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2180      	movs	r1, #128	; 0x80
 8009f36:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2280      	movs	r2, #128	; 0x80
 8009f3c:	589b      	ldr	r3, [r3, r2]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d100      	bne.n	8009f44 <HAL_UART_IRQHandler+0x1a4>
 8009f42:	e1f9      	b.n	800a338 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f44:	23a4      	movs	r3, #164	; 0xa4
 8009f46:	18fb      	adds	r3, r7, r3
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	d00e      	beq.n	8009f6e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f50:	23a0      	movs	r3, #160	; 0xa0
 8009f52:	18fb      	adds	r3, r7, r3
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2220      	movs	r2, #32
 8009f58:	4013      	ands	r3, r2
 8009f5a:	d008      	beq.n	8009f6e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d004      	beq.n	8009f6e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	0010      	movs	r0, r2
 8009f6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2280      	movs	r2, #128	; 0x80
 8009f72:	589b      	ldr	r3, [r3, r2]
 8009f74:	2194      	movs	r1, #148	; 0x94
 8009f76:	187a      	adds	r2, r7, r1
 8009f78:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	2240      	movs	r2, #64	; 0x40
 8009f82:	4013      	ands	r3, r2
 8009f84:	2b40      	cmp	r3, #64	; 0x40
 8009f86:	d004      	beq.n	8009f92 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f88:	187b      	adds	r3, r7, r1
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2228      	movs	r2, #40	; 0x28
 8009f8e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f90:	d047      	beq.n	800a022 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	0018      	movs	r0, r3
 8009f96:	f000 fe59 	bl	800ac4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	2240      	movs	r2, #64	; 0x40
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d137      	bne.n	800a018 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8009fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fb0:	2090      	movs	r0, #144	; 0x90
 8009fb2:	183a      	adds	r2, r7, r0
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fbc:	f383 8810 	msr	PRIMASK, r3
}
 8009fc0:	46c0      	nop			; (mov r8, r8)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2140      	movs	r1, #64	; 0x40
 8009fce:	438a      	bics	r2, r1
 8009fd0:	609a      	str	r2, [r3, #8]
 8009fd2:	183b      	adds	r3, r7, r0
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fda:	f383 8810 	msr	PRIMASK, r3
}
 8009fde:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d012      	beq.n	800a00e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fec:	4a14      	ldr	r2, [pc, #80]	; (800a040 <HAL_UART_IRQHandler+0x2a0>)
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	f7fc fac9 	bl	800658c <HAL_DMA_Abort_IT>
 8009ffa:	1e03      	subs	r3, r0, #0
 8009ffc:	d01a      	beq.n	800a034 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a008:	0018      	movs	r0, r3
 800a00a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a00c:	e012      	b.n	800a034 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	0018      	movs	r0, r3
 800a012:	f000 f9a7 	bl	800a364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a016:	e00d      	b.n	800a034 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	0018      	movs	r0, r3
 800a01c:	f000 f9a2 	bl	800a364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a020:	e008      	b.n	800a034 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	0018      	movs	r0, r3
 800a026:	f000 f99d 	bl	800a364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2280      	movs	r2, #128	; 0x80
 800a02e:	2100      	movs	r1, #0
 800a030:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a032:	e181      	b.n	800a338 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a034:	46c0      	nop			; (mov r8, r8)
    return;
 800a036:	e17f      	b.n	800a338 <HAL_UART_IRQHandler+0x598>
 800a038:	0000080f 	.word	0x0000080f
 800a03c:	04000120 	.word	0x04000120
 800a040:	0800ad11 	.word	0x0800ad11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d000      	beq.n	800a04e <HAL_UART_IRQHandler+0x2ae>
 800a04c:	e133      	b.n	800a2b6 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a04e:	23a4      	movs	r3, #164	; 0xa4
 800a050:	18fb      	adds	r3, r7, r3
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2210      	movs	r2, #16
 800a056:	4013      	ands	r3, r2
 800a058:	d100      	bne.n	800a05c <HAL_UART_IRQHandler+0x2bc>
 800a05a:	e12c      	b.n	800a2b6 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a05c:	23a0      	movs	r3, #160	; 0xa0
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2210      	movs	r2, #16
 800a064:	4013      	ands	r3, r2
 800a066:	d100      	bne.n	800a06a <HAL_UART_IRQHandler+0x2ca>
 800a068:	e125      	b.n	800a2b6 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2210      	movs	r2, #16
 800a070:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2240      	movs	r2, #64	; 0x40
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b40      	cmp	r3, #64	; 0x40
 800a07e:	d000      	beq.n	800a082 <HAL_UART_IRQHandler+0x2e2>
 800a080:	e09d      	b.n	800a1be <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	217e      	movs	r1, #126	; 0x7e
 800a08c:	187b      	adds	r3, r7, r1
 800a08e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a090:	187b      	adds	r3, r7, r1
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d100      	bne.n	800a09a <HAL_UART_IRQHandler+0x2fa>
 800a098:	e150      	b.n	800a33c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2258      	movs	r2, #88	; 0x58
 800a09e:	5a9b      	ldrh	r3, [r3, r2]
 800a0a0:	187a      	adds	r2, r7, r1
 800a0a2:	8812      	ldrh	r2, [r2, #0]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d300      	bcc.n	800a0aa <HAL_UART_IRQHandler+0x30a>
 800a0a8:	e148      	b.n	800a33c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	187a      	adds	r2, r7, r1
 800a0ae:	215a      	movs	r1, #90	; 0x5a
 800a0b0:	8812      	ldrh	r2, [r2, #0]
 800a0b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	4013      	ands	r3, r2
 800a0c0:	d16e      	bne.n	800a1a0 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d2:	f383 8810 	msr	PRIMASK, r3
}
 800a0d6:	46c0      	nop			; (mov r8, r8)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	499a      	ldr	r1, [pc, #616]	; (800a34c <HAL_UART_IRQHandler+0x5ac>)
 800a0e4:	400a      	ands	r2, r1
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	f383 8810 	msr	PRIMASK, r3
}
 800a0f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fc:	677b      	str	r3, [r7, #116]	; 0x74
 800a0fe:	2301      	movs	r3, #1
 800a100:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a104:	f383 8810 	msr	PRIMASK, r3
}
 800a108:	46c0      	nop			; (mov r8, r8)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2101      	movs	r1, #1
 800a116:	438a      	bics	r2, r1
 800a118:	609a      	str	r2, [r3, #8]
 800a11a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a11c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a120:	f383 8810 	msr	PRIMASK, r3
}
 800a124:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a126:	f3ef 8310 	mrs	r3, PRIMASK
 800a12a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a12c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a12e:	673b      	str	r3, [r7, #112]	; 0x70
 800a130:	2301      	movs	r3, #1
 800a132:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a136:	f383 8810 	msr	PRIMASK, r3
}
 800a13a:	46c0      	nop			; (mov r8, r8)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2140      	movs	r1, #64	; 0x40
 800a148:	438a      	bics	r2, r1
 800a14a:	609a      	str	r2, [r3, #8]
 800a14c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a14e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a152:	f383 8810 	msr	PRIMASK, r3
}
 800a156:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2220      	movs	r2, #32
 800a15c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a164:	f3ef 8310 	mrs	r3, PRIMASK
 800a168:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a16a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a16c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a16e:	2301      	movs	r3, #1
 800a170:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a174:	f383 8810 	msr	PRIMASK, r3
}
 800a178:	46c0      	nop			; (mov r8, r8)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2110      	movs	r1, #16
 800a186:	438a      	bics	r2, r1
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a18e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a190:	f383 8810 	msr	PRIMASK, r3
}
 800a194:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19a:	0018      	movs	r0, r3
 800a19c:	f7fc f9b6 	bl	800650c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2258      	movs	r2, #88	; 0x58
 800a1a4:	5a9a      	ldrh	r2, [r3, r2]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	215a      	movs	r1, #90	; 0x5a
 800a1aa:	5a5b      	ldrh	r3, [r3, r1]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	0011      	movs	r1, r2
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f000 f8dc 	bl	800a374 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1bc:	e0be      	b.n	800a33c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2258      	movs	r2, #88	; 0x58
 800a1c2:	5a99      	ldrh	r1, [r3, r2]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	225a      	movs	r2, #90	; 0x5a
 800a1c8:	5a9b      	ldrh	r3, [r3, r2]
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	208e      	movs	r0, #142	; 0x8e
 800a1ce:	183b      	adds	r3, r7, r0
 800a1d0:	1a8a      	subs	r2, r1, r2
 800a1d2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	225a      	movs	r2, #90	; 0x5a
 800a1d8:	5a9b      	ldrh	r3, [r3, r2]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d100      	bne.n	800a1e2 <HAL_UART_IRQHandler+0x442>
 800a1e0:	e0ae      	b.n	800a340 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800a1e2:	183b      	adds	r3, r7, r0
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d100      	bne.n	800a1ec <HAL_UART_IRQHandler+0x44c>
 800a1ea:	e0a9      	b.n	800a340 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1f4:	2488      	movs	r4, #136	; 0x88
 800a1f6:	193a      	adds	r2, r7, r4
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f383 8810 	msr	PRIMASK, r3
}
 800a204:	46c0      	nop			; (mov r8, r8)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	494f      	ldr	r1, [pc, #316]	; (800a350 <HAL_UART_IRQHandler+0x5b0>)
 800a212:	400a      	ands	r2, r1
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	193b      	adds	r3, r7, r4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f383 8810 	msr	PRIMASK, r3
}
 800a222:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a224:	f3ef 8310 	mrs	r3, PRIMASK
 800a228:	61bb      	str	r3, [r7, #24]
  return(result);
 800a22a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22c:	2484      	movs	r4, #132	; 0x84
 800a22e:	193a      	adds	r2, r7, r4
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	2301      	movs	r3, #1
 800a234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f383 8810 	msr	PRIMASK, r3
}
 800a23c:	46c0      	nop			; (mov r8, r8)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2101      	movs	r1, #1
 800a24a:	438a      	bics	r2, r1
 800a24c:	609a      	str	r2, [r3, #8]
 800a24e:	193b      	adds	r3, r7, r4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	f383 8810 	msr	PRIMASK, r3
}
 800a25a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2220      	movs	r2, #32
 800a260:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a26e:	f3ef 8310 	mrs	r3, PRIMASK
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a276:	2480      	movs	r4, #128	; 0x80
 800a278:	193a      	adds	r2, r7, r4
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	2301      	movs	r3, #1
 800a27e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a282:	f383 8810 	msr	PRIMASK, r3
}
 800a286:	46c0      	nop			; (mov r8, r8)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2110      	movs	r1, #16
 800a294:	438a      	bics	r2, r1
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	193b      	adds	r3, r7, r4
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	f383 8810 	msr	PRIMASK, r3
}
 800a2a4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2a6:	183b      	adds	r3, r7, r0
 800a2a8:	881a      	ldrh	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	0011      	movs	r1, r2
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	f000 f860 	bl	800a374 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2b4:	e044      	b.n	800a340 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2b6:	23a4      	movs	r3, #164	; 0xa4
 800a2b8:	18fb      	adds	r3, r7, r3
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	2380      	movs	r3, #128	; 0x80
 800a2be:	035b      	lsls	r3, r3, #13
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	d010      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x546>
 800a2c4:	239c      	movs	r3, #156	; 0x9c
 800a2c6:	18fb      	adds	r3, r7, r3
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	2380      	movs	r3, #128	; 0x80
 800a2cc:	03db      	lsls	r3, r3, #15
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	d009      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2280      	movs	r2, #128	; 0x80
 800a2d8:	0352      	lsls	r2, r2, #13
 800a2da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f000 fe0f 	bl	800af02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2e4:	e02f      	b.n	800a346 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a2e6:	23a4      	movs	r3, #164	; 0xa4
 800a2e8:	18fb      	adds	r3, r7, r3
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2280      	movs	r2, #128	; 0x80
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	d00f      	beq.n	800a312 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a2f2:	23a0      	movs	r3, #160	; 0xa0
 800a2f4:	18fb      	adds	r3, r7, r3
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2280      	movs	r2, #128	; 0x80
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	d009      	beq.n	800a312 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a302:	2b00      	cmp	r3, #0
 800a304:	d01e      	beq.n	800a344 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	0010      	movs	r0, r2
 800a30e:	4798      	blx	r3
    }
    return;
 800a310:	e018      	b.n	800a344 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a312:	23a4      	movs	r3, #164	; 0xa4
 800a314:	18fb      	adds	r3, r7, r3
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2240      	movs	r2, #64	; 0x40
 800a31a:	4013      	ands	r3, r2
 800a31c:	d013      	beq.n	800a346 <HAL_UART_IRQHandler+0x5a6>
 800a31e:	23a0      	movs	r3, #160	; 0xa0
 800a320:	18fb      	adds	r3, r7, r3
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2240      	movs	r2, #64	; 0x40
 800a326:	4013      	ands	r3, r2
 800a328:	d00d      	beq.n	800a346 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	0018      	movs	r0, r3
 800a32e:	f000 fdbd 	bl	800aeac <UART_EndTransmit_IT>
    return;
 800a332:	e008      	b.n	800a346 <HAL_UART_IRQHandler+0x5a6>
      return;
 800a334:	46c0      	nop			; (mov r8, r8)
 800a336:	e006      	b.n	800a346 <HAL_UART_IRQHandler+0x5a6>
    return;
 800a338:	46c0      	nop			; (mov r8, r8)
 800a33a:	e004      	b.n	800a346 <HAL_UART_IRQHandler+0x5a6>
      return;
 800a33c:	46c0      	nop			; (mov r8, r8)
 800a33e:	e002      	b.n	800a346 <HAL_UART_IRQHandler+0x5a6>
      return;
 800a340:	46c0      	nop			; (mov r8, r8)
 800a342:	e000      	b.n	800a346 <HAL_UART_IRQHandler+0x5a6>
    return;
 800a344:	46c0      	nop			; (mov r8, r8)
  }

}
 800a346:	46bd      	mov	sp, r7
 800a348:	b02b      	add	sp, #172	; 0xac
 800a34a:	bd90      	pop	{r4, r7, pc}
 800a34c:	fffffeff 	.word	0xfffffeff
 800a350:	fffffedf 	.word	0xfffffedf

0800a354 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a35c:	46c0      	nop			; (mov r8, r8)
 800a35e:	46bd      	mov	sp, r7
 800a360:	b002      	add	sp, #8
 800a362:	bd80      	pop	{r7, pc}

0800a364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a36c:	46c0      	nop			; (mov r8, r8)
 800a36e:	46bd      	mov	sp, r7
 800a370:	b002      	add	sp, #8
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	000a      	movs	r2, r1
 800a37e:	1cbb      	adds	r3, r7, #2
 800a380:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a382:	46c0      	nop			; (mov r8, r8)
 800a384:	46bd      	mov	sp, r7
 800a386:	b002      	add	sp, #8
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a38c:	b5b0      	push	{r4, r5, r7, lr}
 800a38e:	b08e      	sub	sp, #56	; 0x38
 800a390:	af00      	add	r7, sp, #0
 800a392:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a394:	231a      	movs	r3, #26
 800a396:	2218      	movs	r2, #24
 800a398:	189b      	adds	r3, r3, r2
 800a39a:	19db      	adds	r3, r3, r7
 800a39c:	2200      	movs	r2, #0
 800a39e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4ac3      	ldr	r2, [pc, #780]	; (800a6cc <UART_SetConfig+0x340>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	0019      	movs	r1, r3
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	4abe      	ldr	r2, [pc, #760]	; (800a6d0 <UART_SetConfig+0x344>)
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	0019      	movs	r1, r3
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4ab8      	ldr	r2, [pc, #736]	; (800a6d4 <UART_SetConfig+0x348>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d004      	beq.n	800a400 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	4ab4      	ldr	r2, [pc, #720]	; (800a6d8 <UART_SetConfig+0x34c>)
 800a408:	4013      	ands	r3, r2
 800a40a:	0019      	movs	r1, r3
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a412:	430a      	orrs	r2, r1
 800a414:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4ab0      	ldr	r2, [pc, #704]	; (800a6dc <UART_SetConfig+0x350>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d131      	bne.n	800a484 <UART_SetConfig+0xf8>
 800a420:	4baf      	ldr	r3, [pc, #700]	; (800a6e0 <UART_SetConfig+0x354>)
 800a422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a424:	2203      	movs	r2, #3
 800a426:	4013      	ands	r3, r2
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d01d      	beq.n	800a468 <UART_SetConfig+0xdc>
 800a42c:	d823      	bhi.n	800a476 <UART_SetConfig+0xea>
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d00c      	beq.n	800a44c <UART_SetConfig+0xc0>
 800a432:	d820      	bhi.n	800a476 <UART_SetConfig+0xea>
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <UART_SetConfig+0xb2>
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d00e      	beq.n	800a45a <UART_SetConfig+0xce>
 800a43c:	e01b      	b.n	800a476 <UART_SetConfig+0xea>
 800a43e:	231b      	movs	r3, #27
 800a440:	2218      	movs	r2, #24
 800a442:	189b      	adds	r3, r3, r2
 800a444:	19db      	adds	r3, r3, r7
 800a446:	2201      	movs	r2, #1
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	e0b4      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a44c:	231b      	movs	r3, #27
 800a44e:	2218      	movs	r2, #24
 800a450:	189b      	adds	r3, r3, r2
 800a452:	19db      	adds	r3, r3, r7
 800a454:	2202      	movs	r2, #2
 800a456:	701a      	strb	r2, [r3, #0]
 800a458:	e0ad      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a45a:	231b      	movs	r3, #27
 800a45c:	2218      	movs	r2, #24
 800a45e:	189b      	adds	r3, r3, r2
 800a460:	19db      	adds	r3, r3, r7
 800a462:	2204      	movs	r2, #4
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	e0a6      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a468:	231b      	movs	r3, #27
 800a46a:	2218      	movs	r2, #24
 800a46c:	189b      	adds	r3, r3, r2
 800a46e:	19db      	adds	r3, r3, r7
 800a470:	2208      	movs	r2, #8
 800a472:	701a      	strb	r2, [r3, #0]
 800a474:	e09f      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a476:	231b      	movs	r3, #27
 800a478:	2218      	movs	r2, #24
 800a47a:	189b      	adds	r3, r3, r2
 800a47c:	19db      	adds	r3, r3, r7
 800a47e:	2210      	movs	r2, #16
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	e098      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a96      	ldr	r2, [pc, #600]	; (800a6e4 <UART_SetConfig+0x358>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d131      	bne.n	800a4f2 <UART_SetConfig+0x166>
 800a48e:	4b94      	ldr	r3, [pc, #592]	; (800a6e0 <UART_SetConfig+0x354>)
 800a490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a492:	220c      	movs	r2, #12
 800a494:	4013      	ands	r3, r2
 800a496:	2b0c      	cmp	r3, #12
 800a498:	d01d      	beq.n	800a4d6 <UART_SetConfig+0x14a>
 800a49a:	d823      	bhi.n	800a4e4 <UART_SetConfig+0x158>
 800a49c:	2b08      	cmp	r3, #8
 800a49e:	d00c      	beq.n	800a4ba <UART_SetConfig+0x12e>
 800a4a0:	d820      	bhi.n	800a4e4 <UART_SetConfig+0x158>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <UART_SetConfig+0x120>
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d00e      	beq.n	800a4c8 <UART_SetConfig+0x13c>
 800a4aa:	e01b      	b.n	800a4e4 <UART_SetConfig+0x158>
 800a4ac:	231b      	movs	r3, #27
 800a4ae:	2218      	movs	r2, #24
 800a4b0:	189b      	adds	r3, r3, r2
 800a4b2:	19db      	adds	r3, r3, r7
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	701a      	strb	r2, [r3, #0]
 800a4b8:	e07d      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a4ba:	231b      	movs	r3, #27
 800a4bc:	2218      	movs	r2, #24
 800a4be:	189b      	adds	r3, r3, r2
 800a4c0:	19db      	adds	r3, r3, r7
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	e076      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a4c8:	231b      	movs	r3, #27
 800a4ca:	2218      	movs	r2, #24
 800a4cc:	189b      	adds	r3, r3, r2
 800a4ce:	19db      	adds	r3, r3, r7
 800a4d0:	2204      	movs	r2, #4
 800a4d2:	701a      	strb	r2, [r3, #0]
 800a4d4:	e06f      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a4d6:	231b      	movs	r3, #27
 800a4d8:	2218      	movs	r2, #24
 800a4da:	189b      	adds	r3, r3, r2
 800a4dc:	19db      	adds	r3, r3, r7
 800a4de:	2208      	movs	r2, #8
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e068      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a4e4:	231b      	movs	r3, #27
 800a4e6:	2218      	movs	r2, #24
 800a4e8:	189b      	adds	r3, r3, r2
 800a4ea:	19db      	adds	r3, r3, r7
 800a4ec:	2210      	movs	r2, #16
 800a4ee:	701a      	strb	r2, [r3, #0]
 800a4f0:	e061      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a7c      	ldr	r2, [pc, #496]	; (800a6e8 <UART_SetConfig+0x35c>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d106      	bne.n	800a50a <UART_SetConfig+0x17e>
 800a4fc:	231b      	movs	r3, #27
 800a4fe:	2218      	movs	r2, #24
 800a500:	189b      	adds	r3, r3, r2
 800a502:	19db      	adds	r3, r3, r7
 800a504:	2200      	movs	r2, #0
 800a506:	701a      	strb	r2, [r3, #0]
 800a508:	e055      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a77      	ldr	r2, [pc, #476]	; (800a6ec <UART_SetConfig+0x360>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d106      	bne.n	800a522 <UART_SetConfig+0x196>
 800a514:	231b      	movs	r3, #27
 800a516:	2218      	movs	r2, #24
 800a518:	189b      	adds	r3, r3, r2
 800a51a:	19db      	adds	r3, r3, r7
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]
 800a520:	e049      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a6b      	ldr	r2, [pc, #428]	; (800a6d4 <UART_SetConfig+0x348>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d13e      	bne.n	800a5aa <UART_SetConfig+0x21e>
 800a52c:	4b6c      	ldr	r3, [pc, #432]	; (800a6e0 <UART_SetConfig+0x354>)
 800a52e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a530:	23c0      	movs	r3, #192	; 0xc0
 800a532:	011b      	lsls	r3, r3, #4
 800a534:	4013      	ands	r3, r2
 800a536:	22c0      	movs	r2, #192	; 0xc0
 800a538:	0112      	lsls	r2, r2, #4
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d027      	beq.n	800a58e <UART_SetConfig+0x202>
 800a53e:	22c0      	movs	r2, #192	; 0xc0
 800a540:	0112      	lsls	r2, r2, #4
 800a542:	4293      	cmp	r3, r2
 800a544:	d82a      	bhi.n	800a59c <UART_SetConfig+0x210>
 800a546:	2280      	movs	r2, #128	; 0x80
 800a548:	0112      	lsls	r2, r2, #4
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d011      	beq.n	800a572 <UART_SetConfig+0x1e6>
 800a54e:	2280      	movs	r2, #128	; 0x80
 800a550:	0112      	lsls	r2, r2, #4
 800a552:	4293      	cmp	r3, r2
 800a554:	d822      	bhi.n	800a59c <UART_SetConfig+0x210>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d004      	beq.n	800a564 <UART_SetConfig+0x1d8>
 800a55a:	2280      	movs	r2, #128	; 0x80
 800a55c:	00d2      	lsls	r2, r2, #3
 800a55e:	4293      	cmp	r3, r2
 800a560:	d00e      	beq.n	800a580 <UART_SetConfig+0x1f4>
 800a562:	e01b      	b.n	800a59c <UART_SetConfig+0x210>
 800a564:	231b      	movs	r3, #27
 800a566:	2218      	movs	r2, #24
 800a568:	189b      	adds	r3, r3, r2
 800a56a:	19db      	adds	r3, r3, r7
 800a56c:	2200      	movs	r2, #0
 800a56e:	701a      	strb	r2, [r3, #0]
 800a570:	e021      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a572:	231b      	movs	r3, #27
 800a574:	2218      	movs	r2, #24
 800a576:	189b      	adds	r3, r3, r2
 800a578:	19db      	adds	r3, r3, r7
 800a57a:	2202      	movs	r2, #2
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	e01a      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a580:	231b      	movs	r3, #27
 800a582:	2218      	movs	r2, #24
 800a584:	189b      	adds	r3, r3, r2
 800a586:	19db      	adds	r3, r3, r7
 800a588:	2204      	movs	r2, #4
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	e013      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a58e:	231b      	movs	r3, #27
 800a590:	2218      	movs	r2, #24
 800a592:	189b      	adds	r3, r3, r2
 800a594:	19db      	adds	r3, r3, r7
 800a596:	2208      	movs	r2, #8
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	e00c      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a59c:	231b      	movs	r3, #27
 800a59e:	2218      	movs	r2, #24
 800a5a0:	189b      	adds	r3, r3, r2
 800a5a2:	19db      	adds	r3, r3, r7
 800a5a4:	2210      	movs	r2, #16
 800a5a6:	701a      	strb	r2, [r3, #0]
 800a5a8:	e005      	b.n	800a5b6 <UART_SetConfig+0x22a>
 800a5aa:	231b      	movs	r3, #27
 800a5ac:	2218      	movs	r2, #24
 800a5ae:	189b      	adds	r3, r3, r2
 800a5b0:	19db      	adds	r3, r3, r7
 800a5b2:	2210      	movs	r2, #16
 800a5b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a46      	ldr	r2, [pc, #280]	; (800a6d4 <UART_SetConfig+0x348>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d000      	beq.n	800a5c2 <UART_SetConfig+0x236>
 800a5c0:	e09a      	b.n	800a6f8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a5c2:	231b      	movs	r3, #27
 800a5c4:	2218      	movs	r2, #24
 800a5c6:	189b      	adds	r3, r3, r2
 800a5c8:	19db      	adds	r3, r3, r7
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d01d      	beq.n	800a60c <UART_SetConfig+0x280>
 800a5d0:	dc20      	bgt.n	800a614 <UART_SetConfig+0x288>
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	d015      	beq.n	800a602 <UART_SetConfig+0x276>
 800a5d6:	dc1d      	bgt.n	800a614 <UART_SetConfig+0x288>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <UART_SetConfig+0x256>
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d005      	beq.n	800a5ec <UART_SetConfig+0x260>
 800a5e0:	e018      	b.n	800a614 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5e2:	f7fd f915 	bl	8007810 <HAL_RCC_GetPCLK1Freq>
 800a5e6:	0003      	movs	r3, r0
 800a5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5ea:	e01c      	b.n	800a626 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5ec:	4b3c      	ldr	r3, [pc, #240]	; (800a6e0 <UART_SetConfig+0x354>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2210      	movs	r2, #16
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	d002      	beq.n	800a5fc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a5f6:	4b3e      	ldr	r3, [pc, #248]	; (800a6f0 <UART_SetConfig+0x364>)
 800a5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5fa:	e014      	b.n	800a626 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800a5fc:	4b3d      	ldr	r3, [pc, #244]	; (800a6f4 <UART_SetConfig+0x368>)
 800a5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a600:	e011      	b.n	800a626 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a602:	f7fd f855 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 800a606:	0003      	movs	r3, r0
 800a608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a60a:	e00c      	b.n	800a626 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a60c:	2380      	movs	r3, #128	; 0x80
 800a60e:	021b      	lsls	r3, r3, #8
 800a610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a612:	e008      	b.n	800a626 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a618:	231a      	movs	r3, #26
 800a61a:	2218      	movs	r2, #24
 800a61c:	189b      	adds	r3, r3, r2
 800a61e:	19db      	adds	r3, r3, r7
 800a620:	2201      	movs	r2, #1
 800a622:	701a      	strb	r2, [r3, #0]
        break;
 800a624:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d100      	bne.n	800a62e <UART_SetConfig+0x2a2>
 800a62c:	e134      	b.n	800a898 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	0013      	movs	r3, r2
 800a634:	005b      	lsls	r3, r3, #1
 800a636:	189b      	adds	r3, r3, r2
 800a638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d305      	bcc.n	800a64a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a646:	429a      	cmp	r2, r3
 800a648:	d906      	bls.n	800a658 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800a64a:	231a      	movs	r3, #26
 800a64c:	2218      	movs	r2, #24
 800a64e:	189b      	adds	r3, r3, r2
 800a650:	19db      	adds	r3, r3, r7
 800a652:	2201      	movs	r2, #1
 800a654:	701a      	strb	r2, [r3, #0]
 800a656:	e11f      	b.n	800a898 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	2300      	movs	r3, #0
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	6939      	ldr	r1, [r7, #16]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	000b      	movs	r3, r1
 800a666:	0e1b      	lsrs	r3, r3, #24
 800a668:	0010      	movs	r0, r2
 800a66a:	0205      	lsls	r5, r0, #8
 800a66c:	431d      	orrs	r5, r3
 800a66e:	000b      	movs	r3, r1
 800a670:	021c      	lsls	r4, r3, #8
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	60bb      	str	r3, [r7, #8]
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	68b8      	ldr	r0, [r7, #8]
 800a680:	68f9      	ldr	r1, [r7, #12]
 800a682:	1900      	adds	r0, r0, r4
 800a684:	4169      	adcs	r1, r5
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	603b      	str	r3, [r7, #0]
 800a68c:	2300      	movs	r3, #0
 800a68e:	607b      	str	r3, [r7, #4]
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f7f5 ff08 	bl	80004a8 <__aeabi_uldivmod>
 800a698:	0002      	movs	r2, r0
 800a69a:	000b      	movs	r3, r1
 800a69c:	0013      	movs	r3, r2
 800a69e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6a2:	23c0      	movs	r3, #192	; 0xc0
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d309      	bcc.n	800a6be <UART_SetConfig+0x332>
 800a6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ac:	2380      	movs	r3, #128	; 0x80
 800a6ae:	035b      	lsls	r3, r3, #13
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d204      	bcs.n	800a6be <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ba:	60da      	str	r2, [r3, #12]
 800a6bc:	e0ec      	b.n	800a898 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800a6be:	231a      	movs	r3, #26
 800a6c0:	2218      	movs	r2, #24
 800a6c2:	189b      	adds	r3, r3, r2
 800a6c4:	19db      	adds	r3, r3, r7
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	701a      	strb	r2, [r3, #0]
 800a6ca:	e0e5      	b.n	800a898 <UART_SetConfig+0x50c>
 800a6cc:	efff69f3 	.word	0xefff69f3
 800a6d0:	ffffcfff 	.word	0xffffcfff
 800a6d4:	40004800 	.word	0x40004800
 800a6d8:	fffff4ff 	.word	0xfffff4ff
 800a6dc:	40013800 	.word	0x40013800
 800a6e0:	40021000 	.word	0x40021000
 800a6e4:	40004400 	.word	0x40004400
 800a6e8:	40004c00 	.word	0x40004c00
 800a6ec:	40005000 	.word	0x40005000
 800a6f0:	003d0900 	.word	0x003d0900
 800a6f4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	69da      	ldr	r2, [r3, #28]
 800a6fc:	2380      	movs	r3, #128	; 0x80
 800a6fe:	021b      	lsls	r3, r3, #8
 800a700:	429a      	cmp	r2, r3
 800a702:	d000      	beq.n	800a706 <UART_SetConfig+0x37a>
 800a704:	e071      	b.n	800a7ea <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a706:	231b      	movs	r3, #27
 800a708:	2218      	movs	r2, #24
 800a70a:	189b      	adds	r3, r3, r2
 800a70c:	19db      	adds	r3, r3, r7
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	2b08      	cmp	r3, #8
 800a712:	d822      	bhi.n	800a75a <UART_SetConfig+0x3ce>
 800a714:	009a      	lsls	r2, r3, #2
 800a716:	4b68      	ldr	r3, [pc, #416]	; (800a8b8 <UART_SetConfig+0x52c>)
 800a718:	18d3      	adds	r3, r2, r3
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a71e:	f7fd f877 	bl	8007810 <HAL_RCC_GetPCLK1Freq>
 800a722:	0003      	movs	r3, r0
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a726:	e021      	b.n	800a76c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a728:	f7fd f888 	bl	800783c <HAL_RCC_GetPCLK2Freq>
 800a72c:	0003      	movs	r3, r0
 800a72e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a730:	e01c      	b.n	800a76c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a732:	4b62      	ldr	r3, [pc, #392]	; (800a8bc <UART_SetConfig+0x530>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2210      	movs	r2, #16
 800a738:	4013      	ands	r3, r2
 800a73a:	d002      	beq.n	800a742 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a73c:	4b60      	ldr	r3, [pc, #384]	; (800a8c0 <UART_SetConfig+0x534>)
 800a73e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a740:	e014      	b.n	800a76c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800a742:	4b60      	ldr	r3, [pc, #384]	; (800a8c4 <UART_SetConfig+0x538>)
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a746:	e011      	b.n	800a76c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a748:	f7fc ffb2 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 800a74c:	0003      	movs	r3, r0
 800a74e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a750:	e00c      	b.n	800a76c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a752:	2380      	movs	r3, #128	; 0x80
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a758:	e008      	b.n	800a76c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a75e:	231a      	movs	r3, #26
 800a760:	2218      	movs	r2, #24
 800a762:	189b      	adds	r3, r3, r2
 800a764:	19db      	adds	r3, r3, r7
 800a766:	2201      	movs	r2, #1
 800a768:	701a      	strb	r2, [r3, #0]
        break;
 800a76a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d100      	bne.n	800a774 <UART_SetConfig+0x3e8>
 800a772:	e091      	b.n	800a898 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a776:	005a      	lsls	r2, r3, #1
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	085b      	lsrs	r3, r3, #1
 800a77e:	18d2      	adds	r2, r2, r3
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	0019      	movs	r1, r3
 800a786:	0010      	movs	r0, r2
 800a788:	f7f5 fcda 	bl	8000140 <__udivsi3>
 800a78c:	0003      	movs	r3, r0
 800a78e:	b29b      	uxth	r3, r3
 800a790:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	2b0f      	cmp	r3, #15
 800a796:	d921      	bls.n	800a7dc <UART_SetConfig+0x450>
 800a798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a79a:	2380      	movs	r3, #128	; 0x80
 800a79c:	025b      	lsls	r3, r3, #9
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d21c      	bcs.n	800a7dc <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	200e      	movs	r0, #14
 800a7a8:	2418      	movs	r4, #24
 800a7aa:	1903      	adds	r3, r0, r4
 800a7ac:	19db      	adds	r3, r3, r7
 800a7ae:	210f      	movs	r1, #15
 800a7b0:	438a      	bics	r2, r1
 800a7b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	085b      	lsrs	r3, r3, #1
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	2207      	movs	r2, #7
 800a7bc:	4013      	ands	r3, r2
 800a7be:	b299      	uxth	r1, r3
 800a7c0:	1903      	adds	r3, r0, r4
 800a7c2:	19db      	adds	r3, r3, r7
 800a7c4:	1902      	adds	r2, r0, r4
 800a7c6:	19d2      	adds	r2, r2, r7
 800a7c8:	8812      	ldrh	r2, [r2, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	1902      	adds	r2, r0, r4
 800a7d4:	19d2      	adds	r2, r2, r7
 800a7d6:	8812      	ldrh	r2, [r2, #0]
 800a7d8:	60da      	str	r2, [r3, #12]
 800a7da:	e05d      	b.n	800a898 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800a7dc:	231a      	movs	r3, #26
 800a7de:	2218      	movs	r2, #24
 800a7e0:	189b      	adds	r3, r3, r2
 800a7e2:	19db      	adds	r3, r3, r7
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	701a      	strb	r2, [r3, #0]
 800a7e8:	e056      	b.n	800a898 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7ea:	231b      	movs	r3, #27
 800a7ec:	2218      	movs	r2, #24
 800a7ee:	189b      	adds	r3, r3, r2
 800a7f0:	19db      	adds	r3, r3, r7
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b08      	cmp	r3, #8
 800a7f6:	d822      	bhi.n	800a83e <UART_SetConfig+0x4b2>
 800a7f8:	009a      	lsls	r2, r3, #2
 800a7fa:	4b33      	ldr	r3, [pc, #204]	; (800a8c8 <UART_SetConfig+0x53c>)
 800a7fc:	18d3      	adds	r3, r2, r3
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a802:	f7fd f805 	bl	8007810 <HAL_RCC_GetPCLK1Freq>
 800a806:	0003      	movs	r3, r0
 800a808:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a80a:	e021      	b.n	800a850 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a80c:	f7fd f816 	bl	800783c <HAL_RCC_GetPCLK2Freq>
 800a810:	0003      	movs	r3, r0
 800a812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a814:	e01c      	b.n	800a850 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a816:	4b29      	ldr	r3, [pc, #164]	; (800a8bc <UART_SetConfig+0x530>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2210      	movs	r2, #16
 800a81c:	4013      	ands	r3, r2
 800a81e:	d002      	beq.n	800a826 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a820:	4b27      	ldr	r3, [pc, #156]	; (800a8c0 <UART_SetConfig+0x534>)
 800a822:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a824:	e014      	b.n	800a850 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800a826:	4b27      	ldr	r3, [pc, #156]	; (800a8c4 <UART_SetConfig+0x538>)
 800a828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a82a:	e011      	b.n	800a850 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a82c:	f7fc ff40 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 800a830:	0003      	movs	r3, r0
 800a832:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a834:	e00c      	b.n	800a850 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a836:	2380      	movs	r3, #128	; 0x80
 800a838:	021b      	lsls	r3, r3, #8
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a83c:	e008      	b.n	800a850 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a842:	231a      	movs	r3, #26
 800a844:	2218      	movs	r2, #24
 800a846:	189b      	adds	r3, r3, r2
 800a848:	19db      	adds	r3, r3, r7
 800a84a:	2201      	movs	r2, #1
 800a84c:	701a      	strb	r2, [r3, #0]
        break;
 800a84e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a852:	2b00      	cmp	r3, #0
 800a854:	d020      	beq.n	800a898 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	085a      	lsrs	r2, r3, #1
 800a85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85e:	18d2      	adds	r2, r2, r3
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	0019      	movs	r1, r3
 800a866:	0010      	movs	r0, r2
 800a868:	f7f5 fc6a 	bl	8000140 <__udivsi3>
 800a86c:	0003      	movs	r3, r0
 800a86e:	b29b      	uxth	r3, r3
 800a870:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	2b0f      	cmp	r3, #15
 800a876:	d909      	bls.n	800a88c <UART_SetConfig+0x500>
 800a878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a87a:	2380      	movs	r3, #128	; 0x80
 800a87c:	025b      	lsls	r3, r3, #9
 800a87e:	429a      	cmp	r2, r3
 800a880:	d204      	bcs.n	800a88c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a888:	60da      	str	r2, [r3, #12]
 800a88a:	e005      	b.n	800a898 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800a88c:	231a      	movs	r3, #26
 800a88e:	2218      	movs	r2, #24
 800a890:	189b      	adds	r3, r3, r2
 800a892:	19db      	adds	r3, r3, r7
 800a894:	2201      	movs	r2, #1
 800a896:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	2200      	movs	r2, #0
 800a89c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a8a4:	231a      	movs	r3, #26
 800a8a6:	2218      	movs	r2, #24
 800a8a8:	189b      	adds	r3, r3, r2
 800a8aa:	19db      	adds	r3, r3, r7
 800a8ac:	781b      	ldrb	r3, [r3, #0]
}
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	b00e      	add	sp, #56	; 0x38
 800a8b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a8b6:	46c0      	nop			; (mov r8, r8)
 800a8b8:	0800e17c 	.word	0x0800e17c
 800a8bc:	40021000 	.word	0x40021000
 800a8c0:	003d0900 	.word	0x003d0900
 800a8c4:	00f42400 	.word	0x00f42400
 800a8c8:	0800e1a0 	.word	0x0800e1a0

0800a8cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2201      	movs	r2, #1
 800a8da:	4013      	ands	r3, r2
 800a8dc:	d00b      	beq.n	800a8f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	4a4a      	ldr	r2, [pc, #296]	; (800aa10 <UART_AdvFeatureConfig+0x144>)
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	0019      	movs	r1, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	430a      	orrs	r2, r1
 800a8f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	d00b      	beq.n	800a918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	4a43      	ldr	r2, [pc, #268]	; (800aa14 <UART_AdvFeatureConfig+0x148>)
 800a908:	4013      	ands	r3, r2
 800a90a:	0019      	movs	r1, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	430a      	orrs	r2, r1
 800a916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91c:	2204      	movs	r2, #4
 800a91e:	4013      	ands	r3, r2
 800a920:	d00b      	beq.n	800a93a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	4a3b      	ldr	r2, [pc, #236]	; (800aa18 <UART_AdvFeatureConfig+0x14c>)
 800a92a:	4013      	ands	r3, r2
 800a92c:	0019      	movs	r1, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	2208      	movs	r2, #8
 800a940:	4013      	ands	r3, r2
 800a942:	d00b      	beq.n	800a95c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	4a34      	ldr	r2, [pc, #208]	; (800aa1c <UART_AdvFeatureConfig+0x150>)
 800a94c:	4013      	ands	r3, r2
 800a94e:	0019      	movs	r1, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	430a      	orrs	r2, r1
 800a95a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	2210      	movs	r2, #16
 800a962:	4013      	ands	r3, r2
 800a964:	d00b      	beq.n	800a97e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	4a2c      	ldr	r2, [pc, #176]	; (800aa20 <UART_AdvFeatureConfig+0x154>)
 800a96e:	4013      	ands	r3, r2
 800a970:	0019      	movs	r1, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	430a      	orrs	r2, r1
 800a97c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a982:	2220      	movs	r2, #32
 800a984:	4013      	ands	r3, r2
 800a986:	d00b      	beq.n	800a9a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	4a25      	ldr	r2, [pc, #148]	; (800aa24 <UART_AdvFeatureConfig+0x158>)
 800a990:	4013      	ands	r3, r2
 800a992:	0019      	movs	r1, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	430a      	orrs	r2, r1
 800a99e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2240      	movs	r2, #64	; 0x40
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	d01d      	beq.n	800a9e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4a1d      	ldr	r2, [pc, #116]	; (800aa28 <UART_AdvFeatureConfig+0x15c>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	0019      	movs	r1, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9c6:	2380      	movs	r3, #128	; 0x80
 800a9c8:	035b      	lsls	r3, r3, #13
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d10b      	bne.n	800a9e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	4a15      	ldr	r2, [pc, #84]	; (800aa2c <UART_AdvFeatureConfig+0x160>)
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	0019      	movs	r1, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	2280      	movs	r2, #128	; 0x80
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	d00b      	beq.n	800aa08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	4a0e      	ldr	r2, [pc, #56]	; (800aa30 <UART_AdvFeatureConfig+0x164>)
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	0019      	movs	r1, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	430a      	orrs	r2, r1
 800aa06:	605a      	str	r2, [r3, #4]
  }
}
 800aa08:	46c0      	nop			; (mov r8, r8)
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	b002      	add	sp, #8
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	fffdffff 	.word	0xfffdffff
 800aa14:	fffeffff 	.word	0xfffeffff
 800aa18:	fffbffff 	.word	0xfffbffff
 800aa1c:	ffff7fff 	.word	0xffff7fff
 800aa20:	ffffefff 	.word	0xffffefff
 800aa24:	ffffdfff 	.word	0xffffdfff
 800aa28:	ffefffff 	.word	0xffefffff
 800aa2c:	ff9fffff 	.word	0xff9fffff
 800aa30:	fff7ffff 	.word	0xfff7ffff

0800aa34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af02      	add	r7, sp, #8
 800aa3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2280      	movs	r2, #128	; 0x80
 800aa40:	2100      	movs	r1, #0
 800aa42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa44:	f7fa ff20 	bl	8005888 <HAL_GetTick>
 800aa48:	0003      	movs	r3, r0
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2208      	movs	r2, #8
 800aa54:	4013      	ands	r3, r2
 800aa56:	2b08      	cmp	r3, #8
 800aa58:	d10c      	bne.n	800aa74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2280      	movs	r2, #128	; 0x80
 800aa5e:	0391      	lsls	r1, r2, #14
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4a17      	ldr	r2, [pc, #92]	; (800aac0 <UART_CheckIdleState+0x8c>)
 800aa64:	9200      	str	r2, [sp, #0]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f000 f82c 	bl	800aac4 <UART_WaitOnFlagUntilTimeout>
 800aa6c:	1e03      	subs	r3, r0, #0
 800aa6e:	d001      	beq.n	800aa74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e021      	b.n	800aab8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d10c      	bne.n	800aa9c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2280      	movs	r2, #128	; 0x80
 800aa86:	03d1      	lsls	r1, r2, #15
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4a0d      	ldr	r2, [pc, #52]	; (800aac0 <UART_CheckIdleState+0x8c>)
 800aa8c:	9200      	str	r2, [sp, #0]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f000 f818 	bl	800aac4 <UART_WaitOnFlagUntilTimeout>
 800aa94:	1e03      	subs	r3, r0, #0
 800aa96:	d001      	beq.n	800aa9c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e00d      	b.n	800aab8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2274      	movs	r2, #116	; 0x74
 800aab2:	2100      	movs	r1, #0
 800aab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	0018      	movs	r0, r3
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b004      	add	sp, #16
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	01ffffff 	.word	0x01ffffff

0800aac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b094      	sub	sp, #80	; 0x50
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	603b      	str	r3, [r7, #0]
 800aad0:	1dfb      	adds	r3, r7, #7
 800aad2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aad4:	e0a3      	b.n	800ac1e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aad8:	3301      	adds	r3, #1
 800aada:	d100      	bne.n	800aade <UART_WaitOnFlagUntilTimeout+0x1a>
 800aadc:	e09f      	b.n	800ac1e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aade:	f7fa fed3 	bl	8005888 <HAL_GetTick>
 800aae2:	0002      	movs	r2, r0
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d302      	bcc.n	800aaf4 <UART_WaitOnFlagUntilTimeout+0x30>
 800aaee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d13d      	bne.n	800ab70 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaf4:	f3ef 8310 	mrs	r3, PRIMASK
 800aaf8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aafc:	647b      	str	r3, [r7, #68]	; 0x44
 800aafe:	2301      	movs	r3, #1
 800ab00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	f383 8810 	msr	PRIMASK, r3
}
 800ab08:	46c0      	nop			; (mov r8, r8)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	494c      	ldr	r1, [pc, #304]	; (800ac48 <UART_WaitOnFlagUntilTimeout+0x184>)
 800ab16:	400a      	ands	r2, r1
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab1c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	f383 8810 	msr	PRIMASK, r3
}
 800ab24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab26:	f3ef 8310 	mrs	r3, PRIMASK
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab2e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab30:	2301      	movs	r3, #1
 800ab32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab36:	f383 8810 	msr	PRIMASK, r3
}
 800ab3a:	46c0      	nop			; (mov r8, r8)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689a      	ldr	r2, [r3, #8]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2101      	movs	r1, #1
 800ab48:	438a      	bics	r2, r1
 800ab4a:	609a      	str	r2, [r3, #8]
 800ab4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab52:	f383 8810 	msr	PRIMASK, r3
}
 800ab56:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2220      	movs	r2, #32
 800ab62:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2274      	movs	r2, #116	; 0x74
 800ab68:	2100      	movs	r1, #0
 800ab6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e067      	b.n	800ac40 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2204      	movs	r2, #4
 800ab78:	4013      	ands	r3, r2
 800ab7a:	d050      	beq.n	800ac1e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69da      	ldr	r2, [r3, #28]
 800ab82:	2380      	movs	r3, #128	; 0x80
 800ab84:	011b      	lsls	r3, r3, #4
 800ab86:	401a      	ands	r2, r3
 800ab88:	2380      	movs	r3, #128	; 0x80
 800ab8a:	011b      	lsls	r3, r3, #4
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d146      	bne.n	800ac1e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2280      	movs	r2, #128	; 0x80
 800ab96:	0112      	lsls	r2, r2, #4
 800ab98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab9e:	613b      	str	r3, [r7, #16]
  return(result);
 800aba0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aba4:	2301      	movs	r3, #1
 800aba6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f383 8810 	msr	PRIMASK, r3
}
 800abae:	46c0      	nop			; (mov r8, r8)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4923      	ldr	r1, [pc, #140]	; (800ac48 <UART_WaitOnFlagUntilTimeout+0x184>)
 800abbc:	400a      	ands	r2, r1
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	f383 8810 	msr	PRIMASK, r3
}
 800abca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abcc:	f3ef 8310 	mrs	r3, PRIMASK
 800abd0:	61fb      	str	r3, [r7, #28]
  return(result);
 800abd2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abd6:	2301      	movs	r3, #1
 800abd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	f383 8810 	msr	PRIMASK, r3
}
 800abe0:	46c0      	nop			; (mov r8, r8)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	689a      	ldr	r2, [r3, #8]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2101      	movs	r1, #1
 800abee:	438a      	bics	r2, r1
 800abf0:	609a      	str	r2, [r3, #8]
 800abf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	f383 8810 	msr	PRIMASK, r3
}
 800abfc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2220      	movs	r2, #32
 800ac08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2280      	movs	r2, #128	; 0x80
 800ac0e:	2120      	movs	r1, #32
 800ac10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2274      	movs	r2, #116	; 0x74
 800ac16:	2100      	movs	r1, #0
 800ac18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e010      	b.n	800ac40 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	69db      	ldr	r3, [r3, #28]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	4013      	ands	r3, r2
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	425a      	negs	r2, r3
 800ac2e:	4153      	adcs	r3, r2
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	001a      	movs	r2, r3
 800ac34:	1dfb      	adds	r3, r7, #7
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d100      	bne.n	800ac3e <UART_WaitOnFlagUntilTimeout+0x17a>
 800ac3c:	e74b      	b.n	800aad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	0018      	movs	r0, r3
 800ac42:	46bd      	mov	sp, r7
 800ac44:	b014      	add	sp, #80	; 0x50
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	fffffe5f 	.word	0xfffffe5f

0800ac4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08e      	sub	sp, #56	; 0x38
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac54:	f3ef 8310 	mrs	r3, PRIMASK
 800ac58:	617b      	str	r3, [r7, #20]
  return(result);
 800ac5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac5e:	2301      	movs	r3, #1
 800ac60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	f383 8810 	msr	PRIMASK, r3
}
 800ac68:	46c0      	nop			; (mov r8, r8)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4925      	ldr	r1, [pc, #148]	; (800ad0c <UART_EndRxTransfer+0xc0>)
 800ac76:	400a      	ands	r2, r1
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	f383 8810 	msr	PRIMASK, r3
}
 800ac84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac86:	f3ef 8310 	mrs	r3, PRIMASK
 800ac8a:	623b      	str	r3, [r7, #32]
  return(result);
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac8e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac90:	2301      	movs	r3, #1
 800ac92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	f383 8810 	msr	PRIMASK, r3
}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	689a      	ldr	r2, [r3, #8]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2101      	movs	r1, #1
 800aca8:	438a      	bics	r2, r1
 800acaa:	609a      	str	r2, [r3, #8]
 800acac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	f383 8810 	msr	PRIMASK, r3
}
 800acb6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d118      	bne.n	800acf2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acc0:	f3ef 8310 	mrs	r3, PRIMASK
 800acc4:	60bb      	str	r3, [r7, #8]
  return(result);
 800acc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acca:	2301      	movs	r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f383 8810 	msr	PRIMASK, r3
}
 800acd4:	46c0      	nop			; (mov r8, r8)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2110      	movs	r1, #16
 800ace2:	438a      	bics	r2, r1
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	f383 8810 	msr	PRIMASK, r3
}
 800acf0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ad04:	46c0      	nop			; (mov r8, r8)
 800ad06:	46bd      	mov	sp, r7
 800ad08:	b00e      	add	sp, #56	; 0x38
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	fffffedf 	.word	0xfffffedf

0800ad10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	225a      	movs	r2, #90	; 0x5a
 800ad22:	2100      	movs	r1, #0
 800ad24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2252      	movs	r2, #82	; 0x52
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	0018      	movs	r0, r3
 800ad32:	f7ff fb17 	bl	800a364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	b004      	add	sp, #16
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b08a      	sub	sp, #40	; 0x28
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad4a:	2b21      	cmp	r3, #33	; 0x21
 800ad4c:	d14c      	bne.n	800ade8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2252      	movs	r2, #82	; 0x52
 800ad52:	5a9b      	ldrh	r3, [r3, r2]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d132      	bne.n	800adc0 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad60:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ad62:	627b      	str	r3, [r7, #36]	; 0x24
 800ad64:	2301      	movs	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f383 8810 	msr	PRIMASK, r3
}
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2180      	movs	r1, #128	; 0x80
 800ad7c:	438a      	bics	r2, r1
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f383 8810 	msr	PRIMASK, r3
}
 800ad8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ad90:	617b      	str	r3, [r7, #20]
  return(result);
 800ad92:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad94:	623b      	str	r3, [r7, #32]
 800ad96:	2301      	movs	r3, #1
 800ad98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	f383 8810 	msr	PRIMASK, r3
}
 800ada0:	46c0      	nop			; (mov r8, r8)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2140      	movs	r1, #64	; 0x40
 800adae:	430a      	orrs	r2, r1
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	f383 8810 	msr	PRIMASK, r3
}
 800adbc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800adbe:	e013      	b.n	800ade8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc4:	781a      	ldrb	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2252      	movs	r2, #82	; 0x52
 800adda:	5a9b      	ldrh	r3, [r3, r2]
 800addc:	b29b      	uxth	r3, r3
 800adde:	3b01      	subs	r3, #1
 800ade0:	b299      	uxth	r1, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2252      	movs	r2, #82	; 0x52
 800ade6:	5299      	strh	r1, [r3, r2]
}
 800ade8:	46c0      	nop			; (mov r8, r8)
 800adea:	46bd      	mov	sp, r7
 800adec:	b00a      	add	sp, #40	; 0x28
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08c      	sub	sp, #48	; 0x30
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adfc:	2b21      	cmp	r3, #33	; 0x21
 800adfe:	d151      	bne.n	800aea4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2252      	movs	r2, #82	; 0x52
 800ae04:	5a9b      	ldrh	r3, [r3, r2]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d132      	bne.n	800ae72 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ae10:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ae14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae16:	2301      	movs	r3, #1
 800ae18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	f383 8810 	msr	PRIMASK, r3
}
 800ae20:	46c0      	nop			; (mov r8, r8)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2180      	movs	r1, #128	; 0x80
 800ae2e:	438a      	bics	r2, r1
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f383 8810 	msr	PRIMASK, r3
}
 800ae3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae42:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae44:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae46:	627b      	str	r3, [r7, #36]	; 0x24
 800ae48:	2301      	movs	r3, #1
 800ae4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	f383 8810 	msr	PRIMASK, r3
}
 800ae52:	46c0      	nop			; (mov r8, r8)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2140      	movs	r1, #64	; 0x40
 800ae60:	430a      	orrs	r2, r1
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	f383 8810 	msr	PRIMASK, r3
}
 800ae6e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ae70:	e018      	b.n	800aea4 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae76:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	001a      	movs	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	05d2      	lsls	r2, r2, #23
 800ae84:	0dd2      	lsrs	r2, r2, #23
 800ae86:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae8c:	1c9a      	adds	r2, r3, #2
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2252      	movs	r2, #82	; 0x52
 800ae96:	5a9b      	ldrh	r3, [r3, r2]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	b299      	uxth	r1, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2252      	movs	r2, #82	; 0x52
 800aea2:	5299      	strh	r1, [r3, r2]
}
 800aea4:	46c0      	nop			; (mov r8, r8)
 800aea6:	46bd      	mov	sp, r7
 800aea8:	b00c      	add	sp, #48	; 0x30
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeb4:	f3ef 8310 	mrs	r3, PRIMASK
 800aeb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800aeba:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	2301      	movs	r3, #1
 800aec0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f383 8810 	msr	PRIMASK, r3
}
 800aec8:	46c0      	nop			; (mov r8, r8)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2140      	movs	r1, #64	; 0x40
 800aed6:	438a      	bics	r2, r1
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f383 8810 	msr	PRIMASK, r3
}
 800aee4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2220      	movs	r2, #32
 800aeea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	0018      	movs	r0, r3
 800aef6:	f7ff fa2d 	bl	800a354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aefa:	46c0      	nop			; (mov r8, r8)
 800aefc:	46bd      	mov	sp, r7
 800aefe:	b006      	add	sp, #24
 800af00:	bd80      	pop	{r7, pc}

0800af02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b082      	sub	sp, #8
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af0a:	46c0      	nop			; (mov r8, r8)
 800af0c:	46bd      	mov	sp, r7
 800af0e:	b002      	add	sp, #8
 800af10:	bd80      	pop	{r7, pc}

0800af12 <atoi>:
 800af12:	b510      	push	{r4, lr}
 800af14:	220a      	movs	r2, #10
 800af16:	2100      	movs	r1, #0
 800af18:	f000 fe4e 	bl	800bbb8 <strtol>
 800af1c:	bd10      	pop	{r4, pc}
	...

0800af20 <__errno>:
 800af20:	4b01      	ldr	r3, [pc, #4]	; (800af28 <__errno+0x8>)
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	4770      	bx	lr
 800af26:	46c0      	nop			; (mov r8, r8)
 800af28:	2000000c 	.word	0x2000000c

0800af2c <__libc_init_array>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	2600      	movs	r6, #0
 800af30:	4d0c      	ldr	r5, [pc, #48]	; (800af64 <__libc_init_array+0x38>)
 800af32:	4c0d      	ldr	r4, [pc, #52]	; (800af68 <__libc_init_array+0x3c>)
 800af34:	1b64      	subs	r4, r4, r5
 800af36:	10a4      	asrs	r4, r4, #2
 800af38:	42a6      	cmp	r6, r4
 800af3a:	d109      	bne.n	800af50 <__libc_init_array+0x24>
 800af3c:	2600      	movs	r6, #0
 800af3e:	f003 f853 	bl	800dfe8 <_init>
 800af42:	4d0a      	ldr	r5, [pc, #40]	; (800af6c <__libc_init_array+0x40>)
 800af44:	4c0a      	ldr	r4, [pc, #40]	; (800af70 <__libc_init_array+0x44>)
 800af46:	1b64      	subs	r4, r4, r5
 800af48:	10a4      	asrs	r4, r4, #2
 800af4a:	42a6      	cmp	r6, r4
 800af4c:	d105      	bne.n	800af5a <__libc_init_array+0x2e>
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	00b3      	lsls	r3, r6, #2
 800af52:	58eb      	ldr	r3, [r5, r3]
 800af54:	4798      	blx	r3
 800af56:	3601      	adds	r6, #1
 800af58:	e7ee      	b.n	800af38 <__libc_init_array+0xc>
 800af5a:	00b3      	lsls	r3, r6, #2
 800af5c:	58eb      	ldr	r3, [r5, r3]
 800af5e:	4798      	blx	r3
 800af60:	3601      	adds	r6, #1
 800af62:	e7f2      	b.n	800af4a <__libc_init_array+0x1e>
 800af64:	0800e5ac 	.word	0x0800e5ac
 800af68:	0800e5ac 	.word	0x0800e5ac
 800af6c:	0800e5ac 	.word	0x0800e5ac
 800af70:	0800e5b0 	.word	0x0800e5b0

0800af74 <malloc>:
 800af74:	b510      	push	{r4, lr}
 800af76:	4b03      	ldr	r3, [pc, #12]	; (800af84 <malloc+0x10>)
 800af78:	0001      	movs	r1, r0
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	f000 f878 	bl	800b070 <_malloc_r>
 800af80:	bd10      	pop	{r4, pc}
 800af82:	46c0      	nop			; (mov r8, r8)
 800af84:	2000000c 	.word	0x2000000c

0800af88 <memset>:
 800af88:	0003      	movs	r3, r0
 800af8a:	1882      	adds	r2, r0, r2
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d100      	bne.n	800af92 <memset+0xa>
 800af90:	4770      	bx	lr
 800af92:	7019      	strb	r1, [r3, #0]
 800af94:	3301      	adds	r3, #1
 800af96:	e7f9      	b.n	800af8c <memset+0x4>

0800af98 <_free_r>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	0005      	movs	r5, r0
 800af9c:	2900      	cmp	r1, #0
 800af9e:	d010      	beq.n	800afc2 <_free_r+0x2a>
 800afa0:	1f0c      	subs	r4, r1, #4
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	da00      	bge.n	800afaa <_free_r+0x12>
 800afa8:	18e4      	adds	r4, r4, r3
 800afaa:	0028      	movs	r0, r5
 800afac:	f001 ffda 	bl	800cf64 <__malloc_lock>
 800afb0:	4a1d      	ldr	r2, [pc, #116]	; (800b028 <_free_r+0x90>)
 800afb2:	6813      	ldr	r3, [r2, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d105      	bne.n	800afc4 <_free_r+0x2c>
 800afb8:	6063      	str	r3, [r4, #4]
 800afba:	6014      	str	r4, [r2, #0]
 800afbc:	0028      	movs	r0, r5
 800afbe:	f001 ffd9 	bl	800cf74 <__malloc_unlock>
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	d908      	bls.n	800afda <_free_r+0x42>
 800afc8:	6821      	ldr	r1, [r4, #0]
 800afca:	1860      	adds	r0, r4, r1
 800afcc:	4283      	cmp	r3, r0
 800afce:	d1f3      	bne.n	800afb8 <_free_r+0x20>
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	1841      	adds	r1, r0, r1
 800afd6:	6021      	str	r1, [r4, #0]
 800afd8:	e7ee      	b.n	800afb8 <_free_r+0x20>
 800afda:	001a      	movs	r2, r3
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <_free_r+0x4e>
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	d9f9      	bls.n	800afda <_free_r+0x42>
 800afe6:	6811      	ldr	r1, [r2, #0]
 800afe8:	1850      	adds	r0, r2, r1
 800afea:	42a0      	cmp	r0, r4
 800afec:	d10b      	bne.n	800b006 <_free_r+0x6e>
 800afee:	6820      	ldr	r0, [r4, #0]
 800aff0:	1809      	adds	r1, r1, r0
 800aff2:	1850      	adds	r0, r2, r1
 800aff4:	6011      	str	r1, [r2, #0]
 800aff6:	4283      	cmp	r3, r0
 800aff8:	d1e0      	bne.n	800afbc <_free_r+0x24>
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	1841      	adds	r1, r0, r1
 800b000:	6011      	str	r1, [r2, #0]
 800b002:	6053      	str	r3, [r2, #4]
 800b004:	e7da      	b.n	800afbc <_free_r+0x24>
 800b006:	42a0      	cmp	r0, r4
 800b008:	d902      	bls.n	800b010 <_free_r+0x78>
 800b00a:	230c      	movs	r3, #12
 800b00c:	602b      	str	r3, [r5, #0]
 800b00e:	e7d5      	b.n	800afbc <_free_r+0x24>
 800b010:	6821      	ldr	r1, [r4, #0]
 800b012:	1860      	adds	r0, r4, r1
 800b014:	4283      	cmp	r3, r0
 800b016:	d103      	bne.n	800b020 <_free_r+0x88>
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	1841      	adds	r1, r0, r1
 800b01e:	6021      	str	r1, [r4, #0]
 800b020:	6063      	str	r3, [r4, #4]
 800b022:	6054      	str	r4, [r2, #4]
 800b024:	e7ca      	b.n	800afbc <_free_r+0x24>
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	20002414 	.word	0x20002414

0800b02c <sbrk_aligned>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	4e0f      	ldr	r6, [pc, #60]	; (800b06c <sbrk_aligned+0x40>)
 800b030:	000d      	movs	r5, r1
 800b032:	6831      	ldr	r1, [r6, #0]
 800b034:	0004      	movs	r4, r0
 800b036:	2900      	cmp	r1, #0
 800b038:	d102      	bne.n	800b040 <sbrk_aligned+0x14>
 800b03a:	f000 fcfd 	bl	800ba38 <_sbrk_r>
 800b03e:	6030      	str	r0, [r6, #0]
 800b040:	0029      	movs	r1, r5
 800b042:	0020      	movs	r0, r4
 800b044:	f000 fcf8 	bl	800ba38 <_sbrk_r>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d00a      	beq.n	800b062 <sbrk_aligned+0x36>
 800b04c:	2303      	movs	r3, #3
 800b04e:	1cc5      	adds	r5, r0, #3
 800b050:	439d      	bics	r5, r3
 800b052:	42a8      	cmp	r0, r5
 800b054:	d007      	beq.n	800b066 <sbrk_aligned+0x3a>
 800b056:	1a29      	subs	r1, r5, r0
 800b058:	0020      	movs	r0, r4
 800b05a:	f000 fced 	bl	800ba38 <_sbrk_r>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	d101      	bne.n	800b066 <sbrk_aligned+0x3a>
 800b062:	2501      	movs	r5, #1
 800b064:	426d      	negs	r5, r5
 800b066:	0028      	movs	r0, r5
 800b068:	bd70      	pop	{r4, r5, r6, pc}
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	20002418 	.word	0x20002418

0800b070 <_malloc_r>:
 800b070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b072:	2203      	movs	r2, #3
 800b074:	1ccb      	adds	r3, r1, #3
 800b076:	4393      	bics	r3, r2
 800b078:	3308      	adds	r3, #8
 800b07a:	0006      	movs	r6, r0
 800b07c:	001f      	movs	r7, r3
 800b07e:	2b0c      	cmp	r3, #12
 800b080:	d232      	bcs.n	800b0e8 <_malloc_r+0x78>
 800b082:	270c      	movs	r7, #12
 800b084:	42b9      	cmp	r1, r7
 800b086:	d831      	bhi.n	800b0ec <_malloc_r+0x7c>
 800b088:	0030      	movs	r0, r6
 800b08a:	f001 ff6b 	bl	800cf64 <__malloc_lock>
 800b08e:	4d32      	ldr	r5, [pc, #200]	; (800b158 <_malloc_r+0xe8>)
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	001c      	movs	r4, r3
 800b094:	2c00      	cmp	r4, #0
 800b096:	d12e      	bne.n	800b0f6 <_malloc_r+0x86>
 800b098:	0039      	movs	r1, r7
 800b09a:	0030      	movs	r0, r6
 800b09c:	f7ff ffc6 	bl	800b02c <sbrk_aligned>
 800b0a0:	0004      	movs	r4, r0
 800b0a2:	1c43      	adds	r3, r0, #1
 800b0a4:	d11e      	bne.n	800b0e4 <_malloc_r+0x74>
 800b0a6:	682c      	ldr	r4, [r5, #0]
 800b0a8:	0025      	movs	r5, r4
 800b0aa:	2d00      	cmp	r5, #0
 800b0ac:	d14a      	bne.n	800b144 <_malloc_r+0xd4>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	0029      	movs	r1, r5
 800b0b2:	18e3      	adds	r3, r4, r3
 800b0b4:	0030      	movs	r0, r6
 800b0b6:	9301      	str	r3, [sp, #4]
 800b0b8:	f000 fcbe 	bl	800ba38 <_sbrk_r>
 800b0bc:	9b01      	ldr	r3, [sp, #4]
 800b0be:	4283      	cmp	r3, r0
 800b0c0:	d143      	bne.n	800b14a <_malloc_r+0xda>
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	3703      	adds	r7, #3
 800b0c6:	1aff      	subs	r7, r7, r3
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	439f      	bics	r7, r3
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	2f0c      	cmp	r7, #12
 800b0d0:	d200      	bcs.n	800b0d4 <_malloc_r+0x64>
 800b0d2:	270c      	movs	r7, #12
 800b0d4:	0039      	movs	r1, r7
 800b0d6:	0030      	movs	r0, r6
 800b0d8:	f7ff ffa8 	bl	800b02c <sbrk_aligned>
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d034      	beq.n	800b14a <_malloc_r+0xda>
 800b0e0:	6823      	ldr	r3, [r4, #0]
 800b0e2:	19df      	adds	r7, r3, r7
 800b0e4:	6027      	str	r7, [r4, #0]
 800b0e6:	e013      	b.n	800b110 <_malloc_r+0xa0>
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dacb      	bge.n	800b084 <_malloc_r+0x14>
 800b0ec:	230c      	movs	r3, #12
 800b0ee:	2500      	movs	r5, #0
 800b0f0:	6033      	str	r3, [r6, #0]
 800b0f2:	0028      	movs	r0, r5
 800b0f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0f6:	6822      	ldr	r2, [r4, #0]
 800b0f8:	1bd1      	subs	r1, r2, r7
 800b0fa:	d420      	bmi.n	800b13e <_malloc_r+0xce>
 800b0fc:	290b      	cmp	r1, #11
 800b0fe:	d917      	bls.n	800b130 <_malloc_r+0xc0>
 800b100:	19e2      	adds	r2, r4, r7
 800b102:	6027      	str	r7, [r4, #0]
 800b104:	42a3      	cmp	r3, r4
 800b106:	d111      	bne.n	800b12c <_malloc_r+0xbc>
 800b108:	602a      	str	r2, [r5, #0]
 800b10a:	6863      	ldr	r3, [r4, #4]
 800b10c:	6011      	str	r1, [r2, #0]
 800b10e:	6053      	str	r3, [r2, #4]
 800b110:	0030      	movs	r0, r6
 800b112:	0025      	movs	r5, r4
 800b114:	f001 ff2e 	bl	800cf74 <__malloc_unlock>
 800b118:	2207      	movs	r2, #7
 800b11a:	350b      	adds	r5, #11
 800b11c:	1d23      	adds	r3, r4, #4
 800b11e:	4395      	bics	r5, r2
 800b120:	1aea      	subs	r2, r5, r3
 800b122:	429d      	cmp	r5, r3
 800b124:	d0e5      	beq.n	800b0f2 <_malloc_r+0x82>
 800b126:	1b5b      	subs	r3, r3, r5
 800b128:	50a3      	str	r3, [r4, r2]
 800b12a:	e7e2      	b.n	800b0f2 <_malloc_r+0x82>
 800b12c:	605a      	str	r2, [r3, #4]
 800b12e:	e7ec      	b.n	800b10a <_malloc_r+0x9a>
 800b130:	6862      	ldr	r2, [r4, #4]
 800b132:	42a3      	cmp	r3, r4
 800b134:	d101      	bne.n	800b13a <_malloc_r+0xca>
 800b136:	602a      	str	r2, [r5, #0]
 800b138:	e7ea      	b.n	800b110 <_malloc_r+0xa0>
 800b13a:	605a      	str	r2, [r3, #4]
 800b13c:	e7e8      	b.n	800b110 <_malloc_r+0xa0>
 800b13e:	0023      	movs	r3, r4
 800b140:	6864      	ldr	r4, [r4, #4]
 800b142:	e7a7      	b.n	800b094 <_malloc_r+0x24>
 800b144:	002c      	movs	r4, r5
 800b146:	686d      	ldr	r5, [r5, #4]
 800b148:	e7af      	b.n	800b0aa <_malloc_r+0x3a>
 800b14a:	230c      	movs	r3, #12
 800b14c:	0030      	movs	r0, r6
 800b14e:	6033      	str	r3, [r6, #0]
 800b150:	f001 ff10 	bl	800cf74 <__malloc_unlock>
 800b154:	e7cd      	b.n	800b0f2 <_malloc_r+0x82>
 800b156:	46c0      	nop			; (mov r8, r8)
 800b158:	20002414 	.word	0x20002414

0800b15c <__cvt>:
 800b15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b15e:	001e      	movs	r6, r3
 800b160:	2300      	movs	r3, #0
 800b162:	0014      	movs	r4, r2
 800b164:	b08b      	sub	sp, #44	; 0x2c
 800b166:	429e      	cmp	r6, r3
 800b168:	da04      	bge.n	800b174 <__cvt+0x18>
 800b16a:	2180      	movs	r1, #128	; 0x80
 800b16c:	0609      	lsls	r1, r1, #24
 800b16e:	1873      	adds	r3, r6, r1
 800b170:	001e      	movs	r6, r3
 800b172:	232d      	movs	r3, #45	; 0x2d
 800b174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b176:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b178:	7013      	strb	r3, [r2, #0]
 800b17a:	2320      	movs	r3, #32
 800b17c:	2203      	movs	r2, #3
 800b17e:	439f      	bics	r7, r3
 800b180:	2f46      	cmp	r7, #70	; 0x46
 800b182:	d007      	beq.n	800b194 <__cvt+0x38>
 800b184:	003b      	movs	r3, r7
 800b186:	3b45      	subs	r3, #69	; 0x45
 800b188:	4259      	negs	r1, r3
 800b18a:	414b      	adcs	r3, r1
 800b18c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b18e:	3a01      	subs	r2, #1
 800b190:	18cb      	adds	r3, r1, r3
 800b192:	9310      	str	r3, [sp, #64]	; 0x40
 800b194:	ab09      	add	r3, sp, #36	; 0x24
 800b196:	9304      	str	r3, [sp, #16]
 800b198:	ab08      	add	r3, sp, #32
 800b19a:	9303      	str	r3, [sp, #12]
 800b19c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b19e:	9200      	str	r2, [sp, #0]
 800b1a0:	9302      	str	r3, [sp, #8]
 800b1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1a4:	0022      	movs	r2, r4
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	0033      	movs	r3, r6
 800b1aa:	f000 fe6b 	bl	800be84 <_dtoa_r>
 800b1ae:	0005      	movs	r5, r0
 800b1b0:	2f47      	cmp	r7, #71	; 0x47
 800b1b2:	d102      	bne.n	800b1ba <__cvt+0x5e>
 800b1b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1b6:	07db      	lsls	r3, r3, #31
 800b1b8:	d528      	bpl.n	800b20c <__cvt+0xb0>
 800b1ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1bc:	18eb      	adds	r3, r5, r3
 800b1be:	9307      	str	r3, [sp, #28]
 800b1c0:	2f46      	cmp	r7, #70	; 0x46
 800b1c2:	d114      	bne.n	800b1ee <__cvt+0x92>
 800b1c4:	782b      	ldrb	r3, [r5, #0]
 800b1c6:	2b30      	cmp	r3, #48	; 0x30
 800b1c8:	d10c      	bne.n	800b1e4 <__cvt+0x88>
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	0020      	movs	r0, r4
 800b1d0:	0031      	movs	r1, r6
 800b1d2:	f7f5 f93b 	bl	800044c <__aeabi_dcmpeq>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d104      	bne.n	800b1e4 <__cvt+0x88>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b1de:	1a9b      	subs	r3, r3, r2
 800b1e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1e6:	9a07      	ldr	r2, [sp, #28]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	18d3      	adds	r3, r2, r3
 800b1ec:	9307      	str	r3, [sp, #28]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	0020      	movs	r0, r4
 800b1f4:	0031      	movs	r1, r6
 800b1f6:	f7f5 f929 	bl	800044c <__aeabi_dcmpeq>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d001      	beq.n	800b202 <__cvt+0xa6>
 800b1fe:	9b07      	ldr	r3, [sp, #28]
 800b200:	9309      	str	r3, [sp, #36]	; 0x24
 800b202:	2230      	movs	r2, #48	; 0x30
 800b204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b206:	9907      	ldr	r1, [sp, #28]
 800b208:	428b      	cmp	r3, r1
 800b20a:	d306      	bcc.n	800b21a <__cvt+0xbe>
 800b20c:	0028      	movs	r0, r5
 800b20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b210:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b212:	1b5b      	subs	r3, r3, r5
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	b00b      	add	sp, #44	; 0x2c
 800b218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b21a:	1c59      	adds	r1, r3, #1
 800b21c:	9109      	str	r1, [sp, #36]	; 0x24
 800b21e:	701a      	strb	r2, [r3, #0]
 800b220:	e7f0      	b.n	800b204 <__cvt+0xa8>

0800b222 <__exponent>:
 800b222:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b224:	1c83      	adds	r3, r0, #2
 800b226:	b087      	sub	sp, #28
 800b228:	9303      	str	r3, [sp, #12]
 800b22a:	0005      	movs	r5, r0
 800b22c:	000c      	movs	r4, r1
 800b22e:	232b      	movs	r3, #43	; 0x2b
 800b230:	7002      	strb	r2, [r0, #0]
 800b232:	2900      	cmp	r1, #0
 800b234:	da01      	bge.n	800b23a <__exponent+0x18>
 800b236:	424c      	negs	r4, r1
 800b238:	3302      	adds	r3, #2
 800b23a:	706b      	strb	r3, [r5, #1]
 800b23c:	2c09      	cmp	r4, #9
 800b23e:	dd31      	ble.n	800b2a4 <__exponent+0x82>
 800b240:	270a      	movs	r7, #10
 800b242:	ab04      	add	r3, sp, #16
 800b244:	1dde      	adds	r6, r3, #7
 800b246:	0020      	movs	r0, r4
 800b248:	0039      	movs	r1, r7
 800b24a:	9601      	str	r6, [sp, #4]
 800b24c:	f7f5 f8e8 	bl	8000420 <__aeabi_idivmod>
 800b250:	3e01      	subs	r6, #1
 800b252:	3130      	adds	r1, #48	; 0x30
 800b254:	0020      	movs	r0, r4
 800b256:	7031      	strb	r1, [r6, #0]
 800b258:	0039      	movs	r1, r7
 800b25a:	9402      	str	r4, [sp, #8]
 800b25c:	f7f4 fffa 	bl	8000254 <__divsi3>
 800b260:	9b02      	ldr	r3, [sp, #8]
 800b262:	0004      	movs	r4, r0
 800b264:	2b63      	cmp	r3, #99	; 0x63
 800b266:	dcee      	bgt.n	800b246 <__exponent+0x24>
 800b268:	9b01      	ldr	r3, [sp, #4]
 800b26a:	3430      	adds	r4, #48	; 0x30
 800b26c:	1e9a      	subs	r2, r3, #2
 800b26e:	0013      	movs	r3, r2
 800b270:	9903      	ldr	r1, [sp, #12]
 800b272:	7014      	strb	r4, [r2, #0]
 800b274:	a804      	add	r0, sp, #16
 800b276:	3007      	adds	r0, #7
 800b278:	4298      	cmp	r0, r3
 800b27a:	d80e      	bhi.n	800b29a <__exponent+0x78>
 800b27c:	ab04      	add	r3, sp, #16
 800b27e:	3307      	adds	r3, #7
 800b280:	2000      	movs	r0, #0
 800b282:	429a      	cmp	r2, r3
 800b284:	d804      	bhi.n	800b290 <__exponent+0x6e>
 800b286:	ab04      	add	r3, sp, #16
 800b288:	3009      	adds	r0, #9
 800b28a:	18c0      	adds	r0, r0, r3
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	1ac0      	subs	r0, r0, r3
 800b290:	9b03      	ldr	r3, [sp, #12]
 800b292:	1818      	adds	r0, r3, r0
 800b294:	1b40      	subs	r0, r0, r5
 800b296:	b007      	add	sp, #28
 800b298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b29a:	7818      	ldrb	r0, [r3, #0]
 800b29c:	3301      	adds	r3, #1
 800b29e:	7008      	strb	r0, [r1, #0]
 800b2a0:	3101      	adds	r1, #1
 800b2a2:	e7e7      	b.n	800b274 <__exponent+0x52>
 800b2a4:	2330      	movs	r3, #48	; 0x30
 800b2a6:	18e4      	adds	r4, r4, r3
 800b2a8:	70ab      	strb	r3, [r5, #2]
 800b2aa:	1d28      	adds	r0, r5, #4
 800b2ac:	70ec      	strb	r4, [r5, #3]
 800b2ae:	e7f1      	b.n	800b294 <__exponent+0x72>

0800b2b0 <_printf_float>:
 800b2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b2:	b095      	sub	sp, #84	; 0x54
 800b2b4:	000c      	movs	r4, r1
 800b2b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2b8:	001e      	movs	r6, r3
 800b2ba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b2bc:	0007      	movs	r7, r0
 800b2be:	f001 fdc9 	bl	800ce54 <_localeconv_r>
 800b2c2:	6803      	ldr	r3, [r0, #0]
 800b2c4:	0018      	movs	r0, r3
 800b2c6:	930c      	str	r3, [sp, #48]	; 0x30
 800b2c8:	f7f4 ff1e 	bl	8000108 <strlen>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9312      	str	r3, [sp, #72]	; 0x48
 800b2d0:	7e23      	ldrb	r3, [r4, #24]
 800b2d2:	2207      	movs	r2, #7
 800b2d4:	930a      	str	r3, [sp, #40]	; 0x28
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	900e      	str	r0, [sp, #56]	; 0x38
 800b2da:	930d      	str	r3, [sp, #52]	; 0x34
 800b2dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b2de:	682b      	ldr	r3, [r5, #0]
 800b2e0:	05c9      	lsls	r1, r1, #23
 800b2e2:	d547      	bpl.n	800b374 <_printf_float+0xc4>
 800b2e4:	189b      	adds	r3, r3, r2
 800b2e6:	4393      	bics	r3, r2
 800b2e8:	001a      	movs	r2, r3
 800b2ea:	3208      	adds	r2, #8
 800b2ec:	602a      	str	r2, [r5, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	64a2      	str	r2, [r4, #72]	; 0x48
 800b2f4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b2fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b2fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2fe:	006b      	lsls	r3, r5, #1
 800b300:	085b      	lsrs	r3, r3, #1
 800b302:	930f      	str	r3, [sp, #60]	; 0x3c
 800b304:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b306:	4ba7      	ldr	r3, [pc, #668]	; (800b5a4 <_printf_float+0x2f4>)
 800b308:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b30a:	4252      	negs	r2, r2
 800b30c:	f7f7 fd26 	bl	8002d5c <__aeabi_dcmpun>
 800b310:	2800      	cmp	r0, #0
 800b312:	d131      	bne.n	800b378 <_printf_float+0xc8>
 800b314:	2201      	movs	r2, #1
 800b316:	4ba3      	ldr	r3, [pc, #652]	; (800b5a4 <_printf_float+0x2f4>)
 800b318:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b31a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b31c:	4252      	negs	r2, r2
 800b31e:	f7f5 f8a5 	bl	800046c <__aeabi_dcmple>
 800b322:	2800      	cmp	r0, #0
 800b324:	d128      	bne.n	800b378 <_printf_float+0xc8>
 800b326:	2200      	movs	r2, #0
 800b328:	2300      	movs	r3, #0
 800b32a:	0029      	movs	r1, r5
 800b32c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b32e:	f7f5 f893 	bl	8000458 <__aeabi_dcmplt>
 800b332:	2800      	cmp	r0, #0
 800b334:	d003      	beq.n	800b33e <_printf_float+0x8e>
 800b336:	0023      	movs	r3, r4
 800b338:	222d      	movs	r2, #45	; 0x2d
 800b33a:	3343      	adds	r3, #67	; 0x43
 800b33c:	701a      	strb	r2, [r3, #0]
 800b33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b340:	4d99      	ldr	r5, [pc, #612]	; (800b5a8 <_printf_float+0x2f8>)
 800b342:	2b47      	cmp	r3, #71	; 0x47
 800b344:	d900      	bls.n	800b348 <_printf_float+0x98>
 800b346:	4d99      	ldr	r5, [pc, #612]	; (800b5ac <_printf_float+0x2fc>)
 800b348:	2303      	movs	r3, #3
 800b34a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b34c:	6123      	str	r3, [r4, #16]
 800b34e:	3301      	adds	r3, #1
 800b350:	439a      	bics	r2, r3
 800b352:	2300      	movs	r3, #0
 800b354:	6022      	str	r2, [r4, #0]
 800b356:	930b      	str	r3, [sp, #44]	; 0x2c
 800b358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b35a:	0021      	movs	r1, r4
 800b35c:	0038      	movs	r0, r7
 800b35e:	9600      	str	r6, [sp, #0]
 800b360:	aa13      	add	r2, sp, #76	; 0x4c
 800b362:	f000 f9e7 	bl	800b734 <_printf_common>
 800b366:	1c43      	adds	r3, r0, #1
 800b368:	d000      	beq.n	800b36c <_printf_float+0xbc>
 800b36a:	e0a2      	b.n	800b4b2 <_printf_float+0x202>
 800b36c:	2001      	movs	r0, #1
 800b36e:	4240      	negs	r0, r0
 800b370:	b015      	add	sp, #84	; 0x54
 800b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b374:	3307      	adds	r3, #7
 800b376:	e7b6      	b.n	800b2e6 <_printf_float+0x36>
 800b378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b37a:	002b      	movs	r3, r5
 800b37c:	0010      	movs	r0, r2
 800b37e:	0029      	movs	r1, r5
 800b380:	f7f7 fcec 	bl	8002d5c <__aeabi_dcmpun>
 800b384:	2800      	cmp	r0, #0
 800b386:	d00b      	beq.n	800b3a0 <_printf_float+0xf0>
 800b388:	2d00      	cmp	r5, #0
 800b38a:	da03      	bge.n	800b394 <_printf_float+0xe4>
 800b38c:	0023      	movs	r3, r4
 800b38e:	222d      	movs	r2, #45	; 0x2d
 800b390:	3343      	adds	r3, #67	; 0x43
 800b392:	701a      	strb	r2, [r3, #0]
 800b394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b396:	4d86      	ldr	r5, [pc, #536]	; (800b5b0 <_printf_float+0x300>)
 800b398:	2b47      	cmp	r3, #71	; 0x47
 800b39a:	d9d5      	bls.n	800b348 <_printf_float+0x98>
 800b39c:	4d85      	ldr	r5, [pc, #532]	; (800b5b4 <_printf_float+0x304>)
 800b39e:	e7d3      	b.n	800b348 <_printf_float+0x98>
 800b3a0:	2220      	movs	r2, #32
 800b3a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3a4:	6863      	ldr	r3, [r4, #4]
 800b3a6:	4391      	bics	r1, r2
 800b3a8:	910f      	str	r1, [sp, #60]	; 0x3c
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	d149      	bne.n	800b442 <_printf_float+0x192>
 800b3ae:	3307      	adds	r3, #7
 800b3b0:	6063      	str	r3, [r4, #4]
 800b3b2:	2380      	movs	r3, #128	; 0x80
 800b3b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	9206      	str	r2, [sp, #24]
 800b3be:	aa12      	add	r2, sp, #72	; 0x48
 800b3c0:	9205      	str	r2, [sp, #20]
 800b3c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3c4:	a908      	add	r1, sp, #32
 800b3c6:	9204      	str	r2, [sp, #16]
 800b3c8:	aa11      	add	r2, sp, #68	; 0x44
 800b3ca:	9203      	str	r2, [sp, #12]
 800b3cc:	2223      	movs	r2, #35	; 0x23
 800b3ce:	6023      	str	r3, [r4, #0]
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	6863      	ldr	r3, [r4, #4]
 800b3d4:	1852      	adds	r2, r2, r1
 800b3d6:	9202      	str	r2, [sp, #8]
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	0038      	movs	r0, r7
 800b3dc:	002b      	movs	r3, r5
 800b3de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3e0:	f7ff febc 	bl	800b15c <__cvt>
 800b3e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3e6:	0005      	movs	r5, r0
 800b3e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b3ea:	2b47      	cmp	r3, #71	; 0x47
 800b3ec:	d108      	bne.n	800b400 <_printf_float+0x150>
 800b3ee:	1ccb      	adds	r3, r1, #3
 800b3f0:	db02      	blt.n	800b3f8 <_printf_float+0x148>
 800b3f2:	6863      	ldr	r3, [r4, #4]
 800b3f4:	4299      	cmp	r1, r3
 800b3f6:	dd48      	ble.n	800b48a <_printf_float+0x1da>
 800b3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3fa:	3b02      	subs	r3, #2
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b402:	2b65      	cmp	r3, #101	; 0x65
 800b404:	d824      	bhi.n	800b450 <_printf_float+0x1a0>
 800b406:	0020      	movs	r0, r4
 800b408:	001a      	movs	r2, r3
 800b40a:	3901      	subs	r1, #1
 800b40c:	3050      	adds	r0, #80	; 0x50
 800b40e:	9111      	str	r1, [sp, #68]	; 0x44
 800b410:	f7ff ff07 	bl	800b222 <__exponent>
 800b414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b416:	900b      	str	r0, [sp, #44]	; 0x2c
 800b418:	1813      	adds	r3, r2, r0
 800b41a:	6123      	str	r3, [r4, #16]
 800b41c:	2a01      	cmp	r2, #1
 800b41e:	dc02      	bgt.n	800b426 <_printf_float+0x176>
 800b420:	6822      	ldr	r2, [r4, #0]
 800b422:	07d2      	lsls	r2, r2, #31
 800b424:	d501      	bpl.n	800b42a <_printf_float+0x17a>
 800b426:	3301      	adds	r3, #1
 800b428:	6123      	str	r3, [r4, #16]
 800b42a:	2323      	movs	r3, #35	; 0x23
 800b42c:	aa08      	add	r2, sp, #32
 800b42e:	189b      	adds	r3, r3, r2
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d100      	bne.n	800b438 <_printf_float+0x188>
 800b436:	e78f      	b.n	800b358 <_printf_float+0xa8>
 800b438:	0023      	movs	r3, r4
 800b43a:	222d      	movs	r2, #45	; 0x2d
 800b43c:	3343      	adds	r3, #67	; 0x43
 800b43e:	701a      	strb	r2, [r3, #0]
 800b440:	e78a      	b.n	800b358 <_printf_float+0xa8>
 800b442:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b444:	2a47      	cmp	r2, #71	; 0x47
 800b446:	d1b4      	bne.n	800b3b2 <_printf_float+0x102>
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1b2      	bne.n	800b3b2 <_printf_float+0x102>
 800b44c:	3301      	adds	r3, #1
 800b44e:	e7af      	b.n	800b3b0 <_printf_float+0x100>
 800b450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b452:	2b66      	cmp	r3, #102	; 0x66
 800b454:	d11b      	bne.n	800b48e <_printf_float+0x1de>
 800b456:	6863      	ldr	r3, [r4, #4]
 800b458:	2900      	cmp	r1, #0
 800b45a:	dd0d      	ble.n	800b478 <_printf_float+0x1c8>
 800b45c:	6121      	str	r1, [r4, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d102      	bne.n	800b468 <_printf_float+0x1b8>
 800b462:	6822      	ldr	r2, [r4, #0]
 800b464:	07d2      	lsls	r2, r2, #31
 800b466:	d502      	bpl.n	800b46e <_printf_float+0x1be>
 800b468:	3301      	adds	r3, #1
 800b46a:	1859      	adds	r1, r3, r1
 800b46c:	6121      	str	r1, [r4, #16]
 800b46e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b470:	65a3      	str	r3, [r4, #88]	; 0x58
 800b472:	2300      	movs	r3, #0
 800b474:	930b      	str	r3, [sp, #44]	; 0x2c
 800b476:	e7d8      	b.n	800b42a <_printf_float+0x17a>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d103      	bne.n	800b484 <_printf_float+0x1d4>
 800b47c:	2201      	movs	r2, #1
 800b47e:	6821      	ldr	r1, [r4, #0]
 800b480:	4211      	tst	r1, r2
 800b482:	d000      	beq.n	800b486 <_printf_float+0x1d6>
 800b484:	1c9a      	adds	r2, r3, #2
 800b486:	6122      	str	r2, [r4, #16]
 800b488:	e7f1      	b.n	800b46e <_printf_float+0x1be>
 800b48a:	2367      	movs	r3, #103	; 0x67
 800b48c:	930a      	str	r3, [sp, #40]	; 0x28
 800b48e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b490:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b492:	4293      	cmp	r3, r2
 800b494:	db06      	blt.n	800b4a4 <_printf_float+0x1f4>
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	6123      	str	r3, [r4, #16]
 800b49a:	07d2      	lsls	r2, r2, #31
 800b49c:	d5e7      	bpl.n	800b46e <_printf_float+0x1be>
 800b49e:	3301      	adds	r3, #1
 800b4a0:	6123      	str	r3, [r4, #16]
 800b4a2:	e7e4      	b.n	800b46e <_printf_float+0x1be>
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dc01      	bgt.n	800b4ae <_printf_float+0x1fe>
 800b4aa:	1849      	adds	r1, r1, r1
 800b4ac:	1ac9      	subs	r1, r1, r3
 800b4ae:	1852      	adds	r2, r2, r1
 800b4b0:	e7e9      	b.n	800b486 <_printf_float+0x1d6>
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	0553      	lsls	r3, r2, #21
 800b4b6:	d407      	bmi.n	800b4c8 <_printf_float+0x218>
 800b4b8:	6923      	ldr	r3, [r4, #16]
 800b4ba:	002a      	movs	r2, r5
 800b4bc:	0038      	movs	r0, r7
 800b4be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4c0:	47b0      	blx	r6
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	d128      	bne.n	800b518 <_printf_float+0x268>
 800b4c6:	e751      	b.n	800b36c <_printf_float+0xbc>
 800b4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ca:	2b65      	cmp	r3, #101	; 0x65
 800b4cc:	d800      	bhi.n	800b4d0 <_printf_float+0x220>
 800b4ce:	e0e1      	b.n	800b694 <_printf_float+0x3e4>
 800b4d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b4d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f7f4 ffb8 	bl	800044c <__aeabi_dcmpeq>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d031      	beq.n	800b544 <_printf_float+0x294>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	0038      	movs	r0, r7
 800b4e4:	4a34      	ldr	r2, [pc, #208]	; (800b5b8 <_printf_float+0x308>)
 800b4e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4e8:	47b0      	blx	r6
 800b4ea:	1c43      	adds	r3, r0, #1
 800b4ec:	d100      	bne.n	800b4f0 <_printf_float+0x240>
 800b4ee:	e73d      	b.n	800b36c <_printf_float+0xbc>
 800b4f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	db02      	blt.n	800b4fe <_printf_float+0x24e>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	07db      	lsls	r3, r3, #31
 800b4fc:	d50c      	bpl.n	800b518 <_printf_float+0x268>
 800b4fe:	0038      	movs	r0, r7
 800b500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b504:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b506:	47b0      	blx	r6
 800b508:	2500      	movs	r5, #0
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	d100      	bne.n	800b510 <_printf_float+0x260>
 800b50e:	e72d      	b.n	800b36c <_printf_float+0xbc>
 800b510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b512:	3b01      	subs	r3, #1
 800b514:	42ab      	cmp	r3, r5
 800b516:	dc0a      	bgt.n	800b52e <_printf_float+0x27e>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	079b      	lsls	r3, r3, #30
 800b51c:	d500      	bpl.n	800b520 <_printf_float+0x270>
 800b51e:	e106      	b.n	800b72e <_printf_float+0x47e>
 800b520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b522:	68e0      	ldr	r0, [r4, #12]
 800b524:	4298      	cmp	r0, r3
 800b526:	db00      	blt.n	800b52a <_printf_float+0x27a>
 800b528:	e722      	b.n	800b370 <_printf_float+0xc0>
 800b52a:	0018      	movs	r0, r3
 800b52c:	e720      	b.n	800b370 <_printf_float+0xc0>
 800b52e:	0022      	movs	r2, r4
 800b530:	2301      	movs	r3, #1
 800b532:	0038      	movs	r0, r7
 800b534:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b536:	321a      	adds	r2, #26
 800b538:	47b0      	blx	r6
 800b53a:	1c43      	adds	r3, r0, #1
 800b53c:	d100      	bne.n	800b540 <_printf_float+0x290>
 800b53e:	e715      	b.n	800b36c <_printf_float+0xbc>
 800b540:	3501      	adds	r5, #1
 800b542:	e7e5      	b.n	800b510 <_printf_float+0x260>
 800b544:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b546:	2b00      	cmp	r3, #0
 800b548:	dc38      	bgt.n	800b5bc <_printf_float+0x30c>
 800b54a:	2301      	movs	r3, #1
 800b54c:	0038      	movs	r0, r7
 800b54e:	4a1a      	ldr	r2, [pc, #104]	; (800b5b8 <_printf_float+0x308>)
 800b550:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b552:	47b0      	blx	r6
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d100      	bne.n	800b55a <_printf_float+0x2aa>
 800b558:	e708      	b.n	800b36c <_printf_float+0xbc>
 800b55a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b55c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b55e:	4313      	orrs	r3, r2
 800b560:	d102      	bne.n	800b568 <_printf_float+0x2b8>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	07db      	lsls	r3, r3, #31
 800b566:	d5d7      	bpl.n	800b518 <_printf_float+0x268>
 800b568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b56a:	0038      	movs	r0, r7
 800b56c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b56e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b570:	47b0      	blx	r6
 800b572:	1c43      	adds	r3, r0, #1
 800b574:	d100      	bne.n	800b578 <_printf_float+0x2c8>
 800b576:	e6f9      	b.n	800b36c <_printf_float+0xbc>
 800b578:	2300      	movs	r3, #0
 800b57a:	930a      	str	r3, [sp, #40]	; 0x28
 800b57c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b57e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b580:	425b      	negs	r3, r3
 800b582:	4293      	cmp	r3, r2
 800b584:	dc01      	bgt.n	800b58a <_printf_float+0x2da>
 800b586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b588:	e797      	b.n	800b4ba <_printf_float+0x20a>
 800b58a:	0022      	movs	r2, r4
 800b58c:	2301      	movs	r3, #1
 800b58e:	0038      	movs	r0, r7
 800b590:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b592:	321a      	adds	r2, #26
 800b594:	47b0      	blx	r6
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	d100      	bne.n	800b59c <_printf_float+0x2ec>
 800b59a:	e6e7      	b.n	800b36c <_printf_float+0xbc>
 800b59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b59e:	3301      	adds	r3, #1
 800b5a0:	e7eb      	b.n	800b57a <_printf_float+0x2ca>
 800b5a2:	46c0      	nop			; (mov r8, r8)
 800b5a4:	7fefffff 	.word	0x7fefffff
 800b5a8:	0800e1c8 	.word	0x0800e1c8
 800b5ac:	0800e1cc 	.word	0x0800e1cc
 800b5b0:	0800e1d0 	.word	0x0800e1d0
 800b5b4:	0800e1d4 	.word	0x0800e1d4
 800b5b8:	0800e1d8 	.word	0x0800e1d8
 800b5bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5c0:	920a      	str	r2, [sp, #40]	; 0x28
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	dd00      	ble.n	800b5c8 <_printf_float+0x318>
 800b5c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	dc3c      	bgt.n	800b648 <_printf_float+0x398>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b5d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d4:	43db      	mvns	r3, r3
 800b5d6:	17db      	asrs	r3, r3, #31
 800b5d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	dc34      	bgt.n	800b658 <_printf_float+0x3a8>
 800b5ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	db3d      	blt.n	800b672 <_printf_float+0x3c2>
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	07db      	lsls	r3, r3, #31
 800b5fa:	d43a      	bmi.n	800b672 <_printf_float+0x3c2>
 800b5fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b600:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	1a52      	subs	r2, r2, r1
 800b606:	920a      	str	r2, [sp, #40]	; 0x28
 800b608:	429a      	cmp	r2, r3
 800b60a:	dd00      	ble.n	800b60e <_printf_float+0x35e>
 800b60c:	930a      	str	r3, [sp, #40]	; 0x28
 800b60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b610:	2b00      	cmp	r3, #0
 800b612:	dc36      	bgt.n	800b682 <_printf_float+0x3d2>
 800b614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b616:	2500      	movs	r5, #0
 800b618:	43db      	mvns	r3, r3
 800b61a:	17db      	asrs	r3, r3, #31
 800b61c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b61e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b624:	1a9b      	subs	r3, r3, r2
 800b626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b628:	400a      	ands	r2, r1
 800b62a:	1a9b      	subs	r3, r3, r2
 800b62c:	42ab      	cmp	r3, r5
 800b62e:	dc00      	bgt.n	800b632 <_printf_float+0x382>
 800b630:	e772      	b.n	800b518 <_printf_float+0x268>
 800b632:	0022      	movs	r2, r4
 800b634:	2301      	movs	r3, #1
 800b636:	0038      	movs	r0, r7
 800b638:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b63a:	321a      	adds	r2, #26
 800b63c:	47b0      	blx	r6
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	d100      	bne.n	800b644 <_printf_float+0x394>
 800b642:	e693      	b.n	800b36c <_printf_float+0xbc>
 800b644:	3501      	adds	r5, #1
 800b646:	e7ea      	b.n	800b61e <_printf_float+0x36e>
 800b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64a:	002a      	movs	r2, r5
 800b64c:	0038      	movs	r0, r7
 800b64e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b650:	47b0      	blx	r6
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	d1bb      	bne.n	800b5ce <_printf_float+0x31e>
 800b656:	e689      	b.n	800b36c <_printf_float+0xbc>
 800b658:	0022      	movs	r2, r4
 800b65a:	2301      	movs	r3, #1
 800b65c:	0038      	movs	r0, r7
 800b65e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b660:	321a      	adds	r2, #26
 800b662:	47b0      	blx	r6
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d100      	bne.n	800b66a <_printf_float+0x3ba>
 800b668:	e680      	b.n	800b36c <_printf_float+0xbc>
 800b66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b66c:	3301      	adds	r3, #1
 800b66e:	930d      	str	r3, [sp, #52]	; 0x34
 800b670:	e7b3      	b.n	800b5da <_printf_float+0x32a>
 800b672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b674:	0038      	movs	r0, r7
 800b676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b678:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b67a:	47b0      	blx	r6
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d1bd      	bne.n	800b5fc <_printf_float+0x34c>
 800b680:	e674      	b.n	800b36c <_printf_float+0xbc>
 800b682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b684:	0038      	movs	r0, r7
 800b686:	18ea      	adds	r2, r5, r3
 800b688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b68c:	47b0      	blx	r6
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	d1c0      	bne.n	800b614 <_printf_float+0x364>
 800b692:	e66b      	b.n	800b36c <_printf_float+0xbc>
 800b694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b696:	2b01      	cmp	r3, #1
 800b698:	dc02      	bgt.n	800b6a0 <_printf_float+0x3f0>
 800b69a:	2301      	movs	r3, #1
 800b69c:	421a      	tst	r2, r3
 800b69e:	d034      	beq.n	800b70a <_printf_float+0x45a>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	002a      	movs	r2, r5
 800b6a4:	0038      	movs	r0, r7
 800b6a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6a8:	47b0      	blx	r6
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	d100      	bne.n	800b6b0 <_printf_float+0x400>
 800b6ae:	e65d      	b.n	800b36c <_printf_float+0xbc>
 800b6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6b2:	0038      	movs	r0, r7
 800b6b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6b8:	47b0      	blx	r6
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	d100      	bne.n	800b6c0 <_printf_float+0x410>
 800b6be:	e655      	b.n	800b36c <_printf_float+0xbc>
 800b6c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b6c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f7f4 fec0 	bl	800044c <__aeabi_dcmpeq>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d11a      	bne.n	800b706 <_printf_float+0x456>
 800b6d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6d2:	1c6a      	adds	r2, r5, #1
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	0038      	movs	r0, r7
 800b6d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6da:	47b0      	blx	r6
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d10e      	bne.n	800b6fe <_printf_float+0x44e>
 800b6e0:	e644      	b.n	800b36c <_printf_float+0xbc>
 800b6e2:	0022      	movs	r2, r4
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	0038      	movs	r0, r7
 800b6e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6ea:	321a      	adds	r2, #26
 800b6ec:	47b0      	blx	r6
 800b6ee:	1c43      	adds	r3, r0, #1
 800b6f0:	d100      	bne.n	800b6f4 <_printf_float+0x444>
 800b6f2:	e63b      	b.n	800b36c <_printf_float+0xbc>
 800b6f4:	3501      	adds	r5, #1
 800b6f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	42ab      	cmp	r3, r5
 800b6fc:	dcf1      	bgt.n	800b6e2 <_printf_float+0x432>
 800b6fe:	0022      	movs	r2, r4
 800b700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b702:	3250      	adds	r2, #80	; 0x50
 800b704:	e6da      	b.n	800b4bc <_printf_float+0x20c>
 800b706:	2500      	movs	r5, #0
 800b708:	e7f5      	b.n	800b6f6 <_printf_float+0x446>
 800b70a:	002a      	movs	r2, r5
 800b70c:	e7e3      	b.n	800b6d6 <_printf_float+0x426>
 800b70e:	0022      	movs	r2, r4
 800b710:	2301      	movs	r3, #1
 800b712:	0038      	movs	r0, r7
 800b714:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b716:	3219      	adds	r2, #25
 800b718:	47b0      	blx	r6
 800b71a:	1c43      	adds	r3, r0, #1
 800b71c:	d100      	bne.n	800b720 <_printf_float+0x470>
 800b71e:	e625      	b.n	800b36c <_printf_float+0xbc>
 800b720:	3501      	adds	r5, #1
 800b722:	68e3      	ldr	r3, [r4, #12]
 800b724:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b726:	1a9b      	subs	r3, r3, r2
 800b728:	42ab      	cmp	r3, r5
 800b72a:	dcf0      	bgt.n	800b70e <_printf_float+0x45e>
 800b72c:	e6f8      	b.n	800b520 <_printf_float+0x270>
 800b72e:	2500      	movs	r5, #0
 800b730:	e7f7      	b.n	800b722 <_printf_float+0x472>
 800b732:	46c0      	nop			; (mov r8, r8)

0800b734 <_printf_common>:
 800b734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b736:	0015      	movs	r5, r2
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	688a      	ldr	r2, [r1, #8]
 800b73c:	690b      	ldr	r3, [r1, #16]
 800b73e:	000c      	movs	r4, r1
 800b740:	9000      	str	r0, [sp, #0]
 800b742:	4293      	cmp	r3, r2
 800b744:	da00      	bge.n	800b748 <_printf_common+0x14>
 800b746:	0013      	movs	r3, r2
 800b748:	0022      	movs	r2, r4
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	3243      	adds	r2, #67	; 0x43
 800b74e:	7812      	ldrb	r2, [r2, #0]
 800b750:	2a00      	cmp	r2, #0
 800b752:	d001      	beq.n	800b758 <_printf_common+0x24>
 800b754:	3301      	adds	r3, #1
 800b756:	602b      	str	r3, [r5, #0]
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	069b      	lsls	r3, r3, #26
 800b75c:	d502      	bpl.n	800b764 <_printf_common+0x30>
 800b75e:	682b      	ldr	r3, [r5, #0]
 800b760:	3302      	adds	r3, #2
 800b762:	602b      	str	r3, [r5, #0]
 800b764:	6822      	ldr	r2, [r4, #0]
 800b766:	2306      	movs	r3, #6
 800b768:	0017      	movs	r7, r2
 800b76a:	401f      	ands	r7, r3
 800b76c:	421a      	tst	r2, r3
 800b76e:	d027      	beq.n	800b7c0 <_printf_common+0x8c>
 800b770:	0023      	movs	r3, r4
 800b772:	3343      	adds	r3, #67	; 0x43
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	1e5a      	subs	r2, r3, #1
 800b778:	4193      	sbcs	r3, r2
 800b77a:	6822      	ldr	r2, [r4, #0]
 800b77c:	0692      	lsls	r2, r2, #26
 800b77e:	d430      	bmi.n	800b7e2 <_printf_common+0xae>
 800b780:	0022      	movs	r2, r4
 800b782:	9901      	ldr	r1, [sp, #4]
 800b784:	9800      	ldr	r0, [sp, #0]
 800b786:	9e08      	ldr	r6, [sp, #32]
 800b788:	3243      	adds	r2, #67	; 0x43
 800b78a:	47b0      	blx	r6
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d025      	beq.n	800b7dc <_printf_common+0xa8>
 800b790:	2306      	movs	r3, #6
 800b792:	6820      	ldr	r0, [r4, #0]
 800b794:	682a      	ldr	r2, [r5, #0]
 800b796:	68e1      	ldr	r1, [r4, #12]
 800b798:	2500      	movs	r5, #0
 800b79a:	4003      	ands	r3, r0
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	d103      	bne.n	800b7a8 <_printf_common+0x74>
 800b7a0:	1a8d      	subs	r5, r1, r2
 800b7a2:	43eb      	mvns	r3, r5
 800b7a4:	17db      	asrs	r3, r3, #31
 800b7a6:	401d      	ands	r5, r3
 800b7a8:	68a3      	ldr	r3, [r4, #8]
 800b7aa:	6922      	ldr	r2, [r4, #16]
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	dd01      	ble.n	800b7b4 <_printf_common+0x80>
 800b7b0:	1a9b      	subs	r3, r3, r2
 800b7b2:	18ed      	adds	r5, r5, r3
 800b7b4:	2700      	movs	r7, #0
 800b7b6:	42bd      	cmp	r5, r7
 800b7b8:	d120      	bne.n	800b7fc <_printf_common+0xc8>
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	e010      	b.n	800b7e0 <_printf_common+0xac>
 800b7be:	3701      	adds	r7, #1
 800b7c0:	68e3      	ldr	r3, [r4, #12]
 800b7c2:	682a      	ldr	r2, [r5, #0]
 800b7c4:	1a9b      	subs	r3, r3, r2
 800b7c6:	42bb      	cmp	r3, r7
 800b7c8:	ddd2      	ble.n	800b770 <_printf_common+0x3c>
 800b7ca:	0022      	movs	r2, r4
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	9901      	ldr	r1, [sp, #4]
 800b7d0:	9800      	ldr	r0, [sp, #0]
 800b7d2:	9e08      	ldr	r6, [sp, #32]
 800b7d4:	3219      	adds	r2, #25
 800b7d6:	47b0      	blx	r6
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d1f0      	bne.n	800b7be <_printf_common+0x8a>
 800b7dc:	2001      	movs	r0, #1
 800b7de:	4240      	negs	r0, r0
 800b7e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7e2:	2030      	movs	r0, #48	; 0x30
 800b7e4:	18e1      	adds	r1, r4, r3
 800b7e6:	3143      	adds	r1, #67	; 0x43
 800b7e8:	7008      	strb	r0, [r1, #0]
 800b7ea:	0021      	movs	r1, r4
 800b7ec:	1c5a      	adds	r2, r3, #1
 800b7ee:	3145      	adds	r1, #69	; 0x45
 800b7f0:	7809      	ldrb	r1, [r1, #0]
 800b7f2:	18a2      	adds	r2, r4, r2
 800b7f4:	3243      	adds	r2, #67	; 0x43
 800b7f6:	3302      	adds	r3, #2
 800b7f8:	7011      	strb	r1, [r2, #0]
 800b7fa:	e7c1      	b.n	800b780 <_printf_common+0x4c>
 800b7fc:	0022      	movs	r2, r4
 800b7fe:	2301      	movs	r3, #1
 800b800:	9901      	ldr	r1, [sp, #4]
 800b802:	9800      	ldr	r0, [sp, #0]
 800b804:	9e08      	ldr	r6, [sp, #32]
 800b806:	321a      	adds	r2, #26
 800b808:	47b0      	blx	r6
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	d0e6      	beq.n	800b7dc <_printf_common+0xa8>
 800b80e:	3701      	adds	r7, #1
 800b810:	e7d1      	b.n	800b7b6 <_printf_common+0x82>
	...

0800b814 <_printf_i>:
 800b814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b816:	b08b      	sub	sp, #44	; 0x2c
 800b818:	9206      	str	r2, [sp, #24]
 800b81a:	000a      	movs	r2, r1
 800b81c:	3243      	adds	r2, #67	; 0x43
 800b81e:	9307      	str	r3, [sp, #28]
 800b820:	9005      	str	r0, [sp, #20]
 800b822:	9204      	str	r2, [sp, #16]
 800b824:	7e0a      	ldrb	r2, [r1, #24]
 800b826:	000c      	movs	r4, r1
 800b828:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b82a:	2a78      	cmp	r2, #120	; 0x78
 800b82c:	d807      	bhi.n	800b83e <_printf_i+0x2a>
 800b82e:	2a62      	cmp	r2, #98	; 0x62
 800b830:	d809      	bhi.n	800b846 <_printf_i+0x32>
 800b832:	2a00      	cmp	r2, #0
 800b834:	d100      	bne.n	800b838 <_printf_i+0x24>
 800b836:	e0c1      	b.n	800b9bc <_printf_i+0x1a8>
 800b838:	2a58      	cmp	r2, #88	; 0x58
 800b83a:	d100      	bne.n	800b83e <_printf_i+0x2a>
 800b83c:	e08c      	b.n	800b958 <_printf_i+0x144>
 800b83e:	0026      	movs	r6, r4
 800b840:	3642      	adds	r6, #66	; 0x42
 800b842:	7032      	strb	r2, [r6, #0]
 800b844:	e022      	b.n	800b88c <_printf_i+0x78>
 800b846:	0010      	movs	r0, r2
 800b848:	3863      	subs	r0, #99	; 0x63
 800b84a:	2815      	cmp	r0, #21
 800b84c:	d8f7      	bhi.n	800b83e <_printf_i+0x2a>
 800b84e:	f7f4 fc6d 	bl	800012c <__gnu_thumb1_case_shi>
 800b852:	0016      	.short	0x0016
 800b854:	fff6001f 	.word	0xfff6001f
 800b858:	fff6fff6 	.word	0xfff6fff6
 800b85c:	001ffff6 	.word	0x001ffff6
 800b860:	fff6fff6 	.word	0xfff6fff6
 800b864:	fff6fff6 	.word	0xfff6fff6
 800b868:	003600a8 	.word	0x003600a8
 800b86c:	fff6009a 	.word	0xfff6009a
 800b870:	00b9fff6 	.word	0x00b9fff6
 800b874:	0036fff6 	.word	0x0036fff6
 800b878:	fff6fff6 	.word	0xfff6fff6
 800b87c:	009e      	.short	0x009e
 800b87e:	0026      	movs	r6, r4
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	3642      	adds	r6, #66	; 0x42
 800b884:	1d11      	adds	r1, r2, #4
 800b886:	6019      	str	r1, [r3, #0]
 800b888:	6813      	ldr	r3, [r2, #0]
 800b88a:	7033      	strb	r3, [r6, #0]
 800b88c:	2301      	movs	r3, #1
 800b88e:	e0a7      	b.n	800b9e0 <_printf_i+0x1cc>
 800b890:	6808      	ldr	r0, [r1, #0]
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	1d0a      	adds	r2, r1, #4
 800b896:	0605      	lsls	r5, r0, #24
 800b898:	d50b      	bpl.n	800b8b2 <_printf_i+0x9e>
 800b89a:	680d      	ldr	r5, [r1, #0]
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	da03      	bge.n	800b8aa <_printf_i+0x96>
 800b8a2:	232d      	movs	r3, #45	; 0x2d
 800b8a4:	9a04      	ldr	r2, [sp, #16]
 800b8a6:	426d      	negs	r5, r5
 800b8a8:	7013      	strb	r3, [r2, #0]
 800b8aa:	4b61      	ldr	r3, [pc, #388]	; (800ba30 <_printf_i+0x21c>)
 800b8ac:	270a      	movs	r7, #10
 800b8ae:	9303      	str	r3, [sp, #12]
 800b8b0:	e01b      	b.n	800b8ea <_printf_i+0xd6>
 800b8b2:	680d      	ldr	r5, [r1, #0]
 800b8b4:	601a      	str	r2, [r3, #0]
 800b8b6:	0641      	lsls	r1, r0, #25
 800b8b8:	d5f1      	bpl.n	800b89e <_printf_i+0x8a>
 800b8ba:	b22d      	sxth	r5, r5
 800b8bc:	e7ef      	b.n	800b89e <_printf_i+0x8a>
 800b8be:	680d      	ldr	r5, [r1, #0]
 800b8c0:	6819      	ldr	r1, [r3, #0]
 800b8c2:	1d08      	adds	r0, r1, #4
 800b8c4:	6018      	str	r0, [r3, #0]
 800b8c6:	062e      	lsls	r6, r5, #24
 800b8c8:	d501      	bpl.n	800b8ce <_printf_i+0xba>
 800b8ca:	680d      	ldr	r5, [r1, #0]
 800b8cc:	e003      	b.n	800b8d6 <_printf_i+0xc2>
 800b8ce:	066d      	lsls	r5, r5, #25
 800b8d0:	d5fb      	bpl.n	800b8ca <_printf_i+0xb6>
 800b8d2:	680d      	ldr	r5, [r1, #0]
 800b8d4:	b2ad      	uxth	r5, r5
 800b8d6:	4b56      	ldr	r3, [pc, #344]	; (800ba30 <_printf_i+0x21c>)
 800b8d8:	2708      	movs	r7, #8
 800b8da:	9303      	str	r3, [sp, #12]
 800b8dc:	2a6f      	cmp	r2, #111	; 0x6f
 800b8de:	d000      	beq.n	800b8e2 <_printf_i+0xce>
 800b8e0:	3702      	adds	r7, #2
 800b8e2:	0023      	movs	r3, r4
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	3343      	adds	r3, #67	; 0x43
 800b8e8:	701a      	strb	r2, [r3, #0]
 800b8ea:	6863      	ldr	r3, [r4, #4]
 800b8ec:	60a3      	str	r3, [r4, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	db03      	blt.n	800b8fa <_printf_i+0xe6>
 800b8f2:	2204      	movs	r2, #4
 800b8f4:	6821      	ldr	r1, [r4, #0]
 800b8f6:	4391      	bics	r1, r2
 800b8f8:	6021      	str	r1, [r4, #0]
 800b8fa:	2d00      	cmp	r5, #0
 800b8fc:	d102      	bne.n	800b904 <_printf_i+0xf0>
 800b8fe:	9e04      	ldr	r6, [sp, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00c      	beq.n	800b91e <_printf_i+0x10a>
 800b904:	9e04      	ldr	r6, [sp, #16]
 800b906:	0028      	movs	r0, r5
 800b908:	0039      	movs	r1, r7
 800b90a:	f7f4 fc9f 	bl	800024c <__aeabi_uidivmod>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	3e01      	subs	r6, #1
 800b912:	5c5b      	ldrb	r3, [r3, r1]
 800b914:	7033      	strb	r3, [r6, #0]
 800b916:	002b      	movs	r3, r5
 800b918:	0005      	movs	r5, r0
 800b91a:	429f      	cmp	r7, r3
 800b91c:	d9f3      	bls.n	800b906 <_printf_i+0xf2>
 800b91e:	2f08      	cmp	r7, #8
 800b920:	d109      	bne.n	800b936 <_printf_i+0x122>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	07db      	lsls	r3, r3, #31
 800b926:	d506      	bpl.n	800b936 <_printf_i+0x122>
 800b928:	6863      	ldr	r3, [r4, #4]
 800b92a:	6922      	ldr	r2, [r4, #16]
 800b92c:	4293      	cmp	r3, r2
 800b92e:	dc02      	bgt.n	800b936 <_printf_i+0x122>
 800b930:	2330      	movs	r3, #48	; 0x30
 800b932:	3e01      	subs	r6, #1
 800b934:	7033      	strb	r3, [r6, #0]
 800b936:	9b04      	ldr	r3, [sp, #16]
 800b938:	1b9b      	subs	r3, r3, r6
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	0021      	movs	r1, r4
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	9805      	ldr	r0, [sp, #20]
 800b944:	9b06      	ldr	r3, [sp, #24]
 800b946:	aa09      	add	r2, sp, #36	; 0x24
 800b948:	f7ff fef4 	bl	800b734 <_printf_common>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d14c      	bne.n	800b9ea <_printf_i+0x1d6>
 800b950:	2001      	movs	r0, #1
 800b952:	4240      	negs	r0, r0
 800b954:	b00b      	add	sp, #44	; 0x2c
 800b956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b958:	3145      	adds	r1, #69	; 0x45
 800b95a:	700a      	strb	r2, [r1, #0]
 800b95c:	4a34      	ldr	r2, [pc, #208]	; (800ba30 <_printf_i+0x21c>)
 800b95e:	9203      	str	r2, [sp, #12]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	6821      	ldr	r1, [r4, #0]
 800b964:	ca20      	ldmia	r2!, {r5}
 800b966:	601a      	str	r2, [r3, #0]
 800b968:	0608      	lsls	r0, r1, #24
 800b96a:	d516      	bpl.n	800b99a <_printf_i+0x186>
 800b96c:	07cb      	lsls	r3, r1, #31
 800b96e:	d502      	bpl.n	800b976 <_printf_i+0x162>
 800b970:	2320      	movs	r3, #32
 800b972:	4319      	orrs	r1, r3
 800b974:	6021      	str	r1, [r4, #0]
 800b976:	2710      	movs	r7, #16
 800b978:	2d00      	cmp	r5, #0
 800b97a:	d1b2      	bne.n	800b8e2 <_printf_i+0xce>
 800b97c:	2320      	movs	r3, #32
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	439a      	bics	r2, r3
 800b982:	6022      	str	r2, [r4, #0]
 800b984:	e7ad      	b.n	800b8e2 <_printf_i+0xce>
 800b986:	2220      	movs	r2, #32
 800b988:	6809      	ldr	r1, [r1, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	6022      	str	r2, [r4, #0]
 800b98e:	0022      	movs	r2, r4
 800b990:	2178      	movs	r1, #120	; 0x78
 800b992:	3245      	adds	r2, #69	; 0x45
 800b994:	7011      	strb	r1, [r2, #0]
 800b996:	4a27      	ldr	r2, [pc, #156]	; (800ba34 <_printf_i+0x220>)
 800b998:	e7e1      	b.n	800b95e <_printf_i+0x14a>
 800b99a:	0648      	lsls	r0, r1, #25
 800b99c:	d5e6      	bpl.n	800b96c <_printf_i+0x158>
 800b99e:	b2ad      	uxth	r5, r5
 800b9a0:	e7e4      	b.n	800b96c <_printf_i+0x158>
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	680d      	ldr	r5, [r1, #0]
 800b9a6:	1d10      	adds	r0, r2, #4
 800b9a8:	6949      	ldr	r1, [r1, #20]
 800b9aa:	6018      	str	r0, [r3, #0]
 800b9ac:	6813      	ldr	r3, [r2, #0]
 800b9ae:	062e      	lsls	r6, r5, #24
 800b9b0:	d501      	bpl.n	800b9b6 <_printf_i+0x1a2>
 800b9b2:	6019      	str	r1, [r3, #0]
 800b9b4:	e002      	b.n	800b9bc <_printf_i+0x1a8>
 800b9b6:	066d      	lsls	r5, r5, #25
 800b9b8:	d5fb      	bpl.n	800b9b2 <_printf_i+0x19e>
 800b9ba:	8019      	strh	r1, [r3, #0]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9e04      	ldr	r6, [sp, #16]
 800b9c0:	6123      	str	r3, [r4, #16]
 800b9c2:	e7bb      	b.n	800b93c <_printf_i+0x128>
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	1d11      	adds	r1, r2, #4
 800b9c8:	6019      	str	r1, [r3, #0]
 800b9ca:	6816      	ldr	r6, [r2, #0]
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	0030      	movs	r0, r6
 800b9d0:	6862      	ldr	r2, [r4, #4]
 800b9d2:	f001 fab3 	bl	800cf3c <memchr>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d001      	beq.n	800b9de <_printf_i+0x1ca>
 800b9da:	1b80      	subs	r0, r0, r6
 800b9dc:	6060      	str	r0, [r4, #4]
 800b9de:	6863      	ldr	r3, [r4, #4]
 800b9e0:	6123      	str	r3, [r4, #16]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	9a04      	ldr	r2, [sp, #16]
 800b9e6:	7013      	strb	r3, [r2, #0]
 800b9e8:	e7a8      	b.n	800b93c <_printf_i+0x128>
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	0032      	movs	r2, r6
 800b9ee:	9906      	ldr	r1, [sp, #24]
 800b9f0:	9805      	ldr	r0, [sp, #20]
 800b9f2:	9d07      	ldr	r5, [sp, #28]
 800b9f4:	47a8      	blx	r5
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	d0aa      	beq.n	800b950 <_printf_i+0x13c>
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	079b      	lsls	r3, r3, #30
 800b9fe:	d415      	bmi.n	800ba2c <_printf_i+0x218>
 800ba00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba02:	68e0      	ldr	r0, [r4, #12]
 800ba04:	4298      	cmp	r0, r3
 800ba06:	daa5      	bge.n	800b954 <_printf_i+0x140>
 800ba08:	0018      	movs	r0, r3
 800ba0a:	e7a3      	b.n	800b954 <_printf_i+0x140>
 800ba0c:	0022      	movs	r2, r4
 800ba0e:	2301      	movs	r3, #1
 800ba10:	9906      	ldr	r1, [sp, #24]
 800ba12:	9805      	ldr	r0, [sp, #20]
 800ba14:	9e07      	ldr	r6, [sp, #28]
 800ba16:	3219      	adds	r2, #25
 800ba18:	47b0      	blx	r6
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d098      	beq.n	800b950 <_printf_i+0x13c>
 800ba1e:	3501      	adds	r5, #1
 800ba20:	68e3      	ldr	r3, [r4, #12]
 800ba22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba24:	1a9b      	subs	r3, r3, r2
 800ba26:	42ab      	cmp	r3, r5
 800ba28:	dcf0      	bgt.n	800ba0c <_printf_i+0x1f8>
 800ba2a:	e7e9      	b.n	800ba00 <_printf_i+0x1ec>
 800ba2c:	2500      	movs	r5, #0
 800ba2e:	e7f7      	b.n	800ba20 <_printf_i+0x20c>
 800ba30:	0800e1da 	.word	0x0800e1da
 800ba34:	0800e1eb 	.word	0x0800e1eb

0800ba38 <_sbrk_r>:
 800ba38:	2300      	movs	r3, #0
 800ba3a:	b570      	push	{r4, r5, r6, lr}
 800ba3c:	4d06      	ldr	r5, [pc, #24]	; (800ba58 <_sbrk_r+0x20>)
 800ba3e:	0004      	movs	r4, r0
 800ba40:	0008      	movs	r0, r1
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	f7f8 fc3e 	bl	80042c4 <_sbrk>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d103      	bne.n	800ba54 <_sbrk_r+0x1c>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d000      	beq.n	800ba54 <_sbrk_r+0x1c>
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	bd70      	pop	{r4, r5, r6, pc}
 800ba56:	46c0      	nop			; (mov r8, r8)
 800ba58:	20002420 	.word	0x20002420

0800ba5c <siprintf>:
 800ba5c:	b40e      	push	{r1, r2, r3}
 800ba5e:	b500      	push	{lr}
 800ba60:	490b      	ldr	r1, [pc, #44]	; (800ba90 <siprintf+0x34>)
 800ba62:	b09c      	sub	sp, #112	; 0x70
 800ba64:	ab1d      	add	r3, sp, #116	; 0x74
 800ba66:	9002      	str	r0, [sp, #8]
 800ba68:	9006      	str	r0, [sp, #24]
 800ba6a:	9107      	str	r1, [sp, #28]
 800ba6c:	9104      	str	r1, [sp, #16]
 800ba6e:	4809      	ldr	r0, [pc, #36]	; (800ba94 <siprintf+0x38>)
 800ba70:	4909      	ldr	r1, [pc, #36]	; (800ba98 <siprintf+0x3c>)
 800ba72:	cb04      	ldmia	r3!, {r2}
 800ba74:	9105      	str	r1, [sp, #20]
 800ba76:	6800      	ldr	r0, [r0, #0]
 800ba78:	a902      	add	r1, sp, #8
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	f001 feac 	bl	800d7d8 <_svfiprintf_r>
 800ba80:	2300      	movs	r3, #0
 800ba82:	9a02      	ldr	r2, [sp, #8]
 800ba84:	7013      	strb	r3, [r2, #0]
 800ba86:	b01c      	add	sp, #112	; 0x70
 800ba88:	bc08      	pop	{r3}
 800ba8a:	b003      	add	sp, #12
 800ba8c:	4718      	bx	r3
 800ba8e:	46c0      	nop			; (mov r8, r8)
 800ba90:	7fffffff 	.word	0x7fffffff
 800ba94:	2000000c 	.word	0x2000000c
 800ba98:	ffff0208 	.word	0xffff0208

0800ba9c <_strtol_l.constprop.0>:
 800ba9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	001e      	movs	r6, r3
 800baa2:	9005      	str	r0, [sp, #20]
 800baa4:	9101      	str	r1, [sp, #4]
 800baa6:	9202      	str	r2, [sp, #8]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d045      	beq.n	800bb38 <_strtol_l.constprop.0+0x9c>
 800baac:	000b      	movs	r3, r1
 800baae:	2e24      	cmp	r6, #36	; 0x24
 800bab0:	d842      	bhi.n	800bb38 <_strtol_l.constprop.0+0x9c>
 800bab2:	4a3f      	ldr	r2, [pc, #252]	; (800bbb0 <_strtol_l.constprop.0+0x114>)
 800bab4:	2108      	movs	r1, #8
 800bab6:	4694      	mov	ip, r2
 800bab8:	001a      	movs	r2, r3
 800baba:	4660      	mov	r0, ip
 800babc:	7814      	ldrb	r4, [r2, #0]
 800babe:	3301      	adds	r3, #1
 800bac0:	5d00      	ldrb	r0, [r0, r4]
 800bac2:	001d      	movs	r5, r3
 800bac4:	0007      	movs	r7, r0
 800bac6:	400f      	ands	r7, r1
 800bac8:	4208      	tst	r0, r1
 800baca:	d1f5      	bne.n	800bab8 <_strtol_l.constprop.0+0x1c>
 800bacc:	2c2d      	cmp	r4, #45	; 0x2d
 800bace:	d13a      	bne.n	800bb46 <_strtol_l.constprop.0+0xaa>
 800bad0:	2701      	movs	r7, #1
 800bad2:	781c      	ldrb	r4, [r3, #0]
 800bad4:	1c95      	adds	r5, r2, #2
 800bad6:	2e00      	cmp	r6, #0
 800bad8:	d065      	beq.n	800bba6 <_strtol_l.constprop.0+0x10a>
 800bada:	2e10      	cmp	r6, #16
 800badc:	d109      	bne.n	800baf2 <_strtol_l.constprop.0+0x56>
 800bade:	2c30      	cmp	r4, #48	; 0x30
 800bae0:	d107      	bne.n	800baf2 <_strtol_l.constprop.0+0x56>
 800bae2:	2220      	movs	r2, #32
 800bae4:	782b      	ldrb	r3, [r5, #0]
 800bae6:	4393      	bics	r3, r2
 800bae8:	2b58      	cmp	r3, #88	; 0x58
 800baea:	d157      	bne.n	800bb9c <_strtol_l.constprop.0+0x100>
 800baec:	2610      	movs	r6, #16
 800baee:	786c      	ldrb	r4, [r5, #1]
 800baf0:	3502      	adds	r5, #2
 800baf2:	4b30      	ldr	r3, [pc, #192]	; (800bbb4 <_strtol_l.constprop.0+0x118>)
 800baf4:	0031      	movs	r1, r6
 800baf6:	18fb      	adds	r3, r7, r3
 800baf8:	0018      	movs	r0, r3
 800bafa:	9303      	str	r3, [sp, #12]
 800bafc:	f7f4 fba6 	bl	800024c <__aeabi_uidivmod>
 800bb00:	2300      	movs	r3, #0
 800bb02:	2201      	movs	r2, #1
 800bb04:	4684      	mov	ip, r0
 800bb06:	0018      	movs	r0, r3
 800bb08:	9104      	str	r1, [sp, #16]
 800bb0a:	4252      	negs	r2, r2
 800bb0c:	0021      	movs	r1, r4
 800bb0e:	3930      	subs	r1, #48	; 0x30
 800bb10:	2909      	cmp	r1, #9
 800bb12:	d81d      	bhi.n	800bb50 <_strtol_l.constprop.0+0xb4>
 800bb14:	000c      	movs	r4, r1
 800bb16:	42a6      	cmp	r6, r4
 800bb18:	dd28      	ble.n	800bb6c <_strtol_l.constprop.0+0xd0>
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	db24      	blt.n	800bb68 <_strtol_l.constprop.0+0xcc>
 800bb1e:	0013      	movs	r3, r2
 800bb20:	4584      	cmp	ip, r0
 800bb22:	d306      	bcc.n	800bb32 <_strtol_l.constprop.0+0x96>
 800bb24:	d102      	bne.n	800bb2c <_strtol_l.constprop.0+0x90>
 800bb26:	9904      	ldr	r1, [sp, #16]
 800bb28:	42a1      	cmp	r1, r4
 800bb2a:	db02      	blt.n	800bb32 <_strtol_l.constprop.0+0x96>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	4370      	muls	r0, r6
 800bb30:	1820      	adds	r0, r4, r0
 800bb32:	782c      	ldrb	r4, [r5, #0]
 800bb34:	3501      	adds	r5, #1
 800bb36:	e7e9      	b.n	800bb0c <_strtol_l.constprop.0+0x70>
 800bb38:	f7ff f9f2 	bl	800af20 <__errno>
 800bb3c:	2316      	movs	r3, #22
 800bb3e:	6003      	str	r3, [r0, #0]
 800bb40:	2000      	movs	r0, #0
 800bb42:	b007      	add	sp, #28
 800bb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb46:	2c2b      	cmp	r4, #43	; 0x2b
 800bb48:	d1c5      	bne.n	800bad6 <_strtol_l.constprop.0+0x3a>
 800bb4a:	781c      	ldrb	r4, [r3, #0]
 800bb4c:	1c95      	adds	r5, r2, #2
 800bb4e:	e7c2      	b.n	800bad6 <_strtol_l.constprop.0+0x3a>
 800bb50:	0021      	movs	r1, r4
 800bb52:	3941      	subs	r1, #65	; 0x41
 800bb54:	2919      	cmp	r1, #25
 800bb56:	d801      	bhi.n	800bb5c <_strtol_l.constprop.0+0xc0>
 800bb58:	3c37      	subs	r4, #55	; 0x37
 800bb5a:	e7dc      	b.n	800bb16 <_strtol_l.constprop.0+0x7a>
 800bb5c:	0021      	movs	r1, r4
 800bb5e:	3961      	subs	r1, #97	; 0x61
 800bb60:	2919      	cmp	r1, #25
 800bb62:	d803      	bhi.n	800bb6c <_strtol_l.constprop.0+0xd0>
 800bb64:	3c57      	subs	r4, #87	; 0x57
 800bb66:	e7d6      	b.n	800bb16 <_strtol_l.constprop.0+0x7a>
 800bb68:	0013      	movs	r3, r2
 800bb6a:	e7e2      	b.n	800bb32 <_strtol_l.constprop.0+0x96>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	da09      	bge.n	800bb84 <_strtol_l.constprop.0+0xe8>
 800bb70:	2322      	movs	r3, #34	; 0x22
 800bb72:	9a05      	ldr	r2, [sp, #20]
 800bb74:	9803      	ldr	r0, [sp, #12]
 800bb76:	6013      	str	r3, [r2, #0]
 800bb78:	9b02      	ldr	r3, [sp, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0e1      	beq.n	800bb42 <_strtol_l.constprop.0+0xa6>
 800bb7e:	1e6b      	subs	r3, r5, #1
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	e007      	b.n	800bb94 <_strtol_l.constprop.0+0xf8>
 800bb84:	2f00      	cmp	r7, #0
 800bb86:	d000      	beq.n	800bb8a <_strtol_l.constprop.0+0xee>
 800bb88:	4240      	negs	r0, r0
 800bb8a:	9a02      	ldr	r2, [sp, #8]
 800bb8c:	2a00      	cmp	r2, #0
 800bb8e:	d0d8      	beq.n	800bb42 <_strtol_l.constprop.0+0xa6>
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1f4      	bne.n	800bb7e <_strtol_l.constprop.0+0xe2>
 800bb94:	9b02      	ldr	r3, [sp, #8]
 800bb96:	9a01      	ldr	r2, [sp, #4]
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	e7d2      	b.n	800bb42 <_strtol_l.constprop.0+0xa6>
 800bb9c:	2430      	movs	r4, #48	; 0x30
 800bb9e:	2e00      	cmp	r6, #0
 800bba0:	d1a7      	bne.n	800baf2 <_strtol_l.constprop.0+0x56>
 800bba2:	3608      	adds	r6, #8
 800bba4:	e7a5      	b.n	800baf2 <_strtol_l.constprop.0+0x56>
 800bba6:	2c30      	cmp	r4, #48	; 0x30
 800bba8:	d09b      	beq.n	800bae2 <_strtol_l.constprop.0+0x46>
 800bbaa:	260a      	movs	r6, #10
 800bbac:	e7a1      	b.n	800baf2 <_strtol_l.constprop.0+0x56>
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	0800e1fd 	.word	0x0800e1fd
 800bbb4:	7fffffff 	.word	0x7fffffff

0800bbb8 <strtol>:
 800bbb8:	b510      	push	{r4, lr}
 800bbba:	0013      	movs	r3, r2
 800bbbc:	000a      	movs	r2, r1
 800bbbe:	0001      	movs	r1, r0
 800bbc0:	4802      	ldr	r0, [pc, #8]	; (800bbcc <strtol+0x14>)
 800bbc2:	6800      	ldr	r0, [r0, #0]
 800bbc4:	f7ff ff6a 	bl	800ba9c <_strtol_l.constprop.0>
 800bbc8:	bd10      	pop	{r4, pc}
 800bbca:	46c0      	nop			; (mov r8, r8)
 800bbcc:	2000000c 	.word	0x2000000c

0800bbd0 <__swbuf_r>:
 800bbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd2:	0005      	movs	r5, r0
 800bbd4:	000e      	movs	r6, r1
 800bbd6:	0014      	movs	r4, r2
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d004      	beq.n	800bbe6 <__swbuf_r+0x16>
 800bbdc:	6983      	ldr	r3, [r0, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <__swbuf_r+0x16>
 800bbe2:	f001 f897 	bl	800cd14 <__sinit>
 800bbe6:	4b22      	ldr	r3, [pc, #136]	; (800bc70 <__swbuf_r+0xa0>)
 800bbe8:	429c      	cmp	r4, r3
 800bbea:	d12e      	bne.n	800bc4a <__swbuf_r+0x7a>
 800bbec:	686c      	ldr	r4, [r5, #4]
 800bbee:	69a3      	ldr	r3, [r4, #24]
 800bbf0:	60a3      	str	r3, [r4, #8]
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	071b      	lsls	r3, r3, #28
 800bbf6:	d532      	bpl.n	800bc5e <__swbuf_r+0x8e>
 800bbf8:	6923      	ldr	r3, [r4, #16]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d02f      	beq.n	800bc5e <__swbuf_r+0x8e>
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	6922      	ldr	r2, [r4, #16]
 800bc02:	b2f7      	uxtb	r7, r6
 800bc04:	1a98      	subs	r0, r3, r2
 800bc06:	6963      	ldr	r3, [r4, #20]
 800bc08:	b2f6      	uxtb	r6, r6
 800bc0a:	4283      	cmp	r3, r0
 800bc0c:	dc05      	bgt.n	800bc1a <__swbuf_r+0x4a>
 800bc0e:	0021      	movs	r1, r4
 800bc10:	0028      	movs	r0, r5
 800bc12:	f000 ffdd 	bl	800cbd0 <_fflush_r>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d127      	bne.n	800bc6a <__swbuf_r+0x9a>
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	60a3      	str	r3, [r4, #8]
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	1c5a      	adds	r2, r3, #1
 800bc26:	6022      	str	r2, [r4, #0]
 800bc28:	701f      	strb	r7, [r3, #0]
 800bc2a:	6963      	ldr	r3, [r4, #20]
 800bc2c:	4283      	cmp	r3, r0
 800bc2e:	d004      	beq.n	800bc3a <__swbuf_r+0x6a>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	07db      	lsls	r3, r3, #31
 800bc34:	d507      	bpl.n	800bc46 <__swbuf_r+0x76>
 800bc36:	2e0a      	cmp	r6, #10
 800bc38:	d105      	bne.n	800bc46 <__swbuf_r+0x76>
 800bc3a:	0021      	movs	r1, r4
 800bc3c:	0028      	movs	r0, r5
 800bc3e:	f000 ffc7 	bl	800cbd0 <_fflush_r>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d111      	bne.n	800bc6a <__swbuf_r+0x9a>
 800bc46:	0030      	movs	r0, r6
 800bc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc4a:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <__swbuf_r+0xa4>)
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	d101      	bne.n	800bc54 <__swbuf_r+0x84>
 800bc50:	68ac      	ldr	r4, [r5, #8]
 800bc52:	e7cc      	b.n	800bbee <__swbuf_r+0x1e>
 800bc54:	4b08      	ldr	r3, [pc, #32]	; (800bc78 <__swbuf_r+0xa8>)
 800bc56:	429c      	cmp	r4, r3
 800bc58:	d1c9      	bne.n	800bbee <__swbuf_r+0x1e>
 800bc5a:	68ec      	ldr	r4, [r5, #12]
 800bc5c:	e7c7      	b.n	800bbee <__swbuf_r+0x1e>
 800bc5e:	0021      	movs	r1, r4
 800bc60:	0028      	movs	r0, r5
 800bc62:	f000 f80b 	bl	800bc7c <__swsetup_r>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d0c9      	beq.n	800bbfe <__swbuf_r+0x2e>
 800bc6a:	2601      	movs	r6, #1
 800bc6c:	4276      	negs	r6, r6
 800bc6e:	e7ea      	b.n	800bc46 <__swbuf_r+0x76>
 800bc70:	0800e3b0 	.word	0x0800e3b0
 800bc74:	0800e3d0 	.word	0x0800e3d0
 800bc78:	0800e390 	.word	0x0800e390

0800bc7c <__swsetup_r>:
 800bc7c:	4b37      	ldr	r3, [pc, #220]	; (800bd5c <__swsetup_r+0xe0>)
 800bc7e:	b570      	push	{r4, r5, r6, lr}
 800bc80:	681d      	ldr	r5, [r3, #0]
 800bc82:	0006      	movs	r6, r0
 800bc84:	000c      	movs	r4, r1
 800bc86:	2d00      	cmp	r5, #0
 800bc88:	d005      	beq.n	800bc96 <__swsetup_r+0x1a>
 800bc8a:	69ab      	ldr	r3, [r5, #24]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <__swsetup_r+0x1a>
 800bc90:	0028      	movs	r0, r5
 800bc92:	f001 f83f 	bl	800cd14 <__sinit>
 800bc96:	4b32      	ldr	r3, [pc, #200]	; (800bd60 <__swsetup_r+0xe4>)
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	d10f      	bne.n	800bcbc <__swsetup_r+0x40>
 800bc9c:	686c      	ldr	r4, [r5, #4]
 800bc9e:	230c      	movs	r3, #12
 800bca0:	5ee2      	ldrsh	r2, [r4, r3]
 800bca2:	b293      	uxth	r3, r2
 800bca4:	0711      	lsls	r1, r2, #28
 800bca6:	d42d      	bmi.n	800bd04 <__swsetup_r+0x88>
 800bca8:	06d9      	lsls	r1, r3, #27
 800bcaa:	d411      	bmi.n	800bcd0 <__swsetup_r+0x54>
 800bcac:	2309      	movs	r3, #9
 800bcae:	2001      	movs	r0, #1
 800bcb0:	6033      	str	r3, [r6, #0]
 800bcb2:	3337      	adds	r3, #55	; 0x37
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	4240      	negs	r0, r0
 800bcba:	bd70      	pop	{r4, r5, r6, pc}
 800bcbc:	4b29      	ldr	r3, [pc, #164]	; (800bd64 <__swsetup_r+0xe8>)
 800bcbe:	429c      	cmp	r4, r3
 800bcc0:	d101      	bne.n	800bcc6 <__swsetup_r+0x4a>
 800bcc2:	68ac      	ldr	r4, [r5, #8]
 800bcc4:	e7eb      	b.n	800bc9e <__swsetup_r+0x22>
 800bcc6:	4b28      	ldr	r3, [pc, #160]	; (800bd68 <__swsetup_r+0xec>)
 800bcc8:	429c      	cmp	r4, r3
 800bcca:	d1e8      	bne.n	800bc9e <__swsetup_r+0x22>
 800bccc:	68ec      	ldr	r4, [r5, #12]
 800bcce:	e7e6      	b.n	800bc9e <__swsetup_r+0x22>
 800bcd0:	075b      	lsls	r3, r3, #29
 800bcd2:	d513      	bpl.n	800bcfc <__swsetup_r+0x80>
 800bcd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	d008      	beq.n	800bcec <__swsetup_r+0x70>
 800bcda:	0023      	movs	r3, r4
 800bcdc:	3344      	adds	r3, #68	; 0x44
 800bcde:	4299      	cmp	r1, r3
 800bce0:	d002      	beq.n	800bce8 <__swsetup_r+0x6c>
 800bce2:	0030      	movs	r0, r6
 800bce4:	f7ff f958 	bl	800af98 <_free_r>
 800bce8:	2300      	movs	r3, #0
 800bcea:	6363      	str	r3, [r4, #52]	; 0x34
 800bcec:	2224      	movs	r2, #36	; 0x24
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	4393      	bics	r3, r2
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	6063      	str	r3, [r4, #4]
 800bcf8:	6923      	ldr	r3, [r4, #16]
 800bcfa:	6023      	str	r3, [r4, #0]
 800bcfc:	2308      	movs	r3, #8
 800bcfe:	89a2      	ldrh	r2, [r4, #12]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	6923      	ldr	r3, [r4, #16]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <__swsetup_r+0xa6>
 800bd0a:	21a0      	movs	r1, #160	; 0xa0
 800bd0c:	2280      	movs	r2, #128	; 0x80
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	0089      	lsls	r1, r1, #2
 800bd12:	0092      	lsls	r2, r2, #2
 800bd14:	400b      	ands	r3, r1
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d003      	beq.n	800bd22 <__swsetup_r+0xa6>
 800bd1a:	0021      	movs	r1, r4
 800bd1c:	0030      	movs	r0, r6
 800bd1e:	f001 f8c9 	bl	800ceb4 <__smakebuf_r>
 800bd22:	220c      	movs	r2, #12
 800bd24:	5ea3      	ldrsh	r3, [r4, r2]
 800bd26:	2001      	movs	r0, #1
 800bd28:	001a      	movs	r2, r3
 800bd2a:	b299      	uxth	r1, r3
 800bd2c:	4002      	ands	r2, r0
 800bd2e:	4203      	tst	r3, r0
 800bd30:	d00f      	beq.n	800bd52 <__swsetup_r+0xd6>
 800bd32:	2200      	movs	r2, #0
 800bd34:	60a2      	str	r2, [r4, #8]
 800bd36:	6962      	ldr	r2, [r4, #20]
 800bd38:	4252      	negs	r2, r2
 800bd3a:	61a2      	str	r2, [r4, #24]
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	6922      	ldr	r2, [r4, #16]
 800bd40:	4282      	cmp	r2, r0
 800bd42:	d1ba      	bne.n	800bcba <__swsetup_r+0x3e>
 800bd44:	060a      	lsls	r2, r1, #24
 800bd46:	d5b8      	bpl.n	800bcba <__swsetup_r+0x3e>
 800bd48:	2240      	movs	r2, #64	; 0x40
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	3801      	subs	r0, #1
 800bd50:	e7b3      	b.n	800bcba <__swsetup_r+0x3e>
 800bd52:	0788      	lsls	r0, r1, #30
 800bd54:	d400      	bmi.n	800bd58 <__swsetup_r+0xdc>
 800bd56:	6962      	ldr	r2, [r4, #20]
 800bd58:	60a2      	str	r2, [r4, #8]
 800bd5a:	e7ef      	b.n	800bd3c <__swsetup_r+0xc0>
 800bd5c:	2000000c 	.word	0x2000000c
 800bd60:	0800e3b0 	.word	0x0800e3b0
 800bd64:	0800e3d0 	.word	0x0800e3d0
 800bd68:	0800e390 	.word	0x0800e390

0800bd6c <quorem>:
 800bd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd6e:	0006      	movs	r6, r0
 800bd70:	690b      	ldr	r3, [r1, #16]
 800bd72:	6932      	ldr	r2, [r6, #16]
 800bd74:	b087      	sub	sp, #28
 800bd76:	2000      	movs	r0, #0
 800bd78:	9103      	str	r1, [sp, #12]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	db65      	blt.n	800be4a <quorem+0xde>
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	009c      	lsls	r4, r3, #2
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	000b      	movs	r3, r1
 800bd86:	3314      	adds	r3, #20
 800bd88:	9305      	str	r3, [sp, #20]
 800bd8a:	191b      	adds	r3, r3, r4
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	0033      	movs	r3, r6
 800bd90:	3314      	adds	r3, #20
 800bd92:	9302      	str	r3, [sp, #8]
 800bd94:	191c      	adds	r4, r3, r4
 800bd96:	9b04      	ldr	r3, [sp, #16]
 800bd98:	6827      	ldr	r7, [r4, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	0038      	movs	r0, r7
 800bd9e:	1c5d      	adds	r5, r3, #1
 800bda0:	0029      	movs	r1, r5
 800bda2:	9301      	str	r3, [sp, #4]
 800bda4:	f7f4 f9cc 	bl	8000140 <__udivsi3>
 800bda8:	9001      	str	r0, [sp, #4]
 800bdaa:	42af      	cmp	r7, r5
 800bdac:	d324      	bcc.n	800bdf8 <quorem+0x8c>
 800bdae:	2500      	movs	r5, #0
 800bdb0:	46ac      	mov	ip, r5
 800bdb2:	9802      	ldr	r0, [sp, #8]
 800bdb4:	9f05      	ldr	r7, [sp, #20]
 800bdb6:	cf08      	ldmia	r7!, {r3}
 800bdb8:	9a01      	ldr	r2, [sp, #4]
 800bdba:	b299      	uxth	r1, r3
 800bdbc:	4351      	muls	r1, r2
 800bdbe:	0c1b      	lsrs	r3, r3, #16
 800bdc0:	4353      	muls	r3, r2
 800bdc2:	1949      	adds	r1, r1, r5
 800bdc4:	0c0a      	lsrs	r2, r1, #16
 800bdc6:	189b      	adds	r3, r3, r2
 800bdc8:	6802      	ldr	r2, [r0, #0]
 800bdca:	b289      	uxth	r1, r1
 800bdcc:	b292      	uxth	r2, r2
 800bdce:	4462      	add	r2, ip
 800bdd0:	1a52      	subs	r2, r2, r1
 800bdd2:	6801      	ldr	r1, [r0, #0]
 800bdd4:	0c1d      	lsrs	r5, r3, #16
 800bdd6:	0c09      	lsrs	r1, r1, #16
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	1acb      	subs	r3, r1, r3
 800bddc:	1411      	asrs	r1, r2, #16
 800bdde:	185b      	adds	r3, r3, r1
 800bde0:	1419      	asrs	r1, r3, #16
 800bde2:	b292      	uxth	r2, r2
 800bde4:	041b      	lsls	r3, r3, #16
 800bde6:	431a      	orrs	r2, r3
 800bde8:	9b04      	ldr	r3, [sp, #16]
 800bdea:	468c      	mov	ip, r1
 800bdec:	c004      	stmia	r0!, {r2}
 800bdee:	42bb      	cmp	r3, r7
 800bdf0:	d2e1      	bcs.n	800bdb6 <quorem+0x4a>
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d030      	beq.n	800be5a <quorem+0xee>
 800bdf8:	0030      	movs	r0, r6
 800bdfa:	9903      	ldr	r1, [sp, #12]
 800bdfc:	f001 fb46 	bl	800d48c <__mcmp>
 800be00:	2800      	cmp	r0, #0
 800be02:	db21      	blt.n	800be48 <quorem+0xdc>
 800be04:	0030      	movs	r0, r6
 800be06:	2400      	movs	r4, #0
 800be08:	9b01      	ldr	r3, [sp, #4]
 800be0a:	9903      	ldr	r1, [sp, #12]
 800be0c:	3301      	adds	r3, #1
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	3014      	adds	r0, #20
 800be12:	3114      	adds	r1, #20
 800be14:	6803      	ldr	r3, [r0, #0]
 800be16:	c920      	ldmia	r1!, {r5}
 800be18:	b29a      	uxth	r2, r3
 800be1a:	1914      	adds	r4, r2, r4
 800be1c:	b2aa      	uxth	r2, r5
 800be1e:	1aa2      	subs	r2, r4, r2
 800be20:	0c1b      	lsrs	r3, r3, #16
 800be22:	0c2d      	lsrs	r5, r5, #16
 800be24:	1414      	asrs	r4, r2, #16
 800be26:	1b5b      	subs	r3, r3, r5
 800be28:	191b      	adds	r3, r3, r4
 800be2a:	141c      	asrs	r4, r3, #16
 800be2c:	b292      	uxth	r2, r2
 800be2e:	041b      	lsls	r3, r3, #16
 800be30:	4313      	orrs	r3, r2
 800be32:	c008      	stmia	r0!, {r3}
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	428b      	cmp	r3, r1
 800be38:	d2ec      	bcs.n	800be14 <quorem+0xa8>
 800be3a:	9b00      	ldr	r3, [sp, #0]
 800be3c:	9a02      	ldr	r2, [sp, #8]
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	18d3      	adds	r3, r2, r3
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	2a00      	cmp	r2, #0
 800be46:	d015      	beq.n	800be74 <quorem+0x108>
 800be48:	9801      	ldr	r0, [sp, #4]
 800be4a:	b007      	add	sp, #28
 800be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d106      	bne.n	800be62 <quorem+0xf6>
 800be54:	9b00      	ldr	r3, [sp, #0]
 800be56:	3b01      	subs	r3, #1
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	9b02      	ldr	r3, [sp, #8]
 800be5c:	3c04      	subs	r4, #4
 800be5e:	42a3      	cmp	r3, r4
 800be60:	d3f5      	bcc.n	800be4e <quorem+0xe2>
 800be62:	9b00      	ldr	r3, [sp, #0]
 800be64:	6133      	str	r3, [r6, #16]
 800be66:	e7c7      	b.n	800bdf8 <quorem+0x8c>
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	2a00      	cmp	r2, #0
 800be6c:	d106      	bne.n	800be7c <quorem+0x110>
 800be6e:	9a00      	ldr	r2, [sp, #0]
 800be70:	3a01      	subs	r2, #1
 800be72:	9200      	str	r2, [sp, #0]
 800be74:	9a02      	ldr	r2, [sp, #8]
 800be76:	3b04      	subs	r3, #4
 800be78:	429a      	cmp	r2, r3
 800be7a:	d3f5      	bcc.n	800be68 <quorem+0xfc>
 800be7c:	9b00      	ldr	r3, [sp, #0]
 800be7e:	6133      	str	r3, [r6, #16]
 800be80:	e7e2      	b.n	800be48 <quorem+0xdc>
	...

0800be84 <_dtoa_r>:
 800be84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be86:	b09d      	sub	sp, #116	; 0x74
 800be88:	9202      	str	r2, [sp, #8]
 800be8a:	9303      	str	r3, [sp, #12]
 800be8c:	9b02      	ldr	r3, [sp, #8]
 800be8e:	9c03      	ldr	r4, [sp, #12]
 800be90:	9308      	str	r3, [sp, #32]
 800be92:	9409      	str	r4, [sp, #36]	; 0x24
 800be94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800be96:	0007      	movs	r7, r0
 800be98:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800be9a:	2c00      	cmp	r4, #0
 800be9c:	d10e      	bne.n	800bebc <_dtoa_r+0x38>
 800be9e:	2010      	movs	r0, #16
 800bea0:	f7ff f868 	bl	800af74 <malloc>
 800bea4:	1e02      	subs	r2, r0, #0
 800bea6:	6278      	str	r0, [r7, #36]	; 0x24
 800bea8:	d104      	bne.n	800beb4 <_dtoa_r+0x30>
 800beaa:	21ea      	movs	r1, #234	; 0xea
 800beac:	4bc7      	ldr	r3, [pc, #796]	; (800c1cc <_dtoa_r+0x348>)
 800beae:	48c8      	ldr	r0, [pc, #800]	; (800c1d0 <_dtoa_r+0x34c>)
 800beb0:	f001 ff54 	bl	800dd5c <__assert_func>
 800beb4:	6044      	str	r4, [r0, #4]
 800beb6:	6084      	str	r4, [r0, #8]
 800beb8:	6004      	str	r4, [r0, #0]
 800beba:	60c4      	str	r4, [r0, #12]
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	6819      	ldr	r1, [r3, #0]
 800bec0:	2900      	cmp	r1, #0
 800bec2:	d00a      	beq.n	800beda <_dtoa_r+0x56>
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	2301      	movs	r3, #1
 800bec8:	4093      	lsls	r3, r2
 800beca:	604a      	str	r2, [r1, #4]
 800becc:	608b      	str	r3, [r1, #8]
 800bece:	0038      	movs	r0, r7
 800bed0:	f001 f89c 	bl	800d00c <_Bfree>
 800bed4:	2200      	movs	r2, #0
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	9b03      	ldr	r3, [sp, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da20      	bge.n	800bf22 <_dtoa_r+0x9e>
 800bee0:	2301      	movs	r3, #1
 800bee2:	602b      	str	r3, [r5, #0]
 800bee4:	9b03      	ldr	r3, [sp, #12]
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	085b      	lsrs	r3, r3, #1
 800beea:	9309      	str	r3, [sp, #36]	; 0x24
 800beec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800beee:	4bb9      	ldr	r3, [pc, #740]	; (800c1d4 <_dtoa_r+0x350>)
 800bef0:	4ab8      	ldr	r2, [pc, #736]	; (800c1d4 <_dtoa_r+0x350>)
 800bef2:	402b      	ands	r3, r5
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d117      	bne.n	800bf28 <_dtoa_r+0xa4>
 800bef8:	4bb7      	ldr	r3, [pc, #732]	; (800c1d8 <_dtoa_r+0x354>)
 800befa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800befc:	0328      	lsls	r0, r5, #12
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	9b02      	ldr	r3, [sp, #8]
 800bf02:	0b00      	lsrs	r0, r0, #12
 800bf04:	4318      	orrs	r0, r3
 800bf06:	d101      	bne.n	800bf0c <_dtoa_r+0x88>
 800bf08:	f000 fdbf 	bl	800ca8a <_dtoa_r+0xc06>
 800bf0c:	48b3      	ldr	r0, [pc, #716]	; (800c1dc <_dtoa_r+0x358>)
 800bf0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf10:	9006      	str	r0, [sp, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d002      	beq.n	800bf1c <_dtoa_r+0x98>
 800bf16:	4bb2      	ldr	r3, [pc, #712]	; (800c1e0 <_dtoa_r+0x35c>)
 800bf18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bf1a:	6013      	str	r3, [r2, #0]
 800bf1c:	9806      	ldr	r0, [sp, #24]
 800bf1e:	b01d      	add	sp, #116	; 0x74
 800bf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf22:	2300      	movs	r3, #0
 800bf24:	602b      	str	r3, [r5, #0]
 800bf26:	e7e1      	b.n	800beec <_dtoa_r+0x68>
 800bf28:	9b08      	ldr	r3, [sp, #32]
 800bf2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bf2c:	9312      	str	r3, [sp, #72]	; 0x48
 800bf2e:	9413      	str	r4, [sp, #76]	; 0x4c
 800bf30:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bf32:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bf34:	2200      	movs	r2, #0
 800bf36:	2300      	movs	r3, #0
 800bf38:	f7f4 fa88 	bl	800044c <__aeabi_dcmpeq>
 800bf3c:	1e04      	subs	r4, r0, #0
 800bf3e:	d009      	beq.n	800bf54 <_dtoa_r+0xd0>
 800bf40:	2301      	movs	r3, #1
 800bf42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	4ba7      	ldr	r3, [pc, #668]	; (800c1e4 <_dtoa_r+0x360>)
 800bf48:	9306      	str	r3, [sp, #24]
 800bf4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d0e5      	beq.n	800bf1c <_dtoa_r+0x98>
 800bf50:	4ba5      	ldr	r3, [pc, #660]	; (800c1e8 <_dtoa_r+0x364>)
 800bf52:	e7e1      	b.n	800bf18 <_dtoa_r+0x94>
 800bf54:	ab1a      	add	r3, sp, #104	; 0x68
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	ab1b      	add	r3, sp, #108	; 0x6c
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	0038      	movs	r0, r7
 800bf5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf62:	f001 fb47 	bl	800d5f4 <__d2b>
 800bf66:	006e      	lsls	r6, r5, #1
 800bf68:	9005      	str	r0, [sp, #20]
 800bf6a:	0d76      	lsrs	r6, r6, #21
 800bf6c:	d100      	bne.n	800bf70 <_dtoa_r+0xec>
 800bf6e:	e07c      	b.n	800c06a <_dtoa_r+0x1e6>
 800bf70:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bf72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bf74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf76:	4a9d      	ldr	r2, [pc, #628]	; (800c1ec <_dtoa_r+0x368>)
 800bf78:	031b      	lsls	r3, r3, #12
 800bf7a:	0b1b      	lsrs	r3, r3, #12
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	0011      	movs	r1, r2
 800bf80:	4b9b      	ldr	r3, [pc, #620]	; (800c1f0 <_dtoa_r+0x36c>)
 800bf82:	9418      	str	r4, [sp, #96]	; 0x60
 800bf84:	18f6      	adds	r6, r6, r3
 800bf86:	2200      	movs	r2, #0
 800bf88:	4b9a      	ldr	r3, [pc, #616]	; (800c1f4 <_dtoa_r+0x370>)
 800bf8a:	f7f6 fb55 	bl	8002638 <__aeabi_dsub>
 800bf8e:	4a9a      	ldr	r2, [pc, #616]	; (800c1f8 <_dtoa_r+0x374>)
 800bf90:	4b9a      	ldr	r3, [pc, #616]	; (800c1fc <_dtoa_r+0x378>)
 800bf92:	f7f6 f8e5 	bl	8002160 <__aeabi_dmul>
 800bf96:	4a9a      	ldr	r2, [pc, #616]	; (800c200 <_dtoa_r+0x37c>)
 800bf98:	4b9a      	ldr	r3, [pc, #616]	; (800c204 <_dtoa_r+0x380>)
 800bf9a:	f7f5 f9a3 	bl	80012e4 <__aeabi_dadd>
 800bf9e:	0004      	movs	r4, r0
 800bfa0:	0030      	movs	r0, r6
 800bfa2:	000d      	movs	r5, r1
 800bfa4:	f7f6 ff2e 	bl	8002e04 <__aeabi_i2d>
 800bfa8:	4a97      	ldr	r2, [pc, #604]	; (800c208 <_dtoa_r+0x384>)
 800bfaa:	4b98      	ldr	r3, [pc, #608]	; (800c20c <_dtoa_r+0x388>)
 800bfac:	f7f6 f8d8 	bl	8002160 <__aeabi_dmul>
 800bfb0:	0002      	movs	r2, r0
 800bfb2:	000b      	movs	r3, r1
 800bfb4:	0020      	movs	r0, r4
 800bfb6:	0029      	movs	r1, r5
 800bfb8:	f7f5 f994 	bl	80012e4 <__aeabi_dadd>
 800bfbc:	0004      	movs	r4, r0
 800bfbe:	000d      	movs	r5, r1
 800bfc0:	f7f6 feea 	bl	8002d98 <__aeabi_d2iz>
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	9002      	str	r0, [sp, #8]
 800bfc8:	2300      	movs	r3, #0
 800bfca:	0020      	movs	r0, r4
 800bfcc:	0029      	movs	r1, r5
 800bfce:	f7f4 fa43 	bl	8000458 <__aeabi_dcmplt>
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d00b      	beq.n	800bfee <_dtoa_r+0x16a>
 800bfd6:	9802      	ldr	r0, [sp, #8]
 800bfd8:	f7f6 ff14 	bl	8002e04 <__aeabi_i2d>
 800bfdc:	002b      	movs	r3, r5
 800bfde:	0022      	movs	r2, r4
 800bfe0:	f7f4 fa34 	bl	800044c <__aeabi_dcmpeq>
 800bfe4:	4243      	negs	r3, r0
 800bfe6:	4158      	adcs	r0, r3
 800bfe8:	9b02      	ldr	r3, [sp, #8]
 800bfea:	1a1b      	subs	r3, r3, r0
 800bfec:	9302      	str	r3, [sp, #8]
 800bfee:	2301      	movs	r3, #1
 800bff0:	9316      	str	r3, [sp, #88]	; 0x58
 800bff2:	9b02      	ldr	r3, [sp, #8]
 800bff4:	2b16      	cmp	r3, #22
 800bff6:	d80f      	bhi.n	800c018 <_dtoa_r+0x194>
 800bff8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bffa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bffc:	00da      	lsls	r2, r3, #3
 800bffe:	4b84      	ldr	r3, [pc, #528]	; (800c210 <_dtoa_r+0x38c>)
 800c000:	189b      	adds	r3, r3, r2
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	f7f4 fa27 	bl	8000458 <__aeabi_dcmplt>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d049      	beq.n	800c0a2 <_dtoa_r+0x21e>
 800c00e:	9b02      	ldr	r3, [sp, #8]
 800c010:	3b01      	subs	r3, #1
 800c012:	9302      	str	r3, [sp, #8]
 800c014:	2300      	movs	r3, #0
 800c016:	9316      	str	r3, [sp, #88]	; 0x58
 800c018:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c01a:	1b9e      	subs	r6, r3, r6
 800c01c:	2300      	movs	r3, #0
 800c01e:	930a      	str	r3, [sp, #40]	; 0x28
 800c020:	0033      	movs	r3, r6
 800c022:	3b01      	subs	r3, #1
 800c024:	930d      	str	r3, [sp, #52]	; 0x34
 800c026:	d504      	bpl.n	800c032 <_dtoa_r+0x1ae>
 800c028:	2301      	movs	r3, #1
 800c02a:	1b9b      	subs	r3, r3, r6
 800c02c:	930a      	str	r3, [sp, #40]	; 0x28
 800c02e:	2300      	movs	r3, #0
 800c030:	930d      	str	r3, [sp, #52]	; 0x34
 800c032:	9b02      	ldr	r3, [sp, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	db36      	blt.n	800c0a6 <_dtoa_r+0x222>
 800c038:	9a02      	ldr	r2, [sp, #8]
 800c03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c03c:	4694      	mov	ip, r2
 800c03e:	4463      	add	r3, ip
 800c040:	930d      	str	r3, [sp, #52]	; 0x34
 800c042:	2300      	movs	r3, #0
 800c044:	9215      	str	r2, [sp, #84]	; 0x54
 800c046:	930e      	str	r3, [sp, #56]	; 0x38
 800c048:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c04a:	2401      	movs	r4, #1
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	d864      	bhi.n	800c11a <_dtoa_r+0x296>
 800c050:	2b05      	cmp	r3, #5
 800c052:	dd02      	ble.n	800c05a <_dtoa_r+0x1d6>
 800c054:	2400      	movs	r4, #0
 800c056:	3b04      	subs	r3, #4
 800c058:	9322      	str	r3, [sp, #136]	; 0x88
 800c05a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c05c:	1e98      	subs	r0, r3, #2
 800c05e:	2803      	cmp	r0, #3
 800c060:	d864      	bhi.n	800c12c <_dtoa_r+0x2a8>
 800c062:	f7f4 f859 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c066:	3829      	.short	0x3829
 800c068:	5836      	.short	0x5836
 800c06a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c06c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c06e:	189e      	adds	r6, r3, r2
 800c070:	4b68      	ldr	r3, [pc, #416]	; (800c214 <_dtoa_r+0x390>)
 800c072:	18f2      	adds	r2, r6, r3
 800c074:	2a20      	cmp	r2, #32
 800c076:	dd0f      	ble.n	800c098 <_dtoa_r+0x214>
 800c078:	2340      	movs	r3, #64	; 0x40
 800c07a:	1a9b      	subs	r3, r3, r2
 800c07c:	409d      	lsls	r5, r3
 800c07e:	4b66      	ldr	r3, [pc, #408]	; (800c218 <_dtoa_r+0x394>)
 800c080:	9802      	ldr	r0, [sp, #8]
 800c082:	18f3      	adds	r3, r6, r3
 800c084:	40d8      	lsrs	r0, r3
 800c086:	4328      	orrs	r0, r5
 800c088:	f7f6 feec 	bl	8002e64 <__aeabi_ui2d>
 800c08c:	2301      	movs	r3, #1
 800c08e:	4c63      	ldr	r4, [pc, #396]	; (800c21c <_dtoa_r+0x398>)
 800c090:	3e01      	subs	r6, #1
 800c092:	1909      	adds	r1, r1, r4
 800c094:	9318      	str	r3, [sp, #96]	; 0x60
 800c096:	e776      	b.n	800bf86 <_dtoa_r+0x102>
 800c098:	2320      	movs	r3, #32
 800c09a:	9802      	ldr	r0, [sp, #8]
 800c09c:	1a9b      	subs	r3, r3, r2
 800c09e:	4098      	lsls	r0, r3
 800c0a0:	e7f2      	b.n	800c088 <_dtoa_r+0x204>
 800c0a2:	9016      	str	r0, [sp, #88]	; 0x58
 800c0a4:	e7b8      	b.n	800c018 <_dtoa_r+0x194>
 800c0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a8:	9a02      	ldr	r2, [sp, #8]
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	930a      	str	r3, [sp, #40]	; 0x28
 800c0ae:	4253      	negs	r3, r2
 800c0b0:	930e      	str	r3, [sp, #56]	; 0x38
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	9315      	str	r3, [sp, #84]	; 0x54
 800c0b6:	e7c7      	b.n	800c048 <_dtoa_r+0x1c4>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c0be:	930c      	str	r3, [sp, #48]	; 0x30
 800c0c0:	9307      	str	r3, [sp, #28]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	dc13      	bgt.n	800c0ee <_dtoa_r+0x26a>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	001a      	movs	r2, r3
 800c0ca:	930c      	str	r3, [sp, #48]	; 0x30
 800c0cc:	9307      	str	r3, [sp, #28]
 800c0ce:	9223      	str	r2, [sp, #140]	; 0x8c
 800c0d0:	e00d      	b.n	800c0ee <_dtoa_r+0x26a>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e7f1      	b.n	800c0ba <_dtoa_r+0x236>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c0da:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0dc:	4694      	mov	ip, r2
 800c0de:	9b02      	ldr	r3, [sp, #8]
 800c0e0:	4463      	add	r3, ip
 800c0e2:	930c      	str	r3, [sp, #48]	; 0x30
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	9307      	str	r3, [sp, #28]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dc00      	bgt.n	800c0ee <_dtoa_r+0x26a>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0f2:	6042      	str	r2, [r0, #4]
 800c0f4:	3204      	adds	r2, #4
 800c0f6:	0015      	movs	r5, r2
 800c0f8:	3514      	adds	r5, #20
 800c0fa:	6841      	ldr	r1, [r0, #4]
 800c0fc:	429d      	cmp	r5, r3
 800c0fe:	d919      	bls.n	800c134 <_dtoa_r+0x2b0>
 800c100:	0038      	movs	r0, r7
 800c102:	f000 ff3f 	bl	800cf84 <_Balloc>
 800c106:	9006      	str	r0, [sp, #24]
 800c108:	2800      	cmp	r0, #0
 800c10a:	d117      	bne.n	800c13c <_dtoa_r+0x2b8>
 800c10c:	21d5      	movs	r1, #213	; 0xd5
 800c10e:	0002      	movs	r2, r0
 800c110:	4b43      	ldr	r3, [pc, #268]	; (800c220 <_dtoa_r+0x39c>)
 800c112:	0049      	lsls	r1, r1, #1
 800c114:	e6cb      	b.n	800beae <_dtoa_r+0x2a>
 800c116:	2301      	movs	r3, #1
 800c118:	e7de      	b.n	800c0d8 <_dtoa_r+0x254>
 800c11a:	2300      	movs	r3, #0
 800c11c:	940f      	str	r4, [sp, #60]	; 0x3c
 800c11e:	9322      	str	r3, [sp, #136]	; 0x88
 800c120:	3b01      	subs	r3, #1
 800c122:	930c      	str	r3, [sp, #48]	; 0x30
 800c124:	9307      	str	r3, [sp, #28]
 800c126:	2200      	movs	r2, #0
 800c128:	3313      	adds	r3, #19
 800c12a:	e7d0      	b.n	800c0ce <_dtoa_r+0x24a>
 800c12c:	2301      	movs	r3, #1
 800c12e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c130:	3b02      	subs	r3, #2
 800c132:	e7f6      	b.n	800c122 <_dtoa_r+0x29e>
 800c134:	3101      	adds	r1, #1
 800c136:	6041      	str	r1, [r0, #4]
 800c138:	0052      	lsls	r2, r2, #1
 800c13a:	e7dc      	b.n	800c0f6 <_dtoa_r+0x272>
 800c13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13e:	9a06      	ldr	r2, [sp, #24]
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	9b07      	ldr	r3, [sp, #28]
 800c144:	2b0e      	cmp	r3, #14
 800c146:	d900      	bls.n	800c14a <_dtoa_r+0x2c6>
 800c148:	e0eb      	b.n	800c322 <_dtoa_r+0x49e>
 800c14a:	2c00      	cmp	r4, #0
 800c14c:	d100      	bne.n	800c150 <_dtoa_r+0x2cc>
 800c14e:	e0e8      	b.n	800c322 <_dtoa_r+0x49e>
 800c150:	9b02      	ldr	r3, [sp, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	dd68      	ble.n	800c228 <_dtoa_r+0x3a4>
 800c156:	001a      	movs	r2, r3
 800c158:	210f      	movs	r1, #15
 800c15a:	4b2d      	ldr	r3, [pc, #180]	; (800c210 <_dtoa_r+0x38c>)
 800c15c:	400a      	ands	r2, r1
 800c15e:	00d2      	lsls	r2, r2, #3
 800c160:	189b      	adds	r3, r3, r2
 800c162:	681d      	ldr	r5, [r3, #0]
 800c164:	685e      	ldr	r6, [r3, #4]
 800c166:	9b02      	ldr	r3, [sp, #8]
 800c168:	111c      	asrs	r4, r3, #4
 800c16a:	2302      	movs	r3, #2
 800c16c:	9310      	str	r3, [sp, #64]	; 0x40
 800c16e:	9b02      	ldr	r3, [sp, #8]
 800c170:	05db      	lsls	r3, r3, #23
 800c172:	d50b      	bpl.n	800c18c <_dtoa_r+0x308>
 800c174:	4b2b      	ldr	r3, [pc, #172]	; (800c224 <_dtoa_r+0x3a0>)
 800c176:	400c      	ands	r4, r1
 800c178:	6a1a      	ldr	r2, [r3, #32]
 800c17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c17e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c180:	f7f5 fbec 	bl	800195c <__aeabi_ddiv>
 800c184:	2303      	movs	r3, #3
 800c186:	9008      	str	r0, [sp, #32]
 800c188:	9109      	str	r1, [sp, #36]	; 0x24
 800c18a:	9310      	str	r3, [sp, #64]	; 0x40
 800c18c:	4b25      	ldr	r3, [pc, #148]	; (800c224 <_dtoa_r+0x3a0>)
 800c18e:	9314      	str	r3, [sp, #80]	; 0x50
 800c190:	2c00      	cmp	r4, #0
 800c192:	d108      	bne.n	800c1a6 <_dtoa_r+0x322>
 800c194:	9808      	ldr	r0, [sp, #32]
 800c196:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c198:	002a      	movs	r2, r5
 800c19a:	0033      	movs	r3, r6
 800c19c:	f7f5 fbde 	bl	800195c <__aeabi_ddiv>
 800c1a0:	9008      	str	r0, [sp, #32]
 800c1a2:	9109      	str	r1, [sp, #36]	; 0x24
 800c1a4:	e05c      	b.n	800c260 <_dtoa_r+0x3dc>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	421c      	tst	r4, r3
 800c1aa:	d00b      	beq.n	800c1c4 <_dtoa_r+0x340>
 800c1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1ae:	0028      	movs	r0, r5
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	9310      	str	r3, [sp, #64]	; 0x40
 800c1b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1b6:	0031      	movs	r1, r6
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	f7f5 ffd0 	bl	8002160 <__aeabi_dmul>
 800c1c0:	0005      	movs	r5, r0
 800c1c2:	000e      	movs	r6, r1
 800c1c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1c6:	1064      	asrs	r4, r4, #1
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	e7e0      	b.n	800c18e <_dtoa_r+0x30a>
 800c1cc:	0800e30a 	.word	0x0800e30a
 800c1d0:	0800e321 	.word	0x0800e321
 800c1d4:	7ff00000 	.word	0x7ff00000
 800c1d8:	0000270f 	.word	0x0000270f
 800c1dc:	0800e306 	.word	0x0800e306
 800c1e0:	0800e309 	.word	0x0800e309
 800c1e4:	0800e1d8 	.word	0x0800e1d8
 800c1e8:	0800e1d9 	.word	0x0800e1d9
 800c1ec:	3ff00000 	.word	0x3ff00000
 800c1f0:	fffffc01 	.word	0xfffffc01
 800c1f4:	3ff80000 	.word	0x3ff80000
 800c1f8:	636f4361 	.word	0x636f4361
 800c1fc:	3fd287a7 	.word	0x3fd287a7
 800c200:	8b60c8b3 	.word	0x8b60c8b3
 800c204:	3fc68a28 	.word	0x3fc68a28
 800c208:	509f79fb 	.word	0x509f79fb
 800c20c:	3fd34413 	.word	0x3fd34413
 800c210:	0800e478 	.word	0x0800e478
 800c214:	00000432 	.word	0x00000432
 800c218:	00000412 	.word	0x00000412
 800c21c:	fe100000 	.word	0xfe100000
 800c220:	0800e37c 	.word	0x0800e37c
 800c224:	0800e450 	.word	0x0800e450
 800c228:	2302      	movs	r3, #2
 800c22a:	9310      	str	r3, [sp, #64]	; 0x40
 800c22c:	9b02      	ldr	r3, [sp, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d016      	beq.n	800c260 <_dtoa_r+0x3dc>
 800c232:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c234:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c236:	425c      	negs	r4, r3
 800c238:	230f      	movs	r3, #15
 800c23a:	4ab6      	ldr	r2, [pc, #728]	; (800c514 <_dtoa_r+0x690>)
 800c23c:	4023      	ands	r3, r4
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	18d3      	adds	r3, r2, r3
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	f7f5 ff8b 	bl	8002160 <__aeabi_dmul>
 800c24a:	2601      	movs	r6, #1
 800c24c:	2300      	movs	r3, #0
 800c24e:	9008      	str	r0, [sp, #32]
 800c250:	9109      	str	r1, [sp, #36]	; 0x24
 800c252:	4db1      	ldr	r5, [pc, #708]	; (800c518 <_dtoa_r+0x694>)
 800c254:	1124      	asrs	r4, r4, #4
 800c256:	2c00      	cmp	r4, #0
 800c258:	d000      	beq.n	800c25c <_dtoa_r+0x3d8>
 800c25a:	e094      	b.n	800c386 <_dtoa_r+0x502>
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d19f      	bne.n	800c1a0 <_dtoa_r+0x31c>
 800c260:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c262:	2b00      	cmp	r3, #0
 800c264:	d100      	bne.n	800c268 <_dtoa_r+0x3e4>
 800c266:	e09b      	b.n	800c3a0 <_dtoa_r+0x51c>
 800c268:	9c08      	ldr	r4, [sp, #32]
 800c26a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c26c:	2200      	movs	r2, #0
 800c26e:	0020      	movs	r0, r4
 800c270:	0029      	movs	r1, r5
 800c272:	4baa      	ldr	r3, [pc, #680]	; (800c51c <_dtoa_r+0x698>)
 800c274:	f7f4 f8f0 	bl	8000458 <__aeabi_dcmplt>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d100      	bne.n	800c27e <_dtoa_r+0x3fa>
 800c27c:	e090      	b.n	800c3a0 <_dtoa_r+0x51c>
 800c27e:	9b07      	ldr	r3, [sp, #28]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d100      	bne.n	800c286 <_dtoa_r+0x402>
 800c284:	e08c      	b.n	800c3a0 <_dtoa_r+0x51c>
 800c286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c288:	2b00      	cmp	r3, #0
 800c28a:	dd46      	ble.n	800c31a <_dtoa_r+0x496>
 800c28c:	9b02      	ldr	r3, [sp, #8]
 800c28e:	2200      	movs	r2, #0
 800c290:	0020      	movs	r0, r4
 800c292:	0029      	movs	r1, r5
 800c294:	1e5e      	subs	r6, r3, #1
 800c296:	4ba2      	ldr	r3, [pc, #648]	; (800c520 <_dtoa_r+0x69c>)
 800c298:	f7f5 ff62 	bl	8002160 <__aeabi_dmul>
 800c29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c29e:	9008      	str	r0, [sp, #32]
 800c2a0:	9109      	str	r1, [sp, #36]	; 0x24
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	9310      	str	r3, [sp, #64]	; 0x40
 800c2a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c2aa:	9c08      	ldr	r4, [sp, #32]
 800c2ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c2ae:	9314      	str	r3, [sp, #80]	; 0x50
 800c2b0:	f7f6 fda8 	bl	8002e04 <__aeabi_i2d>
 800c2b4:	0022      	movs	r2, r4
 800c2b6:	002b      	movs	r3, r5
 800c2b8:	f7f5 ff52 	bl	8002160 <__aeabi_dmul>
 800c2bc:	2200      	movs	r2, #0
 800c2be:	4b99      	ldr	r3, [pc, #612]	; (800c524 <_dtoa_r+0x6a0>)
 800c2c0:	f7f5 f810 	bl	80012e4 <__aeabi_dadd>
 800c2c4:	9010      	str	r0, [sp, #64]	; 0x40
 800c2c6:	9111      	str	r1, [sp, #68]	; 0x44
 800c2c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2cc:	9208      	str	r2, [sp, #32]
 800c2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d0:	4a95      	ldr	r2, [pc, #596]	; (800c528 <_dtoa_r+0x6a4>)
 800c2d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2d4:	4694      	mov	ip, r2
 800c2d6:	4463      	add	r3, ip
 800c2d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2da:	9309      	str	r3, [sp, #36]	; 0x24
 800c2dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d161      	bne.n	800c3a6 <_dtoa_r+0x522>
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	0020      	movs	r0, r4
 800c2e6:	0029      	movs	r1, r5
 800c2e8:	4b90      	ldr	r3, [pc, #576]	; (800c52c <_dtoa_r+0x6a8>)
 800c2ea:	f7f6 f9a5 	bl	8002638 <__aeabi_dsub>
 800c2ee:	9a08      	ldr	r2, [sp, #32]
 800c2f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2f2:	0004      	movs	r4, r0
 800c2f4:	000d      	movs	r5, r1
 800c2f6:	f7f4 f8c3 	bl	8000480 <__aeabi_dcmpgt>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d000      	beq.n	800c300 <_dtoa_r+0x47c>
 800c2fe:	e2af      	b.n	800c860 <_dtoa_r+0x9dc>
 800c300:	488b      	ldr	r0, [pc, #556]	; (800c530 <_dtoa_r+0x6ac>)
 800c302:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c304:	4684      	mov	ip, r0
 800c306:	4461      	add	r1, ip
 800c308:	000b      	movs	r3, r1
 800c30a:	0020      	movs	r0, r4
 800c30c:	0029      	movs	r1, r5
 800c30e:	9a08      	ldr	r2, [sp, #32]
 800c310:	f7f4 f8a2 	bl	8000458 <__aeabi_dcmplt>
 800c314:	2800      	cmp	r0, #0
 800c316:	d000      	beq.n	800c31a <_dtoa_r+0x496>
 800c318:	e29f      	b.n	800c85a <_dtoa_r+0x9d6>
 800c31a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c31c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c31e:	9308      	str	r3, [sp, #32]
 800c320:	9409      	str	r4, [sp, #36]	; 0x24
 800c322:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c324:	2b00      	cmp	r3, #0
 800c326:	da00      	bge.n	800c32a <_dtoa_r+0x4a6>
 800c328:	e172      	b.n	800c610 <_dtoa_r+0x78c>
 800c32a:	9a02      	ldr	r2, [sp, #8]
 800c32c:	2a0e      	cmp	r2, #14
 800c32e:	dd00      	ble.n	800c332 <_dtoa_r+0x4ae>
 800c330:	e16e      	b.n	800c610 <_dtoa_r+0x78c>
 800c332:	4b78      	ldr	r3, [pc, #480]	; (800c514 <_dtoa_r+0x690>)
 800c334:	00d2      	lsls	r2, r2, #3
 800c336:	189b      	adds	r3, r3, r2
 800c338:	685c      	ldr	r4, [r3, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	930a      	str	r3, [sp, #40]	; 0x28
 800c33e:	940b      	str	r4, [sp, #44]	; 0x2c
 800c340:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c342:	2b00      	cmp	r3, #0
 800c344:	db00      	blt.n	800c348 <_dtoa_r+0x4c4>
 800c346:	e0f7      	b.n	800c538 <_dtoa_r+0x6b4>
 800c348:	9b07      	ldr	r3, [sp, #28]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	dd00      	ble.n	800c350 <_dtoa_r+0x4cc>
 800c34e:	e0f3      	b.n	800c538 <_dtoa_r+0x6b4>
 800c350:	d000      	beq.n	800c354 <_dtoa_r+0x4d0>
 800c352:	e282      	b.n	800c85a <_dtoa_r+0x9d6>
 800c354:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c356:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c358:	2200      	movs	r2, #0
 800c35a:	4b74      	ldr	r3, [pc, #464]	; (800c52c <_dtoa_r+0x6a8>)
 800c35c:	f7f5 ff00 	bl	8002160 <__aeabi_dmul>
 800c360:	9a08      	ldr	r2, [sp, #32]
 800c362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c364:	f7f4 f896 	bl	8000494 <__aeabi_dcmpge>
 800c368:	9e07      	ldr	r6, [sp, #28]
 800c36a:	0035      	movs	r5, r6
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d000      	beq.n	800c372 <_dtoa_r+0x4ee>
 800c370:	e259      	b.n	800c826 <_dtoa_r+0x9a2>
 800c372:	9b06      	ldr	r3, [sp, #24]
 800c374:	9a06      	ldr	r2, [sp, #24]
 800c376:	3301      	adds	r3, #1
 800c378:	9308      	str	r3, [sp, #32]
 800c37a:	2331      	movs	r3, #49	; 0x31
 800c37c:	7013      	strb	r3, [r2, #0]
 800c37e:	9b02      	ldr	r3, [sp, #8]
 800c380:	3301      	adds	r3, #1
 800c382:	9302      	str	r3, [sp, #8]
 800c384:	e254      	b.n	800c830 <_dtoa_r+0x9ac>
 800c386:	4234      	tst	r4, r6
 800c388:	d007      	beq.n	800c39a <_dtoa_r+0x516>
 800c38a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c38c:	3301      	adds	r3, #1
 800c38e:	9310      	str	r3, [sp, #64]	; 0x40
 800c390:	682a      	ldr	r2, [r5, #0]
 800c392:	686b      	ldr	r3, [r5, #4]
 800c394:	f7f5 fee4 	bl	8002160 <__aeabi_dmul>
 800c398:	0033      	movs	r3, r6
 800c39a:	1064      	asrs	r4, r4, #1
 800c39c:	3508      	adds	r5, #8
 800c39e:	e75a      	b.n	800c256 <_dtoa_r+0x3d2>
 800c3a0:	9e02      	ldr	r6, [sp, #8]
 800c3a2:	9b07      	ldr	r3, [sp, #28]
 800c3a4:	e780      	b.n	800c2a8 <_dtoa_r+0x424>
 800c3a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c3aa:	1e5a      	subs	r2, r3, #1
 800c3ac:	4b59      	ldr	r3, [pc, #356]	; (800c514 <_dtoa_r+0x690>)
 800c3ae:	00d2      	lsls	r2, r2, #3
 800c3b0:	189b      	adds	r3, r3, r2
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	2900      	cmp	r1, #0
 800c3b8:	d051      	beq.n	800c45e <_dtoa_r+0x5da>
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	495d      	ldr	r1, [pc, #372]	; (800c534 <_dtoa_r+0x6b0>)
 800c3be:	f7f5 facd 	bl	800195c <__aeabi_ddiv>
 800c3c2:	9a08      	ldr	r2, [sp, #32]
 800c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c6:	f7f6 f937 	bl	8002638 <__aeabi_dsub>
 800c3ca:	9a06      	ldr	r2, [sp, #24]
 800c3cc:	9b06      	ldr	r3, [sp, #24]
 800c3ce:	4694      	mov	ip, r2
 800c3d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3d4:	9010      	str	r0, [sp, #64]	; 0x40
 800c3d6:	9111      	str	r1, [sp, #68]	; 0x44
 800c3d8:	4463      	add	r3, ip
 800c3da:	9319      	str	r3, [sp, #100]	; 0x64
 800c3dc:	0029      	movs	r1, r5
 800c3de:	0020      	movs	r0, r4
 800c3e0:	f7f6 fcda 	bl	8002d98 <__aeabi_d2iz>
 800c3e4:	9014      	str	r0, [sp, #80]	; 0x50
 800c3e6:	f7f6 fd0d 	bl	8002e04 <__aeabi_i2d>
 800c3ea:	0002      	movs	r2, r0
 800c3ec:	000b      	movs	r3, r1
 800c3ee:	0020      	movs	r0, r4
 800c3f0:	0029      	movs	r1, r5
 800c3f2:	f7f6 f921 	bl	8002638 <__aeabi_dsub>
 800c3f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	9308      	str	r3, [sp, #32]
 800c3fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c400:	0004      	movs	r4, r0
 800c402:	3330      	adds	r3, #48	; 0x30
 800c404:	7013      	strb	r3, [r2, #0]
 800c406:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c40a:	000d      	movs	r5, r1
 800c40c:	f7f4 f824 	bl	8000458 <__aeabi_dcmplt>
 800c410:	2800      	cmp	r0, #0
 800c412:	d175      	bne.n	800c500 <_dtoa_r+0x67c>
 800c414:	0022      	movs	r2, r4
 800c416:	002b      	movs	r3, r5
 800c418:	2000      	movs	r0, #0
 800c41a:	4940      	ldr	r1, [pc, #256]	; (800c51c <_dtoa_r+0x698>)
 800c41c:	f7f6 f90c 	bl	8002638 <__aeabi_dsub>
 800c420:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c424:	f7f4 f818 	bl	8000458 <__aeabi_dcmplt>
 800c428:	2800      	cmp	r0, #0
 800c42a:	d000      	beq.n	800c42e <_dtoa_r+0x5aa>
 800c42c:	e0d2      	b.n	800c5d4 <_dtoa_r+0x750>
 800c42e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c430:	9a08      	ldr	r2, [sp, #32]
 800c432:	4293      	cmp	r3, r2
 800c434:	d100      	bne.n	800c438 <_dtoa_r+0x5b4>
 800c436:	e770      	b.n	800c31a <_dtoa_r+0x496>
 800c438:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c43a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c43c:	2200      	movs	r2, #0
 800c43e:	4b38      	ldr	r3, [pc, #224]	; (800c520 <_dtoa_r+0x69c>)
 800c440:	f7f5 fe8e 	bl	8002160 <__aeabi_dmul>
 800c444:	4b36      	ldr	r3, [pc, #216]	; (800c520 <_dtoa_r+0x69c>)
 800c446:	9010      	str	r0, [sp, #64]	; 0x40
 800c448:	9111      	str	r1, [sp, #68]	; 0x44
 800c44a:	2200      	movs	r2, #0
 800c44c:	0020      	movs	r0, r4
 800c44e:	0029      	movs	r1, r5
 800c450:	f7f5 fe86 	bl	8002160 <__aeabi_dmul>
 800c454:	9b08      	ldr	r3, [sp, #32]
 800c456:	0004      	movs	r4, r0
 800c458:	000d      	movs	r5, r1
 800c45a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c45c:	e7be      	b.n	800c3dc <_dtoa_r+0x558>
 800c45e:	9808      	ldr	r0, [sp, #32]
 800c460:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c462:	f7f5 fe7d 	bl	8002160 <__aeabi_dmul>
 800c466:	9a06      	ldr	r2, [sp, #24]
 800c468:	9b06      	ldr	r3, [sp, #24]
 800c46a:	4694      	mov	ip, r2
 800c46c:	9308      	str	r3, [sp, #32]
 800c46e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c470:	9010      	str	r0, [sp, #64]	; 0x40
 800c472:	9111      	str	r1, [sp, #68]	; 0x44
 800c474:	4463      	add	r3, ip
 800c476:	9319      	str	r3, [sp, #100]	; 0x64
 800c478:	0029      	movs	r1, r5
 800c47a:	0020      	movs	r0, r4
 800c47c:	f7f6 fc8c 	bl	8002d98 <__aeabi_d2iz>
 800c480:	9017      	str	r0, [sp, #92]	; 0x5c
 800c482:	f7f6 fcbf 	bl	8002e04 <__aeabi_i2d>
 800c486:	0002      	movs	r2, r0
 800c488:	000b      	movs	r3, r1
 800c48a:	0020      	movs	r0, r4
 800c48c:	0029      	movs	r1, r5
 800c48e:	f7f6 f8d3 	bl	8002638 <__aeabi_dsub>
 800c492:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c494:	9a08      	ldr	r2, [sp, #32]
 800c496:	3330      	adds	r3, #48	; 0x30
 800c498:	7013      	strb	r3, [r2, #0]
 800c49a:	0013      	movs	r3, r2
 800c49c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c49e:	3301      	adds	r3, #1
 800c4a0:	0004      	movs	r4, r0
 800c4a2:	000d      	movs	r5, r1
 800c4a4:	9308      	str	r3, [sp, #32]
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d12c      	bne.n	800c504 <_dtoa_r+0x680>
 800c4aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c4ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c4ae:	9a06      	ldr	r2, [sp, #24]
 800c4b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4b2:	4694      	mov	ip, r2
 800c4b4:	4463      	add	r3, ip
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	9308      	str	r3, [sp, #32]
 800c4ba:	4b1e      	ldr	r3, [pc, #120]	; (800c534 <_dtoa_r+0x6b0>)
 800c4bc:	f7f4 ff12 	bl	80012e4 <__aeabi_dadd>
 800c4c0:	0002      	movs	r2, r0
 800c4c2:	000b      	movs	r3, r1
 800c4c4:	0020      	movs	r0, r4
 800c4c6:	0029      	movs	r1, r5
 800c4c8:	f7f3 ffda 	bl	8000480 <__aeabi_dcmpgt>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d000      	beq.n	800c4d2 <_dtoa_r+0x64e>
 800c4d0:	e080      	b.n	800c5d4 <_dtoa_r+0x750>
 800c4d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	4916      	ldr	r1, [pc, #88]	; (800c534 <_dtoa_r+0x6b0>)
 800c4da:	f7f6 f8ad 	bl	8002638 <__aeabi_dsub>
 800c4de:	0002      	movs	r2, r0
 800c4e0:	000b      	movs	r3, r1
 800c4e2:	0020      	movs	r0, r4
 800c4e4:	0029      	movs	r1, r5
 800c4e6:	f7f3 ffb7 	bl	8000458 <__aeabi_dcmplt>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d100      	bne.n	800c4f0 <_dtoa_r+0x66c>
 800c4ee:	e714      	b.n	800c31a <_dtoa_r+0x496>
 800c4f0:	9b08      	ldr	r3, [sp, #32]
 800c4f2:	001a      	movs	r2, r3
 800c4f4:	3a01      	subs	r2, #1
 800c4f6:	9208      	str	r2, [sp, #32]
 800c4f8:	7812      	ldrb	r2, [r2, #0]
 800c4fa:	2a30      	cmp	r2, #48	; 0x30
 800c4fc:	d0f8      	beq.n	800c4f0 <_dtoa_r+0x66c>
 800c4fe:	9308      	str	r3, [sp, #32]
 800c500:	9602      	str	r6, [sp, #8]
 800c502:	e055      	b.n	800c5b0 <_dtoa_r+0x72c>
 800c504:	2200      	movs	r2, #0
 800c506:	4b06      	ldr	r3, [pc, #24]	; (800c520 <_dtoa_r+0x69c>)
 800c508:	f7f5 fe2a 	bl	8002160 <__aeabi_dmul>
 800c50c:	0004      	movs	r4, r0
 800c50e:	000d      	movs	r5, r1
 800c510:	e7b2      	b.n	800c478 <_dtoa_r+0x5f4>
 800c512:	46c0      	nop			; (mov r8, r8)
 800c514:	0800e478 	.word	0x0800e478
 800c518:	0800e450 	.word	0x0800e450
 800c51c:	3ff00000 	.word	0x3ff00000
 800c520:	40240000 	.word	0x40240000
 800c524:	401c0000 	.word	0x401c0000
 800c528:	fcc00000 	.word	0xfcc00000
 800c52c:	40140000 	.word	0x40140000
 800c530:	7cc00000 	.word	0x7cc00000
 800c534:	3fe00000 	.word	0x3fe00000
 800c538:	9b07      	ldr	r3, [sp, #28]
 800c53a:	9e06      	ldr	r6, [sp, #24]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	199b      	adds	r3, r3, r6
 800c540:	930c      	str	r3, [sp, #48]	; 0x30
 800c542:	9c08      	ldr	r4, [sp, #32]
 800c544:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c54a:	0020      	movs	r0, r4
 800c54c:	0029      	movs	r1, r5
 800c54e:	f7f5 fa05 	bl	800195c <__aeabi_ddiv>
 800c552:	f7f6 fc21 	bl	8002d98 <__aeabi_d2iz>
 800c556:	9007      	str	r0, [sp, #28]
 800c558:	f7f6 fc54 	bl	8002e04 <__aeabi_i2d>
 800c55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c560:	f7f5 fdfe 	bl	8002160 <__aeabi_dmul>
 800c564:	0002      	movs	r2, r0
 800c566:	000b      	movs	r3, r1
 800c568:	0020      	movs	r0, r4
 800c56a:	0029      	movs	r1, r5
 800c56c:	f7f6 f864 	bl	8002638 <__aeabi_dsub>
 800c570:	0033      	movs	r3, r6
 800c572:	9a07      	ldr	r2, [sp, #28]
 800c574:	3601      	adds	r6, #1
 800c576:	3230      	adds	r2, #48	; 0x30
 800c578:	701a      	strb	r2, [r3, #0]
 800c57a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c57c:	9608      	str	r6, [sp, #32]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d139      	bne.n	800c5f6 <_dtoa_r+0x772>
 800c582:	0002      	movs	r2, r0
 800c584:	000b      	movs	r3, r1
 800c586:	f7f4 fead 	bl	80012e4 <__aeabi_dadd>
 800c58a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c58e:	0004      	movs	r4, r0
 800c590:	000d      	movs	r5, r1
 800c592:	f7f3 ff75 	bl	8000480 <__aeabi_dcmpgt>
 800c596:	2800      	cmp	r0, #0
 800c598:	d11b      	bne.n	800c5d2 <_dtoa_r+0x74e>
 800c59a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c59c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c59e:	0020      	movs	r0, r4
 800c5a0:	0029      	movs	r1, r5
 800c5a2:	f7f3 ff53 	bl	800044c <__aeabi_dcmpeq>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d002      	beq.n	800c5b0 <_dtoa_r+0x72c>
 800c5aa:	9b07      	ldr	r3, [sp, #28]
 800c5ac:	07db      	lsls	r3, r3, #31
 800c5ae:	d410      	bmi.n	800c5d2 <_dtoa_r+0x74e>
 800c5b0:	0038      	movs	r0, r7
 800c5b2:	9905      	ldr	r1, [sp, #20]
 800c5b4:	f000 fd2a 	bl	800d00c <_Bfree>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	9a08      	ldr	r2, [sp, #32]
 800c5bc:	9802      	ldr	r0, [sp, #8]
 800c5be:	7013      	strb	r3, [r2, #0]
 800c5c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	6018      	str	r0, [r3, #0]
 800c5c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d100      	bne.n	800c5ce <_dtoa_r+0x74a>
 800c5cc:	e4a6      	b.n	800bf1c <_dtoa_r+0x98>
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	e4a4      	b.n	800bf1c <_dtoa_r+0x98>
 800c5d2:	9e02      	ldr	r6, [sp, #8]
 800c5d4:	9b08      	ldr	r3, [sp, #32]
 800c5d6:	9308      	str	r3, [sp, #32]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	781a      	ldrb	r2, [r3, #0]
 800c5dc:	2a39      	cmp	r2, #57	; 0x39
 800c5de:	d106      	bne.n	800c5ee <_dtoa_r+0x76a>
 800c5e0:	9a06      	ldr	r2, [sp, #24]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d1f7      	bne.n	800c5d6 <_dtoa_r+0x752>
 800c5e6:	2230      	movs	r2, #48	; 0x30
 800c5e8:	9906      	ldr	r1, [sp, #24]
 800c5ea:	3601      	adds	r6, #1
 800c5ec:	700a      	strb	r2, [r1, #0]
 800c5ee:	781a      	ldrb	r2, [r3, #0]
 800c5f0:	3201      	adds	r2, #1
 800c5f2:	701a      	strb	r2, [r3, #0]
 800c5f4:	e784      	b.n	800c500 <_dtoa_r+0x67c>
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	4baa      	ldr	r3, [pc, #680]	; (800c8a4 <_dtoa_r+0xa20>)
 800c5fa:	f7f5 fdb1 	bl	8002160 <__aeabi_dmul>
 800c5fe:	2200      	movs	r2, #0
 800c600:	2300      	movs	r3, #0
 800c602:	0004      	movs	r4, r0
 800c604:	000d      	movs	r5, r1
 800c606:	f7f3 ff21 	bl	800044c <__aeabi_dcmpeq>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d09b      	beq.n	800c546 <_dtoa_r+0x6c2>
 800c60e:	e7cf      	b.n	800c5b0 <_dtoa_r+0x72c>
 800c610:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c612:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c614:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c616:	2d00      	cmp	r5, #0
 800c618:	d012      	beq.n	800c640 <_dtoa_r+0x7bc>
 800c61a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c61c:	2a01      	cmp	r2, #1
 800c61e:	dc66      	bgt.n	800c6ee <_dtoa_r+0x86a>
 800c620:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c622:	2a00      	cmp	r2, #0
 800c624:	d05d      	beq.n	800c6e2 <_dtoa_r+0x85e>
 800c626:	4aa0      	ldr	r2, [pc, #640]	; (800c8a8 <_dtoa_r+0xa24>)
 800c628:	189b      	adds	r3, r3, r2
 800c62a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c62c:	2101      	movs	r1, #1
 800c62e:	18d2      	adds	r2, r2, r3
 800c630:	920a      	str	r2, [sp, #40]	; 0x28
 800c632:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c634:	0038      	movs	r0, r7
 800c636:	18d3      	adds	r3, r2, r3
 800c638:	930d      	str	r3, [sp, #52]	; 0x34
 800c63a:	f000 fd97 	bl	800d16c <__i2b>
 800c63e:	0005      	movs	r5, r0
 800c640:	2c00      	cmp	r4, #0
 800c642:	dd0e      	ble.n	800c662 <_dtoa_r+0x7de>
 800c644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c646:	2b00      	cmp	r3, #0
 800c648:	dd0b      	ble.n	800c662 <_dtoa_r+0x7de>
 800c64a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c64c:	0023      	movs	r3, r4
 800c64e:	4294      	cmp	r4, r2
 800c650:	dd00      	ble.n	800c654 <_dtoa_r+0x7d0>
 800c652:	0013      	movs	r3, r2
 800c654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c656:	1ae4      	subs	r4, r4, r3
 800c658:	1ad2      	subs	r2, r2, r3
 800c65a:	920a      	str	r2, [sp, #40]	; 0x28
 800c65c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	930d      	str	r3, [sp, #52]	; 0x34
 800c662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01f      	beq.n	800c6a8 <_dtoa_r+0x824>
 800c668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d054      	beq.n	800c718 <_dtoa_r+0x894>
 800c66e:	2e00      	cmp	r6, #0
 800c670:	dd11      	ble.n	800c696 <_dtoa_r+0x812>
 800c672:	0029      	movs	r1, r5
 800c674:	0032      	movs	r2, r6
 800c676:	0038      	movs	r0, r7
 800c678:	f000 fe3e 	bl	800d2f8 <__pow5mult>
 800c67c:	9a05      	ldr	r2, [sp, #20]
 800c67e:	0001      	movs	r1, r0
 800c680:	0005      	movs	r5, r0
 800c682:	0038      	movs	r0, r7
 800c684:	f000 fd88 	bl	800d198 <__multiply>
 800c688:	9905      	ldr	r1, [sp, #20]
 800c68a:	9014      	str	r0, [sp, #80]	; 0x50
 800c68c:	0038      	movs	r0, r7
 800c68e:	f000 fcbd 	bl	800d00c <_Bfree>
 800c692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c694:	9305      	str	r3, [sp, #20]
 800c696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c698:	1b9a      	subs	r2, r3, r6
 800c69a:	42b3      	cmp	r3, r6
 800c69c:	d004      	beq.n	800c6a8 <_dtoa_r+0x824>
 800c69e:	0038      	movs	r0, r7
 800c6a0:	9905      	ldr	r1, [sp, #20]
 800c6a2:	f000 fe29 	bl	800d2f8 <__pow5mult>
 800c6a6:	9005      	str	r0, [sp, #20]
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	0038      	movs	r0, r7
 800c6ac:	f000 fd5e 	bl	800d16c <__i2b>
 800c6b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6b2:	0006      	movs	r6, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd31      	ble.n	800c71c <_dtoa_r+0x898>
 800c6b8:	001a      	movs	r2, r3
 800c6ba:	0001      	movs	r1, r0
 800c6bc:	0038      	movs	r0, r7
 800c6be:	f000 fe1b 	bl	800d2f8 <__pow5mult>
 800c6c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6c4:	0006      	movs	r6, r0
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	dd2d      	ble.n	800c726 <_dtoa_r+0x8a2>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	930e      	str	r3, [sp, #56]	; 0x38
 800c6ce:	6933      	ldr	r3, [r6, #16]
 800c6d0:	3303      	adds	r3, #3
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	18f3      	adds	r3, r6, r3
 800c6d6:	6858      	ldr	r0, [r3, #4]
 800c6d8:	f000 fd00 	bl	800d0dc <__hi0bits>
 800c6dc:	2320      	movs	r3, #32
 800c6de:	1a18      	subs	r0, r3, r0
 800c6e0:	e039      	b.n	800c756 <_dtoa_r+0x8d2>
 800c6e2:	2336      	movs	r3, #54	; 0x36
 800c6e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c6e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	e79d      	b.n	800c62a <_dtoa_r+0x7a6>
 800c6ee:	9b07      	ldr	r3, [sp, #28]
 800c6f0:	1e5e      	subs	r6, r3, #1
 800c6f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6f4:	42b3      	cmp	r3, r6
 800c6f6:	db07      	blt.n	800c708 <_dtoa_r+0x884>
 800c6f8:	1b9e      	subs	r6, r3, r6
 800c6fa:	9b07      	ldr	r3, [sp, #28]
 800c6fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	da93      	bge.n	800c62a <_dtoa_r+0x7a6>
 800c702:	1ae4      	subs	r4, r4, r3
 800c704:	2300      	movs	r3, #0
 800c706:	e790      	b.n	800c62a <_dtoa_r+0x7a6>
 800c708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c70a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c70c:	1af3      	subs	r3, r6, r3
 800c70e:	18d3      	adds	r3, r2, r3
 800c710:	960e      	str	r6, [sp, #56]	; 0x38
 800c712:	9315      	str	r3, [sp, #84]	; 0x54
 800c714:	2600      	movs	r6, #0
 800c716:	e7f0      	b.n	800c6fa <_dtoa_r+0x876>
 800c718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c71a:	e7c0      	b.n	800c69e <_dtoa_r+0x81a>
 800c71c:	2300      	movs	r3, #0
 800c71e:	930e      	str	r3, [sp, #56]	; 0x38
 800c720:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c722:	2b01      	cmp	r3, #1
 800c724:	dc13      	bgt.n	800c74e <_dtoa_r+0x8ca>
 800c726:	2300      	movs	r3, #0
 800c728:	930e      	str	r3, [sp, #56]	; 0x38
 800c72a:	9b08      	ldr	r3, [sp, #32]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10e      	bne.n	800c74e <_dtoa_r+0x8ca>
 800c730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c732:	031b      	lsls	r3, r3, #12
 800c734:	d10b      	bne.n	800c74e <_dtoa_r+0x8ca>
 800c736:	4b5d      	ldr	r3, [pc, #372]	; (800c8ac <_dtoa_r+0xa28>)
 800c738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c73a:	4213      	tst	r3, r2
 800c73c:	d007      	beq.n	800c74e <_dtoa_r+0x8ca>
 800c73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c740:	3301      	adds	r3, #1
 800c742:	930a      	str	r3, [sp, #40]	; 0x28
 800c744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c746:	3301      	adds	r3, #1
 800c748:	930d      	str	r3, [sp, #52]	; 0x34
 800c74a:	2301      	movs	r3, #1
 800c74c:	930e      	str	r3, [sp, #56]	; 0x38
 800c74e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c750:	2001      	movs	r0, #1
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1bb      	bne.n	800c6ce <_dtoa_r+0x84a>
 800c756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c758:	221f      	movs	r2, #31
 800c75a:	1818      	adds	r0, r3, r0
 800c75c:	0003      	movs	r3, r0
 800c75e:	4013      	ands	r3, r2
 800c760:	4210      	tst	r0, r2
 800c762:	d046      	beq.n	800c7f2 <_dtoa_r+0x96e>
 800c764:	3201      	adds	r2, #1
 800c766:	1ad2      	subs	r2, r2, r3
 800c768:	2a04      	cmp	r2, #4
 800c76a:	dd3f      	ble.n	800c7ec <_dtoa_r+0x968>
 800c76c:	221c      	movs	r2, #28
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c772:	18e4      	adds	r4, r4, r3
 800c774:	18d2      	adds	r2, r2, r3
 800c776:	920a      	str	r2, [sp, #40]	; 0x28
 800c778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c77a:	18d3      	adds	r3, r2, r3
 800c77c:	930d      	str	r3, [sp, #52]	; 0x34
 800c77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c780:	2b00      	cmp	r3, #0
 800c782:	dd05      	ble.n	800c790 <_dtoa_r+0x90c>
 800c784:	001a      	movs	r2, r3
 800c786:	0038      	movs	r0, r7
 800c788:	9905      	ldr	r1, [sp, #20]
 800c78a:	f000 fe11 	bl	800d3b0 <__lshift>
 800c78e:	9005      	str	r0, [sp, #20]
 800c790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c792:	2b00      	cmp	r3, #0
 800c794:	dd05      	ble.n	800c7a2 <_dtoa_r+0x91e>
 800c796:	0031      	movs	r1, r6
 800c798:	001a      	movs	r2, r3
 800c79a:	0038      	movs	r0, r7
 800c79c:	f000 fe08 	bl	800d3b0 <__lshift>
 800c7a0:	0006      	movs	r6, r0
 800c7a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d026      	beq.n	800c7f6 <_dtoa_r+0x972>
 800c7a8:	0031      	movs	r1, r6
 800c7aa:	9805      	ldr	r0, [sp, #20]
 800c7ac:	f000 fe6e 	bl	800d48c <__mcmp>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	da20      	bge.n	800c7f6 <_dtoa_r+0x972>
 800c7b4:	9b02      	ldr	r3, [sp, #8]
 800c7b6:	220a      	movs	r2, #10
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	9302      	str	r3, [sp, #8]
 800c7bc:	0038      	movs	r0, r7
 800c7be:	2300      	movs	r3, #0
 800c7c0:	9905      	ldr	r1, [sp, #20]
 800c7c2:	f000 fc47 	bl	800d054 <__multadd>
 800c7c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7c8:	9005      	str	r0, [sp, #20]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d100      	bne.n	800c7d0 <_dtoa_r+0x94c>
 800c7ce:	e166      	b.n	800ca9e <_dtoa_r+0xc1a>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	0029      	movs	r1, r5
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	0038      	movs	r0, r7
 800c7d8:	f000 fc3c 	bl	800d054 <__multadd>
 800c7dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7de:	0005      	movs	r5, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	dc47      	bgt.n	800c874 <_dtoa_r+0x9f0>
 800c7e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	dc0d      	bgt.n	800c806 <_dtoa_r+0x982>
 800c7ea:	e043      	b.n	800c874 <_dtoa_r+0x9f0>
 800c7ec:	2a04      	cmp	r2, #4
 800c7ee:	d0c6      	beq.n	800c77e <_dtoa_r+0x8fa>
 800c7f0:	0013      	movs	r3, r2
 800c7f2:	331c      	adds	r3, #28
 800c7f4:	e7bc      	b.n	800c770 <_dtoa_r+0x8ec>
 800c7f6:	9b07      	ldr	r3, [sp, #28]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc35      	bgt.n	800c868 <_dtoa_r+0x9e4>
 800c7fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	dd32      	ble.n	800c868 <_dtoa_r+0x9e4>
 800c802:	9b07      	ldr	r3, [sp, #28]
 800c804:	930c      	str	r3, [sp, #48]	; 0x30
 800c806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10c      	bne.n	800c826 <_dtoa_r+0x9a2>
 800c80c:	0031      	movs	r1, r6
 800c80e:	2205      	movs	r2, #5
 800c810:	0038      	movs	r0, r7
 800c812:	f000 fc1f 	bl	800d054 <__multadd>
 800c816:	0006      	movs	r6, r0
 800c818:	0001      	movs	r1, r0
 800c81a:	9805      	ldr	r0, [sp, #20]
 800c81c:	f000 fe36 	bl	800d48c <__mcmp>
 800c820:	2800      	cmp	r0, #0
 800c822:	dd00      	ble.n	800c826 <_dtoa_r+0x9a2>
 800c824:	e5a5      	b.n	800c372 <_dtoa_r+0x4ee>
 800c826:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c828:	43db      	mvns	r3, r3
 800c82a:	9302      	str	r3, [sp, #8]
 800c82c:	9b06      	ldr	r3, [sp, #24]
 800c82e:	9308      	str	r3, [sp, #32]
 800c830:	2400      	movs	r4, #0
 800c832:	0031      	movs	r1, r6
 800c834:	0038      	movs	r0, r7
 800c836:	f000 fbe9 	bl	800d00c <_Bfree>
 800c83a:	2d00      	cmp	r5, #0
 800c83c:	d100      	bne.n	800c840 <_dtoa_r+0x9bc>
 800c83e:	e6b7      	b.n	800c5b0 <_dtoa_r+0x72c>
 800c840:	2c00      	cmp	r4, #0
 800c842:	d005      	beq.n	800c850 <_dtoa_r+0x9cc>
 800c844:	42ac      	cmp	r4, r5
 800c846:	d003      	beq.n	800c850 <_dtoa_r+0x9cc>
 800c848:	0021      	movs	r1, r4
 800c84a:	0038      	movs	r0, r7
 800c84c:	f000 fbde 	bl	800d00c <_Bfree>
 800c850:	0029      	movs	r1, r5
 800c852:	0038      	movs	r0, r7
 800c854:	f000 fbda 	bl	800d00c <_Bfree>
 800c858:	e6aa      	b.n	800c5b0 <_dtoa_r+0x72c>
 800c85a:	2600      	movs	r6, #0
 800c85c:	0035      	movs	r5, r6
 800c85e:	e7e2      	b.n	800c826 <_dtoa_r+0x9a2>
 800c860:	9602      	str	r6, [sp, #8]
 800c862:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c864:	0035      	movs	r5, r6
 800c866:	e584      	b.n	800c372 <_dtoa_r+0x4ee>
 800c868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d100      	bne.n	800c870 <_dtoa_r+0x9ec>
 800c86e:	e0ce      	b.n	800ca0e <_dtoa_r+0xb8a>
 800c870:	9b07      	ldr	r3, [sp, #28]
 800c872:	930c      	str	r3, [sp, #48]	; 0x30
 800c874:	2c00      	cmp	r4, #0
 800c876:	dd05      	ble.n	800c884 <_dtoa_r+0xa00>
 800c878:	0029      	movs	r1, r5
 800c87a:	0022      	movs	r2, r4
 800c87c:	0038      	movs	r0, r7
 800c87e:	f000 fd97 	bl	800d3b0 <__lshift>
 800c882:	0005      	movs	r5, r0
 800c884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c886:	0028      	movs	r0, r5
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d022      	beq.n	800c8d2 <_dtoa_r+0xa4e>
 800c88c:	0038      	movs	r0, r7
 800c88e:	6869      	ldr	r1, [r5, #4]
 800c890:	f000 fb78 	bl	800cf84 <_Balloc>
 800c894:	1e04      	subs	r4, r0, #0
 800c896:	d10f      	bne.n	800c8b8 <_dtoa_r+0xa34>
 800c898:	0002      	movs	r2, r0
 800c89a:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <_dtoa_r+0xa2c>)
 800c89c:	4905      	ldr	r1, [pc, #20]	; (800c8b4 <_dtoa_r+0xa30>)
 800c89e:	f7ff fb06 	bl	800beae <_dtoa_r+0x2a>
 800c8a2:	46c0      	nop			; (mov r8, r8)
 800c8a4:	40240000 	.word	0x40240000
 800c8a8:	00000433 	.word	0x00000433
 800c8ac:	7ff00000 	.word	0x7ff00000
 800c8b0:	0800e37c 	.word	0x0800e37c
 800c8b4:	000002ea 	.word	0x000002ea
 800c8b8:	0029      	movs	r1, r5
 800c8ba:	692b      	ldr	r3, [r5, #16]
 800c8bc:	310c      	adds	r1, #12
 800c8be:	1c9a      	adds	r2, r3, #2
 800c8c0:	0092      	lsls	r2, r2, #2
 800c8c2:	300c      	adds	r0, #12
 800c8c4:	f000 fb45 	bl	800cf52 <memcpy>
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	0021      	movs	r1, r4
 800c8cc:	0038      	movs	r0, r7
 800c8ce:	f000 fd6f 	bl	800d3b0 <__lshift>
 800c8d2:	9b06      	ldr	r3, [sp, #24]
 800c8d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	189b      	adds	r3, r3, r2
 800c8dc:	2201      	movs	r2, #1
 800c8de:	002c      	movs	r4, r5
 800c8e0:	0005      	movs	r5, r0
 800c8e2:	9314      	str	r3, [sp, #80]	; 0x50
 800c8e4:	9b08      	ldr	r3, [sp, #32]
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8ea:	0031      	movs	r1, r6
 800c8ec:	9805      	ldr	r0, [sp, #20]
 800c8ee:	f7ff fa3d 	bl	800bd6c <quorem>
 800c8f2:	0003      	movs	r3, r0
 800c8f4:	0021      	movs	r1, r4
 800c8f6:	3330      	adds	r3, #48	; 0x30
 800c8f8:	900d      	str	r0, [sp, #52]	; 0x34
 800c8fa:	9805      	ldr	r0, [sp, #20]
 800c8fc:	9307      	str	r3, [sp, #28]
 800c8fe:	f000 fdc5 	bl	800d48c <__mcmp>
 800c902:	002a      	movs	r2, r5
 800c904:	900e      	str	r0, [sp, #56]	; 0x38
 800c906:	0031      	movs	r1, r6
 800c908:	0038      	movs	r0, r7
 800c90a:	f000 fddb 	bl	800d4c4 <__mdiff>
 800c90e:	68c3      	ldr	r3, [r0, #12]
 800c910:	9008      	str	r0, [sp, #32]
 800c912:	9310      	str	r3, [sp, #64]	; 0x40
 800c914:	2301      	movs	r3, #1
 800c916:	930c      	str	r3, [sp, #48]	; 0x30
 800c918:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d104      	bne.n	800c928 <_dtoa_r+0xaa4>
 800c91e:	0001      	movs	r1, r0
 800c920:	9805      	ldr	r0, [sp, #20]
 800c922:	f000 fdb3 	bl	800d48c <__mcmp>
 800c926:	900c      	str	r0, [sp, #48]	; 0x30
 800c928:	0038      	movs	r0, r7
 800c92a:	9908      	ldr	r1, [sp, #32]
 800c92c:	f000 fb6e 	bl	800d00c <_Bfree>
 800c930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c934:	3301      	adds	r3, #1
 800c936:	9308      	str	r3, [sp, #32]
 800c938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c93a:	4313      	orrs	r3, r2
 800c93c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c93e:	4313      	orrs	r3, r2
 800c940:	d10c      	bne.n	800c95c <_dtoa_r+0xad8>
 800c942:	9b07      	ldr	r3, [sp, #28]
 800c944:	2b39      	cmp	r3, #57	; 0x39
 800c946:	d026      	beq.n	800c996 <_dtoa_r+0xb12>
 800c948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	dd02      	ble.n	800c954 <_dtoa_r+0xad0>
 800c94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c950:	3331      	adds	r3, #49	; 0x31
 800c952:	9307      	str	r3, [sp, #28]
 800c954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c956:	9a07      	ldr	r2, [sp, #28]
 800c958:	701a      	strb	r2, [r3, #0]
 800c95a:	e76a      	b.n	800c832 <_dtoa_r+0x9ae>
 800c95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c95e:	2b00      	cmp	r3, #0
 800c960:	db04      	blt.n	800c96c <_dtoa_r+0xae8>
 800c962:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c964:	4313      	orrs	r3, r2
 800c966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c968:	4313      	orrs	r3, r2
 800c96a:	d11f      	bne.n	800c9ac <_dtoa_r+0xb28>
 800c96c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c96e:	2b00      	cmp	r3, #0
 800c970:	ddf0      	ble.n	800c954 <_dtoa_r+0xad0>
 800c972:	9905      	ldr	r1, [sp, #20]
 800c974:	2201      	movs	r2, #1
 800c976:	0038      	movs	r0, r7
 800c978:	f000 fd1a 	bl	800d3b0 <__lshift>
 800c97c:	0031      	movs	r1, r6
 800c97e:	9005      	str	r0, [sp, #20]
 800c980:	f000 fd84 	bl	800d48c <__mcmp>
 800c984:	2800      	cmp	r0, #0
 800c986:	dc03      	bgt.n	800c990 <_dtoa_r+0xb0c>
 800c988:	d1e4      	bne.n	800c954 <_dtoa_r+0xad0>
 800c98a:	9b07      	ldr	r3, [sp, #28]
 800c98c:	07db      	lsls	r3, r3, #31
 800c98e:	d5e1      	bpl.n	800c954 <_dtoa_r+0xad0>
 800c990:	9b07      	ldr	r3, [sp, #28]
 800c992:	2b39      	cmp	r3, #57	; 0x39
 800c994:	d1db      	bne.n	800c94e <_dtoa_r+0xaca>
 800c996:	2339      	movs	r3, #57	; 0x39
 800c998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c99a:	7013      	strb	r3, [r2, #0]
 800c99c:	9b08      	ldr	r3, [sp, #32]
 800c99e:	9308      	str	r3, [sp, #32]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	781a      	ldrb	r2, [r3, #0]
 800c9a4:	2a39      	cmp	r2, #57	; 0x39
 800c9a6:	d068      	beq.n	800ca7a <_dtoa_r+0xbf6>
 800c9a8:	3201      	adds	r2, #1
 800c9aa:	e7d5      	b.n	800c958 <_dtoa_r+0xad4>
 800c9ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	dd07      	ble.n	800c9c2 <_dtoa_r+0xb3e>
 800c9b2:	9b07      	ldr	r3, [sp, #28]
 800c9b4:	2b39      	cmp	r3, #57	; 0x39
 800c9b6:	d0ee      	beq.n	800c996 <_dtoa_r+0xb12>
 800c9b8:	9b07      	ldr	r3, [sp, #28]
 800c9ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9bc:	3301      	adds	r3, #1
 800c9be:	7013      	strb	r3, [r2, #0]
 800c9c0:	e737      	b.n	800c832 <_dtoa_r+0x9ae>
 800c9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9c4:	9a07      	ldr	r2, [sp, #28]
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d03e      	beq.n	800ca4e <_dtoa_r+0xbca>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	220a      	movs	r2, #10
 800c9d4:	9905      	ldr	r1, [sp, #20]
 800c9d6:	0038      	movs	r0, r7
 800c9d8:	f000 fb3c 	bl	800d054 <__multadd>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9005      	str	r0, [sp, #20]
 800c9e0:	220a      	movs	r2, #10
 800c9e2:	0021      	movs	r1, r4
 800c9e4:	0038      	movs	r0, r7
 800c9e6:	42ac      	cmp	r4, r5
 800c9e8:	d106      	bne.n	800c9f8 <_dtoa_r+0xb74>
 800c9ea:	f000 fb33 	bl	800d054 <__multadd>
 800c9ee:	0004      	movs	r4, r0
 800c9f0:	0005      	movs	r5, r0
 800c9f2:	9b08      	ldr	r3, [sp, #32]
 800c9f4:	930a      	str	r3, [sp, #40]	; 0x28
 800c9f6:	e778      	b.n	800c8ea <_dtoa_r+0xa66>
 800c9f8:	f000 fb2c 	bl	800d054 <__multadd>
 800c9fc:	0029      	movs	r1, r5
 800c9fe:	0004      	movs	r4, r0
 800ca00:	2300      	movs	r3, #0
 800ca02:	220a      	movs	r2, #10
 800ca04:	0038      	movs	r0, r7
 800ca06:	f000 fb25 	bl	800d054 <__multadd>
 800ca0a:	0005      	movs	r5, r0
 800ca0c:	e7f1      	b.n	800c9f2 <_dtoa_r+0xb6e>
 800ca0e:	9b07      	ldr	r3, [sp, #28]
 800ca10:	930c      	str	r3, [sp, #48]	; 0x30
 800ca12:	2400      	movs	r4, #0
 800ca14:	0031      	movs	r1, r6
 800ca16:	9805      	ldr	r0, [sp, #20]
 800ca18:	f7ff f9a8 	bl	800bd6c <quorem>
 800ca1c:	9b06      	ldr	r3, [sp, #24]
 800ca1e:	3030      	adds	r0, #48	; 0x30
 800ca20:	5518      	strb	r0, [r3, r4]
 800ca22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca24:	3401      	adds	r4, #1
 800ca26:	9007      	str	r0, [sp, #28]
 800ca28:	42a3      	cmp	r3, r4
 800ca2a:	dd07      	ble.n	800ca3c <_dtoa_r+0xbb8>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	220a      	movs	r2, #10
 800ca30:	0038      	movs	r0, r7
 800ca32:	9905      	ldr	r1, [sp, #20]
 800ca34:	f000 fb0e 	bl	800d054 <__multadd>
 800ca38:	9005      	str	r0, [sp, #20]
 800ca3a:	e7eb      	b.n	800ca14 <_dtoa_r+0xb90>
 800ca3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca3e:	2001      	movs	r0, #1
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	dd00      	ble.n	800ca46 <_dtoa_r+0xbc2>
 800ca44:	0018      	movs	r0, r3
 800ca46:	2400      	movs	r4, #0
 800ca48:	9b06      	ldr	r3, [sp, #24]
 800ca4a:	181b      	adds	r3, r3, r0
 800ca4c:	9308      	str	r3, [sp, #32]
 800ca4e:	9905      	ldr	r1, [sp, #20]
 800ca50:	2201      	movs	r2, #1
 800ca52:	0038      	movs	r0, r7
 800ca54:	f000 fcac 	bl	800d3b0 <__lshift>
 800ca58:	0031      	movs	r1, r6
 800ca5a:	9005      	str	r0, [sp, #20]
 800ca5c:	f000 fd16 	bl	800d48c <__mcmp>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	dc9b      	bgt.n	800c99c <_dtoa_r+0xb18>
 800ca64:	d102      	bne.n	800ca6c <_dtoa_r+0xbe8>
 800ca66:	9b07      	ldr	r3, [sp, #28]
 800ca68:	07db      	lsls	r3, r3, #31
 800ca6a:	d497      	bmi.n	800c99c <_dtoa_r+0xb18>
 800ca6c:	9b08      	ldr	r3, [sp, #32]
 800ca6e:	9308      	str	r3, [sp, #32]
 800ca70:	3b01      	subs	r3, #1
 800ca72:	781a      	ldrb	r2, [r3, #0]
 800ca74:	2a30      	cmp	r2, #48	; 0x30
 800ca76:	d0fa      	beq.n	800ca6e <_dtoa_r+0xbea>
 800ca78:	e6db      	b.n	800c832 <_dtoa_r+0x9ae>
 800ca7a:	9a06      	ldr	r2, [sp, #24]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d18e      	bne.n	800c99e <_dtoa_r+0xb1a>
 800ca80:	9b02      	ldr	r3, [sp, #8]
 800ca82:	3301      	adds	r3, #1
 800ca84:	9302      	str	r3, [sp, #8]
 800ca86:	2331      	movs	r3, #49	; 0x31
 800ca88:	e799      	b.n	800c9be <_dtoa_r+0xb3a>
 800ca8a:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <_dtoa_r+0xc2c>)
 800ca8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ca8e:	9306      	str	r3, [sp, #24]
 800ca90:	4b08      	ldr	r3, [pc, #32]	; (800cab4 <_dtoa_r+0xc30>)
 800ca92:	2a00      	cmp	r2, #0
 800ca94:	d001      	beq.n	800ca9a <_dtoa_r+0xc16>
 800ca96:	f7ff fa3f 	bl	800bf18 <_dtoa_r+0x94>
 800ca9a:	f7ff fa3f 	bl	800bf1c <_dtoa_r+0x98>
 800ca9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	dcb6      	bgt.n	800ca12 <_dtoa_r+0xb8e>
 800caa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	dd00      	ble.n	800caac <_dtoa_r+0xc28>
 800caaa:	e6ac      	b.n	800c806 <_dtoa_r+0x982>
 800caac:	e7b1      	b.n	800ca12 <_dtoa_r+0xb8e>
 800caae:	46c0      	nop			; (mov r8, r8)
 800cab0:	0800e2fd 	.word	0x0800e2fd
 800cab4:	0800e305 	.word	0x0800e305

0800cab8 <__sflush_r>:
 800cab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caba:	898b      	ldrh	r3, [r1, #12]
 800cabc:	0005      	movs	r5, r0
 800cabe:	000c      	movs	r4, r1
 800cac0:	071a      	lsls	r2, r3, #28
 800cac2:	d45f      	bmi.n	800cb84 <__sflush_r+0xcc>
 800cac4:	684a      	ldr	r2, [r1, #4]
 800cac6:	2a00      	cmp	r2, #0
 800cac8:	dc04      	bgt.n	800cad4 <__sflush_r+0x1c>
 800caca:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cacc:	2a00      	cmp	r2, #0
 800cace:	dc01      	bgt.n	800cad4 <__sflush_r+0x1c>
 800cad0:	2000      	movs	r0, #0
 800cad2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cad4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cad6:	2f00      	cmp	r7, #0
 800cad8:	d0fa      	beq.n	800cad0 <__sflush_r+0x18>
 800cada:	2200      	movs	r2, #0
 800cadc:	2180      	movs	r1, #128	; 0x80
 800cade:	682e      	ldr	r6, [r5, #0]
 800cae0:	602a      	str	r2, [r5, #0]
 800cae2:	001a      	movs	r2, r3
 800cae4:	0149      	lsls	r1, r1, #5
 800cae6:	400a      	ands	r2, r1
 800cae8:	420b      	tst	r3, r1
 800caea:	d034      	beq.n	800cb56 <__sflush_r+0x9e>
 800caec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800caee:	89a3      	ldrh	r3, [r4, #12]
 800caf0:	075b      	lsls	r3, r3, #29
 800caf2:	d506      	bpl.n	800cb02 <__sflush_r+0x4a>
 800caf4:	6863      	ldr	r3, [r4, #4]
 800caf6:	1ac0      	subs	r0, r0, r3
 800caf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <__sflush_r+0x4a>
 800cafe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb00:	1ac0      	subs	r0, r0, r3
 800cb02:	0002      	movs	r2, r0
 800cb04:	6a21      	ldr	r1, [r4, #32]
 800cb06:	2300      	movs	r3, #0
 800cb08:	0028      	movs	r0, r5
 800cb0a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cb0c:	47b8      	blx	r7
 800cb0e:	89a1      	ldrh	r1, [r4, #12]
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	d106      	bne.n	800cb22 <__sflush_r+0x6a>
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	2b1d      	cmp	r3, #29
 800cb18:	d831      	bhi.n	800cb7e <__sflush_r+0xc6>
 800cb1a:	4a2c      	ldr	r2, [pc, #176]	; (800cbcc <__sflush_r+0x114>)
 800cb1c:	40da      	lsrs	r2, r3
 800cb1e:	07d3      	lsls	r3, r2, #31
 800cb20:	d52d      	bpl.n	800cb7e <__sflush_r+0xc6>
 800cb22:	2300      	movs	r3, #0
 800cb24:	6063      	str	r3, [r4, #4]
 800cb26:	6923      	ldr	r3, [r4, #16]
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	04cb      	lsls	r3, r1, #19
 800cb2c:	d505      	bpl.n	800cb3a <__sflush_r+0x82>
 800cb2e:	1c43      	adds	r3, r0, #1
 800cb30:	d102      	bne.n	800cb38 <__sflush_r+0x80>
 800cb32:	682b      	ldr	r3, [r5, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d100      	bne.n	800cb3a <__sflush_r+0x82>
 800cb38:	6560      	str	r0, [r4, #84]	; 0x54
 800cb3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb3c:	602e      	str	r6, [r5, #0]
 800cb3e:	2900      	cmp	r1, #0
 800cb40:	d0c6      	beq.n	800cad0 <__sflush_r+0x18>
 800cb42:	0023      	movs	r3, r4
 800cb44:	3344      	adds	r3, #68	; 0x44
 800cb46:	4299      	cmp	r1, r3
 800cb48:	d002      	beq.n	800cb50 <__sflush_r+0x98>
 800cb4a:	0028      	movs	r0, r5
 800cb4c:	f7fe fa24 	bl	800af98 <_free_r>
 800cb50:	2000      	movs	r0, #0
 800cb52:	6360      	str	r0, [r4, #52]	; 0x34
 800cb54:	e7bd      	b.n	800cad2 <__sflush_r+0x1a>
 800cb56:	2301      	movs	r3, #1
 800cb58:	0028      	movs	r0, r5
 800cb5a:	6a21      	ldr	r1, [r4, #32]
 800cb5c:	47b8      	blx	r7
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	d1c5      	bne.n	800caee <__sflush_r+0x36>
 800cb62:	682b      	ldr	r3, [r5, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d0c2      	beq.n	800caee <__sflush_r+0x36>
 800cb68:	2b1d      	cmp	r3, #29
 800cb6a:	d001      	beq.n	800cb70 <__sflush_r+0xb8>
 800cb6c:	2b16      	cmp	r3, #22
 800cb6e:	d101      	bne.n	800cb74 <__sflush_r+0xbc>
 800cb70:	602e      	str	r6, [r5, #0]
 800cb72:	e7ad      	b.n	800cad0 <__sflush_r+0x18>
 800cb74:	2340      	movs	r3, #64	; 0x40
 800cb76:	89a2      	ldrh	r2, [r4, #12]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	e7a9      	b.n	800cad2 <__sflush_r+0x1a>
 800cb7e:	2340      	movs	r3, #64	; 0x40
 800cb80:	430b      	orrs	r3, r1
 800cb82:	e7fa      	b.n	800cb7a <__sflush_r+0xc2>
 800cb84:	690f      	ldr	r7, [r1, #16]
 800cb86:	2f00      	cmp	r7, #0
 800cb88:	d0a2      	beq.n	800cad0 <__sflush_r+0x18>
 800cb8a:	680a      	ldr	r2, [r1, #0]
 800cb8c:	600f      	str	r7, [r1, #0]
 800cb8e:	1bd2      	subs	r2, r2, r7
 800cb90:	9201      	str	r2, [sp, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	079b      	lsls	r3, r3, #30
 800cb96:	d100      	bne.n	800cb9a <__sflush_r+0xe2>
 800cb98:	694a      	ldr	r2, [r1, #20]
 800cb9a:	60a2      	str	r2, [r4, #8]
 800cb9c:	9b01      	ldr	r3, [sp, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	dc00      	bgt.n	800cba4 <__sflush_r+0xec>
 800cba2:	e795      	b.n	800cad0 <__sflush_r+0x18>
 800cba4:	003a      	movs	r2, r7
 800cba6:	0028      	movs	r0, r5
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	6a21      	ldr	r1, [r4, #32]
 800cbac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbae:	47b0      	blx	r6
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	dc06      	bgt.n	800cbc2 <__sflush_r+0x10a>
 800cbb4:	2340      	movs	r3, #64	; 0x40
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	89a2      	ldrh	r2, [r4, #12]
 800cbba:	4240      	negs	r0, r0
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	81a3      	strh	r3, [r4, #12]
 800cbc0:	e787      	b.n	800cad2 <__sflush_r+0x1a>
 800cbc2:	9b01      	ldr	r3, [sp, #4]
 800cbc4:	183f      	adds	r7, r7, r0
 800cbc6:	1a1b      	subs	r3, r3, r0
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	e7e7      	b.n	800cb9c <__sflush_r+0xe4>
 800cbcc:	20400001 	.word	0x20400001

0800cbd0 <_fflush_r>:
 800cbd0:	690b      	ldr	r3, [r1, #16]
 800cbd2:	b570      	push	{r4, r5, r6, lr}
 800cbd4:	0005      	movs	r5, r0
 800cbd6:	000c      	movs	r4, r1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <_fflush_r+0x12>
 800cbdc:	2500      	movs	r5, #0
 800cbde:	0028      	movs	r0, r5
 800cbe0:	bd70      	pop	{r4, r5, r6, pc}
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d004      	beq.n	800cbf0 <_fflush_r+0x20>
 800cbe6:	6983      	ldr	r3, [r0, #24]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <_fflush_r+0x20>
 800cbec:	f000 f892 	bl	800cd14 <__sinit>
 800cbf0:	4b14      	ldr	r3, [pc, #80]	; (800cc44 <_fflush_r+0x74>)
 800cbf2:	429c      	cmp	r4, r3
 800cbf4:	d11b      	bne.n	800cc2e <_fflush_r+0x5e>
 800cbf6:	686c      	ldr	r4, [r5, #4]
 800cbf8:	220c      	movs	r2, #12
 800cbfa:	5ea3      	ldrsh	r3, [r4, r2]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d0ed      	beq.n	800cbdc <_fflush_r+0xc>
 800cc00:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc02:	07d2      	lsls	r2, r2, #31
 800cc04:	d404      	bmi.n	800cc10 <_fflush_r+0x40>
 800cc06:	059b      	lsls	r3, r3, #22
 800cc08:	d402      	bmi.n	800cc10 <_fflush_r+0x40>
 800cc0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc0c:	f000 f927 	bl	800ce5e <__retarget_lock_acquire_recursive>
 800cc10:	0028      	movs	r0, r5
 800cc12:	0021      	movs	r1, r4
 800cc14:	f7ff ff50 	bl	800cab8 <__sflush_r>
 800cc18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc1a:	0005      	movs	r5, r0
 800cc1c:	07db      	lsls	r3, r3, #31
 800cc1e:	d4de      	bmi.n	800cbde <_fflush_r+0xe>
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	059b      	lsls	r3, r3, #22
 800cc24:	d4db      	bmi.n	800cbde <_fflush_r+0xe>
 800cc26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc28:	f000 f91a 	bl	800ce60 <__retarget_lock_release_recursive>
 800cc2c:	e7d7      	b.n	800cbde <_fflush_r+0xe>
 800cc2e:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <_fflush_r+0x78>)
 800cc30:	429c      	cmp	r4, r3
 800cc32:	d101      	bne.n	800cc38 <_fflush_r+0x68>
 800cc34:	68ac      	ldr	r4, [r5, #8]
 800cc36:	e7df      	b.n	800cbf8 <_fflush_r+0x28>
 800cc38:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <_fflush_r+0x7c>)
 800cc3a:	429c      	cmp	r4, r3
 800cc3c:	d1dc      	bne.n	800cbf8 <_fflush_r+0x28>
 800cc3e:	68ec      	ldr	r4, [r5, #12]
 800cc40:	e7da      	b.n	800cbf8 <_fflush_r+0x28>
 800cc42:	46c0      	nop			; (mov r8, r8)
 800cc44:	0800e3b0 	.word	0x0800e3b0
 800cc48:	0800e3d0 	.word	0x0800e3d0
 800cc4c:	0800e390 	.word	0x0800e390

0800cc50 <std>:
 800cc50:	2300      	movs	r3, #0
 800cc52:	b510      	push	{r4, lr}
 800cc54:	0004      	movs	r4, r0
 800cc56:	6003      	str	r3, [r0, #0]
 800cc58:	6043      	str	r3, [r0, #4]
 800cc5a:	6083      	str	r3, [r0, #8]
 800cc5c:	8181      	strh	r1, [r0, #12]
 800cc5e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc60:	0019      	movs	r1, r3
 800cc62:	81c2      	strh	r2, [r0, #14]
 800cc64:	6103      	str	r3, [r0, #16]
 800cc66:	6143      	str	r3, [r0, #20]
 800cc68:	6183      	str	r3, [r0, #24]
 800cc6a:	2208      	movs	r2, #8
 800cc6c:	305c      	adds	r0, #92	; 0x5c
 800cc6e:	f7fe f98b 	bl	800af88 <memset>
 800cc72:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <std+0x38>)
 800cc74:	6224      	str	r4, [r4, #32]
 800cc76:	6263      	str	r3, [r4, #36]	; 0x24
 800cc78:	4b04      	ldr	r3, [pc, #16]	; (800cc8c <std+0x3c>)
 800cc7a:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc7c:	4b04      	ldr	r3, [pc, #16]	; (800cc90 <std+0x40>)
 800cc7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc80:	4b04      	ldr	r3, [pc, #16]	; (800cc94 <std+0x44>)
 800cc82:	6323      	str	r3, [r4, #48]	; 0x30
 800cc84:	bd10      	pop	{r4, pc}
 800cc86:	46c0      	nop			; (mov r8, r8)
 800cc88:	0800dc9d 	.word	0x0800dc9d
 800cc8c:	0800dcc5 	.word	0x0800dcc5
 800cc90:	0800dcfd 	.word	0x0800dcfd
 800cc94:	0800dd29 	.word	0x0800dd29

0800cc98 <_cleanup_r>:
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	4902      	ldr	r1, [pc, #8]	; (800cca4 <_cleanup_r+0xc>)
 800cc9c:	f000 f8ba 	bl	800ce14 <_fwalk_reent>
 800cca0:	bd10      	pop	{r4, pc}
 800cca2:	46c0      	nop			; (mov r8, r8)
 800cca4:	0800cbd1 	.word	0x0800cbd1

0800cca8 <__sfmoreglue>:
 800cca8:	b570      	push	{r4, r5, r6, lr}
 800ccaa:	2568      	movs	r5, #104	; 0x68
 800ccac:	1e4a      	subs	r2, r1, #1
 800ccae:	4355      	muls	r5, r2
 800ccb0:	000e      	movs	r6, r1
 800ccb2:	0029      	movs	r1, r5
 800ccb4:	3174      	adds	r1, #116	; 0x74
 800ccb6:	f7fe f9db 	bl	800b070 <_malloc_r>
 800ccba:	1e04      	subs	r4, r0, #0
 800ccbc:	d008      	beq.n	800ccd0 <__sfmoreglue+0x28>
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	002a      	movs	r2, r5
 800ccc2:	6001      	str	r1, [r0, #0]
 800ccc4:	6046      	str	r6, [r0, #4]
 800ccc6:	300c      	adds	r0, #12
 800ccc8:	60a0      	str	r0, [r4, #8]
 800ccca:	3268      	adds	r2, #104	; 0x68
 800cccc:	f7fe f95c 	bl	800af88 <memset>
 800ccd0:	0020      	movs	r0, r4
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}

0800ccd4 <__sfp_lock_acquire>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	4802      	ldr	r0, [pc, #8]	; (800cce0 <__sfp_lock_acquire+0xc>)
 800ccd8:	f000 f8c1 	bl	800ce5e <__retarget_lock_acquire_recursive>
 800ccdc:	bd10      	pop	{r4, pc}
 800ccde:	46c0      	nop			; (mov r8, r8)
 800cce0:	2000241d 	.word	0x2000241d

0800cce4 <__sfp_lock_release>:
 800cce4:	b510      	push	{r4, lr}
 800cce6:	4802      	ldr	r0, [pc, #8]	; (800ccf0 <__sfp_lock_release+0xc>)
 800cce8:	f000 f8ba 	bl	800ce60 <__retarget_lock_release_recursive>
 800ccec:	bd10      	pop	{r4, pc}
 800ccee:	46c0      	nop			; (mov r8, r8)
 800ccf0:	2000241d 	.word	0x2000241d

0800ccf4 <__sinit_lock_acquire>:
 800ccf4:	b510      	push	{r4, lr}
 800ccf6:	4802      	ldr	r0, [pc, #8]	; (800cd00 <__sinit_lock_acquire+0xc>)
 800ccf8:	f000 f8b1 	bl	800ce5e <__retarget_lock_acquire_recursive>
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	46c0      	nop			; (mov r8, r8)
 800cd00:	2000241e 	.word	0x2000241e

0800cd04 <__sinit_lock_release>:
 800cd04:	b510      	push	{r4, lr}
 800cd06:	4802      	ldr	r0, [pc, #8]	; (800cd10 <__sinit_lock_release+0xc>)
 800cd08:	f000 f8aa 	bl	800ce60 <__retarget_lock_release_recursive>
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	46c0      	nop			; (mov r8, r8)
 800cd10:	2000241e 	.word	0x2000241e

0800cd14 <__sinit>:
 800cd14:	b513      	push	{r0, r1, r4, lr}
 800cd16:	0004      	movs	r4, r0
 800cd18:	f7ff ffec 	bl	800ccf4 <__sinit_lock_acquire>
 800cd1c:	69a3      	ldr	r3, [r4, #24]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d002      	beq.n	800cd28 <__sinit+0x14>
 800cd22:	f7ff ffef 	bl	800cd04 <__sinit_lock_release>
 800cd26:	bd13      	pop	{r0, r1, r4, pc}
 800cd28:	64a3      	str	r3, [r4, #72]	; 0x48
 800cd2a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cd2c:	6523      	str	r3, [r4, #80]	; 0x50
 800cd2e:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <__sinit+0x68>)
 800cd30:	4a13      	ldr	r2, [pc, #76]	; (800cd80 <__sinit+0x6c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	d101      	bne.n	800cd40 <__sinit+0x2c>
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	61a3      	str	r3, [r4, #24]
 800cd40:	0020      	movs	r0, r4
 800cd42:	f000 f81f 	bl	800cd84 <__sfp>
 800cd46:	6060      	str	r0, [r4, #4]
 800cd48:	0020      	movs	r0, r4
 800cd4a:	f000 f81b 	bl	800cd84 <__sfp>
 800cd4e:	60a0      	str	r0, [r4, #8]
 800cd50:	0020      	movs	r0, r4
 800cd52:	f000 f817 	bl	800cd84 <__sfp>
 800cd56:	2200      	movs	r2, #0
 800cd58:	2104      	movs	r1, #4
 800cd5a:	60e0      	str	r0, [r4, #12]
 800cd5c:	6860      	ldr	r0, [r4, #4]
 800cd5e:	f7ff ff77 	bl	800cc50 <std>
 800cd62:	2201      	movs	r2, #1
 800cd64:	2109      	movs	r1, #9
 800cd66:	68a0      	ldr	r0, [r4, #8]
 800cd68:	f7ff ff72 	bl	800cc50 <std>
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	2112      	movs	r1, #18
 800cd70:	68e0      	ldr	r0, [r4, #12]
 800cd72:	f7ff ff6d 	bl	800cc50 <std>
 800cd76:	2301      	movs	r3, #1
 800cd78:	61a3      	str	r3, [r4, #24]
 800cd7a:	e7d2      	b.n	800cd22 <__sinit+0xe>
 800cd7c:	0800e1c4 	.word	0x0800e1c4
 800cd80:	0800cc99 	.word	0x0800cc99

0800cd84 <__sfp>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	0007      	movs	r7, r0
 800cd88:	f7ff ffa4 	bl	800ccd4 <__sfp_lock_acquire>
 800cd8c:	4b1f      	ldr	r3, [pc, #124]	; (800ce0c <__sfp+0x88>)
 800cd8e:	681e      	ldr	r6, [r3, #0]
 800cd90:	69b3      	ldr	r3, [r6, #24]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <__sfp+0x18>
 800cd96:	0030      	movs	r0, r6
 800cd98:	f7ff ffbc 	bl	800cd14 <__sinit>
 800cd9c:	3648      	adds	r6, #72	; 0x48
 800cd9e:	68b4      	ldr	r4, [r6, #8]
 800cda0:	6873      	ldr	r3, [r6, #4]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	d504      	bpl.n	800cdb0 <__sfp+0x2c>
 800cda6:	6833      	ldr	r3, [r6, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d022      	beq.n	800cdf2 <__sfp+0x6e>
 800cdac:	6836      	ldr	r6, [r6, #0]
 800cdae:	e7f6      	b.n	800cd9e <__sfp+0x1a>
 800cdb0:	220c      	movs	r2, #12
 800cdb2:	5ea5      	ldrsh	r5, [r4, r2]
 800cdb4:	2d00      	cmp	r5, #0
 800cdb6:	d11a      	bne.n	800cdee <__sfp+0x6a>
 800cdb8:	0020      	movs	r0, r4
 800cdba:	4b15      	ldr	r3, [pc, #84]	; (800ce10 <__sfp+0x8c>)
 800cdbc:	3058      	adds	r0, #88	; 0x58
 800cdbe:	60e3      	str	r3, [r4, #12]
 800cdc0:	6665      	str	r5, [r4, #100]	; 0x64
 800cdc2:	f000 f84b 	bl	800ce5c <__retarget_lock_init_recursive>
 800cdc6:	f7ff ff8d 	bl	800cce4 <__sfp_lock_release>
 800cdca:	0020      	movs	r0, r4
 800cdcc:	2208      	movs	r2, #8
 800cdce:	0029      	movs	r1, r5
 800cdd0:	6025      	str	r5, [r4, #0]
 800cdd2:	60a5      	str	r5, [r4, #8]
 800cdd4:	6065      	str	r5, [r4, #4]
 800cdd6:	6125      	str	r5, [r4, #16]
 800cdd8:	6165      	str	r5, [r4, #20]
 800cdda:	61a5      	str	r5, [r4, #24]
 800cddc:	305c      	adds	r0, #92	; 0x5c
 800cdde:	f7fe f8d3 	bl	800af88 <memset>
 800cde2:	6365      	str	r5, [r4, #52]	; 0x34
 800cde4:	63a5      	str	r5, [r4, #56]	; 0x38
 800cde6:	64a5      	str	r5, [r4, #72]	; 0x48
 800cde8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cdea:	0020      	movs	r0, r4
 800cdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdee:	3468      	adds	r4, #104	; 0x68
 800cdf0:	e7d7      	b.n	800cda2 <__sfp+0x1e>
 800cdf2:	2104      	movs	r1, #4
 800cdf4:	0038      	movs	r0, r7
 800cdf6:	f7ff ff57 	bl	800cca8 <__sfmoreglue>
 800cdfa:	1e04      	subs	r4, r0, #0
 800cdfc:	6030      	str	r0, [r6, #0]
 800cdfe:	d1d5      	bne.n	800cdac <__sfp+0x28>
 800ce00:	f7ff ff70 	bl	800cce4 <__sfp_lock_release>
 800ce04:	230c      	movs	r3, #12
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	e7ef      	b.n	800cdea <__sfp+0x66>
 800ce0a:	46c0      	nop			; (mov r8, r8)
 800ce0c:	0800e1c4 	.word	0x0800e1c4
 800ce10:	ffff0001 	.word	0xffff0001

0800ce14 <_fwalk_reent>:
 800ce14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce16:	0004      	movs	r4, r0
 800ce18:	0006      	movs	r6, r0
 800ce1a:	2700      	movs	r7, #0
 800ce1c:	9101      	str	r1, [sp, #4]
 800ce1e:	3448      	adds	r4, #72	; 0x48
 800ce20:	6863      	ldr	r3, [r4, #4]
 800ce22:	68a5      	ldr	r5, [r4, #8]
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	9b00      	ldr	r3, [sp, #0]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	d504      	bpl.n	800ce38 <_fwalk_reent+0x24>
 800ce2e:	6824      	ldr	r4, [r4, #0]
 800ce30:	2c00      	cmp	r4, #0
 800ce32:	d1f5      	bne.n	800ce20 <_fwalk_reent+0xc>
 800ce34:	0038      	movs	r0, r7
 800ce36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce38:	89ab      	ldrh	r3, [r5, #12]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d908      	bls.n	800ce50 <_fwalk_reent+0x3c>
 800ce3e:	220e      	movs	r2, #14
 800ce40:	5eab      	ldrsh	r3, [r5, r2]
 800ce42:	3301      	adds	r3, #1
 800ce44:	d004      	beq.n	800ce50 <_fwalk_reent+0x3c>
 800ce46:	0029      	movs	r1, r5
 800ce48:	0030      	movs	r0, r6
 800ce4a:	9b01      	ldr	r3, [sp, #4]
 800ce4c:	4798      	blx	r3
 800ce4e:	4307      	orrs	r7, r0
 800ce50:	3568      	adds	r5, #104	; 0x68
 800ce52:	e7e8      	b.n	800ce26 <_fwalk_reent+0x12>

0800ce54 <_localeconv_r>:
 800ce54:	4800      	ldr	r0, [pc, #0]	; (800ce58 <_localeconv_r+0x4>)
 800ce56:	4770      	bx	lr
 800ce58:	20000160 	.word	0x20000160

0800ce5c <__retarget_lock_init_recursive>:
 800ce5c:	4770      	bx	lr

0800ce5e <__retarget_lock_acquire_recursive>:
 800ce5e:	4770      	bx	lr

0800ce60 <__retarget_lock_release_recursive>:
 800ce60:	4770      	bx	lr
	...

0800ce64 <__swhatbuf_r>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	000e      	movs	r6, r1
 800ce68:	001d      	movs	r5, r3
 800ce6a:	230e      	movs	r3, #14
 800ce6c:	5ec9      	ldrsh	r1, [r1, r3]
 800ce6e:	0014      	movs	r4, r2
 800ce70:	b096      	sub	sp, #88	; 0x58
 800ce72:	2900      	cmp	r1, #0
 800ce74:	da08      	bge.n	800ce88 <__swhatbuf_r+0x24>
 800ce76:	220c      	movs	r2, #12
 800ce78:	5eb3      	ldrsh	r3, [r6, r2]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	602a      	str	r2, [r5, #0]
 800ce7e:	061b      	lsls	r3, r3, #24
 800ce80:	d411      	bmi.n	800cea6 <__swhatbuf_r+0x42>
 800ce82:	2380      	movs	r3, #128	; 0x80
 800ce84:	00db      	lsls	r3, r3, #3
 800ce86:	e00f      	b.n	800cea8 <__swhatbuf_r+0x44>
 800ce88:	466a      	mov	r2, sp
 800ce8a:	f000 ffa7 	bl	800dddc <_fstat_r>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	dbf1      	blt.n	800ce76 <__swhatbuf_r+0x12>
 800ce92:	23f0      	movs	r3, #240	; 0xf0
 800ce94:	9901      	ldr	r1, [sp, #4]
 800ce96:	021b      	lsls	r3, r3, #8
 800ce98:	4019      	ands	r1, r3
 800ce9a:	4b05      	ldr	r3, [pc, #20]	; (800ceb0 <__swhatbuf_r+0x4c>)
 800ce9c:	18c9      	adds	r1, r1, r3
 800ce9e:	424b      	negs	r3, r1
 800cea0:	4159      	adcs	r1, r3
 800cea2:	6029      	str	r1, [r5, #0]
 800cea4:	e7ed      	b.n	800ce82 <__swhatbuf_r+0x1e>
 800cea6:	2340      	movs	r3, #64	; 0x40
 800cea8:	2000      	movs	r0, #0
 800ceaa:	6023      	str	r3, [r4, #0]
 800ceac:	b016      	add	sp, #88	; 0x58
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	ffffe000 	.word	0xffffe000

0800ceb4 <__smakebuf_r>:
 800ceb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceb6:	2602      	movs	r6, #2
 800ceb8:	898b      	ldrh	r3, [r1, #12]
 800ceba:	0005      	movs	r5, r0
 800cebc:	000c      	movs	r4, r1
 800cebe:	4233      	tst	r3, r6
 800cec0:	d006      	beq.n	800ced0 <__smakebuf_r+0x1c>
 800cec2:	0023      	movs	r3, r4
 800cec4:	3347      	adds	r3, #71	; 0x47
 800cec6:	6023      	str	r3, [r4, #0]
 800cec8:	6123      	str	r3, [r4, #16]
 800ceca:	2301      	movs	r3, #1
 800cecc:	6163      	str	r3, [r4, #20]
 800cece:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ced0:	466a      	mov	r2, sp
 800ced2:	ab01      	add	r3, sp, #4
 800ced4:	f7ff ffc6 	bl	800ce64 <__swhatbuf_r>
 800ced8:	9900      	ldr	r1, [sp, #0]
 800ceda:	0007      	movs	r7, r0
 800cedc:	0028      	movs	r0, r5
 800cede:	f7fe f8c7 	bl	800b070 <_malloc_r>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d108      	bne.n	800cef8 <__smakebuf_r+0x44>
 800cee6:	220c      	movs	r2, #12
 800cee8:	5ea3      	ldrsh	r3, [r4, r2]
 800ceea:	059a      	lsls	r2, r3, #22
 800ceec:	d4ef      	bmi.n	800cece <__smakebuf_r+0x1a>
 800ceee:	2203      	movs	r2, #3
 800cef0:	4393      	bics	r3, r2
 800cef2:	431e      	orrs	r6, r3
 800cef4:	81a6      	strh	r6, [r4, #12]
 800cef6:	e7e4      	b.n	800cec2 <__smakebuf_r+0xe>
 800cef8:	4b0f      	ldr	r3, [pc, #60]	; (800cf38 <__smakebuf_r+0x84>)
 800cefa:	62ab      	str	r3, [r5, #40]	; 0x28
 800cefc:	2380      	movs	r3, #128	; 0x80
 800cefe:	89a2      	ldrh	r2, [r4, #12]
 800cf00:	6020      	str	r0, [r4, #0]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	81a3      	strh	r3, [r4, #12]
 800cf06:	9b00      	ldr	r3, [sp, #0]
 800cf08:	6120      	str	r0, [r4, #16]
 800cf0a:	6163      	str	r3, [r4, #20]
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00d      	beq.n	800cf2e <__smakebuf_r+0x7a>
 800cf12:	0028      	movs	r0, r5
 800cf14:	230e      	movs	r3, #14
 800cf16:	5ee1      	ldrsh	r1, [r4, r3]
 800cf18:	f000 ff72 	bl	800de00 <_isatty_r>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d006      	beq.n	800cf2e <__smakebuf_r+0x7a>
 800cf20:	2203      	movs	r2, #3
 800cf22:	89a3      	ldrh	r3, [r4, #12]
 800cf24:	4393      	bics	r3, r2
 800cf26:	001a      	movs	r2, r3
 800cf28:	2301      	movs	r3, #1
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	81a3      	strh	r3, [r4, #12]
 800cf2e:	89a0      	ldrh	r0, [r4, #12]
 800cf30:	4307      	orrs	r7, r0
 800cf32:	81a7      	strh	r7, [r4, #12]
 800cf34:	e7cb      	b.n	800cece <__smakebuf_r+0x1a>
 800cf36:	46c0      	nop			; (mov r8, r8)
 800cf38:	0800cc99 	.word	0x0800cc99

0800cf3c <memchr>:
 800cf3c:	b2c9      	uxtb	r1, r1
 800cf3e:	1882      	adds	r2, r0, r2
 800cf40:	4290      	cmp	r0, r2
 800cf42:	d101      	bne.n	800cf48 <memchr+0xc>
 800cf44:	2000      	movs	r0, #0
 800cf46:	4770      	bx	lr
 800cf48:	7803      	ldrb	r3, [r0, #0]
 800cf4a:	428b      	cmp	r3, r1
 800cf4c:	d0fb      	beq.n	800cf46 <memchr+0xa>
 800cf4e:	3001      	adds	r0, #1
 800cf50:	e7f6      	b.n	800cf40 <memchr+0x4>

0800cf52 <memcpy>:
 800cf52:	2300      	movs	r3, #0
 800cf54:	b510      	push	{r4, lr}
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d100      	bne.n	800cf5c <memcpy+0xa>
 800cf5a:	bd10      	pop	{r4, pc}
 800cf5c:	5ccc      	ldrb	r4, [r1, r3]
 800cf5e:	54c4      	strb	r4, [r0, r3]
 800cf60:	3301      	adds	r3, #1
 800cf62:	e7f8      	b.n	800cf56 <memcpy+0x4>

0800cf64 <__malloc_lock>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4802      	ldr	r0, [pc, #8]	; (800cf70 <__malloc_lock+0xc>)
 800cf68:	f7ff ff79 	bl	800ce5e <__retarget_lock_acquire_recursive>
 800cf6c:	bd10      	pop	{r4, pc}
 800cf6e:	46c0      	nop			; (mov r8, r8)
 800cf70:	2000241c 	.word	0x2000241c

0800cf74 <__malloc_unlock>:
 800cf74:	b510      	push	{r4, lr}
 800cf76:	4802      	ldr	r0, [pc, #8]	; (800cf80 <__malloc_unlock+0xc>)
 800cf78:	f7ff ff72 	bl	800ce60 <__retarget_lock_release_recursive>
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	46c0      	nop			; (mov r8, r8)
 800cf80:	2000241c 	.word	0x2000241c

0800cf84 <_Balloc>:
 800cf84:	b570      	push	{r4, r5, r6, lr}
 800cf86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf88:	0006      	movs	r6, r0
 800cf8a:	000c      	movs	r4, r1
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	d10e      	bne.n	800cfae <_Balloc+0x2a>
 800cf90:	2010      	movs	r0, #16
 800cf92:	f7fd ffef 	bl	800af74 <malloc>
 800cf96:	1e02      	subs	r2, r0, #0
 800cf98:	6270      	str	r0, [r6, #36]	; 0x24
 800cf9a:	d104      	bne.n	800cfa6 <_Balloc+0x22>
 800cf9c:	2166      	movs	r1, #102	; 0x66
 800cf9e:	4b19      	ldr	r3, [pc, #100]	; (800d004 <_Balloc+0x80>)
 800cfa0:	4819      	ldr	r0, [pc, #100]	; (800d008 <_Balloc+0x84>)
 800cfa2:	f000 fedb 	bl	800dd5c <__assert_func>
 800cfa6:	6045      	str	r5, [r0, #4]
 800cfa8:	6085      	str	r5, [r0, #8]
 800cfaa:	6005      	str	r5, [r0, #0]
 800cfac:	60c5      	str	r5, [r0, #12]
 800cfae:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800cfb0:	68eb      	ldr	r3, [r5, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d013      	beq.n	800cfde <_Balloc+0x5a>
 800cfb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cfb8:	00a2      	lsls	r2, r4, #2
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	189b      	adds	r3, r3, r2
 800cfbe:	6818      	ldr	r0, [r3, #0]
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d118      	bne.n	800cff6 <_Balloc+0x72>
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	000d      	movs	r5, r1
 800cfc8:	40a5      	lsls	r5, r4
 800cfca:	1d6a      	adds	r2, r5, #5
 800cfcc:	0030      	movs	r0, r6
 800cfce:	0092      	lsls	r2, r2, #2
 800cfd0:	f000 fb74 	bl	800d6bc <_calloc_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d00c      	beq.n	800cff2 <_Balloc+0x6e>
 800cfd8:	6044      	str	r4, [r0, #4]
 800cfda:	6085      	str	r5, [r0, #8]
 800cfdc:	e00d      	b.n	800cffa <_Balloc+0x76>
 800cfde:	2221      	movs	r2, #33	; 0x21
 800cfe0:	2104      	movs	r1, #4
 800cfe2:	0030      	movs	r0, r6
 800cfe4:	f000 fb6a 	bl	800d6bc <_calloc_r>
 800cfe8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cfea:	60e8      	str	r0, [r5, #12]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1e1      	bne.n	800cfb6 <_Balloc+0x32>
 800cff2:	2000      	movs	r0, #0
 800cff4:	bd70      	pop	{r4, r5, r6, pc}
 800cff6:	6802      	ldr	r2, [r0, #0]
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	2300      	movs	r3, #0
 800cffc:	6103      	str	r3, [r0, #16]
 800cffe:	60c3      	str	r3, [r0, #12]
 800d000:	e7f8      	b.n	800cff4 <_Balloc+0x70>
 800d002:	46c0      	nop			; (mov r8, r8)
 800d004:	0800e30a 	.word	0x0800e30a
 800d008:	0800e3f0 	.word	0x0800e3f0

0800d00c <_Bfree>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d010:	0005      	movs	r5, r0
 800d012:	000c      	movs	r4, r1
 800d014:	2e00      	cmp	r6, #0
 800d016:	d10e      	bne.n	800d036 <_Bfree+0x2a>
 800d018:	2010      	movs	r0, #16
 800d01a:	f7fd ffab 	bl	800af74 <malloc>
 800d01e:	1e02      	subs	r2, r0, #0
 800d020:	6268      	str	r0, [r5, #36]	; 0x24
 800d022:	d104      	bne.n	800d02e <_Bfree+0x22>
 800d024:	218a      	movs	r1, #138	; 0x8a
 800d026:	4b09      	ldr	r3, [pc, #36]	; (800d04c <_Bfree+0x40>)
 800d028:	4809      	ldr	r0, [pc, #36]	; (800d050 <_Bfree+0x44>)
 800d02a:	f000 fe97 	bl	800dd5c <__assert_func>
 800d02e:	6046      	str	r6, [r0, #4]
 800d030:	6086      	str	r6, [r0, #8]
 800d032:	6006      	str	r6, [r0, #0]
 800d034:	60c6      	str	r6, [r0, #12]
 800d036:	2c00      	cmp	r4, #0
 800d038:	d007      	beq.n	800d04a <_Bfree+0x3e>
 800d03a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d03c:	6862      	ldr	r2, [r4, #4]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	0092      	lsls	r2, r2, #2
 800d042:	189b      	adds	r3, r3, r2
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	6022      	str	r2, [r4, #0]
 800d048:	601c      	str	r4, [r3, #0]
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	0800e30a 	.word	0x0800e30a
 800d050:	0800e3f0 	.word	0x0800e3f0

0800d054 <__multadd>:
 800d054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d056:	000e      	movs	r6, r1
 800d058:	9001      	str	r0, [sp, #4]
 800d05a:	000c      	movs	r4, r1
 800d05c:	001d      	movs	r5, r3
 800d05e:	2000      	movs	r0, #0
 800d060:	690f      	ldr	r7, [r1, #16]
 800d062:	3614      	adds	r6, #20
 800d064:	6833      	ldr	r3, [r6, #0]
 800d066:	3001      	adds	r0, #1
 800d068:	b299      	uxth	r1, r3
 800d06a:	4351      	muls	r1, r2
 800d06c:	0c1b      	lsrs	r3, r3, #16
 800d06e:	4353      	muls	r3, r2
 800d070:	1949      	adds	r1, r1, r5
 800d072:	0c0d      	lsrs	r5, r1, #16
 800d074:	195b      	adds	r3, r3, r5
 800d076:	0c1d      	lsrs	r5, r3, #16
 800d078:	b289      	uxth	r1, r1
 800d07a:	041b      	lsls	r3, r3, #16
 800d07c:	185b      	adds	r3, r3, r1
 800d07e:	c608      	stmia	r6!, {r3}
 800d080:	4287      	cmp	r7, r0
 800d082:	dcef      	bgt.n	800d064 <__multadd+0x10>
 800d084:	2d00      	cmp	r5, #0
 800d086:	d022      	beq.n	800d0ce <__multadd+0x7a>
 800d088:	68a3      	ldr	r3, [r4, #8]
 800d08a:	42bb      	cmp	r3, r7
 800d08c:	dc19      	bgt.n	800d0c2 <__multadd+0x6e>
 800d08e:	6863      	ldr	r3, [r4, #4]
 800d090:	9801      	ldr	r0, [sp, #4]
 800d092:	1c59      	adds	r1, r3, #1
 800d094:	f7ff ff76 	bl	800cf84 <_Balloc>
 800d098:	1e06      	subs	r6, r0, #0
 800d09a:	d105      	bne.n	800d0a8 <__multadd+0x54>
 800d09c:	0002      	movs	r2, r0
 800d09e:	21b5      	movs	r1, #181	; 0xb5
 800d0a0:	4b0c      	ldr	r3, [pc, #48]	; (800d0d4 <__multadd+0x80>)
 800d0a2:	480d      	ldr	r0, [pc, #52]	; (800d0d8 <__multadd+0x84>)
 800d0a4:	f000 fe5a 	bl	800dd5c <__assert_func>
 800d0a8:	0021      	movs	r1, r4
 800d0aa:	6923      	ldr	r3, [r4, #16]
 800d0ac:	310c      	adds	r1, #12
 800d0ae:	1c9a      	adds	r2, r3, #2
 800d0b0:	0092      	lsls	r2, r2, #2
 800d0b2:	300c      	adds	r0, #12
 800d0b4:	f7ff ff4d 	bl	800cf52 <memcpy>
 800d0b8:	0021      	movs	r1, r4
 800d0ba:	9801      	ldr	r0, [sp, #4]
 800d0bc:	f7ff ffa6 	bl	800d00c <_Bfree>
 800d0c0:	0034      	movs	r4, r6
 800d0c2:	1d3b      	adds	r3, r7, #4
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	18e3      	adds	r3, r4, r3
 800d0c8:	605d      	str	r5, [r3, #4]
 800d0ca:	1c7b      	adds	r3, r7, #1
 800d0cc:	6123      	str	r3, [r4, #16]
 800d0ce:	0020      	movs	r0, r4
 800d0d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0d2:	46c0      	nop			; (mov r8, r8)
 800d0d4:	0800e37c 	.word	0x0800e37c
 800d0d8:	0800e3f0 	.word	0x0800e3f0

0800d0dc <__hi0bits>:
 800d0dc:	0003      	movs	r3, r0
 800d0de:	0c02      	lsrs	r2, r0, #16
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	4282      	cmp	r2, r0
 800d0e4:	d101      	bne.n	800d0ea <__hi0bits+0xe>
 800d0e6:	041b      	lsls	r3, r3, #16
 800d0e8:	3010      	adds	r0, #16
 800d0ea:	0e1a      	lsrs	r2, r3, #24
 800d0ec:	d101      	bne.n	800d0f2 <__hi0bits+0x16>
 800d0ee:	3008      	adds	r0, #8
 800d0f0:	021b      	lsls	r3, r3, #8
 800d0f2:	0f1a      	lsrs	r2, r3, #28
 800d0f4:	d101      	bne.n	800d0fa <__hi0bits+0x1e>
 800d0f6:	3004      	adds	r0, #4
 800d0f8:	011b      	lsls	r3, r3, #4
 800d0fa:	0f9a      	lsrs	r2, r3, #30
 800d0fc:	d101      	bne.n	800d102 <__hi0bits+0x26>
 800d0fe:	3002      	adds	r0, #2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	2b00      	cmp	r3, #0
 800d104:	db03      	blt.n	800d10e <__hi0bits+0x32>
 800d106:	3001      	adds	r0, #1
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	d400      	bmi.n	800d10e <__hi0bits+0x32>
 800d10c:	2020      	movs	r0, #32
 800d10e:	4770      	bx	lr

0800d110 <__lo0bits>:
 800d110:	6803      	ldr	r3, [r0, #0]
 800d112:	0002      	movs	r2, r0
 800d114:	2107      	movs	r1, #7
 800d116:	0018      	movs	r0, r3
 800d118:	4008      	ands	r0, r1
 800d11a:	420b      	tst	r3, r1
 800d11c:	d00d      	beq.n	800d13a <__lo0bits+0x2a>
 800d11e:	3906      	subs	r1, #6
 800d120:	2000      	movs	r0, #0
 800d122:	420b      	tst	r3, r1
 800d124:	d105      	bne.n	800d132 <__lo0bits+0x22>
 800d126:	3002      	adds	r0, #2
 800d128:	4203      	tst	r3, r0
 800d12a:	d003      	beq.n	800d134 <__lo0bits+0x24>
 800d12c:	40cb      	lsrs	r3, r1
 800d12e:	0008      	movs	r0, r1
 800d130:	6013      	str	r3, [r2, #0]
 800d132:	4770      	bx	lr
 800d134:	089b      	lsrs	r3, r3, #2
 800d136:	6013      	str	r3, [r2, #0]
 800d138:	e7fb      	b.n	800d132 <__lo0bits+0x22>
 800d13a:	b299      	uxth	r1, r3
 800d13c:	2900      	cmp	r1, #0
 800d13e:	d101      	bne.n	800d144 <__lo0bits+0x34>
 800d140:	2010      	movs	r0, #16
 800d142:	0c1b      	lsrs	r3, r3, #16
 800d144:	b2d9      	uxtb	r1, r3
 800d146:	2900      	cmp	r1, #0
 800d148:	d101      	bne.n	800d14e <__lo0bits+0x3e>
 800d14a:	3008      	adds	r0, #8
 800d14c:	0a1b      	lsrs	r3, r3, #8
 800d14e:	0719      	lsls	r1, r3, #28
 800d150:	d101      	bne.n	800d156 <__lo0bits+0x46>
 800d152:	3004      	adds	r0, #4
 800d154:	091b      	lsrs	r3, r3, #4
 800d156:	0799      	lsls	r1, r3, #30
 800d158:	d101      	bne.n	800d15e <__lo0bits+0x4e>
 800d15a:	3002      	adds	r0, #2
 800d15c:	089b      	lsrs	r3, r3, #2
 800d15e:	07d9      	lsls	r1, r3, #31
 800d160:	d4e9      	bmi.n	800d136 <__lo0bits+0x26>
 800d162:	3001      	adds	r0, #1
 800d164:	085b      	lsrs	r3, r3, #1
 800d166:	d1e6      	bne.n	800d136 <__lo0bits+0x26>
 800d168:	2020      	movs	r0, #32
 800d16a:	e7e2      	b.n	800d132 <__lo0bits+0x22>

0800d16c <__i2b>:
 800d16c:	b510      	push	{r4, lr}
 800d16e:	000c      	movs	r4, r1
 800d170:	2101      	movs	r1, #1
 800d172:	f7ff ff07 	bl	800cf84 <_Balloc>
 800d176:	2800      	cmp	r0, #0
 800d178:	d106      	bne.n	800d188 <__i2b+0x1c>
 800d17a:	21a0      	movs	r1, #160	; 0xa0
 800d17c:	0002      	movs	r2, r0
 800d17e:	4b04      	ldr	r3, [pc, #16]	; (800d190 <__i2b+0x24>)
 800d180:	4804      	ldr	r0, [pc, #16]	; (800d194 <__i2b+0x28>)
 800d182:	0049      	lsls	r1, r1, #1
 800d184:	f000 fdea 	bl	800dd5c <__assert_func>
 800d188:	2301      	movs	r3, #1
 800d18a:	6144      	str	r4, [r0, #20]
 800d18c:	6103      	str	r3, [r0, #16]
 800d18e:	bd10      	pop	{r4, pc}
 800d190:	0800e37c 	.word	0x0800e37c
 800d194:	0800e3f0 	.word	0x0800e3f0

0800d198 <__multiply>:
 800d198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d19a:	690b      	ldr	r3, [r1, #16]
 800d19c:	0014      	movs	r4, r2
 800d19e:	6912      	ldr	r2, [r2, #16]
 800d1a0:	000d      	movs	r5, r1
 800d1a2:	b089      	sub	sp, #36	; 0x24
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	da01      	bge.n	800d1ac <__multiply+0x14>
 800d1a8:	0025      	movs	r5, r4
 800d1aa:	000c      	movs	r4, r1
 800d1ac:	692f      	ldr	r7, [r5, #16]
 800d1ae:	6926      	ldr	r6, [r4, #16]
 800d1b0:	6869      	ldr	r1, [r5, #4]
 800d1b2:	19bb      	adds	r3, r7, r6
 800d1b4:	9302      	str	r3, [sp, #8]
 800d1b6:	68ab      	ldr	r3, [r5, #8]
 800d1b8:	19ba      	adds	r2, r7, r6
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	da00      	bge.n	800d1c0 <__multiply+0x28>
 800d1be:	3101      	adds	r1, #1
 800d1c0:	f7ff fee0 	bl	800cf84 <_Balloc>
 800d1c4:	9001      	str	r0, [sp, #4]
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d106      	bne.n	800d1d8 <__multiply+0x40>
 800d1ca:	215e      	movs	r1, #94	; 0x5e
 800d1cc:	0002      	movs	r2, r0
 800d1ce:	4b48      	ldr	r3, [pc, #288]	; (800d2f0 <__multiply+0x158>)
 800d1d0:	4848      	ldr	r0, [pc, #288]	; (800d2f4 <__multiply+0x15c>)
 800d1d2:	31ff      	adds	r1, #255	; 0xff
 800d1d4:	f000 fdc2 	bl	800dd5c <__assert_func>
 800d1d8:	9b01      	ldr	r3, [sp, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	3314      	adds	r3, #20
 800d1de:	469c      	mov	ip, r3
 800d1e0:	19bb      	adds	r3, r7, r6
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4463      	add	r3, ip
 800d1e6:	9303      	str	r3, [sp, #12]
 800d1e8:	4663      	mov	r3, ip
 800d1ea:	9903      	ldr	r1, [sp, #12]
 800d1ec:	428b      	cmp	r3, r1
 800d1ee:	d32c      	bcc.n	800d24a <__multiply+0xb2>
 800d1f0:	002b      	movs	r3, r5
 800d1f2:	0022      	movs	r2, r4
 800d1f4:	3314      	adds	r3, #20
 800d1f6:	00bf      	lsls	r7, r7, #2
 800d1f8:	3214      	adds	r2, #20
 800d1fa:	9306      	str	r3, [sp, #24]
 800d1fc:	00b6      	lsls	r6, r6, #2
 800d1fe:	19db      	adds	r3, r3, r7
 800d200:	9304      	str	r3, [sp, #16]
 800d202:	1993      	adds	r3, r2, r6
 800d204:	9307      	str	r3, [sp, #28]
 800d206:	2304      	movs	r3, #4
 800d208:	9305      	str	r3, [sp, #20]
 800d20a:	002b      	movs	r3, r5
 800d20c:	9904      	ldr	r1, [sp, #16]
 800d20e:	3315      	adds	r3, #21
 800d210:	9200      	str	r2, [sp, #0]
 800d212:	4299      	cmp	r1, r3
 800d214:	d305      	bcc.n	800d222 <__multiply+0x8a>
 800d216:	1b4b      	subs	r3, r1, r5
 800d218:	3b15      	subs	r3, #21
 800d21a:	089b      	lsrs	r3, r3, #2
 800d21c:	3301      	adds	r3, #1
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	9305      	str	r3, [sp, #20]
 800d222:	9b07      	ldr	r3, [sp, #28]
 800d224:	9a00      	ldr	r2, [sp, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d311      	bcc.n	800d24e <__multiply+0xb6>
 800d22a:	9b02      	ldr	r3, [sp, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dd06      	ble.n	800d23e <__multiply+0xa6>
 800d230:	9b03      	ldr	r3, [sp, #12]
 800d232:	3b04      	subs	r3, #4
 800d234:	9303      	str	r3, [sp, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d053      	beq.n	800d2e6 <__multiply+0x14e>
 800d23e:	9b01      	ldr	r3, [sp, #4]
 800d240:	9a02      	ldr	r2, [sp, #8]
 800d242:	0018      	movs	r0, r3
 800d244:	611a      	str	r2, [r3, #16]
 800d246:	b009      	add	sp, #36	; 0x24
 800d248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d24a:	c304      	stmia	r3!, {r2}
 800d24c:	e7cd      	b.n	800d1ea <__multiply+0x52>
 800d24e:	9b00      	ldr	r3, [sp, #0]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	b298      	uxth	r0, r3
 800d254:	2800      	cmp	r0, #0
 800d256:	d01b      	beq.n	800d290 <__multiply+0xf8>
 800d258:	4667      	mov	r7, ip
 800d25a:	2400      	movs	r4, #0
 800d25c:	9e06      	ldr	r6, [sp, #24]
 800d25e:	ce02      	ldmia	r6!, {r1}
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	b28b      	uxth	r3, r1
 800d264:	4343      	muls	r3, r0
 800d266:	b292      	uxth	r2, r2
 800d268:	189b      	adds	r3, r3, r2
 800d26a:	191b      	adds	r3, r3, r4
 800d26c:	0c0c      	lsrs	r4, r1, #16
 800d26e:	4344      	muls	r4, r0
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	0c11      	lsrs	r1, r2, #16
 800d274:	1861      	adds	r1, r4, r1
 800d276:	0c1c      	lsrs	r4, r3, #16
 800d278:	1909      	adds	r1, r1, r4
 800d27a:	0c0c      	lsrs	r4, r1, #16
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	0409      	lsls	r1, r1, #16
 800d280:	430b      	orrs	r3, r1
 800d282:	c708      	stmia	r7!, {r3}
 800d284:	9b04      	ldr	r3, [sp, #16]
 800d286:	42b3      	cmp	r3, r6
 800d288:	d8e9      	bhi.n	800d25e <__multiply+0xc6>
 800d28a:	4663      	mov	r3, ip
 800d28c:	9a05      	ldr	r2, [sp, #20]
 800d28e:	509c      	str	r4, [r3, r2]
 800d290:	9b00      	ldr	r3, [sp, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	0c1e      	lsrs	r6, r3, #16
 800d296:	d020      	beq.n	800d2da <__multiply+0x142>
 800d298:	4663      	mov	r3, ip
 800d29a:	002c      	movs	r4, r5
 800d29c:	4660      	mov	r0, ip
 800d29e:	2700      	movs	r7, #0
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3414      	adds	r4, #20
 800d2a4:	6822      	ldr	r2, [r4, #0]
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	b291      	uxth	r1, r2
 800d2aa:	4371      	muls	r1, r6
 800d2ac:	6802      	ldr	r2, [r0, #0]
 800d2ae:	0c12      	lsrs	r2, r2, #16
 800d2b0:	1889      	adds	r1, r1, r2
 800d2b2:	19cf      	adds	r7, r1, r7
 800d2b4:	0439      	lsls	r1, r7, #16
 800d2b6:	430b      	orrs	r3, r1
 800d2b8:	6003      	str	r3, [r0, #0]
 800d2ba:	cc02      	ldmia	r4!, {r1}
 800d2bc:	6843      	ldr	r3, [r0, #4]
 800d2be:	0c09      	lsrs	r1, r1, #16
 800d2c0:	4371      	muls	r1, r6
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	0c3f      	lsrs	r7, r7, #16
 800d2c6:	18cb      	adds	r3, r1, r3
 800d2c8:	9a04      	ldr	r2, [sp, #16]
 800d2ca:	19db      	adds	r3, r3, r7
 800d2cc:	0c1f      	lsrs	r7, r3, #16
 800d2ce:	3004      	adds	r0, #4
 800d2d0:	42a2      	cmp	r2, r4
 800d2d2:	d8e7      	bhi.n	800d2a4 <__multiply+0x10c>
 800d2d4:	4662      	mov	r2, ip
 800d2d6:	9905      	ldr	r1, [sp, #20]
 800d2d8:	5053      	str	r3, [r2, r1]
 800d2da:	9b00      	ldr	r3, [sp, #0]
 800d2dc:	3304      	adds	r3, #4
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	2304      	movs	r3, #4
 800d2e2:	449c      	add	ip, r3
 800d2e4:	e79d      	b.n	800d222 <__multiply+0x8a>
 800d2e6:	9b02      	ldr	r3, [sp, #8]
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	9302      	str	r3, [sp, #8]
 800d2ec:	e79d      	b.n	800d22a <__multiply+0x92>
 800d2ee:	46c0      	nop			; (mov r8, r8)
 800d2f0:	0800e37c 	.word	0x0800e37c
 800d2f4:	0800e3f0 	.word	0x0800e3f0

0800d2f8 <__pow5mult>:
 800d2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	0015      	movs	r5, r2
 800d2fe:	0007      	movs	r7, r0
 800d300:	000e      	movs	r6, r1
 800d302:	401a      	ands	r2, r3
 800d304:	421d      	tst	r5, r3
 800d306:	d008      	beq.n	800d31a <__pow5mult+0x22>
 800d308:	4925      	ldr	r1, [pc, #148]	; (800d3a0 <__pow5mult+0xa8>)
 800d30a:	3a01      	subs	r2, #1
 800d30c:	0092      	lsls	r2, r2, #2
 800d30e:	5852      	ldr	r2, [r2, r1]
 800d310:	2300      	movs	r3, #0
 800d312:	0031      	movs	r1, r6
 800d314:	f7ff fe9e 	bl	800d054 <__multadd>
 800d318:	0006      	movs	r6, r0
 800d31a:	10ad      	asrs	r5, r5, #2
 800d31c:	d03d      	beq.n	800d39a <__pow5mult+0xa2>
 800d31e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d320:	2c00      	cmp	r4, #0
 800d322:	d10f      	bne.n	800d344 <__pow5mult+0x4c>
 800d324:	2010      	movs	r0, #16
 800d326:	f7fd fe25 	bl	800af74 <malloc>
 800d32a:	1e02      	subs	r2, r0, #0
 800d32c:	6278      	str	r0, [r7, #36]	; 0x24
 800d32e:	d105      	bne.n	800d33c <__pow5mult+0x44>
 800d330:	21d7      	movs	r1, #215	; 0xd7
 800d332:	4b1c      	ldr	r3, [pc, #112]	; (800d3a4 <__pow5mult+0xac>)
 800d334:	481c      	ldr	r0, [pc, #112]	; (800d3a8 <__pow5mult+0xb0>)
 800d336:	0049      	lsls	r1, r1, #1
 800d338:	f000 fd10 	bl	800dd5c <__assert_func>
 800d33c:	6044      	str	r4, [r0, #4]
 800d33e:	6084      	str	r4, [r0, #8]
 800d340:	6004      	str	r4, [r0, #0]
 800d342:	60c4      	str	r4, [r0, #12]
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	689c      	ldr	r4, [r3, #8]
 800d348:	9301      	str	r3, [sp, #4]
 800d34a:	2c00      	cmp	r4, #0
 800d34c:	d108      	bne.n	800d360 <__pow5mult+0x68>
 800d34e:	0038      	movs	r0, r7
 800d350:	4916      	ldr	r1, [pc, #88]	; (800d3ac <__pow5mult+0xb4>)
 800d352:	f7ff ff0b 	bl	800d16c <__i2b>
 800d356:	9b01      	ldr	r3, [sp, #4]
 800d358:	0004      	movs	r4, r0
 800d35a:	6098      	str	r0, [r3, #8]
 800d35c:	2300      	movs	r3, #0
 800d35e:	6003      	str	r3, [r0, #0]
 800d360:	2301      	movs	r3, #1
 800d362:	421d      	tst	r5, r3
 800d364:	d00a      	beq.n	800d37c <__pow5mult+0x84>
 800d366:	0031      	movs	r1, r6
 800d368:	0022      	movs	r2, r4
 800d36a:	0038      	movs	r0, r7
 800d36c:	f7ff ff14 	bl	800d198 <__multiply>
 800d370:	0031      	movs	r1, r6
 800d372:	9001      	str	r0, [sp, #4]
 800d374:	0038      	movs	r0, r7
 800d376:	f7ff fe49 	bl	800d00c <_Bfree>
 800d37a:	9e01      	ldr	r6, [sp, #4]
 800d37c:	106d      	asrs	r5, r5, #1
 800d37e:	d00c      	beq.n	800d39a <__pow5mult+0xa2>
 800d380:	6820      	ldr	r0, [r4, #0]
 800d382:	2800      	cmp	r0, #0
 800d384:	d107      	bne.n	800d396 <__pow5mult+0x9e>
 800d386:	0022      	movs	r2, r4
 800d388:	0021      	movs	r1, r4
 800d38a:	0038      	movs	r0, r7
 800d38c:	f7ff ff04 	bl	800d198 <__multiply>
 800d390:	2300      	movs	r3, #0
 800d392:	6020      	str	r0, [r4, #0]
 800d394:	6003      	str	r3, [r0, #0]
 800d396:	0004      	movs	r4, r0
 800d398:	e7e2      	b.n	800d360 <__pow5mult+0x68>
 800d39a:	0030      	movs	r0, r6
 800d39c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d39e:	46c0      	nop			; (mov r8, r8)
 800d3a0:	0800e540 	.word	0x0800e540
 800d3a4:	0800e30a 	.word	0x0800e30a
 800d3a8:	0800e3f0 	.word	0x0800e3f0
 800d3ac:	00000271 	.word	0x00000271

0800d3b0 <__lshift>:
 800d3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b2:	000c      	movs	r4, r1
 800d3b4:	0017      	movs	r7, r2
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	1155      	asrs	r5, r2, #5
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	18eb      	adds	r3, r5, r3
 800d3be:	9302      	str	r3, [sp, #8]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	6849      	ldr	r1, [r1, #4]
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	9004      	str	r0, [sp, #16]
 800d3ca:	9a01      	ldr	r2, [sp, #4]
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	db10      	blt.n	800d3f2 <__lshift+0x42>
 800d3d0:	9804      	ldr	r0, [sp, #16]
 800d3d2:	f7ff fdd7 	bl	800cf84 <_Balloc>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	0002      	movs	r2, r0
 800d3da:	0006      	movs	r6, r0
 800d3dc:	0019      	movs	r1, r3
 800d3de:	3214      	adds	r2, #20
 800d3e0:	4298      	cmp	r0, r3
 800d3e2:	d10c      	bne.n	800d3fe <__lshift+0x4e>
 800d3e4:	21da      	movs	r1, #218	; 0xda
 800d3e6:	0002      	movs	r2, r0
 800d3e8:	4b26      	ldr	r3, [pc, #152]	; (800d484 <__lshift+0xd4>)
 800d3ea:	4827      	ldr	r0, [pc, #156]	; (800d488 <__lshift+0xd8>)
 800d3ec:	31ff      	adds	r1, #255	; 0xff
 800d3ee:	f000 fcb5 	bl	800dd5c <__assert_func>
 800d3f2:	3101      	adds	r1, #1
 800d3f4:	005b      	lsls	r3, r3, #1
 800d3f6:	e7e8      	b.n	800d3ca <__lshift+0x1a>
 800d3f8:	0098      	lsls	r0, r3, #2
 800d3fa:	5011      	str	r1, [r2, r0]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	42ab      	cmp	r3, r5
 800d400:	dbfa      	blt.n	800d3f8 <__lshift+0x48>
 800d402:	43eb      	mvns	r3, r5
 800d404:	17db      	asrs	r3, r3, #31
 800d406:	401d      	ands	r5, r3
 800d408:	211f      	movs	r1, #31
 800d40a:	0023      	movs	r3, r4
 800d40c:	0038      	movs	r0, r7
 800d40e:	00ad      	lsls	r5, r5, #2
 800d410:	1955      	adds	r5, r2, r5
 800d412:	6922      	ldr	r2, [r4, #16]
 800d414:	3314      	adds	r3, #20
 800d416:	0092      	lsls	r2, r2, #2
 800d418:	4008      	ands	r0, r1
 800d41a:	4684      	mov	ip, r0
 800d41c:	189a      	adds	r2, r3, r2
 800d41e:	420f      	tst	r7, r1
 800d420:	d02a      	beq.n	800d478 <__lshift+0xc8>
 800d422:	3101      	adds	r1, #1
 800d424:	1a09      	subs	r1, r1, r0
 800d426:	9105      	str	r1, [sp, #20]
 800d428:	2100      	movs	r1, #0
 800d42a:	9503      	str	r5, [sp, #12]
 800d42c:	4667      	mov	r7, ip
 800d42e:	6818      	ldr	r0, [r3, #0]
 800d430:	40b8      	lsls	r0, r7
 800d432:	4301      	orrs	r1, r0
 800d434:	9803      	ldr	r0, [sp, #12]
 800d436:	c002      	stmia	r0!, {r1}
 800d438:	cb02      	ldmia	r3!, {r1}
 800d43a:	9003      	str	r0, [sp, #12]
 800d43c:	9805      	ldr	r0, [sp, #20]
 800d43e:	40c1      	lsrs	r1, r0
 800d440:	429a      	cmp	r2, r3
 800d442:	d8f3      	bhi.n	800d42c <__lshift+0x7c>
 800d444:	0020      	movs	r0, r4
 800d446:	3015      	adds	r0, #21
 800d448:	2304      	movs	r3, #4
 800d44a:	4282      	cmp	r2, r0
 800d44c:	d304      	bcc.n	800d458 <__lshift+0xa8>
 800d44e:	1b13      	subs	r3, r2, r4
 800d450:	3b15      	subs	r3, #21
 800d452:	089b      	lsrs	r3, r3, #2
 800d454:	3301      	adds	r3, #1
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	50e9      	str	r1, [r5, r3]
 800d45a:	2900      	cmp	r1, #0
 800d45c:	d002      	beq.n	800d464 <__lshift+0xb4>
 800d45e:	9b02      	ldr	r3, [sp, #8]
 800d460:	3302      	adds	r3, #2
 800d462:	9301      	str	r3, [sp, #4]
 800d464:	9b01      	ldr	r3, [sp, #4]
 800d466:	9804      	ldr	r0, [sp, #16]
 800d468:	3b01      	subs	r3, #1
 800d46a:	0021      	movs	r1, r4
 800d46c:	6133      	str	r3, [r6, #16]
 800d46e:	f7ff fdcd 	bl	800d00c <_Bfree>
 800d472:	0030      	movs	r0, r6
 800d474:	b007      	add	sp, #28
 800d476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d478:	cb02      	ldmia	r3!, {r1}
 800d47a:	c502      	stmia	r5!, {r1}
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d8fb      	bhi.n	800d478 <__lshift+0xc8>
 800d480:	e7f0      	b.n	800d464 <__lshift+0xb4>
 800d482:	46c0      	nop			; (mov r8, r8)
 800d484:	0800e37c 	.word	0x0800e37c
 800d488:	0800e3f0 	.word	0x0800e3f0

0800d48c <__mcmp>:
 800d48c:	6902      	ldr	r2, [r0, #16]
 800d48e:	690b      	ldr	r3, [r1, #16]
 800d490:	b530      	push	{r4, r5, lr}
 800d492:	0004      	movs	r4, r0
 800d494:	1ad0      	subs	r0, r2, r3
 800d496:	429a      	cmp	r2, r3
 800d498:	d10d      	bne.n	800d4b6 <__mcmp+0x2a>
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	3414      	adds	r4, #20
 800d49e:	3114      	adds	r1, #20
 800d4a0:	18e2      	adds	r2, r4, r3
 800d4a2:	18c9      	adds	r1, r1, r3
 800d4a4:	3a04      	subs	r2, #4
 800d4a6:	3904      	subs	r1, #4
 800d4a8:	6815      	ldr	r5, [r2, #0]
 800d4aa:	680b      	ldr	r3, [r1, #0]
 800d4ac:	429d      	cmp	r5, r3
 800d4ae:	d003      	beq.n	800d4b8 <__mcmp+0x2c>
 800d4b0:	2001      	movs	r0, #1
 800d4b2:	429d      	cmp	r5, r3
 800d4b4:	d303      	bcc.n	800d4be <__mcmp+0x32>
 800d4b6:	bd30      	pop	{r4, r5, pc}
 800d4b8:	4294      	cmp	r4, r2
 800d4ba:	d3f3      	bcc.n	800d4a4 <__mcmp+0x18>
 800d4bc:	e7fb      	b.n	800d4b6 <__mcmp+0x2a>
 800d4be:	4240      	negs	r0, r0
 800d4c0:	e7f9      	b.n	800d4b6 <__mcmp+0x2a>
	...

0800d4c4 <__mdiff>:
 800d4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4c6:	000e      	movs	r6, r1
 800d4c8:	0007      	movs	r7, r0
 800d4ca:	0011      	movs	r1, r2
 800d4cc:	0030      	movs	r0, r6
 800d4ce:	b087      	sub	sp, #28
 800d4d0:	0014      	movs	r4, r2
 800d4d2:	f7ff ffdb 	bl	800d48c <__mcmp>
 800d4d6:	1e05      	subs	r5, r0, #0
 800d4d8:	d110      	bne.n	800d4fc <__mdiff+0x38>
 800d4da:	0001      	movs	r1, r0
 800d4dc:	0038      	movs	r0, r7
 800d4de:	f7ff fd51 	bl	800cf84 <_Balloc>
 800d4e2:	1e02      	subs	r2, r0, #0
 800d4e4:	d104      	bne.n	800d4f0 <__mdiff+0x2c>
 800d4e6:	4b40      	ldr	r3, [pc, #256]	; (800d5e8 <__mdiff+0x124>)
 800d4e8:	4940      	ldr	r1, [pc, #256]	; (800d5ec <__mdiff+0x128>)
 800d4ea:	4841      	ldr	r0, [pc, #260]	; (800d5f0 <__mdiff+0x12c>)
 800d4ec:	f000 fc36 	bl	800dd5c <__assert_func>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	6145      	str	r5, [r0, #20]
 800d4f4:	6103      	str	r3, [r0, #16]
 800d4f6:	0010      	movs	r0, r2
 800d4f8:	b007      	add	sp, #28
 800d4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	2800      	cmp	r0, #0
 800d502:	db04      	blt.n	800d50e <__mdiff+0x4a>
 800d504:	0023      	movs	r3, r4
 800d506:	0034      	movs	r4, r6
 800d508:	001e      	movs	r6, r3
 800d50a:	2300      	movs	r3, #0
 800d50c:	9301      	str	r3, [sp, #4]
 800d50e:	0038      	movs	r0, r7
 800d510:	6861      	ldr	r1, [r4, #4]
 800d512:	f7ff fd37 	bl	800cf84 <_Balloc>
 800d516:	1e02      	subs	r2, r0, #0
 800d518:	d103      	bne.n	800d522 <__mdiff+0x5e>
 800d51a:	2190      	movs	r1, #144	; 0x90
 800d51c:	4b32      	ldr	r3, [pc, #200]	; (800d5e8 <__mdiff+0x124>)
 800d51e:	0089      	lsls	r1, r1, #2
 800d520:	e7e3      	b.n	800d4ea <__mdiff+0x26>
 800d522:	9b01      	ldr	r3, [sp, #4]
 800d524:	2700      	movs	r7, #0
 800d526:	60c3      	str	r3, [r0, #12]
 800d528:	6920      	ldr	r0, [r4, #16]
 800d52a:	3414      	adds	r4, #20
 800d52c:	9401      	str	r4, [sp, #4]
 800d52e:	9b01      	ldr	r3, [sp, #4]
 800d530:	0084      	lsls	r4, r0, #2
 800d532:	191b      	adds	r3, r3, r4
 800d534:	0034      	movs	r4, r6
 800d536:	9302      	str	r3, [sp, #8]
 800d538:	6933      	ldr	r3, [r6, #16]
 800d53a:	3414      	adds	r4, #20
 800d53c:	0099      	lsls	r1, r3, #2
 800d53e:	1863      	adds	r3, r4, r1
 800d540:	9303      	str	r3, [sp, #12]
 800d542:	0013      	movs	r3, r2
 800d544:	3314      	adds	r3, #20
 800d546:	469c      	mov	ip, r3
 800d548:	9305      	str	r3, [sp, #20]
 800d54a:	9b01      	ldr	r3, [sp, #4]
 800d54c:	9304      	str	r3, [sp, #16]
 800d54e:	9b04      	ldr	r3, [sp, #16]
 800d550:	cc02      	ldmia	r4!, {r1}
 800d552:	cb20      	ldmia	r3!, {r5}
 800d554:	9304      	str	r3, [sp, #16]
 800d556:	b2ab      	uxth	r3, r5
 800d558:	19df      	adds	r7, r3, r7
 800d55a:	b28b      	uxth	r3, r1
 800d55c:	1afb      	subs	r3, r7, r3
 800d55e:	0c09      	lsrs	r1, r1, #16
 800d560:	0c2d      	lsrs	r5, r5, #16
 800d562:	1a6d      	subs	r5, r5, r1
 800d564:	1419      	asrs	r1, r3, #16
 800d566:	186d      	adds	r5, r5, r1
 800d568:	4661      	mov	r1, ip
 800d56a:	142f      	asrs	r7, r5, #16
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	042d      	lsls	r5, r5, #16
 800d570:	432b      	orrs	r3, r5
 800d572:	c108      	stmia	r1!, {r3}
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	468c      	mov	ip, r1
 800d578:	42a3      	cmp	r3, r4
 800d57a:	d8e8      	bhi.n	800d54e <__mdiff+0x8a>
 800d57c:	0031      	movs	r1, r6
 800d57e:	9c03      	ldr	r4, [sp, #12]
 800d580:	3115      	adds	r1, #21
 800d582:	2304      	movs	r3, #4
 800d584:	428c      	cmp	r4, r1
 800d586:	d304      	bcc.n	800d592 <__mdiff+0xce>
 800d588:	1ba3      	subs	r3, r4, r6
 800d58a:	3b15      	subs	r3, #21
 800d58c:	089b      	lsrs	r3, r3, #2
 800d58e:	3301      	adds	r3, #1
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	9901      	ldr	r1, [sp, #4]
 800d594:	18cc      	adds	r4, r1, r3
 800d596:	9905      	ldr	r1, [sp, #20]
 800d598:	0026      	movs	r6, r4
 800d59a:	18cb      	adds	r3, r1, r3
 800d59c:	469c      	mov	ip, r3
 800d59e:	9902      	ldr	r1, [sp, #8]
 800d5a0:	428e      	cmp	r6, r1
 800d5a2:	d310      	bcc.n	800d5c6 <__mdiff+0x102>
 800d5a4:	9e02      	ldr	r6, [sp, #8]
 800d5a6:	1ee1      	subs	r1, r4, #3
 800d5a8:	2500      	movs	r5, #0
 800d5aa:	428e      	cmp	r6, r1
 800d5ac:	d304      	bcc.n	800d5b8 <__mdiff+0xf4>
 800d5ae:	0031      	movs	r1, r6
 800d5b0:	3103      	adds	r1, #3
 800d5b2:	1b0c      	subs	r4, r1, r4
 800d5b4:	08a4      	lsrs	r4, r4, #2
 800d5b6:	00a5      	lsls	r5, r4, #2
 800d5b8:	195b      	adds	r3, r3, r5
 800d5ba:	3b04      	subs	r3, #4
 800d5bc:	6819      	ldr	r1, [r3, #0]
 800d5be:	2900      	cmp	r1, #0
 800d5c0:	d00f      	beq.n	800d5e2 <__mdiff+0x11e>
 800d5c2:	6110      	str	r0, [r2, #16]
 800d5c4:	e797      	b.n	800d4f6 <__mdiff+0x32>
 800d5c6:	ce02      	ldmia	r6!, {r1}
 800d5c8:	b28d      	uxth	r5, r1
 800d5ca:	19ed      	adds	r5, r5, r7
 800d5cc:	0c0f      	lsrs	r7, r1, #16
 800d5ce:	1429      	asrs	r1, r5, #16
 800d5d0:	1879      	adds	r1, r7, r1
 800d5d2:	140f      	asrs	r7, r1, #16
 800d5d4:	b2ad      	uxth	r5, r5
 800d5d6:	0409      	lsls	r1, r1, #16
 800d5d8:	430d      	orrs	r5, r1
 800d5da:	4661      	mov	r1, ip
 800d5dc:	c120      	stmia	r1!, {r5}
 800d5de:	468c      	mov	ip, r1
 800d5e0:	e7dd      	b.n	800d59e <__mdiff+0xda>
 800d5e2:	3801      	subs	r0, #1
 800d5e4:	e7e9      	b.n	800d5ba <__mdiff+0xf6>
 800d5e6:	46c0      	nop			; (mov r8, r8)
 800d5e8:	0800e37c 	.word	0x0800e37c
 800d5ec:	00000232 	.word	0x00000232
 800d5f0:	0800e3f0 	.word	0x0800e3f0

0800d5f4 <__d2b>:
 800d5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5f6:	2101      	movs	r1, #1
 800d5f8:	0014      	movs	r4, r2
 800d5fa:	001e      	movs	r6, r3
 800d5fc:	9f08      	ldr	r7, [sp, #32]
 800d5fe:	f7ff fcc1 	bl	800cf84 <_Balloc>
 800d602:	1e05      	subs	r5, r0, #0
 800d604:	d105      	bne.n	800d612 <__d2b+0x1e>
 800d606:	0002      	movs	r2, r0
 800d608:	4b26      	ldr	r3, [pc, #152]	; (800d6a4 <__d2b+0xb0>)
 800d60a:	4927      	ldr	r1, [pc, #156]	; (800d6a8 <__d2b+0xb4>)
 800d60c:	4827      	ldr	r0, [pc, #156]	; (800d6ac <__d2b+0xb8>)
 800d60e:	f000 fba5 	bl	800dd5c <__assert_func>
 800d612:	0333      	lsls	r3, r6, #12
 800d614:	0076      	lsls	r6, r6, #1
 800d616:	0b1b      	lsrs	r3, r3, #12
 800d618:	0d76      	lsrs	r6, r6, #21
 800d61a:	d124      	bne.n	800d666 <__d2b+0x72>
 800d61c:	9301      	str	r3, [sp, #4]
 800d61e:	2c00      	cmp	r4, #0
 800d620:	d027      	beq.n	800d672 <__d2b+0x7e>
 800d622:	4668      	mov	r0, sp
 800d624:	9400      	str	r4, [sp, #0]
 800d626:	f7ff fd73 	bl	800d110 <__lo0bits>
 800d62a:	9c00      	ldr	r4, [sp, #0]
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d01e      	beq.n	800d66e <__d2b+0x7a>
 800d630:	9b01      	ldr	r3, [sp, #4]
 800d632:	2120      	movs	r1, #32
 800d634:	001a      	movs	r2, r3
 800d636:	1a09      	subs	r1, r1, r0
 800d638:	408a      	lsls	r2, r1
 800d63a:	40c3      	lsrs	r3, r0
 800d63c:	4322      	orrs	r2, r4
 800d63e:	616a      	str	r2, [r5, #20]
 800d640:	9301      	str	r3, [sp, #4]
 800d642:	9c01      	ldr	r4, [sp, #4]
 800d644:	61ac      	str	r4, [r5, #24]
 800d646:	1e63      	subs	r3, r4, #1
 800d648:	419c      	sbcs	r4, r3
 800d64a:	3401      	adds	r4, #1
 800d64c:	612c      	str	r4, [r5, #16]
 800d64e:	2e00      	cmp	r6, #0
 800d650:	d018      	beq.n	800d684 <__d2b+0x90>
 800d652:	4b17      	ldr	r3, [pc, #92]	; (800d6b0 <__d2b+0xbc>)
 800d654:	18f6      	adds	r6, r6, r3
 800d656:	2335      	movs	r3, #53	; 0x35
 800d658:	1836      	adds	r6, r6, r0
 800d65a:	1a18      	subs	r0, r3, r0
 800d65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65e:	603e      	str	r6, [r7, #0]
 800d660:	6018      	str	r0, [r3, #0]
 800d662:	0028      	movs	r0, r5
 800d664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d666:	2280      	movs	r2, #128	; 0x80
 800d668:	0352      	lsls	r2, r2, #13
 800d66a:	4313      	orrs	r3, r2
 800d66c:	e7d6      	b.n	800d61c <__d2b+0x28>
 800d66e:	616c      	str	r4, [r5, #20]
 800d670:	e7e7      	b.n	800d642 <__d2b+0x4e>
 800d672:	a801      	add	r0, sp, #4
 800d674:	f7ff fd4c 	bl	800d110 <__lo0bits>
 800d678:	2401      	movs	r4, #1
 800d67a:	9b01      	ldr	r3, [sp, #4]
 800d67c:	612c      	str	r4, [r5, #16]
 800d67e:	616b      	str	r3, [r5, #20]
 800d680:	3020      	adds	r0, #32
 800d682:	e7e4      	b.n	800d64e <__d2b+0x5a>
 800d684:	4b0b      	ldr	r3, [pc, #44]	; (800d6b4 <__d2b+0xc0>)
 800d686:	18c0      	adds	r0, r0, r3
 800d688:	4b0b      	ldr	r3, [pc, #44]	; (800d6b8 <__d2b+0xc4>)
 800d68a:	6038      	str	r0, [r7, #0]
 800d68c:	18e3      	adds	r3, r4, r3
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	18eb      	adds	r3, r5, r3
 800d692:	6958      	ldr	r0, [r3, #20]
 800d694:	f7ff fd22 	bl	800d0dc <__hi0bits>
 800d698:	0164      	lsls	r4, r4, #5
 800d69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69c:	1a24      	subs	r4, r4, r0
 800d69e:	601c      	str	r4, [r3, #0]
 800d6a0:	e7df      	b.n	800d662 <__d2b+0x6e>
 800d6a2:	46c0      	nop			; (mov r8, r8)
 800d6a4:	0800e37c 	.word	0x0800e37c
 800d6a8:	0000030a 	.word	0x0000030a
 800d6ac:	0800e3f0 	.word	0x0800e3f0
 800d6b0:	fffffbcd 	.word	0xfffffbcd
 800d6b4:	fffffbce 	.word	0xfffffbce
 800d6b8:	3fffffff 	.word	0x3fffffff

0800d6bc <_calloc_r>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	0c13      	lsrs	r3, r2, #16
 800d6c0:	0c0d      	lsrs	r5, r1, #16
 800d6c2:	d11e      	bne.n	800d702 <_calloc_r+0x46>
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10c      	bne.n	800d6e2 <_calloc_r+0x26>
 800d6c8:	b289      	uxth	r1, r1
 800d6ca:	b294      	uxth	r4, r2
 800d6cc:	434c      	muls	r4, r1
 800d6ce:	0021      	movs	r1, r4
 800d6d0:	f7fd fcce 	bl	800b070 <_malloc_r>
 800d6d4:	1e05      	subs	r5, r0, #0
 800d6d6:	d01b      	beq.n	800d710 <_calloc_r+0x54>
 800d6d8:	0022      	movs	r2, r4
 800d6da:	2100      	movs	r1, #0
 800d6dc:	f7fd fc54 	bl	800af88 <memset>
 800d6e0:	e016      	b.n	800d710 <_calloc_r+0x54>
 800d6e2:	1c1d      	adds	r5, r3, #0
 800d6e4:	1c0b      	adds	r3, r1, #0
 800d6e6:	b292      	uxth	r2, r2
 800d6e8:	b289      	uxth	r1, r1
 800d6ea:	b29c      	uxth	r4, r3
 800d6ec:	4351      	muls	r1, r2
 800d6ee:	b2ab      	uxth	r3, r5
 800d6f0:	4363      	muls	r3, r4
 800d6f2:	0c0c      	lsrs	r4, r1, #16
 800d6f4:	191c      	adds	r4, r3, r4
 800d6f6:	0c22      	lsrs	r2, r4, #16
 800d6f8:	d107      	bne.n	800d70a <_calloc_r+0x4e>
 800d6fa:	0424      	lsls	r4, r4, #16
 800d6fc:	b289      	uxth	r1, r1
 800d6fe:	430c      	orrs	r4, r1
 800d700:	e7e5      	b.n	800d6ce <_calloc_r+0x12>
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <_calloc_r+0x4e>
 800d706:	1c13      	adds	r3, r2, #0
 800d708:	e7ed      	b.n	800d6e6 <_calloc_r+0x2a>
 800d70a:	230c      	movs	r3, #12
 800d70c:	2500      	movs	r5, #0
 800d70e:	6003      	str	r3, [r0, #0]
 800d710:	0028      	movs	r0, r5
 800d712:	bd70      	pop	{r4, r5, r6, pc}

0800d714 <__ssputs_r>:
 800d714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d716:	688e      	ldr	r6, [r1, #8]
 800d718:	b085      	sub	sp, #20
 800d71a:	0007      	movs	r7, r0
 800d71c:	000c      	movs	r4, r1
 800d71e:	9203      	str	r2, [sp, #12]
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	429e      	cmp	r6, r3
 800d724:	d83c      	bhi.n	800d7a0 <__ssputs_r+0x8c>
 800d726:	2390      	movs	r3, #144	; 0x90
 800d728:	898a      	ldrh	r2, [r1, #12]
 800d72a:	00db      	lsls	r3, r3, #3
 800d72c:	421a      	tst	r2, r3
 800d72e:	d034      	beq.n	800d79a <__ssputs_r+0x86>
 800d730:	6909      	ldr	r1, [r1, #16]
 800d732:	6823      	ldr	r3, [r4, #0]
 800d734:	6960      	ldr	r0, [r4, #20]
 800d736:	1a5b      	subs	r3, r3, r1
 800d738:	9302      	str	r3, [sp, #8]
 800d73a:	2303      	movs	r3, #3
 800d73c:	4343      	muls	r3, r0
 800d73e:	0fdd      	lsrs	r5, r3, #31
 800d740:	18ed      	adds	r5, r5, r3
 800d742:	9b01      	ldr	r3, [sp, #4]
 800d744:	9802      	ldr	r0, [sp, #8]
 800d746:	3301      	adds	r3, #1
 800d748:	181b      	adds	r3, r3, r0
 800d74a:	106d      	asrs	r5, r5, #1
 800d74c:	42ab      	cmp	r3, r5
 800d74e:	d900      	bls.n	800d752 <__ssputs_r+0x3e>
 800d750:	001d      	movs	r5, r3
 800d752:	0553      	lsls	r3, r2, #21
 800d754:	d532      	bpl.n	800d7bc <__ssputs_r+0xa8>
 800d756:	0029      	movs	r1, r5
 800d758:	0038      	movs	r0, r7
 800d75a:	f7fd fc89 	bl	800b070 <_malloc_r>
 800d75e:	1e06      	subs	r6, r0, #0
 800d760:	d109      	bne.n	800d776 <__ssputs_r+0x62>
 800d762:	230c      	movs	r3, #12
 800d764:	603b      	str	r3, [r7, #0]
 800d766:	2340      	movs	r3, #64	; 0x40
 800d768:	2001      	movs	r0, #1
 800d76a:	89a2      	ldrh	r2, [r4, #12]
 800d76c:	4240      	negs	r0, r0
 800d76e:	4313      	orrs	r3, r2
 800d770:	81a3      	strh	r3, [r4, #12]
 800d772:	b005      	add	sp, #20
 800d774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d776:	9a02      	ldr	r2, [sp, #8]
 800d778:	6921      	ldr	r1, [r4, #16]
 800d77a:	f7ff fbea 	bl	800cf52 <memcpy>
 800d77e:	89a3      	ldrh	r3, [r4, #12]
 800d780:	4a14      	ldr	r2, [pc, #80]	; (800d7d4 <__ssputs_r+0xc0>)
 800d782:	401a      	ands	r2, r3
 800d784:	2380      	movs	r3, #128	; 0x80
 800d786:	4313      	orrs	r3, r2
 800d788:	81a3      	strh	r3, [r4, #12]
 800d78a:	9b02      	ldr	r3, [sp, #8]
 800d78c:	6126      	str	r6, [r4, #16]
 800d78e:	18f6      	adds	r6, r6, r3
 800d790:	6026      	str	r6, [r4, #0]
 800d792:	6165      	str	r5, [r4, #20]
 800d794:	9e01      	ldr	r6, [sp, #4]
 800d796:	1aed      	subs	r5, r5, r3
 800d798:	60a5      	str	r5, [r4, #8]
 800d79a:	9b01      	ldr	r3, [sp, #4]
 800d79c:	429e      	cmp	r6, r3
 800d79e:	d900      	bls.n	800d7a2 <__ssputs_r+0x8e>
 800d7a0:	9e01      	ldr	r6, [sp, #4]
 800d7a2:	0032      	movs	r2, r6
 800d7a4:	9903      	ldr	r1, [sp, #12]
 800d7a6:	6820      	ldr	r0, [r4, #0]
 800d7a8:	f000 fb62 	bl	800de70 <memmove>
 800d7ac:	68a3      	ldr	r3, [r4, #8]
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	1b9b      	subs	r3, r3, r6
 800d7b2:	60a3      	str	r3, [r4, #8]
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	199e      	adds	r6, r3, r6
 800d7b8:	6026      	str	r6, [r4, #0]
 800d7ba:	e7da      	b.n	800d772 <__ssputs_r+0x5e>
 800d7bc:	002a      	movs	r2, r5
 800d7be:	0038      	movs	r0, r7
 800d7c0:	f000 fb69 	bl	800de96 <_realloc_r>
 800d7c4:	1e06      	subs	r6, r0, #0
 800d7c6:	d1e0      	bne.n	800d78a <__ssputs_r+0x76>
 800d7c8:	0038      	movs	r0, r7
 800d7ca:	6921      	ldr	r1, [r4, #16]
 800d7cc:	f7fd fbe4 	bl	800af98 <_free_r>
 800d7d0:	e7c7      	b.n	800d762 <__ssputs_r+0x4e>
 800d7d2:	46c0      	nop			; (mov r8, r8)
 800d7d4:	fffffb7f 	.word	0xfffffb7f

0800d7d8 <_svfiprintf_r>:
 800d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7da:	b0a1      	sub	sp, #132	; 0x84
 800d7dc:	9003      	str	r0, [sp, #12]
 800d7de:	001d      	movs	r5, r3
 800d7e0:	898b      	ldrh	r3, [r1, #12]
 800d7e2:	000f      	movs	r7, r1
 800d7e4:	0016      	movs	r6, r2
 800d7e6:	061b      	lsls	r3, r3, #24
 800d7e8:	d511      	bpl.n	800d80e <_svfiprintf_r+0x36>
 800d7ea:	690b      	ldr	r3, [r1, #16]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10e      	bne.n	800d80e <_svfiprintf_r+0x36>
 800d7f0:	2140      	movs	r1, #64	; 0x40
 800d7f2:	f7fd fc3d 	bl	800b070 <_malloc_r>
 800d7f6:	6038      	str	r0, [r7, #0]
 800d7f8:	6138      	str	r0, [r7, #16]
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d105      	bne.n	800d80a <_svfiprintf_r+0x32>
 800d7fe:	230c      	movs	r3, #12
 800d800:	9a03      	ldr	r2, [sp, #12]
 800d802:	3801      	subs	r0, #1
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	b021      	add	sp, #132	; 0x84
 800d808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d80a:	2340      	movs	r3, #64	; 0x40
 800d80c:	617b      	str	r3, [r7, #20]
 800d80e:	2300      	movs	r3, #0
 800d810:	ac08      	add	r4, sp, #32
 800d812:	6163      	str	r3, [r4, #20]
 800d814:	3320      	adds	r3, #32
 800d816:	7663      	strb	r3, [r4, #25]
 800d818:	3310      	adds	r3, #16
 800d81a:	76a3      	strb	r3, [r4, #26]
 800d81c:	9507      	str	r5, [sp, #28]
 800d81e:	0035      	movs	r5, r6
 800d820:	782b      	ldrb	r3, [r5, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d001      	beq.n	800d82a <_svfiprintf_r+0x52>
 800d826:	2b25      	cmp	r3, #37	; 0x25
 800d828:	d147      	bne.n	800d8ba <_svfiprintf_r+0xe2>
 800d82a:	1bab      	subs	r3, r5, r6
 800d82c:	9305      	str	r3, [sp, #20]
 800d82e:	42b5      	cmp	r5, r6
 800d830:	d00c      	beq.n	800d84c <_svfiprintf_r+0x74>
 800d832:	0032      	movs	r2, r6
 800d834:	0039      	movs	r1, r7
 800d836:	9803      	ldr	r0, [sp, #12]
 800d838:	f7ff ff6c 	bl	800d714 <__ssputs_r>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d100      	bne.n	800d842 <_svfiprintf_r+0x6a>
 800d840:	e0ae      	b.n	800d9a0 <_svfiprintf_r+0x1c8>
 800d842:	6962      	ldr	r2, [r4, #20]
 800d844:	9b05      	ldr	r3, [sp, #20]
 800d846:	4694      	mov	ip, r2
 800d848:	4463      	add	r3, ip
 800d84a:	6163      	str	r3, [r4, #20]
 800d84c:	782b      	ldrb	r3, [r5, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d100      	bne.n	800d854 <_svfiprintf_r+0x7c>
 800d852:	e0a5      	b.n	800d9a0 <_svfiprintf_r+0x1c8>
 800d854:	2201      	movs	r2, #1
 800d856:	2300      	movs	r3, #0
 800d858:	4252      	negs	r2, r2
 800d85a:	6062      	str	r2, [r4, #4]
 800d85c:	a904      	add	r1, sp, #16
 800d85e:	3254      	adds	r2, #84	; 0x54
 800d860:	1852      	adds	r2, r2, r1
 800d862:	1c6e      	adds	r6, r5, #1
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	60e3      	str	r3, [r4, #12]
 800d868:	60a3      	str	r3, [r4, #8]
 800d86a:	7013      	strb	r3, [r2, #0]
 800d86c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d86e:	2205      	movs	r2, #5
 800d870:	7831      	ldrb	r1, [r6, #0]
 800d872:	4854      	ldr	r0, [pc, #336]	; (800d9c4 <_svfiprintf_r+0x1ec>)
 800d874:	f7ff fb62 	bl	800cf3c <memchr>
 800d878:	1c75      	adds	r5, r6, #1
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d11f      	bne.n	800d8be <_svfiprintf_r+0xe6>
 800d87e:	6822      	ldr	r2, [r4, #0]
 800d880:	06d3      	lsls	r3, r2, #27
 800d882:	d504      	bpl.n	800d88e <_svfiprintf_r+0xb6>
 800d884:	2353      	movs	r3, #83	; 0x53
 800d886:	a904      	add	r1, sp, #16
 800d888:	185b      	adds	r3, r3, r1
 800d88a:	2120      	movs	r1, #32
 800d88c:	7019      	strb	r1, [r3, #0]
 800d88e:	0713      	lsls	r3, r2, #28
 800d890:	d504      	bpl.n	800d89c <_svfiprintf_r+0xc4>
 800d892:	2353      	movs	r3, #83	; 0x53
 800d894:	a904      	add	r1, sp, #16
 800d896:	185b      	adds	r3, r3, r1
 800d898:	212b      	movs	r1, #43	; 0x2b
 800d89a:	7019      	strb	r1, [r3, #0]
 800d89c:	7833      	ldrb	r3, [r6, #0]
 800d89e:	2b2a      	cmp	r3, #42	; 0x2a
 800d8a0:	d016      	beq.n	800d8d0 <_svfiprintf_r+0xf8>
 800d8a2:	0035      	movs	r5, r6
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	200a      	movs	r0, #10
 800d8a8:	68e3      	ldr	r3, [r4, #12]
 800d8aa:	782a      	ldrb	r2, [r5, #0]
 800d8ac:	1c6e      	adds	r6, r5, #1
 800d8ae:	3a30      	subs	r2, #48	; 0x30
 800d8b0:	2a09      	cmp	r2, #9
 800d8b2:	d94e      	bls.n	800d952 <_svfiprintf_r+0x17a>
 800d8b4:	2900      	cmp	r1, #0
 800d8b6:	d111      	bne.n	800d8dc <_svfiprintf_r+0x104>
 800d8b8:	e017      	b.n	800d8ea <_svfiprintf_r+0x112>
 800d8ba:	3501      	adds	r5, #1
 800d8bc:	e7b0      	b.n	800d820 <_svfiprintf_r+0x48>
 800d8be:	4b41      	ldr	r3, [pc, #260]	; (800d9c4 <_svfiprintf_r+0x1ec>)
 800d8c0:	6822      	ldr	r2, [r4, #0]
 800d8c2:	1ac0      	subs	r0, r0, r3
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	4083      	lsls	r3, r0
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	002e      	movs	r6, r5
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	e7ce      	b.n	800d86e <_svfiprintf_r+0x96>
 800d8d0:	9b07      	ldr	r3, [sp, #28]
 800d8d2:	1d19      	adds	r1, r3, #4
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	9107      	str	r1, [sp, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	db01      	blt.n	800d8e0 <_svfiprintf_r+0x108>
 800d8dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8de:	e004      	b.n	800d8ea <_svfiprintf_r+0x112>
 800d8e0:	425b      	negs	r3, r3
 800d8e2:	60e3      	str	r3, [r4, #12]
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	6023      	str	r3, [r4, #0]
 800d8ea:	782b      	ldrb	r3, [r5, #0]
 800d8ec:	2b2e      	cmp	r3, #46	; 0x2e
 800d8ee:	d10a      	bne.n	800d906 <_svfiprintf_r+0x12e>
 800d8f0:	786b      	ldrb	r3, [r5, #1]
 800d8f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8f4:	d135      	bne.n	800d962 <_svfiprintf_r+0x18a>
 800d8f6:	9b07      	ldr	r3, [sp, #28]
 800d8f8:	3502      	adds	r5, #2
 800d8fa:	1d1a      	adds	r2, r3, #4
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	9207      	str	r2, [sp, #28]
 800d900:	2b00      	cmp	r3, #0
 800d902:	db2b      	blt.n	800d95c <_svfiprintf_r+0x184>
 800d904:	9309      	str	r3, [sp, #36]	; 0x24
 800d906:	4e30      	ldr	r6, [pc, #192]	; (800d9c8 <_svfiprintf_r+0x1f0>)
 800d908:	2203      	movs	r2, #3
 800d90a:	0030      	movs	r0, r6
 800d90c:	7829      	ldrb	r1, [r5, #0]
 800d90e:	f7ff fb15 	bl	800cf3c <memchr>
 800d912:	2800      	cmp	r0, #0
 800d914:	d006      	beq.n	800d924 <_svfiprintf_r+0x14c>
 800d916:	2340      	movs	r3, #64	; 0x40
 800d918:	1b80      	subs	r0, r0, r6
 800d91a:	4083      	lsls	r3, r0
 800d91c:	6822      	ldr	r2, [r4, #0]
 800d91e:	3501      	adds	r5, #1
 800d920:	4313      	orrs	r3, r2
 800d922:	6023      	str	r3, [r4, #0]
 800d924:	7829      	ldrb	r1, [r5, #0]
 800d926:	2206      	movs	r2, #6
 800d928:	4828      	ldr	r0, [pc, #160]	; (800d9cc <_svfiprintf_r+0x1f4>)
 800d92a:	1c6e      	adds	r6, r5, #1
 800d92c:	7621      	strb	r1, [r4, #24]
 800d92e:	f7ff fb05 	bl	800cf3c <memchr>
 800d932:	2800      	cmp	r0, #0
 800d934:	d03c      	beq.n	800d9b0 <_svfiprintf_r+0x1d8>
 800d936:	4b26      	ldr	r3, [pc, #152]	; (800d9d0 <_svfiprintf_r+0x1f8>)
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d125      	bne.n	800d988 <_svfiprintf_r+0x1b0>
 800d93c:	2207      	movs	r2, #7
 800d93e:	9b07      	ldr	r3, [sp, #28]
 800d940:	3307      	adds	r3, #7
 800d942:	4393      	bics	r3, r2
 800d944:	3308      	adds	r3, #8
 800d946:	9307      	str	r3, [sp, #28]
 800d948:	6963      	ldr	r3, [r4, #20]
 800d94a:	9a04      	ldr	r2, [sp, #16]
 800d94c:	189b      	adds	r3, r3, r2
 800d94e:	6163      	str	r3, [r4, #20]
 800d950:	e765      	b.n	800d81e <_svfiprintf_r+0x46>
 800d952:	4343      	muls	r3, r0
 800d954:	0035      	movs	r5, r6
 800d956:	2101      	movs	r1, #1
 800d958:	189b      	adds	r3, r3, r2
 800d95a:	e7a6      	b.n	800d8aa <_svfiprintf_r+0xd2>
 800d95c:	2301      	movs	r3, #1
 800d95e:	425b      	negs	r3, r3
 800d960:	e7d0      	b.n	800d904 <_svfiprintf_r+0x12c>
 800d962:	2300      	movs	r3, #0
 800d964:	200a      	movs	r0, #10
 800d966:	001a      	movs	r2, r3
 800d968:	3501      	adds	r5, #1
 800d96a:	6063      	str	r3, [r4, #4]
 800d96c:	7829      	ldrb	r1, [r5, #0]
 800d96e:	1c6e      	adds	r6, r5, #1
 800d970:	3930      	subs	r1, #48	; 0x30
 800d972:	2909      	cmp	r1, #9
 800d974:	d903      	bls.n	800d97e <_svfiprintf_r+0x1a6>
 800d976:	2b00      	cmp	r3, #0
 800d978:	d0c5      	beq.n	800d906 <_svfiprintf_r+0x12e>
 800d97a:	9209      	str	r2, [sp, #36]	; 0x24
 800d97c:	e7c3      	b.n	800d906 <_svfiprintf_r+0x12e>
 800d97e:	4342      	muls	r2, r0
 800d980:	0035      	movs	r5, r6
 800d982:	2301      	movs	r3, #1
 800d984:	1852      	adds	r2, r2, r1
 800d986:	e7f1      	b.n	800d96c <_svfiprintf_r+0x194>
 800d988:	ab07      	add	r3, sp, #28
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	003a      	movs	r2, r7
 800d98e:	0021      	movs	r1, r4
 800d990:	4b10      	ldr	r3, [pc, #64]	; (800d9d4 <_svfiprintf_r+0x1fc>)
 800d992:	9803      	ldr	r0, [sp, #12]
 800d994:	f7fd fc8c 	bl	800b2b0 <_printf_float>
 800d998:	9004      	str	r0, [sp, #16]
 800d99a:	9b04      	ldr	r3, [sp, #16]
 800d99c:	3301      	adds	r3, #1
 800d99e:	d1d3      	bne.n	800d948 <_svfiprintf_r+0x170>
 800d9a0:	89bb      	ldrh	r3, [r7, #12]
 800d9a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d9a4:	065b      	lsls	r3, r3, #25
 800d9a6:	d400      	bmi.n	800d9aa <_svfiprintf_r+0x1d2>
 800d9a8:	e72d      	b.n	800d806 <_svfiprintf_r+0x2e>
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	4240      	negs	r0, r0
 800d9ae:	e72a      	b.n	800d806 <_svfiprintf_r+0x2e>
 800d9b0:	ab07      	add	r3, sp, #28
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	003a      	movs	r2, r7
 800d9b6:	0021      	movs	r1, r4
 800d9b8:	4b06      	ldr	r3, [pc, #24]	; (800d9d4 <_svfiprintf_r+0x1fc>)
 800d9ba:	9803      	ldr	r0, [sp, #12]
 800d9bc:	f7fd ff2a 	bl	800b814 <_printf_i>
 800d9c0:	e7ea      	b.n	800d998 <_svfiprintf_r+0x1c0>
 800d9c2:	46c0      	nop			; (mov r8, r8)
 800d9c4:	0800e54c 	.word	0x0800e54c
 800d9c8:	0800e552 	.word	0x0800e552
 800d9cc:	0800e556 	.word	0x0800e556
 800d9d0:	0800b2b1 	.word	0x0800b2b1
 800d9d4:	0800d715 	.word	0x0800d715

0800d9d8 <__sfputc_r>:
 800d9d8:	6893      	ldr	r3, [r2, #8]
 800d9da:	b510      	push	{r4, lr}
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	6093      	str	r3, [r2, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	da04      	bge.n	800d9ee <__sfputc_r+0x16>
 800d9e4:	6994      	ldr	r4, [r2, #24]
 800d9e6:	42a3      	cmp	r3, r4
 800d9e8:	db07      	blt.n	800d9fa <__sfputc_r+0x22>
 800d9ea:	290a      	cmp	r1, #10
 800d9ec:	d005      	beq.n	800d9fa <__sfputc_r+0x22>
 800d9ee:	6813      	ldr	r3, [r2, #0]
 800d9f0:	1c58      	adds	r0, r3, #1
 800d9f2:	6010      	str	r0, [r2, #0]
 800d9f4:	7019      	strb	r1, [r3, #0]
 800d9f6:	0008      	movs	r0, r1
 800d9f8:	bd10      	pop	{r4, pc}
 800d9fa:	f7fe f8e9 	bl	800bbd0 <__swbuf_r>
 800d9fe:	0001      	movs	r1, r0
 800da00:	e7f9      	b.n	800d9f6 <__sfputc_r+0x1e>

0800da02 <__sfputs_r>:
 800da02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da04:	0006      	movs	r6, r0
 800da06:	000f      	movs	r7, r1
 800da08:	0014      	movs	r4, r2
 800da0a:	18d5      	adds	r5, r2, r3
 800da0c:	42ac      	cmp	r4, r5
 800da0e:	d101      	bne.n	800da14 <__sfputs_r+0x12>
 800da10:	2000      	movs	r0, #0
 800da12:	e007      	b.n	800da24 <__sfputs_r+0x22>
 800da14:	7821      	ldrb	r1, [r4, #0]
 800da16:	003a      	movs	r2, r7
 800da18:	0030      	movs	r0, r6
 800da1a:	f7ff ffdd 	bl	800d9d8 <__sfputc_r>
 800da1e:	3401      	adds	r4, #1
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d1f3      	bne.n	800da0c <__sfputs_r+0xa>
 800da24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da28 <_vfiprintf_r>:
 800da28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da2a:	b0a1      	sub	sp, #132	; 0x84
 800da2c:	0006      	movs	r6, r0
 800da2e:	000c      	movs	r4, r1
 800da30:	001f      	movs	r7, r3
 800da32:	9203      	str	r2, [sp, #12]
 800da34:	2800      	cmp	r0, #0
 800da36:	d004      	beq.n	800da42 <_vfiprintf_r+0x1a>
 800da38:	6983      	ldr	r3, [r0, #24]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <_vfiprintf_r+0x1a>
 800da3e:	f7ff f969 	bl	800cd14 <__sinit>
 800da42:	4b8e      	ldr	r3, [pc, #568]	; (800dc7c <_vfiprintf_r+0x254>)
 800da44:	429c      	cmp	r4, r3
 800da46:	d11c      	bne.n	800da82 <_vfiprintf_r+0x5a>
 800da48:	6874      	ldr	r4, [r6, #4]
 800da4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da4c:	07db      	lsls	r3, r3, #31
 800da4e:	d405      	bmi.n	800da5c <_vfiprintf_r+0x34>
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	059b      	lsls	r3, r3, #22
 800da54:	d402      	bmi.n	800da5c <_vfiprintf_r+0x34>
 800da56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da58:	f7ff fa01 	bl	800ce5e <__retarget_lock_acquire_recursive>
 800da5c:	89a3      	ldrh	r3, [r4, #12]
 800da5e:	071b      	lsls	r3, r3, #28
 800da60:	d502      	bpl.n	800da68 <_vfiprintf_r+0x40>
 800da62:	6923      	ldr	r3, [r4, #16]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d11d      	bne.n	800daa4 <_vfiprintf_r+0x7c>
 800da68:	0021      	movs	r1, r4
 800da6a:	0030      	movs	r0, r6
 800da6c:	f7fe f906 	bl	800bc7c <__swsetup_r>
 800da70:	2800      	cmp	r0, #0
 800da72:	d017      	beq.n	800daa4 <_vfiprintf_r+0x7c>
 800da74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da76:	07db      	lsls	r3, r3, #31
 800da78:	d50d      	bpl.n	800da96 <_vfiprintf_r+0x6e>
 800da7a:	2001      	movs	r0, #1
 800da7c:	4240      	negs	r0, r0
 800da7e:	b021      	add	sp, #132	; 0x84
 800da80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da82:	4b7f      	ldr	r3, [pc, #508]	; (800dc80 <_vfiprintf_r+0x258>)
 800da84:	429c      	cmp	r4, r3
 800da86:	d101      	bne.n	800da8c <_vfiprintf_r+0x64>
 800da88:	68b4      	ldr	r4, [r6, #8]
 800da8a:	e7de      	b.n	800da4a <_vfiprintf_r+0x22>
 800da8c:	4b7d      	ldr	r3, [pc, #500]	; (800dc84 <_vfiprintf_r+0x25c>)
 800da8e:	429c      	cmp	r4, r3
 800da90:	d1db      	bne.n	800da4a <_vfiprintf_r+0x22>
 800da92:	68f4      	ldr	r4, [r6, #12]
 800da94:	e7d9      	b.n	800da4a <_vfiprintf_r+0x22>
 800da96:	89a3      	ldrh	r3, [r4, #12]
 800da98:	059b      	lsls	r3, r3, #22
 800da9a:	d4ee      	bmi.n	800da7a <_vfiprintf_r+0x52>
 800da9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da9e:	f7ff f9df 	bl	800ce60 <__retarget_lock_release_recursive>
 800daa2:	e7ea      	b.n	800da7a <_vfiprintf_r+0x52>
 800daa4:	2300      	movs	r3, #0
 800daa6:	ad08      	add	r5, sp, #32
 800daa8:	616b      	str	r3, [r5, #20]
 800daaa:	3320      	adds	r3, #32
 800daac:	766b      	strb	r3, [r5, #25]
 800daae:	3310      	adds	r3, #16
 800dab0:	76ab      	strb	r3, [r5, #26]
 800dab2:	9707      	str	r7, [sp, #28]
 800dab4:	9f03      	ldr	r7, [sp, #12]
 800dab6:	783b      	ldrb	r3, [r7, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <_vfiprintf_r+0x98>
 800dabc:	2b25      	cmp	r3, #37	; 0x25
 800dabe:	d14e      	bne.n	800db5e <_vfiprintf_r+0x136>
 800dac0:	9b03      	ldr	r3, [sp, #12]
 800dac2:	1afb      	subs	r3, r7, r3
 800dac4:	9305      	str	r3, [sp, #20]
 800dac6:	9b03      	ldr	r3, [sp, #12]
 800dac8:	429f      	cmp	r7, r3
 800daca:	d00d      	beq.n	800dae8 <_vfiprintf_r+0xc0>
 800dacc:	9b05      	ldr	r3, [sp, #20]
 800dace:	0021      	movs	r1, r4
 800dad0:	0030      	movs	r0, r6
 800dad2:	9a03      	ldr	r2, [sp, #12]
 800dad4:	f7ff ff95 	bl	800da02 <__sfputs_r>
 800dad8:	1c43      	adds	r3, r0, #1
 800dada:	d100      	bne.n	800dade <_vfiprintf_r+0xb6>
 800dadc:	e0b5      	b.n	800dc4a <_vfiprintf_r+0x222>
 800dade:	696a      	ldr	r2, [r5, #20]
 800dae0:	9b05      	ldr	r3, [sp, #20]
 800dae2:	4694      	mov	ip, r2
 800dae4:	4463      	add	r3, ip
 800dae6:	616b      	str	r3, [r5, #20]
 800dae8:	783b      	ldrb	r3, [r7, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d100      	bne.n	800daf0 <_vfiprintf_r+0xc8>
 800daee:	e0ac      	b.n	800dc4a <_vfiprintf_r+0x222>
 800daf0:	2201      	movs	r2, #1
 800daf2:	1c7b      	adds	r3, r7, #1
 800daf4:	9303      	str	r3, [sp, #12]
 800daf6:	2300      	movs	r3, #0
 800daf8:	4252      	negs	r2, r2
 800dafa:	606a      	str	r2, [r5, #4]
 800dafc:	a904      	add	r1, sp, #16
 800dafe:	3254      	adds	r2, #84	; 0x54
 800db00:	1852      	adds	r2, r2, r1
 800db02:	602b      	str	r3, [r5, #0]
 800db04:	60eb      	str	r3, [r5, #12]
 800db06:	60ab      	str	r3, [r5, #8]
 800db08:	7013      	strb	r3, [r2, #0]
 800db0a:	65ab      	str	r3, [r5, #88]	; 0x58
 800db0c:	9b03      	ldr	r3, [sp, #12]
 800db0e:	2205      	movs	r2, #5
 800db10:	7819      	ldrb	r1, [r3, #0]
 800db12:	485d      	ldr	r0, [pc, #372]	; (800dc88 <_vfiprintf_r+0x260>)
 800db14:	f7ff fa12 	bl	800cf3c <memchr>
 800db18:	9b03      	ldr	r3, [sp, #12]
 800db1a:	1c5f      	adds	r7, r3, #1
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d120      	bne.n	800db62 <_vfiprintf_r+0x13a>
 800db20:	682a      	ldr	r2, [r5, #0]
 800db22:	06d3      	lsls	r3, r2, #27
 800db24:	d504      	bpl.n	800db30 <_vfiprintf_r+0x108>
 800db26:	2353      	movs	r3, #83	; 0x53
 800db28:	a904      	add	r1, sp, #16
 800db2a:	185b      	adds	r3, r3, r1
 800db2c:	2120      	movs	r1, #32
 800db2e:	7019      	strb	r1, [r3, #0]
 800db30:	0713      	lsls	r3, r2, #28
 800db32:	d504      	bpl.n	800db3e <_vfiprintf_r+0x116>
 800db34:	2353      	movs	r3, #83	; 0x53
 800db36:	a904      	add	r1, sp, #16
 800db38:	185b      	adds	r3, r3, r1
 800db3a:	212b      	movs	r1, #43	; 0x2b
 800db3c:	7019      	strb	r1, [r3, #0]
 800db3e:	9b03      	ldr	r3, [sp, #12]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	2b2a      	cmp	r3, #42	; 0x2a
 800db44:	d016      	beq.n	800db74 <_vfiprintf_r+0x14c>
 800db46:	2100      	movs	r1, #0
 800db48:	68eb      	ldr	r3, [r5, #12]
 800db4a:	9f03      	ldr	r7, [sp, #12]
 800db4c:	783a      	ldrb	r2, [r7, #0]
 800db4e:	1c78      	adds	r0, r7, #1
 800db50:	3a30      	subs	r2, #48	; 0x30
 800db52:	4684      	mov	ip, r0
 800db54:	2a09      	cmp	r2, #9
 800db56:	d94f      	bls.n	800dbf8 <_vfiprintf_r+0x1d0>
 800db58:	2900      	cmp	r1, #0
 800db5a:	d111      	bne.n	800db80 <_vfiprintf_r+0x158>
 800db5c:	e017      	b.n	800db8e <_vfiprintf_r+0x166>
 800db5e:	3701      	adds	r7, #1
 800db60:	e7a9      	b.n	800dab6 <_vfiprintf_r+0x8e>
 800db62:	4b49      	ldr	r3, [pc, #292]	; (800dc88 <_vfiprintf_r+0x260>)
 800db64:	682a      	ldr	r2, [r5, #0]
 800db66:	1ac0      	subs	r0, r0, r3
 800db68:	2301      	movs	r3, #1
 800db6a:	4083      	lsls	r3, r0
 800db6c:	4313      	orrs	r3, r2
 800db6e:	602b      	str	r3, [r5, #0]
 800db70:	9703      	str	r7, [sp, #12]
 800db72:	e7cb      	b.n	800db0c <_vfiprintf_r+0xe4>
 800db74:	9b07      	ldr	r3, [sp, #28]
 800db76:	1d19      	adds	r1, r3, #4
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	9107      	str	r1, [sp, #28]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	db01      	blt.n	800db84 <_vfiprintf_r+0x15c>
 800db80:	930b      	str	r3, [sp, #44]	; 0x2c
 800db82:	e004      	b.n	800db8e <_vfiprintf_r+0x166>
 800db84:	425b      	negs	r3, r3
 800db86:	60eb      	str	r3, [r5, #12]
 800db88:	2302      	movs	r3, #2
 800db8a:	4313      	orrs	r3, r2
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	783b      	ldrb	r3, [r7, #0]
 800db90:	2b2e      	cmp	r3, #46	; 0x2e
 800db92:	d10a      	bne.n	800dbaa <_vfiprintf_r+0x182>
 800db94:	787b      	ldrb	r3, [r7, #1]
 800db96:	2b2a      	cmp	r3, #42	; 0x2a
 800db98:	d137      	bne.n	800dc0a <_vfiprintf_r+0x1e2>
 800db9a:	9b07      	ldr	r3, [sp, #28]
 800db9c:	3702      	adds	r7, #2
 800db9e:	1d1a      	adds	r2, r3, #4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	9207      	str	r2, [sp, #28]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	db2d      	blt.n	800dc04 <_vfiprintf_r+0x1dc>
 800dba8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbaa:	2203      	movs	r2, #3
 800dbac:	7839      	ldrb	r1, [r7, #0]
 800dbae:	4837      	ldr	r0, [pc, #220]	; (800dc8c <_vfiprintf_r+0x264>)
 800dbb0:	f7ff f9c4 	bl	800cf3c <memchr>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d007      	beq.n	800dbc8 <_vfiprintf_r+0x1a0>
 800dbb8:	4b34      	ldr	r3, [pc, #208]	; (800dc8c <_vfiprintf_r+0x264>)
 800dbba:	682a      	ldr	r2, [r5, #0]
 800dbbc:	1ac0      	subs	r0, r0, r3
 800dbbe:	2340      	movs	r3, #64	; 0x40
 800dbc0:	4083      	lsls	r3, r0
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	3701      	adds	r7, #1
 800dbc6:	602b      	str	r3, [r5, #0]
 800dbc8:	7839      	ldrb	r1, [r7, #0]
 800dbca:	1c7b      	adds	r3, r7, #1
 800dbcc:	2206      	movs	r2, #6
 800dbce:	4830      	ldr	r0, [pc, #192]	; (800dc90 <_vfiprintf_r+0x268>)
 800dbd0:	9303      	str	r3, [sp, #12]
 800dbd2:	7629      	strb	r1, [r5, #24]
 800dbd4:	f7ff f9b2 	bl	800cf3c <memchr>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d045      	beq.n	800dc68 <_vfiprintf_r+0x240>
 800dbdc:	4b2d      	ldr	r3, [pc, #180]	; (800dc94 <_vfiprintf_r+0x26c>)
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d127      	bne.n	800dc32 <_vfiprintf_r+0x20a>
 800dbe2:	2207      	movs	r2, #7
 800dbe4:	9b07      	ldr	r3, [sp, #28]
 800dbe6:	3307      	adds	r3, #7
 800dbe8:	4393      	bics	r3, r2
 800dbea:	3308      	adds	r3, #8
 800dbec:	9307      	str	r3, [sp, #28]
 800dbee:	696b      	ldr	r3, [r5, #20]
 800dbf0:	9a04      	ldr	r2, [sp, #16]
 800dbf2:	189b      	adds	r3, r3, r2
 800dbf4:	616b      	str	r3, [r5, #20]
 800dbf6:	e75d      	b.n	800dab4 <_vfiprintf_r+0x8c>
 800dbf8:	210a      	movs	r1, #10
 800dbfa:	434b      	muls	r3, r1
 800dbfc:	4667      	mov	r7, ip
 800dbfe:	189b      	adds	r3, r3, r2
 800dc00:	3909      	subs	r1, #9
 800dc02:	e7a3      	b.n	800db4c <_vfiprintf_r+0x124>
 800dc04:	2301      	movs	r3, #1
 800dc06:	425b      	negs	r3, r3
 800dc08:	e7ce      	b.n	800dba8 <_vfiprintf_r+0x180>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	001a      	movs	r2, r3
 800dc0e:	3701      	adds	r7, #1
 800dc10:	606b      	str	r3, [r5, #4]
 800dc12:	7839      	ldrb	r1, [r7, #0]
 800dc14:	1c78      	adds	r0, r7, #1
 800dc16:	3930      	subs	r1, #48	; 0x30
 800dc18:	4684      	mov	ip, r0
 800dc1a:	2909      	cmp	r1, #9
 800dc1c:	d903      	bls.n	800dc26 <_vfiprintf_r+0x1fe>
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d0c3      	beq.n	800dbaa <_vfiprintf_r+0x182>
 800dc22:	9209      	str	r2, [sp, #36]	; 0x24
 800dc24:	e7c1      	b.n	800dbaa <_vfiprintf_r+0x182>
 800dc26:	230a      	movs	r3, #10
 800dc28:	435a      	muls	r2, r3
 800dc2a:	4667      	mov	r7, ip
 800dc2c:	1852      	adds	r2, r2, r1
 800dc2e:	3b09      	subs	r3, #9
 800dc30:	e7ef      	b.n	800dc12 <_vfiprintf_r+0x1ea>
 800dc32:	ab07      	add	r3, sp, #28
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	0022      	movs	r2, r4
 800dc38:	0029      	movs	r1, r5
 800dc3a:	0030      	movs	r0, r6
 800dc3c:	4b16      	ldr	r3, [pc, #88]	; (800dc98 <_vfiprintf_r+0x270>)
 800dc3e:	f7fd fb37 	bl	800b2b0 <_printf_float>
 800dc42:	9004      	str	r0, [sp, #16]
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	3301      	adds	r3, #1
 800dc48:	d1d1      	bne.n	800dbee <_vfiprintf_r+0x1c6>
 800dc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc4c:	07db      	lsls	r3, r3, #31
 800dc4e:	d405      	bmi.n	800dc5c <_vfiprintf_r+0x234>
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	059b      	lsls	r3, r3, #22
 800dc54:	d402      	bmi.n	800dc5c <_vfiprintf_r+0x234>
 800dc56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc58:	f7ff f902 	bl	800ce60 <__retarget_lock_release_recursive>
 800dc5c:	89a3      	ldrh	r3, [r4, #12]
 800dc5e:	065b      	lsls	r3, r3, #25
 800dc60:	d500      	bpl.n	800dc64 <_vfiprintf_r+0x23c>
 800dc62:	e70a      	b.n	800da7a <_vfiprintf_r+0x52>
 800dc64:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc66:	e70a      	b.n	800da7e <_vfiprintf_r+0x56>
 800dc68:	ab07      	add	r3, sp, #28
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	0022      	movs	r2, r4
 800dc6e:	0029      	movs	r1, r5
 800dc70:	0030      	movs	r0, r6
 800dc72:	4b09      	ldr	r3, [pc, #36]	; (800dc98 <_vfiprintf_r+0x270>)
 800dc74:	f7fd fdce 	bl	800b814 <_printf_i>
 800dc78:	e7e3      	b.n	800dc42 <_vfiprintf_r+0x21a>
 800dc7a:	46c0      	nop			; (mov r8, r8)
 800dc7c:	0800e3b0 	.word	0x0800e3b0
 800dc80:	0800e3d0 	.word	0x0800e3d0
 800dc84:	0800e390 	.word	0x0800e390
 800dc88:	0800e54c 	.word	0x0800e54c
 800dc8c:	0800e552 	.word	0x0800e552
 800dc90:	0800e556 	.word	0x0800e556
 800dc94:	0800b2b1 	.word	0x0800b2b1
 800dc98:	0800da03 	.word	0x0800da03

0800dc9c <__sread>:
 800dc9c:	b570      	push	{r4, r5, r6, lr}
 800dc9e:	000c      	movs	r4, r1
 800dca0:	250e      	movs	r5, #14
 800dca2:	5f49      	ldrsh	r1, [r1, r5]
 800dca4:	f000 f926 	bl	800def4 <_read_r>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	db03      	blt.n	800dcb4 <__sread+0x18>
 800dcac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dcae:	181b      	adds	r3, r3, r0
 800dcb0:	6563      	str	r3, [r4, #84]	; 0x54
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	4a02      	ldr	r2, [pc, #8]	; (800dcc0 <__sread+0x24>)
 800dcb8:	4013      	ands	r3, r2
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	e7f9      	b.n	800dcb2 <__sread+0x16>
 800dcbe:	46c0      	nop			; (mov r8, r8)
 800dcc0:	ffffefff 	.word	0xffffefff

0800dcc4 <__swrite>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	001f      	movs	r7, r3
 800dcc8:	898b      	ldrh	r3, [r1, #12]
 800dcca:	0005      	movs	r5, r0
 800dccc:	000c      	movs	r4, r1
 800dcce:	0016      	movs	r6, r2
 800dcd0:	05db      	lsls	r3, r3, #23
 800dcd2:	d505      	bpl.n	800dce0 <__swrite+0x1c>
 800dcd4:	230e      	movs	r3, #14
 800dcd6:	5ec9      	ldrsh	r1, [r1, r3]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	2302      	movs	r3, #2
 800dcdc:	f000 f8a2 	bl	800de24 <_lseek_r>
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	4a05      	ldr	r2, [pc, #20]	; (800dcf8 <__swrite+0x34>)
 800dce4:	0028      	movs	r0, r5
 800dce6:	4013      	ands	r3, r2
 800dce8:	81a3      	strh	r3, [r4, #12]
 800dcea:	0032      	movs	r2, r6
 800dcec:	230e      	movs	r3, #14
 800dcee:	5ee1      	ldrsh	r1, [r4, r3]
 800dcf0:	003b      	movs	r3, r7
 800dcf2:	f000 f81f 	bl	800dd34 <_write_r>
 800dcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcf8:	ffffefff 	.word	0xffffefff

0800dcfc <__sseek>:
 800dcfc:	b570      	push	{r4, r5, r6, lr}
 800dcfe:	000c      	movs	r4, r1
 800dd00:	250e      	movs	r5, #14
 800dd02:	5f49      	ldrsh	r1, [r1, r5]
 800dd04:	f000 f88e 	bl	800de24 <_lseek_r>
 800dd08:	89a3      	ldrh	r3, [r4, #12]
 800dd0a:	1c42      	adds	r2, r0, #1
 800dd0c:	d103      	bne.n	800dd16 <__sseek+0x1a>
 800dd0e:	4a05      	ldr	r2, [pc, #20]	; (800dd24 <__sseek+0x28>)
 800dd10:	4013      	ands	r3, r2
 800dd12:	81a3      	strh	r3, [r4, #12]
 800dd14:	bd70      	pop	{r4, r5, r6, pc}
 800dd16:	2280      	movs	r2, #128	; 0x80
 800dd18:	0152      	lsls	r2, r2, #5
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	81a3      	strh	r3, [r4, #12]
 800dd1e:	6560      	str	r0, [r4, #84]	; 0x54
 800dd20:	e7f8      	b.n	800dd14 <__sseek+0x18>
 800dd22:	46c0      	nop			; (mov r8, r8)
 800dd24:	ffffefff 	.word	0xffffefff

0800dd28 <__sclose>:
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	230e      	movs	r3, #14
 800dd2c:	5ec9      	ldrsh	r1, [r1, r3]
 800dd2e:	f000 f833 	bl	800dd98 <_close_r>
 800dd32:	bd10      	pop	{r4, pc}

0800dd34 <_write_r>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	0004      	movs	r4, r0
 800dd38:	0008      	movs	r0, r1
 800dd3a:	0011      	movs	r1, r2
 800dd3c:	001a      	movs	r2, r3
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4d05      	ldr	r5, [pc, #20]	; (800dd58 <_write_r+0x24>)
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	f7f5 fde8 	bl	8003918 <_write>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d103      	bne.n	800dd54 <_write_r+0x20>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d000      	beq.n	800dd54 <_write_r+0x20>
 800dd52:	6023      	str	r3, [r4, #0]
 800dd54:	bd70      	pop	{r4, r5, r6, pc}
 800dd56:	46c0      	nop			; (mov r8, r8)
 800dd58:	20002420 	.word	0x20002420

0800dd5c <__assert_func>:
 800dd5c:	b530      	push	{r4, r5, lr}
 800dd5e:	0014      	movs	r4, r2
 800dd60:	001a      	movs	r2, r3
 800dd62:	4b09      	ldr	r3, [pc, #36]	; (800dd88 <__assert_func+0x2c>)
 800dd64:	0005      	movs	r5, r0
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	b085      	sub	sp, #20
 800dd6a:	68d8      	ldr	r0, [r3, #12]
 800dd6c:	4b07      	ldr	r3, [pc, #28]	; (800dd8c <__assert_func+0x30>)
 800dd6e:	2c00      	cmp	r4, #0
 800dd70:	d101      	bne.n	800dd76 <__assert_func+0x1a>
 800dd72:	4b07      	ldr	r3, [pc, #28]	; (800dd90 <__assert_func+0x34>)
 800dd74:	001c      	movs	r4, r3
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	9100      	str	r1, [sp, #0]
 800dd7a:	002b      	movs	r3, r5
 800dd7c:	4905      	ldr	r1, [pc, #20]	; (800dd94 <__assert_func+0x38>)
 800dd7e:	9402      	str	r4, [sp, #8]
 800dd80:	f000 f81c 	bl	800ddbc <fiprintf>
 800dd84:	f000 f8d7 	bl	800df36 <abort>
 800dd88:	2000000c 	.word	0x2000000c
 800dd8c:	0800e55d 	.word	0x0800e55d
 800dd90:	0800e598 	.word	0x0800e598
 800dd94:	0800e56a 	.word	0x0800e56a

0800dd98 <_close_r>:
 800dd98:	2300      	movs	r3, #0
 800dd9a:	b570      	push	{r4, r5, r6, lr}
 800dd9c:	4d06      	ldr	r5, [pc, #24]	; (800ddb8 <_close_r+0x20>)
 800dd9e:	0004      	movs	r4, r0
 800dda0:	0008      	movs	r0, r1
 800dda2:	602b      	str	r3, [r5, #0]
 800dda4:	f7f6 fa61 	bl	800426a <_close>
 800dda8:	1c43      	adds	r3, r0, #1
 800ddaa:	d103      	bne.n	800ddb4 <_close_r+0x1c>
 800ddac:	682b      	ldr	r3, [r5, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d000      	beq.n	800ddb4 <_close_r+0x1c>
 800ddb2:	6023      	str	r3, [r4, #0]
 800ddb4:	bd70      	pop	{r4, r5, r6, pc}
 800ddb6:	46c0      	nop			; (mov r8, r8)
 800ddb8:	20002420 	.word	0x20002420

0800ddbc <fiprintf>:
 800ddbc:	b40e      	push	{r1, r2, r3}
 800ddbe:	b503      	push	{r0, r1, lr}
 800ddc0:	0001      	movs	r1, r0
 800ddc2:	ab03      	add	r3, sp, #12
 800ddc4:	4804      	ldr	r0, [pc, #16]	; (800ddd8 <fiprintf+0x1c>)
 800ddc6:	cb04      	ldmia	r3!, {r2}
 800ddc8:	6800      	ldr	r0, [r0, #0]
 800ddca:	9301      	str	r3, [sp, #4]
 800ddcc:	f7ff fe2c 	bl	800da28 <_vfiprintf_r>
 800ddd0:	b002      	add	sp, #8
 800ddd2:	bc08      	pop	{r3}
 800ddd4:	b003      	add	sp, #12
 800ddd6:	4718      	bx	r3
 800ddd8:	2000000c 	.word	0x2000000c

0800dddc <_fstat_r>:
 800dddc:	2300      	movs	r3, #0
 800ddde:	b570      	push	{r4, r5, r6, lr}
 800dde0:	4d06      	ldr	r5, [pc, #24]	; (800ddfc <_fstat_r+0x20>)
 800dde2:	0004      	movs	r4, r0
 800dde4:	0008      	movs	r0, r1
 800dde6:	0011      	movs	r1, r2
 800dde8:	602b      	str	r3, [r5, #0]
 800ddea:	f7f6 fa48 	bl	800427e <_fstat>
 800ddee:	1c43      	adds	r3, r0, #1
 800ddf0:	d103      	bne.n	800ddfa <_fstat_r+0x1e>
 800ddf2:	682b      	ldr	r3, [r5, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d000      	beq.n	800ddfa <_fstat_r+0x1e>
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	bd70      	pop	{r4, r5, r6, pc}
 800ddfc:	20002420 	.word	0x20002420

0800de00 <_isatty_r>:
 800de00:	2300      	movs	r3, #0
 800de02:	b570      	push	{r4, r5, r6, lr}
 800de04:	4d06      	ldr	r5, [pc, #24]	; (800de20 <_isatty_r+0x20>)
 800de06:	0004      	movs	r4, r0
 800de08:	0008      	movs	r0, r1
 800de0a:	602b      	str	r3, [r5, #0]
 800de0c:	f7f6 fa45 	bl	800429a <_isatty>
 800de10:	1c43      	adds	r3, r0, #1
 800de12:	d103      	bne.n	800de1c <_isatty_r+0x1c>
 800de14:	682b      	ldr	r3, [r5, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d000      	beq.n	800de1c <_isatty_r+0x1c>
 800de1a:	6023      	str	r3, [r4, #0]
 800de1c:	bd70      	pop	{r4, r5, r6, pc}
 800de1e:	46c0      	nop			; (mov r8, r8)
 800de20:	20002420 	.word	0x20002420

0800de24 <_lseek_r>:
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	0004      	movs	r4, r0
 800de28:	0008      	movs	r0, r1
 800de2a:	0011      	movs	r1, r2
 800de2c:	001a      	movs	r2, r3
 800de2e:	2300      	movs	r3, #0
 800de30:	4d05      	ldr	r5, [pc, #20]	; (800de48 <_lseek_r+0x24>)
 800de32:	602b      	str	r3, [r5, #0]
 800de34:	f7f6 fa3a 	bl	80042ac <_lseek>
 800de38:	1c43      	adds	r3, r0, #1
 800de3a:	d103      	bne.n	800de44 <_lseek_r+0x20>
 800de3c:	682b      	ldr	r3, [r5, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d000      	beq.n	800de44 <_lseek_r+0x20>
 800de42:	6023      	str	r3, [r4, #0]
 800de44:	bd70      	pop	{r4, r5, r6, pc}
 800de46:	46c0      	nop			; (mov r8, r8)
 800de48:	20002420 	.word	0x20002420

0800de4c <__ascii_mbtowc>:
 800de4c:	b082      	sub	sp, #8
 800de4e:	2900      	cmp	r1, #0
 800de50:	d100      	bne.n	800de54 <__ascii_mbtowc+0x8>
 800de52:	a901      	add	r1, sp, #4
 800de54:	1e10      	subs	r0, r2, #0
 800de56:	d006      	beq.n	800de66 <__ascii_mbtowc+0x1a>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d006      	beq.n	800de6a <__ascii_mbtowc+0x1e>
 800de5c:	7813      	ldrb	r3, [r2, #0]
 800de5e:	600b      	str	r3, [r1, #0]
 800de60:	7810      	ldrb	r0, [r2, #0]
 800de62:	1e43      	subs	r3, r0, #1
 800de64:	4198      	sbcs	r0, r3
 800de66:	b002      	add	sp, #8
 800de68:	4770      	bx	lr
 800de6a:	2002      	movs	r0, #2
 800de6c:	4240      	negs	r0, r0
 800de6e:	e7fa      	b.n	800de66 <__ascii_mbtowc+0x1a>

0800de70 <memmove>:
 800de70:	b510      	push	{r4, lr}
 800de72:	4288      	cmp	r0, r1
 800de74:	d902      	bls.n	800de7c <memmove+0xc>
 800de76:	188b      	adds	r3, r1, r2
 800de78:	4298      	cmp	r0, r3
 800de7a:	d303      	bcc.n	800de84 <memmove+0x14>
 800de7c:	2300      	movs	r3, #0
 800de7e:	e007      	b.n	800de90 <memmove+0x20>
 800de80:	5c8b      	ldrb	r3, [r1, r2]
 800de82:	5483      	strb	r3, [r0, r2]
 800de84:	3a01      	subs	r2, #1
 800de86:	d2fb      	bcs.n	800de80 <memmove+0x10>
 800de88:	bd10      	pop	{r4, pc}
 800de8a:	5ccc      	ldrb	r4, [r1, r3]
 800de8c:	54c4      	strb	r4, [r0, r3]
 800de8e:	3301      	adds	r3, #1
 800de90:	429a      	cmp	r2, r3
 800de92:	d1fa      	bne.n	800de8a <memmove+0x1a>
 800de94:	e7f8      	b.n	800de88 <memmove+0x18>

0800de96 <_realloc_r>:
 800de96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de98:	0007      	movs	r7, r0
 800de9a:	000e      	movs	r6, r1
 800de9c:	0014      	movs	r4, r2
 800de9e:	2900      	cmp	r1, #0
 800dea0:	d105      	bne.n	800deae <_realloc_r+0x18>
 800dea2:	0011      	movs	r1, r2
 800dea4:	f7fd f8e4 	bl	800b070 <_malloc_r>
 800dea8:	0005      	movs	r5, r0
 800deaa:	0028      	movs	r0, r5
 800deac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800deae:	2a00      	cmp	r2, #0
 800deb0:	d103      	bne.n	800deba <_realloc_r+0x24>
 800deb2:	f7fd f871 	bl	800af98 <_free_r>
 800deb6:	0025      	movs	r5, r4
 800deb8:	e7f7      	b.n	800deaa <_realloc_r+0x14>
 800deba:	f000 f843 	bl	800df44 <_malloc_usable_size_r>
 800debe:	9001      	str	r0, [sp, #4]
 800dec0:	4284      	cmp	r4, r0
 800dec2:	d803      	bhi.n	800decc <_realloc_r+0x36>
 800dec4:	0035      	movs	r5, r6
 800dec6:	0843      	lsrs	r3, r0, #1
 800dec8:	42a3      	cmp	r3, r4
 800deca:	d3ee      	bcc.n	800deaa <_realloc_r+0x14>
 800decc:	0021      	movs	r1, r4
 800dece:	0038      	movs	r0, r7
 800ded0:	f7fd f8ce 	bl	800b070 <_malloc_r>
 800ded4:	1e05      	subs	r5, r0, #0
 800ded6:	d0e8      	beq.n	800deaa <_realloc_r+0x14>
 800ded8:	9b01      	ldr	r3, [sp, #4]
 800deda:	0022      	movs	r2, r4
 800dedc:	429c      	cmp	r4, r3
 800dede:	d900      	bls.n	800dee2 <_realloc_r+0x4c>
 800dee0:	001a      	movs	r2, r3
 800dee2:	0031      	movs	r1, r6
 800dee4:	0028      	movs	r0, r5
 800dee6:	f7ff f834 	bl	800cf52 <memcpy>
 800deea:	0031      	movs	r1, r6
 800deec:	0038      	movs	r0, r7
 800deee:	f7fd f853 	bl	800af98 <_free_r>
 800def2:	e7da      	b.n	800deaa <_realloc_r+0x14>

0800def4 <_read_r>:
 800def4:	b570      	push	{r4, r5, r6, lr}
 800def6:	0004      	movs	r4, r0
 800def8:	0008      	movs	r0, r1
 800defa:	0011      	movs	r1, r2
 800defc:	001a      	movs	r2, r3
 800defe:	2300      	movs	r3, #0
 800df00:	4d05      	ldr	r5, [pc, #20]	; (800df18 <_read_r+0x24>)
 800df02:	602b      	str	r3, [r5, #0]
 800df04:	f7f6 f994 	bl	8004230 <_read>
 800df08:	1c43      	adds	r3, r0, #1
 800df0a:	d103      	bne.n	800df14 <_read_r+0x20>
 800df0c:	682b      	ldr	r3, [r5, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d000      	beq.n	800df14 <_read_r+0x20>
 800df12:	6023      	str	r3, [r4, #0]
 800df14:	bd70      	pop	{r4, r5, r6, pc}
 800df16:	46c0      	nop			; (mov r8, r8)
 800df18:	20002420 	.word	0x20002420

0800df1c <__ascii_wctomb>:
 800df1c:	0003      	movs	r3, r0
 800df1e:	1e08      	subs	r0, r1, #0
 800df20:	d005      	beq.n	800df2e <__ascii_wctomb+0x12>
 800df22:	2aff      	cmp	r2, #255	; 0xff
 800df24:	d904      	bls.n	800df30 <__ascii_wctomb+0x14>
 800df26:	228a      	movs	r2, #138	; 0x8a
 800df28:	2001      	movs	r0, #1
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	4240      	negs	r0, r0
 800df2e:	4770      	bx	lr
 800df30:	2001      	movs	r0, #1
 800df32:	700a      	strb	r2, [r1, #0]
 800df34:	e7fb      	b.n	800df2e <__ascii_wctomb+0x12>

0800df36 <abort>:
 800df36:	2006      	movs	r0, #6
 800df38:	b510      	push	{r4, lr}
 800df3a:	f000 f835 	bl	800dfa8 <raise>
 800df3e:	2001      	movs	r0, #1
 800df40:	f7f6 f96a 	bl	8004218 <_exit>

0800df44 <_malloc_usable_size_r>:
 800df44:	1f0b      	subs	r3, r1, #4
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	1f18      	subs	r0, r3, #4
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	da01      	bge.n	800df52 <_malloc_usable_size_r+0xe>
 800df4e:	580b      	ldr	r3, [r1, r0]
 800df50:	18c0      	adds	r0, r0, r3
 800df52:	4770      	bx	lr

0800df54 <_raise_r>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	0004      	movs	r4, r0
 800df58:	000d      	movs	r5, r1
 800df5a:	291f      	cmp	r1, #31
 800df5c:	d904      	bls.n	800df68 <_raise_r+0x14>
 800df5e:	2316      	movs	r3, #22
 800df60:	6003      	str	r3, [r0, #0]
 800df62:	2001      	movs	r0, #1
 800df64:	4240      	negs	r0, r0
 800df66:	bd70      	pop	{r4, r5, r6, pc}
 800df68:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d004      	beq.n	800df78 <_raise_r+0x24>
 800df6e:	008a      	lsls	r2, r1, #2
 800df70:	189b      	adds	r3, r3, r2
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	2a00      	cmp	r2, #0
 800df76:	d108      	bne.n	800df8a <_raise_r+0x36>
 800df78:	0020      	movs	r0, r4
 800df7a:	f000 f831 	bl	800dfe0 <_getpid_r>
 800df7e:	002a      	movs	r2, r5
 800df80:	0001      	movs	r1, r0
 800df82:	0020      	movs	r0, r4
 800df84:	f000 f81a 	bl	800dfbc <_kill_r>
 800df88:	e7ed      	b.n	800df66 <_raise_r+0x12>
 800df8a:	2000      	movs	r0, #0
 800df8c:	2a01      	cmp	r2, #1
 800df8e:	d0ea      	beq.n	800df66 <_raise_r+0x12>
 800df90:	1c51      	adds	r1, r2, #1
 800df92:	d103      	bne.n	800df9c <_raise_r+0x48>
 800df94:	2316      	movs	r3, #22
 800df96:	3001      	adds	r0, #1
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	e7e4      	b.n	800df66 <_raise_r+0x12>
 800df9c:	2400      	movs	r4, #0
 800df9e:	0028      	movs	r0, r5
 800dfa0:	601c      	str	r4, [r3, #0]
 800dfa2:	4790      	blx	r2
 800dfa4:	0020      	movs	r0, r4
 800dfa6:	e7de      	b.n	800df66 <_raise_r+0x12>

0800dfa8 <raise>:
 800dfa8:	b510      	push	{r4, lr}
 800dfaa:	4b03      	ldr	r3, [pc, #12]	; (800dfb8 <raise+0x10>)
 800dfac:	0001      	movs	r1, r0
 800dfae:	6818      	ldr	r0, [r3, #0]
 800dfb0:	f7ff ffd0 	bl	800df54 <_raise_r>
 800dfb4:	bd10      	pop	{r4, pc}
 800dfb6:	46c0      	nop			; (mov r8, r8)
 800dfb8:	2000000c 	.word	0x2000000c

0800dfbc <_kill_r>:
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	b570      	push	{r4, r5, r6, lr}
 800dfc0:	4d06      	ldr	r5, [pc, #24]	; (800dfdc <_kill_r+0x20>)
 800dfc2:	0004      	movs	r4, r0
 800dfc4:	0008      	movs	r0, r1
 800dfc6:	0011      	movs	r1, r2
 800dfc8:	602b      	str	r3, [r5, #0]
 800dfca:	f7f6 f915 	bl	80041f8 <_kill>
 800dfce:	1c43      	adds	r3, r0, #1
 800dfd0:	d103      	bne.n	800dfda <_kill_r+0x1e>
 800dfd2:	682b      	ldr	r3, [r5, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d000      	beq.n	800dfda <_kill_r+0x1e>
 800dfd8:	6023      	str	r3, [r4, #0]
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
 800dfdc:	20002420 	.word	0x20002420

0800dfe0 <_getpid_r>:
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	f7f6 f903 	bl	80041ec <_getpid>
 800dfe6:	bd10      	pop	{r4, pc}

0800dfe8 <_init>:
 800dfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfea:	46c0      	nop			; (mov r8, r8)
 800dfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfee:	bc08      	pop	{r3}
 800dff0:	469e      	mov	lr, r3
 800dff2:	4770      	bx	lr

0800dff4 <_fini>:
 800dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff6:	46c0      	nop			; (mov r8, r8)
 800dff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dffa:	bc08      	pop	{r3}
 800dffc:	469e      	mov	lr, r3
 800dffe:	4770      	bx	lr
