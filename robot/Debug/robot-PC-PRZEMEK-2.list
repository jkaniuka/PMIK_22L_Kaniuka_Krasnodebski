
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800e098  0800e098  0001e098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e63c  0800e63c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e63c  0800e63c  0001e63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e644  0800e644  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e644  0800e644  0001e644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e648  0800e648  0001e648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  200001dc  0800e828  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  0800e828  00020800  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a381  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004191  00000000  00000000  0003a585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  0003e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  0003fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019879  00000000  00000000  000413d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db15  00000000  00000000  0005ac51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8bd  00000000  00000000  00078766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006680  00000000  00000000  00107074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e07c 	.word	0x0800e07c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800e07c 	.word	0x0800e07c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe79 	bl	8002134 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fdc9 	bl	8001fe4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe6b 	bl	8002134 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe61 	bl	8002134 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdf1 	bl	8002068 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fde7 	bl	8002068 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f84c 	bl	8000574 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_f2uiz>:
 8000544:	219e      	movs	r1, #158	; 0x9e
 8000546:	b510      	push	{r4, lr}
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	1c04      	adds	r4, r0, #0
 800054c:	f002 fdfe 	bl	800314c <__aeabi_fcmpge>
 8000550:	2800      	cmp	r0, #0
 8000552:	d103      	bne.n	800055c <__aeabi_f2uiz+0x18>
 8000554:	1c20      	adds	r0, r4, #0
 8000556:	f000 fe63 	bl	8001220 <__aeabi_f2iz>
 800055a:	bd10      	pop	{r4, pc}
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	1c20      	adds	r0, r4, #0
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	f000 fcaf 	bl	8000ec4 <__aeabi_fsub>
 8000566:	f000 fe5b 	bl	8001220 <__aeabi_f2iz>
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	061b      	lsls	r3, r3, #24
 800056e:	469c      	mov	ip, r3
 8000570:	4460      	add	r0, ip
 8000572:	e7f2      	b.n	800055a <__aeabi_f2uiz+0x16>

08000574 <__udivmoddi4>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	4645      	mov	r5, r8
 800057c:	46de      	mov	lr, fp
 800057e:	b5e0      	push	{r5, r6, r7, lr}
 8000580:	0004      	movs	r4, r0
 8000582:	000d      	movs	r5, r1
 8000584:	4692      	mov	sl, r2
 8000586:	4699      	mov	r9, r3
 8000588:	b083      	sub	sp, #12
 800058a:	428b      	cmp	r3, r1
 800058c:	d830      	bhi.n	80005f0 <__udivmoddi4+0x7c>
 800058e:	d02d      	beq.n	80005ec <__udivmoddi4+0x78>
 8000590:	4649      	mov	r1, r9
 8000592:	4650      	mov	r0, sl
 8000594:	f002 fe02 	bl	800319c <__clzdi2>
 8000598:	0029      	movs	r1, r5
 800059a:	0006      	movs	r6, r0
 800059c:	0020      	movs	r0, r4
 800059e:	f002 fdfd 	bl	800319c <__clzdi2>
 80005a2:	1a33      	subs	r3, r6, r0
 80005a4:	4698      	mov	r8, r3
 80005a6:	3b20      	subs	r3, #32
 80005a8:	469b      	mov	fp, r3
 80005aa:	d433      	bmi.n	8000614 <__udivmoddi4+0xa0>
 80005ac:	465a      	mov	r2, fp
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	4642      	mov	r2, r8
 80005b4:	001f      	movs	r7, r3
 80005b6:	4653      	mov	r3, sl
 80005b8:	4093      	lsls	r3, r2
 80005ba:	001e      	movs	r6, r3
 80005bc:	42af      	cmp	r7, r5
 80005be:	d83a      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d100      	bne.n	80005c6 <__udivmoddi4+0x52>
 80005c4:	e078      	b.n	80006b8 <__udivmoddi4+0x144>
 80005c6:	465b      	mov	r3, fp
 80005c8:	1ba4      	subs	r4, r4, r6
 80005ca:	41bd      	sbcs	r5, r7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <__udivmoddi4+0x5e>
 80005d0:	e075      	b.n	80006be <__udivmoddi4+0x14a>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	465a      	mov	r2, fp
 80005de:	4093      	lsls	r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4642      	mov	r2, r8
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	e028      	b.n	800063e <__udivmoddi4+0xca>
 80005ec:	4282      	cmp	r2, r0
 80005ee:	d9cf      	bls.n	8000590 <__udivmoddi4+0x1c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <__udivmoddi4+0x8e>
 80005fe:	601c      	str	r4, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	b003      	add	sp, #12
 8000608:	bcf0      	pop	{r4, r5, r6, r7}
 800060a:	46bb      	mov	fp, r7
 800060c:	46b2      	mov	sl, r6
 800060e:	46a9      	mov	r9, r5
 8000610:	46a0      	mov	r8, r4
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4652      	mov	r2, sl
 800061c:	40da      	lsrs	r2, r3
 800061e:	4641      	mov	r1, r8
 8000620:	0013      	movs	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	408a      	lsls	r2, r1
 8000626:	0017      	movs	r7, r2
 8000628:	4642      	mov	r2, r8
 800062a:	431f      	orrs	r7, r3
 800062c:	4653      	mov	r3, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	001e      	movs	r6, r3
 8000632:	42af      	cmp	r7, r5
 8000634:	d9c4      	bls.n	80005c0 <__udivmoddi4+0x4c>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0d9      	beq.n	80005f8 <__udivmoddi4+0x84>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	0872      	lsrs	r2, r6, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	4646      	mov	r6, r8
 800064c:	087b      	lsrs	r3, r7, #1
 800064e:	e00e      	b.n	800066e <__udivmoddi4+0xfa>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d101      	bne.n	8000658 <__udivmoddi4+0xe4>
 8000654:	42a2      	cmp	r2, r4
 8000656:	d80c      	bhi.n	8000672 <__udivmoddi4+0xfe>
 8000658:	1aa4      	subs	r4, r4, r2
 800065a:	419d      	sbcs	r5, r3
 800065c:	2001      	movs	r0, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2100      	movs	r1, #0
 8000664:	3e01      	subs	r6, #1
 8000666:	1824      	adds	r4, r4, r0
 8000668:	414d      	adcs	r5, r1
 800066a:	2e00      	cmp	r6, #0
 800066c:	d006      	beq.n	800067c <__udivmoddi4+0x108>
 800066e:	42ab      	cmp	r3, r5
 8000670:	d9ee      	bls.n	8000650 <__udivmoddi4+0xdc>
 8000672:	3e01      	subs	r6, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1f8      	bne.n	800066e <__udivmoddi4+0xfa>
 800067c:	9800      	ldr	r0, [sp, #0]
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	465b      	mov	r3, fp
 8000682:	1900      	adds	r0, r0, r4
 8000684:	4169      	adcs	r1, r5
 8000686:	2b00      	cmp	r3, #0
 8000688:	db24      	blt.n	80006d4 <__udivmoddi4+0x160>
 800068a:	002b      	movs	r3, r5
 800068c:	465a      	mov	r2, fp
 800068e:	4644      	mov	r4, r8
 8000690:	40d3      	lsrs	r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	40e2      	lsrs	r2, r4
 8000696:	001c      	movs	r4, r3
 8000698:	465b      	mov	r3, fp
 800069a:	0015      	movs	r5, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	db2a      	blt.n	80006f6 <__udivmoddi4+0x182>
 80006a0:	0026      	movs	r6, r4
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	0026      	movs	r6, r4
 80006a8:	4647      	mov	r7, r8
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1a80      	subs	r0, r0, r2
 80006b0:	4199      	sbcs	r1, r3
 80006b2:	9000      	str	r0, [sp, #0]
 80006b4:	9101      	str	r1, [sp, #4]
 80006b6:	e79f      	b.n	80005f8 <__udivmoddi4+0x84>
 80006b8:	42a3      	cmp	r3, r4
 80006ba:	d8bc      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80006bc:	e783      	b.n	80005c6 <__udivmoddi4+0x52>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e786      	b.n	80005e2 <__udivmoddi4+0x6e>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	002a      	movs	r2, r5
 80006dc:	4646      	mov	r6, r8
 80006de:	409a      	lsls	r2, r3
 80006e0:	0023      	movs	r3, r4
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	4644      	mov	r4, r8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	40e2      	lsrs	r2, r4
 80006ec:	001c      	movs	r4, r3
 80006ee:	465b      	mov	r3, fp
 80006f0:	0015      	movs	r5, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dad4      	bge.n	80006a0 <__udivmoddi4+0x12c>
 80006f6:	4642      	mov	r2, r8
 80006f8:	002f      	movs	r7, r5
 80006fa:	2320      	movs	r3, #32
 80006fc:	0026      	movs	r6, r4
 80006fe:	4097      	lsls	r7, r2
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	40de      	lsrs	r6, r3
 8000704:	003b      	movs	r3, r7
 8000706:	4333      	orrs	r3, r6
 8000708:	e7cd      	b.n	80006a6 <__udivmoddi4+0x132>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__aeabi_fadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	46c6      	mov	lr, r8
 8000710:	0243      	lsls	r3, r0, #9
 8000712:	0a5b      	lsrs	r3, r3, #9
 8000714:	024e      	lsls	r6, r1, #9
 8000716:	0045      	lsls	r5, r0, #1
 8000718:	004f      	lsls	r7, r1, #1
 800071a:	00da      	lsls	r2, r3, #3
 800071c:	0fc4      	lsrs	r4, r0, #31
 800071e:	469c      	mov	ip, r3
 8000720:	0a70      	lsrs	r0, r6, #9
 8000722:	4690      	mov	r8, r2
 8000724:	b500      	push	{lr}
 8000726:	0e2d      	lsrs	r5, r5, #24
 8000728:	0e3f      	lsrs	r7, r7, #24
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	09b6      	lsrs	r6, r6, #6
 800072e:	428c      	cmp	r4, r1
 8000730:	d04b      	beq.n	80007ca <__aeabi_fadd+0xbe>
 8000732:	1bea      	subs	r2, r5, r7
 8000734:	2a00      	cmp	r2, #0
 8000736:	dd36      	ble.n	80007a6 <__aeabi_fadd+0x9a>
 8000738:	2f00      	cmp	r7, #0
 800073a:	d061      	beq.n	8000800 <__aeabi_fadd+0xf4>
 800073c:	2dff      	cmp	r5, #255	; 0xff
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x36>
 8000740:	e0ad      	b.n	800089e <__aeabi_fadd+0x192>
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	04db      	lsls	r3, r3, #19
 8000746:	431e      	orrs	r6, r3
 8000748:	2a1b      	cmp	r2, #27
 800074a:	dc00      	bgt.n	800074e <__aeabi_fadd+0x42>
 800074c:	e0d3      	b.n	80008f6 <__aeabi_fadd+0x1ea>
 800074e:	2001      	movs	r0, #1
 8000750:	4643      	mov	r3, r8
 8000752:	1a18      	subs	r0, r3, r0
 8000754:	0143      	lsls	r3, r0, #5
 8000756:	d400      	bmi.n	800075a <__aeabi_fadd+0x4e>
 8000758:	e08c      	b.n	8000874 <__aeabi_fadd+0x168>
 800075a:	0180      	lsls	r0, r0, #6
 800075c:	0987      	lsrs	r7, r0, #6
 800075e:	0038      	movs	r0, r7
 8000760:	f002 fcfe 	bl	8003160 <__clzsi2>
 8000764:	3805      	subs	r0, #5
 8000766:	4087      	lsls	r7, r0
 8000768:	4285      	cmp	r5, r0
 800076a:	dc00      	bgt.n	800076e <__aeabi_fadd+0x62>
 800076c:	e0b6      	b.n	80008dc <__aeabi_fadd+0x1d0>
 800076e:	1a2d      	subs	r5, r5, r0
 8000770:	48b3      	ldr	r0, [pc, #716]	; (8000a40 <__aeabi_fadd+0x334>)
 8000772:	4038      	ands	r0, r7
 8000774:	0743      	lsls	r3, r0, #29
 8000776:	d004      	beq.n	8000782 <__aeabi_fadd+0x76>
 8000778:	230f      	movs	r3, #15
 800077a:	4003      	ands	r3, r0
 800077c:	2b04      	cmp	r3, #4
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x76>
 8000780:	3004      	adds	r0, #4
 8000782:	0143      	lsls	r3, r0, #5
 8000784:	d400      	bmi.n	8000788 <__aeabi_fadd+0x7c>
 8000786:	e078      	b.n	800087a <__aeabi_fadd+0x16e>
 8000788:	1c6a      	adds	r2, r5, #1
 800078a:	2dfe      	cmp	r5, #254	; 0xfe
 800078c:	d065      	beq.n	800085a <__aeabi_fadd+0x14e>
 800078e:	0180      	lsls	r0, r0, #6
 8000790:	0a43      	lsrs	r3, r0, #9
 8000792:	469c      	mov	ip, r3
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	4663      	mov	r3, ip
 8000798:	05d0      	lsls	r0, r2, #23
 800079a:	4318      	orrs	r0, r3
 800079c:	07e4      	lsls	r4, r4, #31
 800079e:	4320      	orrs	r0, r4
 80007a0:	bc80      	pop	{r7}
 80007a2:	46b8      	mov	r8, r7
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d035      	beq.n	8000816 <__aeabi_fadd+0x10a>
 80007aa:	1b7a      	subs	r2, r7, r5
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0xa6>
 80007b0:	e0af      	b.n	8000912 <__aeabi_fadd+0x206>
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0xae>
 80007b8:	e0a7      	b.n	800090a <__aeabi_fadd+0x1fe>
 80007ba:	1e53      	subs	r3, r2, #1
 80007bc:	2a01      	cmp	r2, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0xb6>
 80007c0:	e12f      	b.n	8000a22 <__aeabi_fadd+0x316>
 80007c2:	2aff      	cmp	r2, #255	; 0xff
 80007c4:	d069      	beq.n	800089a <__aeabi_fadd+0x18e>
 80007c6:	001a      	movs	r2, r3
 80007c8:	e0aa      	b.n	8000920 <__aeabi_fadd+0x214>
 80007ca:	1be9      	subs	r1, r5, r7
 80007cc:	2900      	cmp	r1, #0
 80007ce:	dd70      	ble.n	80008b2 <__aeabi_fadd+0x1a6>
 80007d0:	2f00      	cmp	r7, #0
 80007d2:	d037      	beq.n	8000844 <__aeabi_fadd+0x138>
 80007d4:	2dff      	cmp	r5, #255	; 0xff
 80007d6:	d062      	beq.n	800089e <__aeabi_fadd+0x192>
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	04db      	lsls	r3, r3, #19
 80007dc:	431e      	orrs	r6, r3
 80007de:	291b      	cmp	r1, #27
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_fadd+0xd8>
 80007e2:	e0b0      	b.n	8000946 <__aeabi_fadd+0x23a>
 80007e4:	2001      	movs	r0, #1
 80007e6:	4440      	add	r0, r8
 80007e8:	0143      	lsls	r3, r0, #5
 80007ea:	d543      	bpl.n	8000874 <__aeabi_fadd+0x168>
 80007ec:	3501      	adds	r5, #1
 80007ee:	2dff      	cmp	r5, #255	; 0xff
 80007f0:	d033      	beq.n	800085a <__aeabi_fadd+0x14e>
 80007f2:	2301      	movs	r3, #1
 80007f4:	4a93      	ldr	r2, [pc, #588]	; (8000a44 <__aeabi_fadd+0x338>)
 80007f6:	4003      	ands	r3, r0
 80007f8:	0840      	lsrs	r0, r0, #1
 80007fa:	4010      	ands	r0, r2
 80007fc:	4318      	orrs	r0, r3
 80007fe:	e7b9      	b.n	8000774 <__aeabi_fadd+0x68>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0xfa>
 8000804:	e083      	b.n	800090e <__aeabi_fadd+0x202>
 8000806:	1e51      	subs	r1, r2, #1
 8000808:	2a01      	cmp	r2, #1
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x102>
 800080c:	e0d8      	b.n	80009c0 <__aeabi_fadd+0x2b4>
 800080e:	2aff      	cmp	r2, #255	; 0xff
 8000810:	d045      	beq.n	800089e <__aeabi_fadd+0x192>
 8000812:	000a      	movs	r2, r1
 8000814:	e798      	b.n	8000748 <__aeabi_fadd+0x3c>
 8000816:	27fe      	movs	r7, #254	; 0xfe
 8000818:	1c6a      	adds	r2, r5, #1
 800081a:	4217      	tst	r7, r2
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x114>
 800081e:	e086      	b.n	800092e <__aeabi_fadd+0x222>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x11a>
 8000824:	e0b7      	b.n	8000996 <__aeabi_fadd+0x28a>
 8000826:	4643      	mov	r3, r8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x122>
 800082c:	e0f3      	b.n	8000a16 <__aeabi_fadd+0x30a>
 800082e:	2200      	movs	r2, #0
 8000830:	2e00      	cmp	r6, #0
 8000832:	d0b0      	beq.n	8000796 <__aeabi_fadd+0x8a>
 8000834:	1b98      	subs	r0, r3, r6
 8000836:	0143      	lsls	r3, r0, #5
 8000838:	d400      	bmi.n	800083c <__aeabi_fadd+0x130>
 800083a:	e0fa      	b.n	8000a32 <__aeabi_fadd+0x326>
 800083c:	4643      	mov	r3, r8
 800083e:	000c      	movs	r4, r1
 8000840:	1af0      	subs	r0, r6, r3
 8000842:	e797      	b.n	8000774 <__aeabi_fadd+0x68>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0x13e>
 8000848:	e0c8      	b.n	80009dc <__aeabi_fadd+0x2d0>
 800084a:	1e4a      	subs	r2, r1, #1
 800084c:	2901      	cmp	r1, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x146>
 8000850:	e0ae      	b.n	80009b0 <__aeabi_fadd+0x2a4>
 8000852:	29ff      	cmp	r1, #255	; 0xff
 8000854:	d023      	beq.n	800089e <__aeabi_fadd+0x192>
 8000856:	0011      	movs	r1, r2
 8000858:	e7c1      	b.n	80007de <__aeabi_fadd+0xd2>
 800085a:	2300      	movs	r3, #0
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	469c      	mov	ip, r3
 8000860:	e799      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000862:	21fe      	movs	r1, #254	; 0xfe
 8000864:	1c6a      	adds	r2, r5, #1
 8000866:	4211      	tst	r1, r2
 8000868:	d077      	beq.n	800095a <__aeabi_fadd+0x24e>
 800086a:	2aff      	cmp	r2, #255	; 0xff
 800086c:	d0f5      	beq.n	800085a <__aeabi_fadd+0x14e>
 800086e:	0015      	movs	r5, r2
 8000870:	4446      	add	r6, r8
 8000872:	0870      	lsrs	r0, r6, #1
 8000874:	0743      	lsls	r3, r0, #29
 8000876:	d000      	beq.n	800087a <__aeabi_fadd+0x16e>
 8000878:	e77e      	b.n	8000778 <__aeabi_fadd+0x6c>
 800087a:	08c3      	lsrs	r3, r0, #3
 800087c:	2dff      	cmp	r5, #255	; 0xff
 800087e:	d00e      	beq.n	800089e <__aeabi_fadd+0x192>
 8000880:	025b      	lsls	r3, r3, #9
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	469c      	mov	ip, r3
 8000886:	b2ea      	uxtb	r2, r5
 8000888:	e785      	b.n	8000796 <__aeabi_fadd+0x8a>
 800088a:	2e00      	cmp	r6, #0
 800088c:	d007      	beq.n	800089e <__aeabi_fadd+0x192>
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	03d2      	lsls	r2, r2, #15
 8000892:	4213      	tst	r3, r2
 8000894:	d003      	beq.n	800089e <__aeabi_fadd+0x192>
 8000896:	4210      	tst	r0, r2
 8000898:	d101      	bne.n	800089e <__aeabi_fadd+0x192>
 800089a:	000c      	movs	r4, r1
 800089c:	0003      	movs	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0db      	beq.n	800085a <__aeabi_fadd+0x14e>
 80008a2:	2080      	movs	r0, #128	; 0x80
 80008a4:	03c0      	lsls	r0, r0, #15
 80008a6:	4318      	orrs	r0, r3
 80008a8:	0240      	lsls	r0, r0, #9
 80008aa:	0a43      	lsrs	r3, r0, #9
 80008ac:	469c      	mov	ip, r3
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	e771      	b.n	8000796 <__aeabi_fadd+0x8a>
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d0d5      	beq.n	8000862 <__aeabi_fadd+0x156>
 80008b6:	1b7a      	subs	r2, r7, r5
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d160      	bne.n	800097e <__aeabi_fadd+0x272>
 80008bc:	4643      	mov	r3, r8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d024      	beq.n	800090c <__aeabi_fadd+0x200>
 80008c2:	1e53      	subs	r3, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d073      	beq.n	80009b0 <__aeabi_fadd+0x2a4>
 80008c8:	2aff      	cmp	r2, #255	; 0xff
 80008ca:	d0e7      	beq.n	800089c <__aeabi_fadd+0x190>
 80008cc:	001a      	movs	r2, r3
 80008ce:	2a1b      	cmp	r2, #27
 80008d0:	dc00      	bgt.n	80008d4 <__aeabi_fadd+0x1c8>
 80008d2:	e085      	b.n	80009e0 <__aeabi_fadd+0x2d4>
 80008d4:	2001      	movs	r0, #1
 80008d6:	003d      	movs	r5, r7
 80008d8:	1980      	adds	r0, r0, r6
 80008da:	e785      	b.n	80007e8 <__aeabi_fadd+0xdc>
 80008dc:	2320      	movs	r3, #32
 80008de:	003a      	movs	r2, r7
 80008e0:	1b45      	subs	r5, r0, r5
 80008e2:	0038      	movs	r0, r7
 80008e4:	3501      	adds	r5, #1
 80008e6:	40ea      	lsrs	r2, r5
 80008e8:	1b5d      	subs	r5, r3, r5
 80008ea:	40a8      	lsls	r0, r5
 80008ec:	1e43      	subs	r3, r0, #1
 80008ee:	4198      	sbcs	r0, r3
 80008f0:	2500      	movs	r5, #0
 80008f2:	4310      	orrs	r0, r2
 80008f4:	e73e      	b.n	8000774 <__aeabi_fadd+0x68>
 80008f6:	2320      	movs	r3, #32
 80008f8:	0030      	movs	r0, r6
 80008fa:	1a9b      	subs	r3, r3, r2
 80008fc:	0031      	movs	r1, r6
 80008fe:	4098      	lsls	r0, r3
 8000900:	40d1      	lsrs	r1, r2
 8000902:	1e43      	subs	r3, r0, #1
 8000904:	4198      	sbcs	r0, r3
 8000906:	4308      	orrs	r0, r1
 8000908:	e722      	b.n	8000750 <__aeabi_fadd+0x44>
 800090a:	000c      	movs	r4, r1
 800090c:	0003      	movs	r3, r0
 800090e:	0015      	movs	r5, r2
 8000910:	e7b4      	b.n	800087c <__aeabi_fadd+0x170>
 8000912:	2fff      	cmp	r7, #255	; 0xff
 8000914:	d0c1      	beq.n	800089a <__aeabi_fadd+0x18e>
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	4640      	mov	r0, r8
 800091a:	04db      	lsls	r3, r3, #19
 800091c:	4318      	orrs	r0, r3
 800091e:	4680      	mov	r8, r0
 8000920:	2a1b      	cmp	r2, #27
 8000922:	dd51      	ble.n	80009c8 <__aeabi_fadd+0x2bc>
 8000924:	2001      	movs	r0, #1
 8000926:	000c      	movs	r4, r1
 8000928:	003d      	movs	r5, r7
 800092a:	1a30      	subs	r0, r6, r0
 800092c:	e712      	b.n	8000754 <__aeabi_fadd+0x48>
 800092e:	4643      	mov	r3, r8
 8000930:	1b9f      	subs	r7, r3, r6
 8000932:	017b      	lsls	r3, r7, #5
 8000934:	d42b      	bmi.n	800098e <__aeabi_fadd+0x282>
 8000936:	2f00      	cmp	r7, #0
 8000938:	d000      	beq.n	800093c <__aeabi_fadd+0x230>
 800093a:	e710      	b.n	800075e <__aeabi_fadd+0x52>
 800093c:	2300      	movs	r3, #0
 800093e:	2400      	movs	r4, #0
 8000940:	2200      	movs	r2, #0
 8000942:	469c      	mov	ip, r3
 8000944:	e727      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000946:	2320      	movs	r3, #32
 8000948:	0032      	movs	r2, r6
 800094a:	0030      	movs	r0, r6
 800094c:	40ca      	lsrs	r2, r1
 800094e:	1a59      	subs	r1, r3, r1
 8000950:	4088      	lsls	r0, r1
 8000952:	1e43      	subs	r3, r0, #1
 8000954:	4198      	sbcs	r0, r3
 8000956:	4310      	orrs	r0, r2
 8000958:	e745      	b.n	80007e6 <__aeabi_fadd+0xda>
 800095a:	2d00      	cmp	r5, #0
 800095c:	d14a      	bne.n	80009f4 <__aeabi_fadd+0x2e8>
 800095e:	4643      	mov	r3, r8
 8000960:	2b00      	cmp	r3, #0
 8000962:	d063      	beq.n	8000a2c <__aeabi_fadd+0x320>
 8000964:	2200      	movs	r2, #0
 8000966:	2e00      	cmp	r6, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x260>
 800096a:	e714      	b.n	8000796 <__aeabi_fadd+0x8a>
 800096c:	0030      	movs	r0, r6
 800096e:	4440      	add	r0, r8
 8000970:	0143      	lsls	r3, r0, #5
 8000972:	d400      	bmi.n	8000976 <__aeabi_fadd+0x26a>
 8000974:	e77e      	b.n	8000874 <__aeabi_fadd+0x168>
 8000976:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <__aeabi_fadd+0x334>)
 8000978:	3501      	adds	r5, #1
 800097a:	4018      	ands	r0, r3
 800097c:	e77a      	b.n	8000874 <__aeabi_fadd+0x168>
 800097e:	2fff      	cmp	r7, #255	; 0xff
 8000980:	d08c      	beq.n	800089c <__aeabi_fadd+0x190>
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	4641      	mov	r1, r8
 8000986:	04db      	lsls	r3, r3, #19
 8000988:	4319      	orrs	r1, r3
 800098a:	4688      	mov	r8, r1
 800098c:	e79f      	b.n	80008ce <__aeabi_fadd+0x1c2>
 800098e:	4643      	mov	r3, r8
 8000990:	000c      	movs	r4, r1
 8000992:	1af7      	subs	r7, r6, r3
 8000994:	e6e3      	b.n	800075e <__aeabi_fadd+0x52>
 8000996:	4642      	mov	r2, r8
 8000998:	2a00      	cmp	r2, #0
 800099a:	d000      	beq.n	800099e <__aeabi_fadd+0x292>
 800099c:	e775      	b.n	800088a <__aeabi_fadd+0x17e>
 800099e:	2e00      	cmp	r6, #0
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fadd+0x298>
 80009a2:	e77a      	b.n	800089a <__aeabi_fadd+0x18e>
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	03db      	lsls	r3, r3, #15
 80009a8:	2400      	movs	r4, #0
 80009aa:	469c      	mov	ip, r3
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	e6f2      	b.n	8000796 <__aeabi_fadd+0x8a>
 80009b0:	0030      	movs	r0, r6
 80009b2:	4440      	add	r0, r8
 80009b4:	2501      	movs	r5, #1
 80009b6:	0143      	lsls	r3, r0, #5
 80009b8:	d400      	bmi.n	80009bc <__aeabi_fadd+0x2b0>
 80009ba:	e75b      	b.n	8000874 <__aeabi_fadd+0x168>
 80009bc:	2502      	movs	r5, #2
 80009be:	e718      	b.n	80007f2 <__aeabi_fadd+0xe6>
 80009c0:	4643      	mov	r3, r8
 80009c2:	2501      	movs	r5, #1
 80009c4:	1b98      	subs	r0, r3, r6
 80009c6:	e6c5      	b.n	8000754 <__aeabi_fadd+0x48>
 80009c8:	2320      	movs	r3, #32
 80009ca:	4644      	mov	r4, r8
 80009cc:	4640      	mov	r0, r8
 80009ce:	40d4      	lsrs	r4, r2
 80009d0:	1a9a      	subs	r2, r3, r2
 80009d2:	4090      	lsls	r0, r2
 80009d4:	1e43      	subs	r3, r0, #1
 80009d6:	4198      	sbcs	r0, r3
 80009d8:	4320      	orrs	r0, r4
 80009da:	e7a4      	b.n	8000926 <__aeabi_fadd+0x21a>
 80009dc:	000d      	movs	r5, r1
 80009de:	e74d      	b.n	800087c <__aeabi_fadd+0x170>
 80009e0:	2320      	movs	r3, #32
 80009e2:	4641      	mov	r1, r8
 80009e4:	4640      	mov	r0, r8
 80009e6:	40d1      	lsrs	r1, r2
 80009e8:	1a9a      	subs	r2, r3, r2
 80009ea:	4090      	lsls	r0, r2
 80009ec:	1e43      	subs	r3, r0, #1
 80009ee:	4198      	sbcs	r0, r3
 80009f0:	4308      	orrs	r0, r1
 80009f2:	e770      	b.n	80008d6 <__aeabi_fadd+0x1ca>
 80009f4:	4642      	mov	r2, r8
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_fadd+0x2f0>
 80009fa:	e74f      	b.n	800089c <__aeabi_fadd+0x190>
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fadd+0x2f6>
 8000a00:	e74d      	b.n	800089e <__aeabi_fadd+0x192>
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	03d2      	lsls	r2, r2, #15
 8000a06:	4213      	tst	r3, r2
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fadd+0x300>
 8000a0a:	e748      	b.n	800089e <__aeabi_fadd+0x192>
 8000a0c:	4210      	tst	r0, r2
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fadd+0x306>
 8000a10:	e745      	b.n	800089e <__aeabi_fadd+0x192>
 8000a12:	0003      	movs	r3, r0
 8000a14:	e743      	b.n	800089e <__aeabi_fadd+0x192>
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d090      	beq.n	800093c <__aeabi_fadd+0x230>
 8000a1a:	000c      	movs	r4, r1
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	2200      	movs	r2, #0
 8000a20:	e6b9      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a22:	4643      	mov	r3, r8
 8000a24:	000c      	movs	r4, r1
 8000a26:	1af0      	subs	r0, r6, r3
 8000a28:	3501      	adds	r5, #1
 8000a2a:	e693      	b.n	8000754 <__aeabi_fadd+0x48>
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	e6b1      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fadd+0x32c>
 8000a36:	e71d      	b.n	8000874 <__aeabi_fadd+0x168>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	469c      	mov	ip, r3
 8000a3e:	e6aa      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a40:	fbffffff 	.word	0xfbffffff
 8000a44:	7dffffff 	.word	0x7dffffff

08000a48 <__aeabi_fdiv>:
 8000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4a:	464f      	mov	r7, r9
 8000a4c:	4646      	mov	r6, r8
 8000a4e:	46d6      	mov	lr, sl
 8000a50:	0245      	lsls	r5, r0, #9
 8000a52:	b5c0      	push	{r6, r7, lr}
 8000a54:	0047      	lsls	r7, r0, #1
 8000a56:	1c0c      	adds	r4, r1, #0
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	0e3f      	lsrs	r7, r7, #24
 8000a5c:	0fc6      	lsrs	r6, r0, #31
 8000a5e:	2f00      	cmp	r7, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fdiv+0x1c>
 8000a62:	e070      	b.n	8000b46 <__aeabi_fdiv+0xfe>
 8000a64:	2fff      	cmp	r7, #255	; 0xff
 8000a66:	d100      	bne.n	8000a6a <__aeabi_fdiv+0x22>
 8000a68:	e075      	b.n	8000b56 <__aeabi_fdiv+0x10e>
 8000a6a:	00eb      	lsls	r3, r5, #3
 8000a6c:	2580      	movs	r5, #128	; 0x80
 8000a6e:	04ed      	lsls	r5, r5, #19
 8000a70:	431d      	orrs	r5, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	3f7f      	subs	r7, #127	; 0x7f
 8000a7a:	0260      	lsls	r0, r4, #9
 8000a7c:	0a43      	lsrs	r3, r0, #9
 8000a7e:	4698      	mov	r8, r3
 8000a80:	0063      	lsls	r3, r4, #1
 8000a82:	0e1b      	lsrs	r3, r3, #24
 8000a84:	0fe4      	lsrs	r4, r4, #31
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d04e      	beq.n	8000b28 <__aeabi_fdiv+0xe0>
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d046      	beq.n	8000b1c <__aeabi_fdiv+0xd4>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	00d0      	lsls	r0, r2, #3
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	04d2      	lsls	r2, r2, #19
 8000a96:	4302      	orrs	r2, r0
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	3b7f      	subs	r3, #127	; 0x7f
 8000a9e:	0031      	movs	r1, r6
 8000aa0:	1aff      	subs	r7, r7, r3
 8000aa2:	464b      	mov	r3, r9
 8000aa4:	4061      	eors	r1, r4
 8000aa6:	b2c9      	uxtb	r1, r1
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d900      	bls.n	8000ab0 <__aeabi_fdiv+0x68>
 8000aae:	e0b5      	b.n	8000c1c <__aeabi_fdiv+0x1d4>
 8000ab0:	486e      	ldr	r0, [pc, #440]	; (8000c6c <__aeabi_fdiv+0x224>)
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	58c3      	ldr	r3, [r0, r3]
 8000ab6:	469f      	mov	pc, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	4698      	mov	r8, r3
 8000abc:	0026      	movs	r6, r4
 8000abe:	4645      	mov	r5, r8
 8000ac0:	4692      	mov	sl, r2
 8000ac2:	4653      	mov	r3, sl
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fdiv+0x82>
 8000ac8:	e089      	b.n	8000bde <__aeabi_fdiv+0x196>
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fdiv+0x88>
 8000ace:	e09e      	b.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d018      	beq.n	8000b06 <__aeabi_fdiv+0xbe>
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	337f      	adds	r3, #127	; 0x7f
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dd69      	ble.n	8000bb0 <__aeabi_fdiv+0x168>
 8000adc:	076a      	lsls	r2, r5, #29
 8000ade:	d004      	beq.n	8000aea <__aeabi_fdiv+0xa2>
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	402a      	ands	r2, r5
 8000ae4:	2a04      	cmp	r2, #4
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fdiv+0xa2>
 8000ae8:	3504      	adds	r5, #4
 8000aea:	012a      	lsls	r2, r5, #4
 8000aec:	d503      	bpl.n	8000af6 <__aeabi_fdiv+0xae>
 8000aee:	4b60      	ldr	r3, [pc, #384]	; (8000c70 <__aeabi_fdiv+0x228>)
 8000af0:	401d      	ands	r5, r3
 8000af2:	003b      	movs	r3, r7
 8000af4:	3380      	adds	r3, #128	; 0x80
 8000af6:	2bfe      	cmp	r3, #254	; 0xfe
 8000af8:	dd00      	ble.n	8000afc <__aeabi_fdiv+0xb4>
 8000afa:	e070      	b.n	8000bde <__aeabi_fdiv+0x196>
 8000afc:	01ad      	lsls	r5, r5, #6
 8000afe:	0a6d      	lsrs	r5, r5, #9
 8000b00:	b2d8      	uxtb	r0, r3
 8000b02:	e002      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000b04:	000e      	movs	r6, r1
 8000b06:	2000      	movs	r0, #0
 8000b08:	2500      	movs	r5, #0
 8000b0a:	05c0      	lsls	r0, r0, #23
 8000b0c:	4328      	orrs	r0, r5
 8000b0e:	07f6      	lsls	r6, r6, #31
 8000b10:	4330      	orrs	r0, r6
 8000b12:	bce0      	pop	{r5, r6, r7}
 8000b14:	46ba      	mov	sl, r7
 8000b16:	46b1      	mov	r9, r6
 8000b18:	46a8      	mov	r8, r5
 8000b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d13f      	bne.n	8000ba2 <__aeabi_fdiv+0x15a>
 8000b22:	2202      	movs	r2, #2
 8000b24:	3fff      	subs	r7, #255	; 0xff
 8000b26:	e003      	b.n	8000b30 <__aeabi_fdiv+0xe8>
 8000b28:	4643      	mov	r3, r8
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12d      	bne.n	8000b8a <__aeabi_fdiv+0x142>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	0031      	movs	r1, r6
 8000b32:	464b      	mov	r3, r9
 8000b34:	4061      	eors	r1, r4
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d834      	bhi.n	8000ba8 <__aeabi_fdiv+0x160>
 8000b3e:	484d      	ldr	r0, [pc, #308]	; (8000c74 <__aeabi_fdiv+0x22c>)
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	58c3      	ldr	r3, [r0, r3]
 8000b44:	469f      	mov	pc, r3
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d113      	bne.n	8000b72 <__aeabi_fdiv+0x12a>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	3b03      	subs	r3, #3
 8000b50:	2700      	movs	r7, #0
 8000b52:	469a      	mov	sl, r3
 8000b54:	e791      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d105      	bne.n	8000b66 <__aeabi_fdiv+0x11e>
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	3b06      	subs	r3, #6
 8000b60:	27ff      	movs	r7, #255	; 0xff
 8000b62:	469a      	mov	sl, r3
 8000b64:	e789      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b66:	230c      	movs	r3, #12
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b09      	subs	r3, #9
 8000b6c:	27ff      	movs	r7, #255	; 0xff
 8000b6e:	469a      	mov	sl, r3
 8000b70:	e783      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b72:	0028      	movs	r0, r5
 8000b74:	f002 faf4 	bl	8003160 <__clzsi2>
 8000b78:	2776      	movs	r7, #118	; 0x76
 8000b7a:	1f43      	subs	r3, r0, #5
 8000b7c:	409d      	lsls	r5, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	427f      	negs	r7, r7
 8000b82:	4699      	mov	r9, r3
 8000b84:	469a      	mov	sl, r3
 8000b86:	1a3f      	subs	r7, r7, r0
 8000b88:	e777      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	f002 fae8 	bl	8003160 <__clzsi2>
 8000b90:	4642      	mov	r2, r8
 8000b92:	1f43      	subs	r3, r0, #5
 8000b94:	409a      	lsls	r2, r3
 8000b96:	2376      	movs	r3, #118	; 0x76
 8000b98:	425b      	negs	r3, r3
 8000b9a:	4690      	mov	r8, r2
 8000b9c:	1a1b      	subs	r3, r3, r0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	e77d      	b.n	8000a9e <__aeabi_fdiv+0x56>
 8000ba2:	23ff      	movs	r3, #255	; 0xff
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	e77a      	b.n	8000a9e <__aeabi_fdiv+0x56>
 8000ba8:	000e      	movs	r6, r1
 8000baa:	20ff      	movs	r0, #255	; 0xff
 8000bac:	2500      	movs	r5, #0
 8000bae:	e7ac      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	1ac0      	subs	r0, r0, r3
 8000bb4:	281b      	cmp	r0, #27
 8000bb6:	dca6      	bgt.n	8000b06 <__aeabi_fdiv+0xbe>
 8000bb8:	379e      	adds	r7, #158	; 0x9e
 8000bba:	002a      	movs	r2, r5
 8000bbc:	40bd      	lsls	r5, r7
 8000bbe:	40c2      	lsrs	r2, r0
 8000bc0:	1e6b      	subs	r3, r5, #1
 8000bc2:	419d      	sbcs	r5, r3
 8000bc4:	4315      	orrs	r5, r2
 8000bc6:	076b      	lsls	r3, r5, #29
 8000bc8:	d004      	beq.n	8000bd4 <__aeabi_fdiv+0x18c>
 8000bca:	230f      	movs	r3, #15
 8000bcc:	402b      	ands	r3, r5
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_fdiv+0x18c>
 8000bd2:	3504      	adds	r5, #4
 8000bd4:	016b      	lsls	r3, r5, #5
 8000bd6:	d544      	bpl.n	8000c62 <__aeabi_fdiv+0x21a>
 8000bd8:	2001      	movs	r0, #1
 8000bda:	2500      	movs	r5, #0
 8000bdc:	e795      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bde:	20ff      	movs	r0, #255	; 0xff
 8000be0:	2500      	movs	r5, #0
 8000be2:	e792      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000be4:	2580      	movs	r5, #128	; 0x80
 8000be6:	2600      	movs	r6, #0
 8000be8:	20ff      	movs	r0, #255	; 0xff
 8000bea:	03ed      	lsls	r5, r5, #15
 8000bec:	e78d      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	03c0      	lsls	r0, r0, #15
 8000bf6:	4205      	tst	r5, r0
 8000bf8:	d009      	beq.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	4203      	tst	r3, r0
 8000bfe:	d106      	bne.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000c00:	4645      	mov	r5, r8
 8000c02:	4305      	orrs	r5, r0
 8000c04:	026d      	lsls	r5, r5, #9
 8000c06:	0026      	movs	r6, r4
 8000c08:	20ff      	movs	r0, #255	; 0xff
 8000c0a:	0a6d      	lsrs	r5, r5, #9
 8000c0c:	e77d      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c0e:	2080      	movs	r0, #128	; 0x80
 8000c10:	03c0      	lsls	r0, r0, #15
 8000c12:	4305      	orrs	r5, r0
 8000c14:	026d      	lsls	r5, r5, #9
 8000c16:	20ff      	movs	r0, #255	; 0xff
 8000c18:	0a6d      	lsrs	r5, r5, #9
 8000c1a:	e776      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	016b      	lsls	r3, r5, #5
 8000c20:	0150      	lsls	r0, r2, #5
 8000c22:	4283      	cmp	r3, r0
 8000c24:	d219      	bcs.n	8000c5a <__aeabi_fdiv+0x212>
 8000c26:	221b      	movs	r2, #27
 8000c28:	2500      	movs	r5, #0
 8000c2a:	3f01      	subs	r7, #1
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	001c      	movs	r4, r3
 8000c30:	006d      	lsls	r5, r5, #1
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	db01      	blt.n	8000c3c <__aeabi_fdiv+0x1f4>
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	d801      	bhi.n	8000c40 <__aeabi_fdiv+0x1f8>
 8000c3c:	1a1b      	subs	r3, r3, r0
 8000c3e:	4335      	orrs	r5, r6
 8000c40:	3a01      	subs	r2, #1
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d1f3      	bne.n	8000c2e <__aeabi_fdiv+0x1e6>
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	4193      	sbcs	r3, r2
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	337f      	adds	r3, #127	; 0x7f
 8000c50:	000e      	movs	r6, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_fdiv+0x210>
 8000c56:	e741      	b.n	8000adc <__aeabi_fdiv+0x94>
 8000c58:	e7aa      	b.n	8000bb0 <__aeabi_fdiv+0x168>
 8000c5a:	221a      	movs	r2, #26
 8000c5c:	2501      	movs	r5, #1
 8000c5e:	1a1b      	subs	r3, r3, r0
 8000c60:	e7e4      	b.n	8000c2c <__aeabi_fdiv+0x1e4>
 8000c62:	01ad      	lsls	r5, r5, #6
 8000c64:	2000      	movs	r0, #0
 8000c66:	0a6d      	lsrs	r5, r5, #9
 8000c68:	e74f      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	0800e0b0 	.word	0x0800e0b0
 8000c70:	f7ffffff 	.word	0xf7ffffff
 8000c74:	0800e0f0 	.word	0x0800e0f0

08000c78 <__aeabi_fmul>:
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	464f      	mov	r7, r9
 8000c7c:	4646      	mov	r6, r8
 8000c7e:	46d6      	mov	lr, sl
 8000c80:	0244      	lsls	r4, r0, #9
 8000c82:	0045      	lsls	r5, r0, #1
 8000c84:	b5c0      	push	{r6, r7, lr}
 8000c86:	0a64      	lsrs	r4, r4, #9
 8000c88:	1c0f      	adds	r7, r1, #0
 8000c8a:	0e2d      	lsrs	r5, r5, #24
 8000c8c:	0fc6      	lsrs	r6, r0, #31
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fmul+0x1c>
 8000c92:	e08d      	b.n	8000db0 <__aeabi_fmul+0x138>
 8000c94:	2dff      	cmp	r5, #255	; 0xff
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fmul+0x22>
 8000c98:	e092      	b.n	8000dc0 <__aeabi_fmul+0x148>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2080      	movs	r0, #128	; 0x80
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	00e4      	lsls	r4, r4, #3
 8000ca4:	04c0      	lsls	r0, r0, #19
 8000ca6:	4304      	orrs	r4, r0
 8000ca8:	3d7f      	subs	r5, #127	; 0x7f
 8000caa:	0278      	lsls	r0, r7, #9
 8000cac:	0a43      	lsrs	r3, r0, #9
 8000cae:	4698      	mov	r8, r3
 8000cb0:	007b      	lsls	r3, r7, #1
 8000cb2:	0e1b      	lsrs	r3, r3, #24
 8000cb4:	0fff      	lsrs	r7, r7, #31
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fmul+0x44>
 8000cba:	e070      	b.n	8000d9e <__aeabi_fmul+0x126>
 8000cbc:	2bff      	cmp	r3, #255	; 0xff
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_fmul+0x4a>
 8000cc0:	e086      	b.n	8000dd0 <__aeabi_fmul+0x158>
 8000cc2:	4642      	mov	r2, r8
 8000cc4:	00d0      	lsls	r0, r2, #3
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	3b7f      	subs	r3, #127	; 0x7f
 8000cca:	18ed      	adds	r5, r5, r3
 8000ccc:	2300      	movs	r3, #0
 8000cce:	04d2      	lsls	r2, r2, #19
 8000cd0:	4302      	orrs	r2, r0
 8000cd2:	4690      	mov	r8, r2
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	0031      	movs	r1, r6
 8000cd8:	464b      	mov	r3, r9
 8000cda:	4079      	eors	r1, r7
 8000cdc:	1c68      	adds	r0, r5, #1
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d81c      	bhi.n	8000d1c <__aeabi_fmul+0xa4>
 8000ce2:	4a76      	ldr	r2, [pc, #472]	; (8000ebc <__aeabi_fmul+0x244>)
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	58d3      	ldr	r3, [r2, r3]
 8000ce8:	469f      	mov	pc, r3
 8000cea:	0039      	movs	r1, r7
 8000cec:	4644      	mov	r4, r8
 8000cee:	46e2      	mov	sl, ip
 8000cf0:	4653      	mov	r3, sl
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d00f      	beq.n	8000d16 <__aeabi_fmul+0x9e>
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fmul+0x84>
 8000cfa:	e0d7      	b.n	8000eac <__aeabi_fmul+0x234>
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d137      	bne.n	8000d70 <__aeabi_fmul+0xf8>
 8000d00:	2000      	movs	r0, #0
 8000d02:	2400      	movs	r4, #0
 8000d04:	05c0      	lsls	r0, r0, #23
 8000d06:	4320      	orrs	r0, r4
 8000d08:	07c9      	lsls	r1, r1, #31
 8000d0a:	4308      	orrs	r0, r1
 8000d0c:	bce0      	pop	{r5, r6, r7}
 8000d0e:	46ba      	mov	sl, r7
 8000d10:	46b1      	mov	r9, r6
 8000d12:	46a8      	mov	r8, r5
 8000d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d16:	20ff      	movs	r0, #255	; 0xff
 8000d18:	2400      	movs	r4, #0
 8000d1a:	e7f3      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000d1c:	0c26      	lsrs	r6, r4, #16
 8000d1e:	0424      	lsls	r4, r4, #16
 8000d20:	0c22      	lsrs	r2, r4, #16
 8000d22:	4644      	mov	r4, r8
 8000d24:	0424      	lsls	r4, r4, #16
 8000d26:	0c24      	lsrs	r4, r4, #16
 8000d28:	4643      	mov	r3, r8
 8000d2a:	0027      	movs	r7, r4
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	4357      	muls	r7, r2
 8000d30:	4374      	muls	r4, r6
 8000d32:	435a      	muls	r2, r3
 8000d34:	435e      	muls	r6, r3
 8000d36:	1912      	adds	r2, r2, r4
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	189b      	adds	r3, r3, r2
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	d903      	bls.n	8000d48 <__aeabi_fmul+0xd0>
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	0252      	lsls	r2, r2, #9
 8000d44:	4694      	mov	ip, r2
 8000d46:	4466      	add	r6, ip
 8000d48:	043f      	lsls	r7, r7, #16
 8000d4a:	041a      	lsls	r2, r3, #16
 8000d4c:	0c3f      	lsrs	r7, r7, #16
 8000d4e:	19d2      	adds	r2, r2, r7
 8000d50:	0194      	lsls	r4, r2, #6
 8000d52:	1e67      	subs	r7, r4, #1
 8000d54:	41bc      	sbcs	r4, r7
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	0e92      	lsrs	r2, r2, #26
 8000d5a:	199b      	adds	r3, r3, r6
 8000d5c:	4314      	orrs	r4, r2
 8000d5e:	019b      	lsls	r3, r3, #6
 8000d60:	431c      	orrs	r4, r3
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	d400      	bmi.n	8000d68 <__aeabi_fmul+0xf0>
 8000d66:	e09b      	b.n	8000ea0 <__aeabi_fmul+0x228>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	0862      	lsrs	r2, r4, #1
 8000d6c:	401c      	ands	r4, r3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	0002      	movs	r2, r0
 8000d72:	327f      	adds	r2, #127	; 0x7f
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	dd64      	ble.n	8000e42 <__aeabi_fmul+0x1ca>
 8000d78:	0763      	lsls	r3, r4, #29
 8000d7a:	d004      	beq.n	8000d86 <__aeabi_fmul+0x10e>
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	4023      	ands	r3, r4
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d000      	beq.n	8000d86 <__aeabi_fmul+0x10e>
 8000d84:	3404      	adds	r4, #4
 8000d86:	0123      	lsls	r3, r4, #4
 8000d88:	d503      	bpl.n	8000d92 <__aeabi_fmul+0x11a>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <__aeabi_fmul+0x248>)
 8000d8e:	3280      	adds	r2, #128	; 0x80
 8000d90:	401c      	ands	r4, r3
 8000d92:	2afe      	cmp	r2, #254	; 0xfe
 8000d94:	dcbf      	bgt.n	8000d16 <__aeabi_fmul+0x9e>
 8000d96:	01a4      	lsls	r4, r4, #6
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	b2d0      	uxtb	r0, r2
 8000d9c:	e7b2      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000d9e:	4643      	mov	r3, r8
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d13d      	bne.n	8000e20 <__aeabi_fmul+0x1a8>
 8000da4:	464a      	mov	r2, r9
 8000da6:	3301      	adds	r3, #1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	4691      	mov	r9, r2
 8000dac:	469c      	mov	ip, r3
 8000dae:	e792      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d129      	bne.n	8000e08 <__aeabi_fmul+0x190>
 8000db4:	2304      	movs	r3, #4
 8000db6:	4699      	mov	r9, r3
 8000db8:	3b03      	subs	r3, #3
 8000dba:	2500      	movs	r5, #0
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	e774      	b.n	8000caa <__aeabi_fmul+0x32>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d11b      	bne.n	8000dfc <__aeabi_fmul+0x184>
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	3b06      	subs	r3, #6
 8000dca:	25ff      	movs	r5, #255	; 0xff
 8000dcc:	469a      	mov	sl, r3
 8000dce:	e76c      	b.n	8000caa <__aeabi_fmul+0x32>
 8000dd0:	4643      	mov	r3, r8
 8000dd2:	35ff      	adds	r5, #255	; 0xff
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10b      	bne.n	8000df0 <__aeabi_fmul+0x178>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	464a      	mov	r2, r9
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	469c      	mov	ip, r3
 8000de2:	e778      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000de4:	4653      	mov	r3, sl
 8000de6:	0031      	movs	r1, r6
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d000      	beq.n	8000dee <__aeabi_fmul+0x176>
 8000dec:	e783      	b.n	8000cf6 <__aeabi_fmul+0x7e>
 8000dee:	e792      	b.n	8000d16 <__aeabi_fmul+0x9e>
 8000df0:	2303      	movs	r3, #3
 8000df2:	464a      	mov	r2, r9
 8000df4:	431a      	orrs	r2, r3
 8000df6:	4691      	mov	r9, r2
 8000df8:	469c      	mov	ip, r3
 8000dfa:	e76c      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	4699      	mov	r9, r3
 8000e00:	3b09      	subs	r3, #9
 8000e02:	25ff      	movs	r5, #255	; 0xff
 8000e04:	469a      	mov	sl, r3
 8000e06:	e750      	b.n	8000caa <__aeabi_fmul+0x32>
 8000e08:	0020      	movs	r0, r4
 8000e0a:	f002 f9a9 	bl	8003160 <__clzsi2>
 8000e0e:	2576      	movs	r5, #118	; 0x76
 8000e10:	1f43      	subs	r3, r0, #5
 8000e12:	409c      	lsls	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	426d      	negs	r5, r5
 8000e18:	4699      	mov	r9, r3
 8000e1a:	469a      	mov	sl, r3
 8000e1c:	1a2d      	subs	r5, r5, r0
 8000e1e:	e744      	b.n	8000caa <__aeabi_fmul+0x32>
 8000e20:	4640      	mov	r0, r8
 8000e22:	f002 f99d 	bl	8003160 <__clzsi2>
 8000e26:	4642      	mov	r2, r8
 8000e28:	1f43      	subs	r3, r0, #5
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	1a2d      	subs	r5, r5, r0
 8000e30:	4690      	mov	r8, r2
 8000e32:	469c      	mov	ip, r3
 8000e34:	3d76      	subs	r5, #118	; 0x76
 8000e36:	e74e      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000e38:	2480      	movs	r4, #128	; 0x80
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	20ff      	movs	r0, #255	; 0xff
 8000e3e:	03e4      	lsls	r4, r4, #15
 8000e40:	e760      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e42:	2301      	movs	r3, #1
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	2b1b      	cmp	r3, #27
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_fmul+0x1d4>
 8000e4a:	e759      	b.n	8000d00 <__aeabi_fmul+0x88>
 8000e4c:	0022      	movs	r2, r4
 8000e4e:	309e      	adds	r0, #158	; 0x9e
 8000e50:	40da      	lsrs	r2, r3
 8000e52:	4084      	lsls	r4, r0
 8000e54:	0013      	movs	r3, r2
 8000e56:	1e62      	subs	r2, r4, #1
 8000e58:	4194      	sbcs	r4, r2
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	0763      	lsls	r3, r4, #29
 8000e5e:	d004      	beq.n	8000e6a <__aeabi_fmul+0x1f2>
 8000e60:	230f      	movs	r3, #15
 8000e62:	4023      	ands	r3, r4
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d000      	beq.n	8000e6a <__aeabi_fmul+0x1f2>
 8000e68:	3404      	adds	r4, #4
 8000e6a:	0163      	lsls	r3, r4, #5
 8000e6c:	d51a      	bpl.n	8000ea4 <__aeabi_fmul+0x22c>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	2400      	movs	r4, #0
 8000e72:	e747      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	03c0      	lsls	r0, r0, #15
 8000e78:	4204      	tst	r4, r0
 8000e7a:	d009      	beq.n	8000e90 <__aeabi_fmul+0x218>
 8000e7c:	4643      	mov	r3, r8
 8000e7e:	4203      	tst	r3, r0
 8000e80:	d106      	bne.n	8000e90 <__aeabi_fmul+0x218>
 8000e82:	4644      	mov	r4, r8
 8000e84:	4304      	orrs	r4, r0
 8000e86:	0264      	lsls	r4, r4, #9
 8000e88:	0039      	movs	r1, r7
 8000e8a:	20ff      	movs	r0, #255	; 0xff
 8000e8c:	0a64      	lsrs	r4, r4, #9
 8000e8e:	e739      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e90:	2080      	movs	r0, #128	; 0x80
 8000e92:	03c0      	lsls	r0, r0, #15
 8000e94:	4304      	orrs	r4, r0
 8000e96:	0264      	lsls	r4, r4, #9
 8000e98:	0031      	movs	r1, r6
 8000e9a:	20ff      	movs	r0, #255	; 0xff
 8000e9c:	0a64      	lsrs	r4, r4, #9
 8000e9e:	e731      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000ea0:	0028      	movs	r0, r5
 8000ea2:	e765      	b.n	8000d70 <__aeabi_fmul+0xf8>
 8000ea4:	01a4      	lsls	r4, r4, #6
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	0a64      	lsrs	r4, r4, #9
 8000eaa:	e72b      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	03c0      	lsls	r0, r0, #15
 8000eb0:	4304      	orrs	r4, r0
 8000eb2:	0264      	lsls	r4, r4, #9
 8000eb4:	20ff      	movs	r0, #255	; 0xff
 8000eb6:	0a64      	lsrs	r4, r4, #9
 8000eb8:	e724      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	0800e130 	.word	0x0800e130
 8000ec0:	f7ffffff 	.word	0xf7ffffff

08000ec4 <__aeabi_fsub>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	46ce      	mov	lr, r9
 8000ec8:	4647      	mov	r7, r8
 8000eca:	0243      	lsls	r3, r0, #9
 8000ecc:	0a5b      	lsrs	r3, r3, #9
 8000ece:	024e      	lsls	r6, r1, #9
 8000ed0:	00da      	lsls	r2, r3, #3
 8000ed2:	4694      	mov	ip, r2
 8000ed4:	0a72      	lsrs	r2, r6, #9
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	0045      	lsls	r5, r0, #1
 8000eda:	004a      	lsls	r2, r1, #1
 8000edc:	b580      	push	{r7, lr}
 8000ede:	0e2d      	lsrs	r5, r5, #24
 8000ee0:	001f      	movs	r7, r3
 8000ee2:	0fc4      	lsrs	r4, r0, #31
 8000ee4:	0e12      	lsrs	r2, r2, #24
 8000ee6:	0fc9      	lsrs	r1, r1, #31
 8000ee8:	09b6      	lsrs	r6, r6, #6
 8000eea:	2aff      	cmp	r2, #255	; 0xff
 8000eec:	d05b      	beq.n	8000fa6 <__aeabi_fsub+0xe2>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	4041      	eors	r1, r0
 8000ef2:	428c      	cmp	r4, r1
 8000ef4:	d039      	beq.n	8000f6a <__aeabi_fsub+0xa6>
 8000ef6:	1aa8      	subs	r0, r5, r2
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	dd5a      	ble.n	8000fb2 <__aeabi_fsub+0xee>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d06a      	beq.n	8000fd6 <__aeabi_fsub+0x112>
 8000f00:	2dff      	cmp	r5, #255	; 0xff
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x42>
 8000f04:	e0d9      	b.n	80010ba <__aeabi_fsub+0x1f6>
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	4316      	orrs	r6, r2
 8000f0c:	281b      	cmp	r0, #27
 8000f0e:	dc00      	bgt.n	8000f12 <__aeabi_fsub+0x4e>
 8000f10:	e0e9      	b.n	80010e6 <__aeabi_fsub+0x222>
 8000f12:	2001      	movs	r0, #1
 8000f14:	4663      	mov	r3, ip
 8000f16:	1a18      	subs	r0, r3, r0
 8000f18:	0143      	lsls	r3, r0, #5
 8000f1a:	d400      	bmi.n	8000f1e <__aeabi_fsub+0x5a>
 8000f1c:	e0b4      	b.n	8001088 <__aeabi_fsub+0x1c4>
 8000f1e:	0180      	lsls	r0, r0, #6
 8000f20:	0987      	lsrs	r7, r0, #6
 8000f22:	0038      	movs	r0, r7
 8000f24:	f002 f91c 	bl	8003160 <__clzsi2>
 8000f28:	3805      	subs	r0, #5
 8000f2a:	4087      	lsls	r7, r0
 8000f2c:	4285      	cmp	r5, r0
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_fsub+0x6e>
 8000f30:	e0cc      	b.n	80010cc <__aeabi_fsub+0x208>
 8000f32:	1a2d      	subs	r5, r5, r0
 8000f34:	48b5      	ldr	r0, [pc, #724]	; (800120c <__aeabi_fsub+0x348>)
 8000f36:	4038      	ands	r0, r7
 8000f38:	0743      	lsls	r3, r0, #29
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_fsub+0x82>
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	4003      	ands	r3, r0
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_fsub+0x82>
 8000f44:	3004      	adds	r0, #4
 8000f46:	0143      	lsls	r3, r0, #5
 8000f48:	d400      	bmi.n	8000f4c <__aeabi_fsub+0x88>
 8000f4a:	e0a0      	b.n	800108e <__aeabi_fsub+0x1ca>
 8000f4c:	1c6a      	adds	r2, r5, #1
 8000f4e:	2dfe      	cmp	r5, #254	; 0xfe
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x90>
 8000f52:	e08d      	b.n	8001070 <__aeabi_fsub+0x1ac>
 8000f54:	0180      	lsls	r0, r0, #6
 8000f56:	0a47      	lsrs	r7, r0, #9
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	05d0      	lsls	r0, r2, #23
 8000f5c:	4338      	orrs	r0, r7
 8000f5e:	07e4      	lsls	r4, r4, #31
 8000f60:	4320      	orrs	r0, r4
 8000f62:	bcc0      	pop	{r6, r7}
 8000f64:	46b9      	mov	r9, r7
 8000f66:	46b0      	mov	r8, r6
 8000f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6a:	1aa8      	subs	r0, r5, r2
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	dd45      	ble.n	8000ffe <__aeabi_fsub+0x13a>
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d070      	beq.n	8001058 <__aeabi_fsub+0x194>
 8000f76:	2dff      	cmp	r5, #255	; 0xff
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0xb8>
 8000f7a:	e09e      	b.n	80010ba <__aeabi_fsub+0x1f6>
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	04db      	lsls	r3, r3, #19
 8000f80:	431e      	orrs	r6, r3
 8000f82:	4643      	mov	r3, r8
 8000f84:	2b1b      	cmp	r3, #27
 8000f86:	dc00      	bgt.n	8000f8a <__aeabi_fsub+0xc6>
 8000f88:	e0d2      	b.n	8001130 <__aeabi_fsub+0x26c>
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	4460      	add	r0, ip
 8000f8e:	0143      	lsls	r3, r0, #5
 8000f90:	d57a      	bpl.n	8001088 <__aeabi_fsub+0x1c4>
 8000f92:	3501      	adds	r5, #1
 8000f94:	2dff      	cmp	r5, #255	; 0xff
 8000f96:	d06b      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	4a9d      	ldr	r2, [pc, #628]	; (8001210 <__aeabi_fsub+0x34c>)
 8000f9c:	4003      	ands	r3, r0
 8000f9e:	0840      	lsrs	r0, r0, #1
 8000fa0:	4010      	ands	r0, r2
 8000fa2:	4318      	orrs	r0, r3
 8000fa4:	e7c8      	b.n	8000f38 <__aeabi_fsub+0x74>
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	d020      	beq.n	8000fec <__aeabi_fsub+0x128>
 8000faa:	428c      	cmp	r4, r1
 8000fac:	d023      	beq.n	8000ff6 <__aeabi_fsub+0x132>
 8000fae:	0028      	movs	r0, r5
 8000fb0:	38ff      	subs	r0, #255	; 0xff
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d039      	beq.n	800102a <__aeabi_fsub+0x166>
 8000fb6:	1b57      	subs	r7, r2, r5
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0xfa>
 8000fbc:	e09d      	b.n	80010fa <__aeabi_fsub+0x236>
 8000fbe:	4663      	mov	r3, ip
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x102>
 8000fc4:	e0db      	b.n	800117e <__aeabi_fsub+0x2ba>
 8000fc6:	1e7b      	subs	r3, r7, #1
 8000fc8:	2f01      	cmp	r7, #1
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x10a>
 8000fcc:	e10d      	b.n	80011ea <__aeabi_fsub+0x326>
 8000fce:	2fff      	cmp	r7, #255	; 0xff
 8000fd0:	d071      	beq.n	80010b6 <__aeabi_fsub+0x1f2>
 8000fd2:	001f      	movs	r7, r3
 8000fd4:	e098      	b.n	8001108 <__aeabi_fsub+0x244>
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x118>
 8000fda:	e0a7      	b.n	800112c <__aeabi_fsub+0x268>
 8000fdc:	1e42      	subs	r2, r0, #1
 8000fde:	2801      	cmp	r0, #1
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_fsub+0x120>
 8000fe2:	e0e6      	b.n	80011b2 <__aeabi_fsub+0x2ee>
 8000fe4:	28ff      	cmp	r0, #255	; 0xff
 8000fe6:	d068      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 8000fe8:	0010      	movs	r0, r2
 8000fea:	e78f      	b.n	8000f0c <__aeabi_fsub+0x48>
 8000fec:	2001      	movs	r0, #1
 8000fee:	4041      	eors	r1, r0
 8000ff0:	42a1      	cmp	r1, r4
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_fsub+0x132>
 8000ff4:	e77f      	b.n	8000ef6 <__aeabi_fsub+0x32>
 8000ff6:	20ff      	movs	r0, #255	; 0xff
 8000ff8:	4240      	negs	r0, r0
 8000ffa:	4680      	mov	r8, r0
 8000ffc:	44a8      	add	r8, r5
 8000ffe:	4640      	mov	r0, r8
 8001000:	2800      	cmp	r0, #0
 8001002:	d038      	beq.n	8001076 <__aeabi_fsub+0x1b2>
 8001004:	1b51      	subs	r1, r2, r5
 8001006:	2d00      	cmp	r5, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x148>
 800100a:	e0ae      	b.n	800116a <__aeabi_fsub+0x2a6>
 800100c:	2aff      	cmp	r2, #255	; 0xff
 800100e:	d100      	bne.n	8001012 <__aeabi_fsub+0x14e>
 8001010:	e0df      	b.n	80011d2 <__aeabi_fsub+0x30e>
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	4660      	mov	r0, ip
 8001016:	04db      	lsls	r3, r3, #19
 8001018:	4318      	orrs	r0, r3
 800101a:	4684      	mov	ip, r0
 800101c:	291b      	cmp	r1, #27
 800101e:	dc00      	bgt.n	8001022 <__aeabi_fsub+0x15e>
 8001020:	e0d9      	b.n	80011d6 <__aeabi_fsub+0x312>
 8001022:	2001      	movs	r0, #1
 8001024:	0015      	movs	r5, r2
 8001026:	1980      	adds	r0, r0, r6
 8001028:	e7b1      	b.n	8000f8e <__aeabi_fsub+0xca>
 800102a:	20fe      	movs	r0, #254	; 0xfe
 800102c:	1c6a      	adds	r2, r5, #1
 800102e:	4210      	tst	r0, r2
 8001030:	d171      	bne.n	8001116 <__aeabi_fsub+0x252>
 8001032:	2d00      	cmp	r5, #0
 8001034:	d000      	beq.n	8001038 <__aeabi_fsub+0x174>
 8001036:	e0a6      	b.n	8001186 <__aeabi_fsub+0x2c2>
 8001038:	4663      	mov	r3, ip
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x17c>
 800103e:	e0d9      	b.n	80011f4 <__aeabi_fsub+0x330>
 8001040:	2200      	movs	r2, #0
 8001042:	2e00      	cmp	r6, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x184>
 8001046:	e788      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001048:	1b98      	subs	r0, r3, r6
 800104a:	0143      	lsls	r3, r0, #5
 800104c:	d400      	bmi.n	8001050 <__aeabi_fsub+0x18c>
 800104e:	e0e1      	b.n	8001214 <__aeabi_fsub+0x350>
 8001050:	4663      	mov	r3, ip
 8001052:	000c      	movs	r4, r1
 8001054:	1af0      	subs	r0, r6, r3
 8001056:	e76f      	b.n	8000f38 <__aeabi_fsub+0x74>
 8001058:	2e00      	cmp	r6, #0
 800105a:	d100      	bne.n	800105e <__aeabi_fsub+0x19a>
 800105c:	e0b7      	b.n	80011ce <__aeabi_fsub+0x30a>
 800105e:	0002      	movs	r2, r0
 8001060:	3a01      	subs	r2, #1
 8001062:	2801      	cmp	r0, #1
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0x1a4>
 8001066:	e09c      	b.n	80011a2 <__aeabi_fsub+0x2de>
 8001068:	28ff      	cmp	r0, #255	; 0xff
 800106a:	d026      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 800106c:	4690      	mov	r8, r2
 800106e:	e788      	b.n	8000f82 <__aeabi_fsub+0xbe>
 8001070:	22ff      	movs	r2, #255	; 0xff
 8001072:	2700      	movs	r7, #0
 8001074:	e771      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001076:	20fe      	movs	r0, #254	; 0xfe
 8001078:	1c6a      	adds	r2, r5, #1
 800107a:	4210      	tst	r0, r2
 800107c:	d064      	beq.n	8001148 <__aeabi_fsub+0x284>
 800107e:	2aff      	cmp	r2, #255	; 0xff
 8001080:	d0f6      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 8001082:	0015      	movs	r5, r2
 8001084:	4466      	add	r6, ip
 8001086:	0870      	lsrs	r0, r6, #1
 8001088:	0743      	lsls	r3, r0, #29
 800108a:	d000      	beq.n	800108e <__aeabi_fsub+0x1ca>
 800108c:	e756      	b.n	8000f3c <__aeabi_fsub+0x78>
 800108e:	08c3      	lsrs	r3, r0, #3
 8001090:	2dff      	cmp	r5, #255	; 0xff
 8001092:	d012      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	0a5f      	lsrs	r7, r3, #9
 8001098:	b2ea      	uxtb	r2, r5
 800109a:	e75e      	b.n	8000f5a <__aeabi_fsub+0x96>
 800109c:	4662      	mov	r2, ip
 800109e:	2a00      	cmp	r2, #0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_fsub+0x1e0>
 80010a2:	e096      	b.n	80011d2 <__aeabi_fsub+0x30e>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d008      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	03d2      	lsls	r2, r2, #15
 80010ac:	4213      	tst	r3, r2
 80010ae:	d004      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 80010b0:	4648      	mov	r0, r9
 80010b2:	4210      	tst	r0, r2
 80010b4:	d101      	bne.n	80010ba <__aeabi_fsub+0x1f6>
 80010b6:	000c      	movs	r4, r1
 80010b8:	464b      	mov	r3, r9
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0d8      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 80010be:	2780      	movs	r7, #128	; 0x80
 80010c0:	03ff      	lsls	r7, r7, #15
 80010c2:	431f      	orrs	r7, r3
 80010c4:	027f      	lsls	r7, r7, #9
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	0a7f      	lsrs	r7, r7, #9
 80010ca:	e746      	b.n	8000f5a <__aeabi_fsub+0x96>
 80010cc:	2320      	movs	r3, #32
 80010ce:	003a      	movs	r2, r7
 80010d0:	1b45      	subs	r5, r0, r5
 80010d2:	0038      	movs	r0, r7
 80010d4:	3501      	adds	r5, #1
 80010d6:	40ea      	lsrs	r2, r5
 80010d8:	1b5d      	subs	r5, r3, r5
 80010da:	40a8      	lsls	r0, r5
 80010dc:	1e43      	subs	r3, r0, #1
 80010de:	4198      	sbcs	r0, r3
 80010e0:	2500      	movs	r5, #0
 80010e2:	4310      	orrs	r0, r2
 80010e4:	e728      	b.n	8000f38 <__aeabi_fsub+0x74>
 80010e6:	2320      	movs	r3, #32
 80010e8:	1a1b      	subs	r3, r3, r0
 80010ea:	0032      	movs	r2, r6
 80010ec:	409e      	lsls	r6, r3
 80010ee:	40c2      	lsrs	r2, r0
 80010f0:	0030      	movs	r0, r6
 80010f2:	1e43      	subs	r3, r0, #1
 80010f4:	4198      	sbcs	r0, r3
 80010f6:	4310      	orrs	r0, r2
 80010f8:	e70c      	b.n	8000f14 <__aeabi_fsub+0x50>
 80010fa:	2aff      	cmp	r2, #255	; 0xff
 80010fc:	d0db      	beq.n	80010b6 <__aeabi_fsub+0x1f2>
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	4660      	mov	r0, ip
 8001102:	04db      	lsls	r3, r3, #19
 8001104:	4318      	orrs	r0, r3
 8001106:	4684      	mov	ip, r0
 8001108:	2f1b      	cmp	r7, #27
 800110a:	dd56      	ble.n	80011ba <__aeabi_fsub+0x2f6>
 800110c:	2001      	movs	r0, #1
 800110e:	000c      	movs	r4, r1
 8001110:	0015      	movs	r5, r2
 8001112:	1a30      	subs	r0, r6, r0
 8001114:	e700      	b.n	8000f18 <__aeabi_fsub+0x54>
 8001116:	4663      	mov	r3, ip
 8001118:	1b9f      	subs	r7, r3, r6
 800111a:	017b      	lsls	r3, r7, #5
 800111c:	d43d      	bmi.n	800119a <__aeabi_fsub+0x2d6>
 800111e:	2f00      	cmp	r7, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x260>
 8001122:	e6fe      	b.n	8000f22 <__aeabi_fsub+0x5e>
 8001124:	2400      	movs	r4, #0
 8001126:	2200      	movs	r2, #0
 8001128:	2700      	movs	r7, #0
 800112a:	e716      	b.n	8000f5a <__aeabi_fsub+0x96>
 800112c:	0005      	movs	r5, r0
 800112e:	e7af      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001130:	0032      	movs	r2, r6
 8001132:	4643      	mov	r3, r8
 8001134:	4641      	mov	r1, r8
 8001136:	40da      	lsrs	r2, r3
 8001138:	2320      	movs	r3, #32
 800113a:	1a5b      	subs	r3, r3, r1
 800113c:	409e      	lsls	r6, r3
 800113e:	0030      	movs	r0, r6
 8001140:	1e43      	subs	r3, r0, #1
 8001142:	4198      	sbcs	r0, r3
 8001144:	4310      	orrs	r0, r2
 8001146:	e721      	b.n	8000f8c <__aeabi_fsub+0xc8>
 8001148:	2d00      	cmp	r5, #0
 800114a:	d1a7      	bne.n	800109c <__aeabi_fsub+0x1d8>
 800114c:	4663      	mov	r3, ip
 800114e:	2b00      	cmp	r3, #0
 8001150:	d059      	beq.n	8001206 <__aeabi_fsub+0x342>
 8001152:	2200      	movs	r2, #0
 8001154:	2e00      	cmp	r6, #0
 8001156:	d100      	bne.n	800115a <__aeabi_fsub+0x296>
 8001158:	e6ff      	b.n	8000f5a <__aeabi_fsub+0x96>
 800115a:	0030      	movs	r0, r6
 800115c:	4460      	add	r0, ip
 800115e:	0143      	lsls	r3, r0, #5
 8001160:	d592      	bpl.n	8001088 <__aeabi_fsub+0x1c4>
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <__aeabi_fsub+0x348>)
 8001164:	3501      	adds	r5, #1
 8001166:	4018      	ands	r0, r3
 8001168:	e78e      	b.n	8001088 <__aeabi_fsub+0x1c4>
 800116a:	4663      	mov	r3, ip
 800116c:	2b00      	cmp	r3, #0
 800116e:	d047      	beq.n	8001200 <__aeabi_fsub+0x33c>
 8001170:	1e4b      	subs	r3, r1, #1
 8001172:	2901      	cmp	r1, #1
 8001174:	d015      	beq.n	80011a2 <__aeabi_fsub+0x2de>
 8001176:	29ff      	cmp	r1, #255	; 0xff
 8001178:	d02b      	beq.n	80011d2 <__aeabi_fsub+0x30e>
 800117a:	0019      	movs	r1, r3
 800117c:	e74e      	b.n	800101c <__aeabi_fsub+0x158>
 800117e:	000c      	movs	r4, r1
 8001180:	464b      	mov	r3, r9
 8001182:	003d      	movs	r5, r7
 8001184:	e784      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d18b      	bne.n	80010a4 <__aeabi_fsub+0x1e0>
 800118c:	2e00      	cmp	r6, #0
 800118e:	d192      	bne.n	80010b6 <__aeabi_fsub+0x1f2>
 8001190:	2780      	movs	r7, #128	; 0x80
 8001192:	2400      	movs	r4, #0
 8001194:	22ff      	movs	r2, #255	; 0xff
 8001196:	03ff      	lsls	r7, r7, #15
 8001198:	e6df      	b.n	8000f5a <__aeabi_fsub+0x96>
 800119a:	4663      	mov	r3, ip
 800119c:	000c      	movs	r4, r1
 800119e:	1af7      	subs	r7, r6, r3
 80011a0:	e6bf      	b.n	8000f22 <__aeabi_fsub+0x5e>
 80011a2:	0030      	movs	r0, r6
 80011a4:	4460      	add	r0, ip
 80011a6:	2501      	movs	r5, #1
 80011a8:	0143      	lsls	r3, r0, #5
 80011aa:	d400      	bmi.n	80011ae <__aeabi_fsub+0x2ea>
 80011ac:	e76c      	b.n	8001088 <__aeabi_fsub+0x1c4>
 80011ae:	2502      	movs	r5, #2
 80011b0:	e6f2      	b.n	8000f98 <__aeabi_fsub+0xd4>
 80011b2:	4663      	mov	r3, ip
 80011b4:	2501      	movs	r5, #1
 80011b6:	1b98      	subs	r0, r3, r6
 80011b8:	e6ae      	b.n	8000f18 <__aeabi_fsub+0x54>
 80011ba:	2320      	movs	r3, #32
 80011bc:	4664      	mov	r4, ip
 80011be:	4660      	mov	r0, ip
 80011c0:	40fc      	lsrs	r4, r7
 80011c2:	1bdf      	subs	r7, r3, r7
 80011c4:	40b8      	lsls	r0, r7
 80011c6:	1e43      	subs	r3, r0, #1
 80011c8:	4198      	sbcs	r0, r3
 80011ca:	4320      	orrs	r0, r4
 80011cc:	e79f      	b.n	800110e <__aeabi_fsub+0x24a>
 80011ce:	0005      	movs	r5, r0
 80011d0:	e75e      	b.n	8001090 <__aeabi_fsub+0x1cc>
 80011d2:	464b      	mov	r3, r9
 80011d4:	e771      	b.n	80010ba <__aeabi_fsub+0x1f6>
 80011d6:	2320      	movs	r3, #32
 80011d8:	4665      	mov	r5, ip
 80011da:	4660      	mov	r0, ip
 80011dc:	40cd      	lsrs	r5, r1
 80011de:	1a59      	subs	r1, r3, r1
 80011e0:	4088      	lsls	r0, r1
 80011e2:	1e43      	subs	r3, r0, #1
 80011e4:	4198      	sbcs	r0, r3
 80011e6:	4328      	orrs	r0, r5
 80011e8:	e71c      	b.n	8001024 <__aeabi_fsub+0x160>
 80011ea:	4663      	mov	r3, ip
 80011ec:	000c      	movs	r4, r1
 80011ee:	2501      	movs	r5, #1
 80011f0:	1af0      	subs	r0, r6, r3
 80011f2:	e691      	b.n	8000f18 <__aeabi_fsub+0x54>
 80011f4:	2e00      	cmp	r6, #0
 80011f6:	d095      	beq.n	8001124 <__aeabi_fsub+0x260>
 80011f8:	000c      	movs	r4, r1
 80011fa:	464f      	mov	r7, r9
 80011fc:	2200      	movs	r2, #0
 80011fe:	e6ac      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001200:	464b      	mov	r3, r9
 8001202:	000d      	movs	r5, r1
 8001204:	e744      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001206:	464f      	mov	r7, r9
 8001208:	2200      	movs	r2, #0
 800120a:	e6a6      	b.n	8000f5a <__aeabi_fsub+0x96>
 800120c:	fbffffff 	.word	0xfbffffff
 8001210:	7dffffff 	.word	0x7dffffff
 8001214:	2800      	cmp	r0, #0
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x356>
 8001218:	e736      	b.n	8001088 <__aeabi_fsub+0x1c4>
 800121a:	2400      	movs	r4, #0
 800121c:	2700      	movs	r7, #0
 800121e:	e69c      	b.n	8000f5a <__aeabi_fsub+0x96>

08001220 <__aeabi_f2iz>:
 8001220:	0241      	lsls	r1, r0, #9
 8001222:	0042      	lsls	r2, r0, #1
 8001224:	0fc3      	lsrs	r3, r0, #31
 8001226:	0a49      	lsrs	r1, r1, #9
 8001228:	2000      	movs	r0, #0
 800122a:	0e12      	lsrs	r2, r2, #24
 800122c:	2a7e      	cmp	r2, #126	; 0x7e
 800122e:	dd03      	ble.n	8001238 <__aeabi_f2iz+0x18>
 8001230:	2a9d      	cmp	r2, #157	; 0x9d
 8001232:	dd02      	ble.n	800123a <__aeabi_f2iz+0x1a>
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <__aeabi_f2iz+0x3c>)
 8001236:	1898      	adds	r0, r3, r2
 8001238:	4770      	bx	lr
 800123a:	2080      	movs	r0, #128	; 0x80
 800123c:	0400      	lsls	r0, r0, #16
 800123e:	4301      	orrs	r1, r0
 8001240:	2a95      	cmp	r2, #149	; 0x95
 8001242:	dc07      	bgt.n	8001254 <__aeabi_f2iz+0x34>
 8001244:	2096      	movs	r0, #150	; 0x96
 8001246:	1a82      	subs	r2, r0, r2
 8001248:	40d1      	lsrs	r1, r2
 800124a:	4248      	negs	r0, r1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f3      	bne.n	8001238 <__aeabi_f2iz+0x18>
 8001250:	0008      	movs	r0, r1
 8001252:	e7f1      	b.n	8001238 <__aeabi_f2iz+0x18>
 8001254:	3a96      	subs	r2, #150	; 0x96
 8001256:	4091      	lsls	r1, r2
 8001258:	e7f7      	b.n	800124a <__aeabi_f2iz+0x2a>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	7fffffff 	.word	0x7fffffff

08001260 <__aeabi_i2f>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	2800      	cmp	r0, #0
 8001264:	d013      	beq.n	800128e <__aeabi_i2f+0x2e>
 8001266:	17c3      	asrs	r3, r0, #31
 8001268:	18c6      	adds	r6, r0, r3
 800126a:	405e      	eors	r6, r3
 800126c:	0fc4      	lsrs	r4, r0, #31
 800126e:	0030      	movs	r0, r6
 8001270:	f001 ff76 	bl	8003160 <__clzsi2>
 8001274:	239e      	movs	r3, #158	; 0x9e
 8001276:	0005      	movs	r5, r0
 8001278:	1a1b      	subs	r3, r3, r0
 800127a:	2b96      	cmp	r3, #150	; 0x96
 800127c:	dc0f      	bgt.n	800129e <__aeabi_i2f+0x3e>
 800127e:	2808      	cmp	r0, #8
 8001280:	dd01      	ble.n	8001286 <__aeabi_i2f+0x26>
 8001282:	3d08      	subs	r5, #8
 8001284:	40ae      	lsls	r6, r5
 8001286:	0276      	lsls	r6, r6, #9
 8001288:	0a76      	lsrs	r6, r6, #9
 800128a:	b2d8      	uxtb	r0, r3
 800128c:	e002      	b.n	8001294 <__aeabi_i2f+0x34>
 800128e:	2400      	movs	r4, #0
 8001290:	2000      	movs	r0, #0
 8001292:	2600      	movs	r6, #0
 8001294:	05c0      	lsls	r0, r0, #23
 8001296:	4330      	orrs	r0, r6
 8001298:	07e4      	lsls	r4, r4, #31
 800129a:	4320      	orrs	r0, r4
 800129c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800129e:	2b99      	cmp	r3, #153	; 0x99
 80012a0:	dd0c      	ble.n	80012bc <__aeabi_i2f+0x5c>
 80012a2:	2205      	movs	r2, #5
 80012a4:	0031      	movs	r1, r6
 80012a6:	1a12      	subs	r2, r2, r0
 80012a8:	40d1      	lsrs	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	0001      	movs	r1, r0
 80012ae:	0030      	movs	r0, r6
 80012b0:	311b      	adds	r1, #27
 80012b2:	4088      	lsls	r0, r1
 80012b4:	1e41      	subs	r1, r0, #1
 80012b6:	4188      	sbcs	r0, r1
 80012b8:	4302      	orrs	r2, r0
 80012ba:	0016      	movs	r6, r2
 80012bc:	2d05      	cmp	r5, #5
 80012be:	dc12      	bgt.n	80012e6 <__aeabi_i2f+0x86>
 80012c0:	0031      	movs	r1, r6
 80012c2:	4f0d      	ldr	r7, [pc, #52]	; (80012f8 <__aeabi_i2f+0x98>)
 80012c4:	4039      	ands	r1, r7
 80012c6:	0772      	lsls	r2, r6, #29
 80012c8:	d009      	beq.n	80012de <__aeabi_i2f+0x7e>
 80012ca:	200f      	movs	r0, #15
 80012cc:	4030      	ands	r0, r6
 80012ce:	2804      	cmp	r0, #4
 80012d0:	d005      	beq.n	80012de <__aeabi_i2f+0x7e>
 80012d2:	3104      	adds	r1, #4
 80012d4:	014a      	lsls	r2, r1, #5
 80012d6:	d502      	bpl.n	80012de <__aeabi_i2f+0x7e>
 80012d8:	239f      	movs	r3, #159	; 0x9f
 80012da:	4039      	ands	r1, r7
 80012dc:	1b5b      	subs	r3, r3, r5
 80012de:	0189      	lsls	r1, r1, #6
 80012e0:	0a4e      	lsrs	r6, r1, #9
 80012e2:	b2d8      	uxtb	r0, r3
 80012e4:	e7d6      	b.n	8001294 <__aeabi_i2f+0x34>
 80012e6:	1f6a      	subs	r2, r5, #5
 80012e8:	4096      	lsls	r6, r2
 80012ea:	0031      	movs	r1, r6
 80012ec:	4f02      	ldr	r7, [pc, #8]	; (80012f8 <__aeabi_i2f+0x98>)
 80012ee:	4039      	ands	r1, r7
 80012f0:	0772      	lsls	r2, r6, #29
 80012f2:	d0f4      	beq.n	80012de <__aeabi_i2f+0x7e>
 80012f4:	e7e9      	b.n	80012ca <__aeabi_i2f+0x6a>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	fbffffff 	.word	0xfbffffff

080012fc <__aeabi_ui2f>:
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	1e05      	subs	r5, r0, #0
 8001300:	d00e      	beq.n	8001320 <__aeabi_ui2f+0x24>
 8001302:	f001 ff2d 	bl	8003160 <__clzsi2>
 8001306:	239e      	movs	r3, #158	; 0x9e
 8001308:	0004      	movs	r4, r0
 800130a:	1a1b      	subs	r3, r3, r0
 800130c:	2b96      	cmp	r3, #150	; 0x96
 800130e:	dc0c      	bgt.n	800132a <__aeabi_ui2f+0x2e>
 8001310:	2808      	cmp	r0, #8
 8001312:	dd01      	ble.n	8001318 <__aeabi_ui2f+0x1c>
 8001314:	3c08      	subs	r4, #8
 8001316:	40a5      	lsls	r5, r4
 8001318:	026d      	lsls	r5, r5, #9
 800131a:	0a6d      	lsrs	r5, r5, #9
 800131c:	b2d8      	uxtb	r0, r3
 800131e:	e001      	b.n	8001324 <__aeabi_ui2f+0x28>
 8001320:	2000      	movs	r0, #0
 8001322:	2500      	movs	r5, #0
 8001324:	05c0      	lsls	r0, r0, #23
 8001326:	4328      	orrs	r0, r5
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd09      	ble.n	8001342 <__aeabi_ui2f+0x46>
 800132e:	0002      	movs	r2, r0
 8001330:	0029      	movs	r1, r5
 8001332:	321b      	adds	r2, #27
 8001334:	4091      	lsls	r1, r2
 8001336:	1e4a      	subs	r2, r1, #1
 8001338:	4191      	sbcs	r1, r2
 800133a:	2205      	movs	r2, #5
 800133c:	1a12      	subs	r2, r2, r0
 800133e:	40d5      	lsrs	r5, r2
 8001340:	430d      	orrs	r5, r1
 8001342:	2c05      	cmp	r4, #5
 8001344:	dc12      	bgt.n	800136c <__aeabi_ui2f+0x70>
 8001346:	0029      	movs	r1, r5
 8001348:	4e0c      	ldr	r6, [pc, #48]	; (800137c <__aeabi_ui2f+0x80>)
 800134a:	4031      	ands	r1, r6
 800134c:	076a      	lsls	r2, r5, #29
 800134e:	d009      	beq.n	8001364 <__aeabi_ui2f+0x68>
 8001350:	200f      	movs	r0, #15
 8001352:	4028      	ands	r0, r5
 8001354:	2804      	cmp	r0, #4
 8001356:	d005      	beq.n	8001364 <__aeabi_ui2f+0x68>
 8001358:	3104      	adds	r1, #4
 800135a:	014a      	lsls	r2, r1, #5
 800135c:	d502      	bpl.n	8001364 <__aeabi_ui2f+0x68>
 800135e:	239f      	movs	r3, #159	; 0x9f
 8001360:	4031      	ands	r1, r6
 8001362:	1b1b      	subs	r3, r3, r4
 8001364:	0189      	lsls	r1, r1, #6
 8001366:	0a4d      	lsrs	r5, r1, #9
 8001368:	b2d8      	uxtb	r0, r3
 800136a:	e7db      	b.n	8001324 <__aeabi_ui2f+0x28>
 800136c:	1f62      	subs	r2, r4, #5
 800136e:	4095      	lsls	r5, r2
 8001370:	0029      	movs	r1, r5
 8001372:	4e02      	ldr	r6, [pc, #8]	; (800137c <__aeabi_ui2f+0x80>)
 8001374:	4031      	ands	r1, r6
 8001376:	076a      	lsls	r2, r5, #29
 8001378:	d0f4      	beq.n	8001364 <__aeabi_ui2f+0x68>
 800137a:	e7e9      	b.n	8001350 <__aeabi_ui2f+0x54>
 800137c:	fbffffff 	.word	0xfbffffff

08001380 <__aeabi_dadd>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	464f      	mov	r7, r9
 8001384:	4646      	mov	r6, r8
 8001386:	46d6      	mov	lr, sl
 8001388:	000d      	movs	r5, r1
 800138a:	0004      	movs	r4, r0
 800138c:	b5c0      	push	{r6, r7, lr}
 800138e:	001f      	movs	r7, r3
 8001390:	0011      	movs	r1, r2
 8001392:	0328      	lsls	r0, r5, #12
 8001394:	0f62      	lsrs	r2, r4, #29
 8001396:	0a40      	lsrs	r0, r0, #9
 8001398:	4310      	orrs	r0, r2
 800139a:	007a      	lsls	r2, r7, #1
 800139c:	0d52      	lsrs	r2, r2, #21
 800139e:	00e3      	lsls	r3, r4, #3
 80013a0:	033c      	lsls	r4, r7, #12
 80013a2:	4691      	mov	r9, r2
 80013a4:	0a64      	lsrs	r4, r4, #9
 80013a6:	0ffa      	lsrs	r2, r7, #31
 80013a8:	0f4f      	lsrs	r7, r1, #29
 80013aa:	006e      	lsls	r6, r5, #1
 80013ac:	4327      	orrs	r7, r4
 80013ae:	4692      	mov	sl, r2
 80013b0:	46b8      	mov	r8, r7
 80013b2:	0d76      	lsrs	r6, r6, #21
 80013b4:	0fed      	lsrs	r5, r5, #31
 80013b6:	00c9      	lsls	r1, r1, #3
 80013b8:	4295      	cmp	r5, r2
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x3e>
 80013bc:	e099      	b.n	80014f2 <__aeabi_dadd+0x172>
 80013be:	464c      	mov	r4, r9
 80013c0:	1b34      	subs	r4, r6, r4
 80013c2:	46a4      	mov	ip, r4
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	dc00      	bgt.n	80013ca <__aeabi_dadd+0x4a>
 80013c8:	e07c      	b.n	80014c4 <__aeabi_dadd+0x144>
 80013ca:	464a      	mov	r2, r9
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x52>
 80013d0:	e0b8      	b.n	8001544 <__aeabi_dadd+0x1c4>
 80013d2:	4ac5      	ldr	r2, [pc, #788]	; (80016e8 <__aeabi_dadd+0x368>)
 80013d4:	4296      	cmp	r6, r2
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x5a>
 80013d8:	e11c      	b.n	8001614 <__aeabi_dadd+0x294>
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	003c      	movs	r4, r7
 80013de:	0412      	lsls	r2, r2, #16
 80013e0:	4314      	orrs	r4, r2
 80013e2:	46a0      	mov	r8, r4
 80013e4:	4662      	mov	r2, ip
 80013e6:	2a38      	cmp	r2, #56	; 0x38
 80013e8:	dd00      	ble.n	80013ec <__aeabi_dadd+0x6c>
 80013ea:	e161      	b.n	80016b0 <__aeabi_dadd+0x330>
 80013ec:	2a1f      	cmp	r2, #31
 80013ee:	dd00      	ble.n	80013f2 <__aeabi_dadd+0x72>
 80013f0:	e1cc      	b.n	800178c <__aeabi_dadd+0x40c>
 80013f2:	4664      	mov	r4, ip
 80013f4:	2220      	movs	r2, #32
 80013f6:	1b12      	subs	r2, r2, r4
 80013f8:	4644      	mov	r4, r8
 80013fa:	4094      	lsls	r4, r2
 80013fc:	000f      	movs	r7, r1
 80013fe:	46a1      	mov	r9, r4
 8001400:	4664      	mov	r4, ip
 8001402:	4091      	lsls	r1, r2
 8001404:	40e7      	lsrs	r7, r4
 8001406:	464c      	mov	r4, r9
 8001408:	1e4a      	subs	r2, r1, #1
 800140a:	4191      	sbcs	r1, r2
 800140c:	433c      	orrs	r4, r7
 800140e:	4642      	mov	r2, r8
 8001410:	4321      	orrs	r1, r4
 8001412:	4664      	mov	r4, ip
 8001414:	40e2      	lsrs	r2, r4
 8001416:	1a80      	subs	r0, r0, r2
 8001418:	1a5c      	subs	r4, r3, r1
 800141a:	42a3      	cmp	r3, r4
 800141c:	419b      	sbcs	r3, r3
 800141e:	425f      	negs	r7, r3
 8001420:	1bc7      	subs	r7, r0, r7
 8001422:	023b      	lsls	r3, r7, #8
 8001424:	d400      	bmi.n	8001428 <__aeabi_dadd+0xa8>
 8001426:	e0d0      	b.n	80015ca <__aeabi_dadd+0x24a>
 8001428:	027f      	lsls	r7, r7, #9
 800142a:	0a7f      	lsrs	r7, r7, #9
 800142c:	2f00      	cmp	r7, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0xb2>
 8001430:	e0ff      	b.n	8001632 <__aeabi_dadd+0x2b2>
 8001432:	0038      	movs	r0, r7
 8001434:	f001 fe94 	bl	8003160 <__clzsi2>
 8001438:	0001      	movs	r1, r0
 800143a:	3908      	subs	r1, #8
 800143c:	2320      	movs	r3, #32
 800143e:	0022      	movs	r2, r4
 8001440:	1a5b      	subs	r3, r3, r1
 8001442:	408f      	lsls	r7, r1
 8001444:	40da      	lsrs	r2, r3
 8001446:	408c      	lsls	r4, r1
 8001448:	4317      	orrs	r7, r2
 800144a:	42b1      	cmp	r1, r6
 800144c:	da00      	bge.n	8001450 <__aeabi_dadd+0xd0>
 800144e:	e0ff      	b.n	8001650 <__aeabi_dadd+0x2d0>
 8001450:	1b89      	subs	r1, r1, r6
 8001452:	1c4b      	adds	r3, r1, #1
 8001454:	2b1f      	cmp	r3, #31
 8001456:	dd00      	ble.n	800145a <__aeabi_dadd+0xda>
 8001458:	e0a8      	b.n	80015ac <__aeabi_dadd+0x22c>
 800145a:	2220      	movs	r2, #32
 800145c:	0039      	movs	r1, r7
 800145e:	1ad2      	subs	r2, r2, r3
 8001460:	0020      	movs	r0, r4
 8001462:	4094      	lsls	r4, r2
 8001464:	4091      	lsls	r1, r2
 8001466:	40d8      	lsrs	r0, r3
 8001468:	1e62      	subs	r2, r4, #1
 800146a:	4194      	sbcs	r4, r2
 800146c:	40df      	lsrs	r7, r3
 800146e:	2600      	movs	r6, #0
 8001470:	4301      	orrs	r1, r0
 8001472:	430c      	orrs	r4, r1
 8001474:	0763      	lsls	r3, r4, #29
 8001476:	d009      	beq.n	800148c <__aeabi_dadd+0x10c>
 8001478:	230f      	movs	r3, #15
 800147a:	4023      	ands	r3, r4
 800147c:	2b04      	cmp	r3, #4
 800147e:	d005      	beq.n	800148c <__aeabi_dadd+0x10c>
 8001480:	1d23      	adds	r3, r4, #4
 8001482:	42a3      	cmp	r3, r4
 8001484:	41a4      	sbcs	r4, r4
 8001486:	4264      	negs	r4, r4
 8001488:	193f      	adds	r7, r7, r4
 800148a:	001c      	movs	r4, r3
 800148c:	023b      	lsls	r3, r7, #8
 800148e:	d400      	bmi.n	8001492 <__aeabi_dadd+0x112>
 8001490:	e09e      	b.n	80015d0 <__aeabi_dadd+0x250>
 8001492:	4b95      	ldr	r3, [pc, #596]	; (80016e8 <__aeabi_dadd+0x368>)
 8001494:	3601      	adds	r6, #1
 8001496:	429e      	cmp	r6, r3
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x11c>
 800149a:	e0b7      	b.n	800160c <__aeabi_dadd+0x28c>
 800149c:	4a93      	ldr	r2, [pc, #588]	; (80016ec <__aeabi_dadd+0x36c>)
 800149e:	08e4      	lsrs	r4, r4, #3
 80014a0:	4017      	ands	r7, r2
 80014a2:	077b      	lsls	r3, r7, #29
 80014a4:	0571      	lsls	r1, r6, #21
 80014a6:	027f      	lsls	r7, r7, #9
 80014a8:	4323      	orrs	r3, r4
 80014aa:	0b3f      	lsrs	r7, r7, #12
 80014ac:	0d4a      	lsrs	r2, r1, #21
 80014ae:	0512      	lsls	r2, r2, #20
 80014b0:	433a      	orrs	r2, r7
 80014b2:	07ed      	lsls	r5, r5, #31
 80014b4:	432a      	orrs	r2, r5
 80014b6:	0018      	movs	r0, r3
 80014b8:	0011      	movs	r1, r2
 80014ba:	bce0      	pop	{r5, r6, r7}
 80014bc:	46ba      	mov	sl, r7
 80014be:	46b1      	mov	r9, r6
 80014c0:	46a8      	mov	r8, r5
 80014c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d04b      	beq.n	8001560 <__aeabi_dadd+0x1e0>
 80014c8:	464c      	mov	r4, r9
 80014ca:	1ba4      	subs	r4, r4, r6
 80014cc:	46a4      	mov	ip, r4
 80014ce:	2e00      	cmp	r6, #0
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dadd+0x154>
 80014d2:	e123      	b.n	800171c <__aeabi_dadd+0x39c>
 80014d4:	0004      	movs	r4, r0
 80014d6:	431c      	orrs	r4, r3
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x15c>
 80014da:	e1af      	b.n	800183c <__aeabi_dadd+0x4bc>
 80014dc:	4662      	mov	r2, ip
 80014de:	1e54      	subs	r4, r2, #1
 80014e0:	2a01      	cmp	r2, #1
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dadd+0x166>
 80014e4:	e215      	b.n	8001912 <__aeabi_dadd+0x592>
 80014e6:	4d80      	ldr	r5, [pc, #512]	; (80016e8 <__aeabi_dadd+0x368>)
 80014e8:	45ac      	cmp	ip, r5
 80014ea:	d100      	bne.n	80014ee <__aeabi_dadd+0x16e>
 80014ec:	e1c8      	b.n	8001880 <__aeabi_dadd+0x500>
 80014ee:	46a4      	mov	ip, r4
 80014f0:	e11b      	b.n	800172a <__aeabi_dadd+0x3aa>
 80014f2:	464a      	mov	r2, r9
 80014f4:	1ab2      	subs	r2, r6, r2
 80014f6:	4694      	mov	ip, r2
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	dc00      	bgt.n	80014fe <__aeabi_dadd+0x17e>
 80014fc:	e0ac      	b.n	8001658 <__aeabi_dadd+0x2d8>
 80014fe:	464a      	mov	r2, r9
 8001500:	2a00      	cmp	r2, #0
 8001502:	d043      	beq.n	800158c <__aeabi_dadd+0x20c>
 8001504:	4a78      	ldr	r2, [pc, #480]	; (80016e8 <__aeabi_dadd+0x368>)
 8001506:	4296      	cmp	r6, r2
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x18c>
 800150a:	e1af      	b.n	800186c <__aeabi_dadd+0x4ec>
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	003c      	movs	r4, r7
 8001510:	0412      	lsls	r2, r2, #16
 8001512:	4314      	orrs	r4, r2
 8001514:	46a0      	mov	r8, r4
 8001516:	4662      	mov	r2, ip
 8001518:	2a38      	cmp	r2, #56	; 0x38
 800151a:	dc67      	bgt.n	80015ec <__aeabi_dadd+0x26c>
 800151c:	2a1f      	cmp	r2, #31
 800151e:	dc00      	bgt.n	8001522 <__aeabi_dadd+0x1a2>
 8001520:	e15f      	b.n	80017e2 <__aeabi_dadd+0x462>
 8001522:	4647      	mov	r7, r8
 8001524:	3a20      	subs	r2, #32
 8001526:	40d7      	lsrs	r7, r2
 8001528:	4662      	mov	r2, ip
 800152a:	2a20      	cmp	r2, #32
 800152c:	d005      	beq.n	800153a <__aeabi_dadd+0x1ba>
 800152e:	4664      	mov	r4, ip
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	1b12      	subs	r2, r2, r4
 8001534:	4644      	mov	r4, r8
 8001536:	4094      	lsls	r4, r2
 8001538:	4321      	orrs	r1, r4
 800153a:	1e4a      	subs	r2, r1, #1
 800153c:	4191      	sbcs	r1, r2
 800153e:	000c      	movs	r4, r1
 8001540:	433c      	orrs	r4, r7
 8001542:	e057      	b.n	80015f4 <__aeabi_dadd+0x274>
 8001544:	003a      	movs	r2, r7
 8001546:	430a      	orrs	r2, r1
 8001548:	d100      	bne.n	800154c <__aeabi_dadd+0x1cc>
 800154a:	e105      	b.n	8001758 <__aeabi_dadd+0x3d8>
 800154c:	0022      	movs	r2, r4
 800154e:	3a01      	subs	r2, #1
 8001550:	2c01      	cmp	r4, #1
 8001552:	d100      	bne.n	8001556 <__aeabi_dadd+0x1d6>
 8001554:	e182      	b.n	800185c <__aeabi_dadd+0x4dc>
 8001556:	4c64      	ldr	r4, [pc, #400]	; (80016e8 <__aeabi_dadd+0x368>)
 8001558:	45a4      	cmp	ip, r4
 800155a:	d05b      	beq.n	8001614 <__aeabi_dadd+0x294>
 800155c:	4694      	mov	ip, r2
 800155e:	e741      	b.n	80013e4 <__aeabi_dadd+0x64>
 8001560:	4c63      	ldr	r4, [pc, #396]	; (80016f0 <__aeabi_dadd+0x370>)
 8001562:	1c77      	adds	r7, r6, #1
 8001564:	4227      	tst	r7, r4
 8001566:	d000      	beq.n	800156a <__aeabi_dadd+0x1ea>
 8001568:	e0c4      	b.n	80016f4 <__aeabi_dadd+0x374>
 800156a:	0004      	movs	r4, r0
 800156c:	431c      	orrs	r4, r3
 800156e:	2e00      	cmp	r6, #0
 8001570:	d000      	beq.n	8001574 <__aeabi_dadd+0x1f4>
 8001572:	e169      	b.n	8001848 <__aeabi_dadd+0x4c8>
 8001574:	2c00      	cmp	r4, #0
 8001576:	d100      	bne.n	800157a <__aeabi_dadd+0x1fa>
 8001578:	e1bf      	b.n	80018fa <__aeabi_dadd+0x57a>
 800157a:	4644      	mov	r4, r8
 800157c:	430c      	orrs	r4, r1
 800157e:	d000      	beq.n	8001582 <__aeabi_dadd+0x202>
 8001580:	e1d0      	b.n	8001924 <__aeabi_dadd+0x5a4>
 8001582:	0742      	lsls	r2, r0, #29
 8001584:	08db      	lsrs	r3, r3, #3
 8001586:	4313      	orrs	r3, r2
 8001588:	08c0      	lsrs	r0, r0, #3
 800158a:	e029      	b.n	80015e0 <__aeabi_dadd+0x260>
 800158c:	003a      	movs	r2, r7
 800158e:	430a      	orrs	r2, r1
 8001590:	d100      	bne.n	8001594 <__aeabi_dadd+0x214>
 8001592:	e170      	b.n	8001876 <__aeabi_dadd+0x4f6>
 8001594:	4662      	mov	r2, ip
 8001596:	4664      	mov	r4, ip
 8001598:	3a01      	subs	r2, #1
 800159a:	2c01      	cmp	r4, #1
 800159c:	d100      	bne.n	80015a0 <__aeabi_dadd+0x220>
 800159e:	e0e0      	b.n	8001762 <__aeabi_dadd+0x3e2>
 80015a0:	4c51      	ldr	r4, [pc, #324]	; (80016e8 <__aeabi_dadd+0x368>)
 80015a2:	45a4      	cmp	ip, r4
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x228>
 80015a6:	e161      	b.n	800186c <__aeabi_dadd+0x4ec>
 80015a8:	4694      	mov	ip, r2
 80015aa:	e7b4      	b.n	8001516 <__aeabi_dadd+0x196>
 80015ac:	003a      	movs	r2, r7
 80015ae:	391f      	subs	r1, #31
 80015b0:	40ca      	lsrs	r2, r1
 80015b2:	0011      	movs	r1, r2
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	d003      	beq.n	80015c0 <__aeabi_dadd+0x240>
 80015b8:	2240      	movs	r2, #64	; 0x40
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	409f      	lsls	r7, r3
 80015be:	433c      	orrs	r4, r7
 80015c0:	1e63      	subs	r3, r4, #1
 80015c2:	419c      	sbcs	r4, r3
 80015c4:	2700      	movs	r7, #0
 80015c6:	2600      	movs	r6, #0
 80015c8:	430c      	orrs	r4, r1
 80015ca:	0763      	lsls	r3, r4, #29
 80015cc:	d000      	beq.n	80015d0 <__aeabi_dadd+0x250>
 80015ce:	e753      	b.n	8001478 <__aeabi_dadd+0xf8>
 80015d0:	46b4      	mov	ip, r6
 80015d2:	08e4      	lsrs	r4, r4, #3
 80015d4:	077b      	lsls	r3, r7, #29
 80015d6:	4323      	orrs	r3, r4
 80015d8:	08f8      	lsrs	r0, r7, #3
 80015da:	4a43      	ldr	r2, [pc, #268]	; (80016e8 <__aeabi_dadd+0x368>)
 80015dc:	4594      	cmp	ip, r2
 80015de:	d01d      	beq.n	800161c <__aeabi_dadd+0x29c>
 80015e0:	4662      	mov	r2, ip
 80015e2:	0307      	lsls	r7, r0, #12
 80015e4:	0552      	lsls	r2, r2, #21
 80015e6:	0b3f      	lsrs	r7, r7, #12
 80015e8:	0d52      	lsrs	r2, r2, #21
 80015ea:	e760      	b.n	80014ae <__aeabi_dadd+0x12e>
 80015ec:	4644      	mov	r4, r8
 80015ee:	430c      	orrs	r4, r1
 80015f0:	1e62      	subs	r2, r4, #1
 80015f2:	4194      	sbcs	r4, r2
 80015f4:	18e4      	adds	r4, r4, r3
 80015f6:	429c      	cmp	r4, r3
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	425f      	negs	r7, r3
 80015fc:	183f      	adds	r7, r7, r0
 80015fe:	023b      	lsls	r3, r7, #8
 8001600:	d5e3      	bpl.n	80015ca <__aeabi_dadd+0x24a>
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <__aeabi_dadd+0x368>)
 8001604:	3601      	adds	r6, #1
 8001606:	429e      	cmp	r6, r3
 8001608:	d000      	beq.n	800160c <__aeabi_dadd+0x28c>
 800160a:	e0b5      	b.n	8001778 <__aeabi_dadd+0x3f8>
 800160c:	0032      	movs	r2, r6
 800160e:	2700      	movs	r7, #0
 8001610:	2300      	movs	r3, #0
 8001612:	e74c      	b.n	80014ae <__aeabi_dadd+0x12e>
 8001614:	0742      	lsls	r2, r0, #29
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	4313      	orrs	r3, r2
 800161a:	08c0      	lsrs	r0, r0, #3
 800161c:	001a      	movs	r2, r3
 800161e:	4302      	orrs	r2, r0
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0x2a4>
 8001622:	e1e1      	b.n	80019e8 <__aeabi_dadd+0x668>
 8001624:	2780      	movs	r7, #128	; 0x80
 8001626:	033f      	lsls	r7, r7, #12
 8001628:	4307      	orrs	r7, r0
 800162a:	033f      	lsls	r7, r7, #12
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <__aeabi_dadd+0x368>)
 800162e:	0b3f      	lsrs	r7, r7, #12
 8001630:	e73d      	b.n	80014ae <__aeabi_dadd+0x12e>
 8001632:	0020      	movs	r0, r4
 8001634:	f001 fd94 	bl	8003160 <__clzsi2>
 8001638:	0001      	movs	r1, r0
 800163a:	3118      	adds	r1, #24
 800163c:	291f      	cmp	r1, #31
 800163e:	dc00      	bgt.n	8001642 <__aeabi_dadd+0x2c2>
 8001640:	e6fc      	b.n	800143c <__aeabi_dadd+0xbc>
 8001642:	3808      	subs	r0, #8
 8001644:	4084      	lsls	r4, r0
 8001646:	0027      	movs	r7, r4
 8001648:	2400      	movs	r4, #0
 800164a:	42b1      	cmp	r1, r6
 800164c:	db00      	blt.n	8001650 <__aeabi_dadd+0x2d0>
 800164e:	e6ff      	b.n	8001450 <__aeabi_dadd+0xd0>
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <__aeabi_dadd+0x36c>)
 8001652:	1a76      	subs	r6, r6, r1
 8001654:	4017      	ands	r7, r2
 8001656:	e70d      	b.n	8001474 <__aeabi_dadd+0xf4>
 8001658:	2a00      	cmp	r2, #0
 800165a:	d02f      	beq.n	80016bc <__aeabi_dadd+0x33c>
 800165c:	464a      	mov	r2, r9
 800165e:	1b92      	subs	r2, r2, r6
 8001660:	4694      	mov	ip, r2
 8001662:	2e00      	cmp	r6, #0
 8001664:	d100      	bne.n	8001668 <__aeabi_dadd+0x2e8>
 8001666:	e0ad      	b.n	80017c4 <__aeabi_dadd+0x444>
 8001668:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <__aeabi_dadd+0x368>)
 800166a:	4591      	cmp	r9, r2
 800166c:	d100      	bne.n	8001670 <__aeabi_dadd+0x2f0>
 800166e:	e10f      	b.n	8001890 <__aeabi_dadd+0x510>
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0412      	lsls	r2, r2, #16
 8001674:	4310      	orrs	r0, r2
 8001676:	4662      	mov	r2, ip
 8001678:	2a38      	cmp	r2, #56	; 0x38
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0x2fe>
 800167c:	e10f      	b.n	800189e <__aeabi_dadd+0x51e>
 800167e:	2a1f      	cmp	r2, #31
 8001680:	dd00      	ble.n	8001684 <__aeabi_dadd+0x304>
 8001682:	e180      	b.n	8001986 <__aeabi_dadd+0x606>
 8001684:	4664      	mov	r4, ip
 8001686:	2220      	movs	r2, #32
 8001688:	001e      	movs	r6, r3
 800168a:	1b12      	subs	r2, r2, r4
 800168c:	4667      	mov	r7, ip
 800168e:	0004      	movs	r4, r0
 8001690:	4093      	lsls	r3, r2
 8001692:	4094      	lsls	r4, r2
 8001694:	40fe      	lsrs	r6, r7
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	4193      	sbcs	r3, r2
 800169a:	40f8      	lsrs	r0, r7
 800169c:	4334      	orrs	r4, r6
 800169e:	431c      	orrs	r4, r3
 80016a0:	4480      	add	r8, r0
 80016a2:	1864      	adds	r4, r4, r1
 80016a4:	428c      	cmp	r4, r1
 80016a6:	41bf      	sbcs	r7, r7
 80016a8:	427f      	negs	r7, r7
 80016aa:	464e      	mov	r6, r9
 80016ac:	4447      	add	r7, r8
 80016ae:	e7a6      	b.n	80015fe <__aeabi_dadd+0x27e>
 80016b0:	4642      	mov	r2, r8
 80016b2:	430a      	orrs	r2, r1
 80016b4:	0011      	movs	r1, r2
 80016b6:	1e4a      	subs	r2, r1, #1
 80016b8:	4191      	sbcs	r1, r2
 80016ba:	e6ad      	b.n	8001418 <__aeabi_dadd+0x98>
 80016bc:	4c0c      	ldr	r4, [pc, #48]	; (80016f0 <__aeabi_dadd+0x370>)
 80016be:	1c72      	adds	r2, r6, #1
 80016c0:	4222      	tst	r2, r4
 80016c2:	d000      	beq.n	80016c6 <__aeabi_dadd+0x346>
 80016c4:	e0a1      	b.n	800180a <__aeabi_dadd+0x48a>
 80016c6:	0002      	movs	r2, r0
 80016c8:	431a      	orrs	r2, r3
 80016ca:	2e00      	cmp	r6, #0
 80016cc:	d000      	beq.n	80016d0 <__aeabi_dadd+0x350>
 80016ce:	e0fa      	b.n	80018c6 <__aeabi_dadd+0x546>
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dadd+0x356>
 80016d4:	e145      	b.n	8001962 <__aeabi_dadd+0x5e2>
 80016d6:	003a      	movs	r2, r7
 80016d8:	430a      	orrs	r2, r1
 80016da:	d000      	beq.n	80016de <__aeabi_dadd+0x35e>
 80016dc:	e146      	b.n	800196c <__aeabi_dadd+0x5ec>
 80016de:	0742      	lsls	r2, r0, #29
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	08c0      	lsrs	r0, r0, #3
 80016e6:	e77b      	b.n	80015e0 <__aeabi_dadd+0x260>
 80016e8:	000007ff 	.word	0x000007ff
 80016ec:	ff7fffff 	.word	0xff7fffff
 80016f0:	000007fe 	.word	0x000007fe
 80016f4:	4647      	mov	r7, r8
 80016f6:	1a5c      	subs	r4, r3, r1
 80016f8:	1bc2      	subs	r2, r0, r7
 80016fa:	42a3      	cmp	r3, r4
 80016fc:	41bf      	sbcs	r7, r7
 80016fe:	427f      	negs	r7, r7
 8001700:	46b9      	mov	r9, r7
 8001702:	0017      	movs	r7, r2
 8001704:	464a      	mov	r2, r9
 8001706:	1abf      	subs	r7, r7, r2
 8001708:	023a      	lsls	r2, r7, #8
 800170a:	d500      	bpl.n	800170e <__aeabi_dadd+0x38e>
 800170c:	e08d      	b.n	800182a <__aeabi_dadd+0x4aa>
 800170e:	0023      	movs	r3, r4
 8001710:	433b      	orrs	r3, r7
 8001712:	d000      	beq.n	8001716 <__aeabi_dadd+0x396>
 8001714:	e68a      	b.n	800142c <__aeabi_dadd+0xac>
 8001716:	2000      	movs	r0, #0
 8001718:	2500      	movs	r5, #0
 800171a:	e761      	b.n	80015e0 <__aeabi_dadd+0x260>
 800171c:	4cb4      	ldr	r4, [pc, #720]	; (80019f0 <__aeabi_dadd+0x670>)
 800171e:	45a1      	cmp	r9, r4
 8001720:	d100      	bne.n	8001724 <__aeabi_dadd+0x3a4>
 8001722:	e0ad      	b.n	8001880 <__aeabi_dadd+0x500>
 8001724:	2480      	movs	r4, #128	; 0x80
 8001726:	0424      	lsls	r4, r4, #16
 8001728:	4320      	orrs	r0, r4
 800172a:	4664      	mov	r4, ip
 800172c:	2c38      	cmp	r4, #56	; 0x38
 800172e:	dc3d      	bgt.n	80017ac <__aeabi_dadd+0x42c>
 8001730:	4662      	mov	r2, ip
 8001732:	2c1f      	cmp	r4, #31
 8001734:	dd00      	ble.n	8001738 <__aeabi_dadd+0x3b8>
 8001736:	e0b7      	b.n	80018a8 <__aeabi_dadd+0x528>
 8001738:	2520      	movs	r5, #32
 800173a:	001e      	movs	r6, r3
 800173c:	1b2d      	subs	r5, r5, r4
 800173e:	0004      	movs	r4, r0
 8001740:	40ab      	lsls	r3, r5
 8001742:	40ac      	lsls	r4, r5
 8001744:	40d6      	lsrs	r6, r2
 8001746:	40d0      	lsrs	r0, r2
 8001748:	4642      	mov	r2, r8
 800174a:	1e5d      	subs	r5, r3, #1
 800174c:	41ab      	sbcs	r3, r5
 800174e:	4334      	orrs	r4, r6
 8001750:	1a12      	subs	r2, r2, r0
 8001752:	4690      	mov	r8, r2
 8001754:	4323      	orrs	r3, r4
 8001756:	e02c      	b.n	80017b2 <__aeabi_dadd+0x432>
 8001758:	0742      	lsls	r2, r0, #29
 800175a:	08db      	lsrs	r3, r3, #3
 800175c:	4313      	orrs	r3, r2
 800175e:	08c0      	lsrs	r0, r0, #3
 8001760:	e73b      	b.n	80015da <__aeabi_dadd+0x25a>
 8001762:	185c      	adds	r4, r3, r1
 8001764:	429c      	cmp	r4, r3
 8001766:	419b      	sbcs	r3, r3
 8001768:	4440      	add	r0, r8
 800176a:	425b      	negs	r3, r3
 800176c:	18c7      	adds	r7, r0, r3
 800176e:	2601      	movs	r6, #1
 8001770:	023b      	lsls	r3, r7, #8
 8001772:	d400      	bmi.n	8001776 <__aeabi_dadd+0x3f6>
 8001774:	e729      	b.n	80015ca <__aeabi_dadd+0x24a>
 8001776:	2602      	movs	r6, #2
 8001778:	4a9e      	ldr	r2, [pc, #632]	; (80019f4 <__aeabi_dadd+0x674>)
 800177a:	0863      	lsrs	r3, r4, #1
 800177c:	4017      	ands	r7, r2
 800177e:	2201      	movs	r2, #1
 8001780:	4014      	ands	r4, r2
 8001782:	431c      	orrs	r4, r3
 8001784:	07fb      	lsls	r3, r7, #31
 8001786:	431c      	orrs	r4, r3
 8001788:	087f      	lsrs	r7, r7, #1
 800178a:	e673      	b.n	8001474 <__aeabi_dadd+0xf4>
 800178c:	4644      	mov	r4, r8
 800178e:	3a20      	subs	r2, #32
 8001790:	40d4      	lsrs	r4, r2
 8001792:	4662      	mov	r2, ip
 8001794:	2a20      	cmp	r2, #32
 8001796:	d005      	beq.n	80017a4 <__aeabi_dadd+0x424>
 8001798:	4667      	mov	r7, ip
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	1bd2      	subs	r2, r2, r7
 800179e:	4647      	mov	r7, r8
 80017a0:	4097      	lsls	r7, r2
 80017a2:	4339      	orrs	r1, r7
 80017a4:	1e4a      	subs	r2, r1, #1
 80017a6:	4191      	sbcs	r1, r2
 80017a8:	4321      	orrs	r1, r4
 80017aa:	e635      	b.n	8001418 <__aeabi_dadd+0x98>
 80017ac:	4303      	orrs	r3, r0
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	4183      	sbcs	r3, r0
 80017b2:	1acc      	subs	r4, r1, r3
 80017b4:	42a1      	cmp	r1, r4
 80017b6:	41bf      	sbcs	r7, r7
 80017b8:	4643      	mov	r3, r8
 80017ba:	427f      	negs	r7, r7
 80017bc:	4655      	mov	r5, sl
 80017be:	464e      	mov	r6, r9
 80017c0:	1bdf      	subs	r7, r3, r7
 80017c2:	e62e      	b.n	8001422 <__aeabi_dadd+0xa2>
 80017c4:	0002      	movs	r2, r0
 80017c6:	431a      	orrs	r2, r3
 80017c8:	d100      	bne.n	80017cc <__aeabi_dadd+0x44c>
 80017ca:	e0bd      	b.n	8001948 <__aeabi_dadd+0x5c8>
 80017cc:	4662      	mov	r2, ip
 80017ce:	4664      	mov	r4, ip
 80017d0:	3a01      	subs	r2, #1
 80017d2:	2c01      	cmp	r4, #1
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dadd+0x458>
 80017d6:	e0e5      	b.n	80019a4 <__aeabi_dadd+0x624>
 80017d8:	4c85      	ldr	r4, [pc, #532]	; (80019f0 <__aeabi_dadd+0x670>)
 80017da:	45a4      	cmp	ip, r4
 80017dc:	d058      	beq.n	8001890 <__aeabi_dadd+0x510>
 80017de:	4694      	mov	ip, r2
 80017e0:	e749      	b.n	8001676 <__aeabi_dadd+0x2f6>
 80017e2:	4664      	mov	r4, ip
 80017e4:	2220      	movs	r2, #32
 80017e6:	1b12      	subs	r2, r2, r4
 80017e8:	4644      	mov	r4, r8
 80017ea:	4094      	lsls	r4, r2
 80017ec:	000f      	movs	r7, r1
 80017ee:	46a1      	mov	r9, r4
 80017f0:	4664      	mov	r4, ip
 80017f2:	4091      	lsls	r1, r2
 80017f4:	40e7      	lsrs	r7, r4
 80017f6:	464c      	mov	r4, r9
 80017f8:	1e4a      	subs	r2, r1, #1
 80017fa:	4191      	sbcs	r1, r2
 80017fc:	433c      	orrs	r4, r7
 80017fe:	4642      	mov	r2, r8
 8001800:	430c      	orrs	r4, r1
 8001802:	4661      	mov	r1, ip
 8001804:	40ca      	lsrs	r2, r1
 8001806:	1880      	adds	r0, r0, r2
 8001808:	e6f4      	b.n	80015f4 <__aeabi_dadd+0x274>
 800180a:	4c79      	ldr	r4, [pc, #484]	; (80019f0 <__aeabi_dadd+0x670>)
 800180c:	42a2      	cmp	r2, r4
 800180e:	d100      	bne.n	8001812 <__aeabi_dadd+0x492>
 8001810:	e6fd      	b.n	800160e <__aeabi_dadd+0x28e>
 8001812:	1859      	adds	r1, r3, r1
 8001814:	4299      	cmp	r1, r3
 8001816:	419b      	sbcs	r3, r3
 8001818:	4440      	add	r0, r8
 800181a:	425f      	negs	r7, r3
 800181c:	19c7      	adds	r7, r0, r7
 800181e:	07fc      	lsls	r4, r7, #31
 8001820:	0849      	lsrs	r1, r1, #1
 8001822:	0016      	movs	r6, r2
 8001824:	430c      	orrs	r4, r1
 8001826:	087f      	lsrs	r7, r7, #1
 8001828:	e6cf      	b.n	80015ca <__aeabi_dadd+0x24a>
 800182a:	1acc      	subs	r4, r1, r3
 800182c:	42a1      	cmp	r1, r4
 800182e:	41bf      	sbcs	r7, r7
 8001830:	4643      	mov	r3, r8
 8001832:	427f      	negs	r7, r7
 8001834:	1a18      	subs	r0, r3, r0
 8001836:	4655      	mov	r5, sl
 8001838:	1bc7      	subs	r7, r0, r7
 800183a:	e5f7      	b.n	800142c <__aeabi_dadd+0xac>
 800183c:	08c9      	lsrs	r1, r1, #3
 800183e:	077b      	lsls	r3, r7, #29
 8001840:	4655      	mov	r5, sl
 8001842:	430b      	orrs	r3, r1
 8001844:	08f8      	lsrs	r0, r7, #3
 8001846:	e6c8      	b.n	80015da <__aeabi_dadd+0x25a>
 8001848:	2c00      	cmp	r4, #0
 800184a:	d000      	beq.n	800184e <__aeabi_dadd+0x4ce>
 800184c:	e081      	b.n	8001952 <__aeabi_dadd+0x5d2>
 800184e:	4643      	mov	r3, r8
 8001850:	430b      	orrs	r3, r1
 8001852:	d115      	bne.n	8001880 <__aeabi_dadd+0x500>
 8001854:	2080      	movs	r0, #128	; 0x80
 8001856:	2500      	movs	r5, #0
 8001858:	0300      	lsls	r0, r0, #12
 800185a:	e6e3      	b.n	8001624 <__aeabi_dadd+0x2a4>
 800185c:	1a5c      	subs	r4, r3, r1
 800185e:	42a3      	cmp	r3, r4
 8001860:	419b      	sbcs	r3, r3
 8001862:	1bc7      	subs	r7, r0, r7
 8001864:	425b      	negs	r3, r3
 8001866:	2601      	movs	r6, #1
 8001868:	1aff      	subs	r7, r7, r3
 800186a:	e5da      	b.n	8001422 <__aeabi_dadd+0xa2>
 800186c:	0742      	lsls	r2, r0, #29
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	4313      	orrs	r3, r2
 8001872:	08c0      	lsrs	r0, r0, #3
 8001874:	e6d2      	b.n	800161c <__aeabi_dadd+0x29c>
 8001876:	0742      	lsls	r2, r0, #29
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	4313      	orrs	r3, r2
 800187c:	08c0      	lsrs	r0, r0, #3
 800187e:	e6ac      	b.n	80015da <__aeabi_dadd+0x25a>
 8001880:	4643      	mov	r3, r8
 8001882:	4642      	mov	r2, r8
 8001884:	08c9      	lsrs	r1, r1, #3
 8001886:	075b      	lsls	r3, r3, #29
 8001888:	4655      	mov	r5, sl
 800188a:	430b      	orrs	r3, r1
 800188c:	08d0      	lsrs	r0, r2, #3
 800188e:	e6c5      	b.n	800161c <__aeabi_dadd+0x29c>
 8001890:	4643      	mov	r3, r8
 8001892:	4642      	mov	r2, r8
 8001894:	075b      	lsls	r3, r3, #29
 8001896:	08c9      	lsrs	r1, r1, #3
 8001898:	430b      	orrs	r3, r1
 800189a:	08d0      	lsrs	r0, r2, #3
 800189c:	e6be      	b.n	800161c <__aeabi_dadd+0x29c>
 800189e:	4303      	orrs	r3, r0
 80018a0:	001c      	movs	r4, r3
 80018a2:	1e63      	subs	r3, r4, #1
 80018a4:	419c      	sbcs	r4, r3
 80018a6:	e6fc      	b.n	80016a2 <__aeabi_dadd+0x322>
 80018a8:	0002      	movs	r2, r0
 80018aa:	3c20      	subs	r4, #32
 80018ac:	40e2      	lsrs	r2, r4
 80018ae:	0014      	movs	r4, r2
 80018b0:	4662      	mov	r2, ip
 80018b2:	2a20      	cmp	r2, #32
 80018b4:	d003      	beq.n	80018be <__aeabi_dadd+0x53e>
 80018b6:	2540      	movs	r5, #64	; 0x40
 80018b8:	1aad      	subs	r5, r5, r2
 80018ba:	40a8      	lsls	r0, r5
 80018bc:	4303      	orrs	r3, r0
 80018be:	1e58      	subs	r0, r3, #1
 80018c0:	4183      	sbcs	r3, r0
 80018c2:	4323      	orrs	r3, r4
 80018c4:	e775      	b.n	80017b2 <__aeabi_dadd+0x432>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d0e2      	beq.n	8001890 <__aeabi_dadd+0x510>
 80018ca:	003a      	movs	r2, r7
 80018cc:	430a      	orrs	r2, r1
 80018ce:	d0cd      	beq.n	800186c <__aeabi_dadd+0x4ec>
 80018d0:	0742      	lsls	r2, r0, #29
 80018d2:	08db      	lsrs	r3, r3, #3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	08c0      	lsrs	r0, r0, #3
 80018da:	0312      	lsls	r2, r2, #12
 80018dc:	4210      	tst	r0, r2
 80018de:	d006      	beq.n	80018ee <__aeabi_dadd+0x56e>
 80018e0:	08fc      	lsrs	r4, r7, #3
 80018e2:	4214      	tst	r4, r2
 80018e4:	d103      	bne.n	80018ee <__aeabi_dadd+0x56e>
 80018e6:	0020      	movs	r0, r4
 80018e8:	08cb      	lsrs	r3, r1, #3
 80018ea:	077a      	lsls	r2, r7, #29
 80018ec:	4313      	orrs	r3, r2
 80018ee:	0f5a      	lsrs	r2, r3, #29
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	0752      	lsls	r2, r2, #29
 80018f4:	08db      	lsrs	r3, r3, #3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	e690      	b.n	800161c <__aeabi_dadd+0x29c>
 80018fa:	4643      	mov	r3, r8
 80018fc:	430b      	orrs	r3, r1
 80018fe:	d100      	bne.n	8001902 <__aeabi_dadd+0x582>
 8001900:	e709      	b.n	8001716 <__aeabi_dadd+0x396>
 8001902:	4643      	mov	r3, r8
 8001904:	4642      	mov	r2, r8
 8001906:	08c9      	lsrs	r1, r1, #3
 8001908:	075b      	lsls	r3, r3, #29
 800190a:	4655      	mov	r5, sl
 800190c:	430b      	orrs	r3, r1
 800190e:	08d0      	lsrs	r0, r2, #3
 8001910:	e666      	b.n	80015e0 <__aeabi_dadd+0x260>
 8001912:	1acc      	subs	r4, r1, r3
 8001914:	42a1      	cmp	r1, r4
 8001916:	4189      	sbcs	r1, r1
 8001918:	1a3f      	subs	r7, r7, r0
 800191a:	4249      	negs	r1, r1
 800191c:	4655      	mov	r5, sl
 800191e:	2601      	movs	r6, #1
 8001920:	1a7f      	subs	r7, r7, r1
 8001922:	e57e      	b.n	8001422 <__aeabi_dadd+0xa2>
 8001924:	4642      	mov	r2, r8
 8001926:	1a5c      	subs	r4, r3, r1
 8001928:	1a87      	subs	r7, r0, r2
 800192a:	42a3      	cmp	r3, r4
 800192c:	4192      	sbcs	r2, r2
 800192e:	4252      	negs	r2, r2
 8001930:	1abf      	subs	r7, r7, r2
 8001932:	023a      	lsls	r2, r7, #8
 8001934:	d53d      	bpl.n	80019b2 <__aeabi_dadd+0x632>
 8001936:	1acc      	subs	r4, r1, r3
 8001938:	42a1      	cmp	r1, r4
 800193a:	4189      	sbcs	r1, r1
 800193c:	4643      	mov	r3, r8
 800193e:	4249      	negs	r1, r1
 8001940:	1a1f      	subs	r7, r3, r0
 8001942:	4655      	mov	r5, sl
 8001944:	1a7f      	subs	r7, r7, r1
 8001946:	e595      	b.n	8001474 <__aeabi_dadd+0xf4>
 8001948:	077b      	lsls	r3, r7, #29
 800194a:	08c9      	lsrs	r1, r1, #3
 800194c:	430b      	orrs	r3, r1
 800194e:	08f8      	lsrs	r0, r7, #3
 8001950:	e643      	b.n	80015da <__aeabi_dadd+0x25a>
 8001952:	4644      	mov	r4, r8
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	430c      	orrs	r4, r1
 8001958:	d130      	bne.n	80019bc <__aeabi_dadd+0x63c>
 800195a:	0742      	lsls	r2, r0, #29
 800195c:	4313      	orrs	r3, r2
 800195e:	08c0      	lsrs	r0, r0, #3
 8001960:	e65c      	b.n	800161c <__aeabi_dadd+0x29c>
 8001962:	077b      	lsls	r3, r7, #29
 8001964:	08c9      	lsrs	r1, r1, #3
 8001966:	430b      	orrs	r3, r1
 8001968:	08f8      	lsrs	r0, r7, #3
 800196a:	e639      	b.n	80015e0 <__aeabi_dadd+0x260>
 800196c:	185c      	adds	r4, r3, r1
 800196e:	429c      	cmp	r4, r3
 8001970:	419b      	sbcs	r3, r3
 8001972:	4440      	add	r0, r8
 8001974:	425b      	negs	r3, r3
 8001976:	18c7      	adds	r7, r0, r3
 8001978:	023b      	lsls	r3, r7, #8
 800197a:	d400      	bmi.n	800197e <__aeabi_dadd+0x5fe>
 800197c:	e625      	b.n	80015ca <__aeabi_dadd+0x24a>
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <__aeabi_dadd+0x674>)
 8001980:	2601      	movs	r6, #1
 8001982:	401f      	ands	r7, r3
 8001984:	e621      	b.n	80015ca <__aeabi_dadd+0x24a>
 8001986:	0004      	movs	r4, r0
 8001988:	3a20      	subs	r2, #32
 800198a:	40d4      	lsrs	r4, r2
 800198c:	4662      	mov	r2, ip
 800198e:	2a20      	cmp	r2, #32
 8001990:	d004      	beq.n	800199c <__aeabi_dadd+0x61c>
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	4666      	mov	r6, ip
 8001996:	1b92      	subs	r2, r2, r6
 8001998:	4090      	lsls	r0, r2
 800199a:	4303      	orrs	r3, r0
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	4193      	sbcs	r3, r2
 80019a0:	431c      	orrs	r4, r3
 80019a2:	e67e      	b.n	80016a2 <__aeabi_dadd+0x322>
 80019a4:	185c      	adds	r4, r3, r1
 80019a6:	428c      	cmp	r4, r1
 80019a8:	4189      	sbcs	r1, r1
 80019aa:	4440      	add	r0, r8
 80019ac:	4249      	negs	r1, r1
 80019ae:	1847      	adds	r7, r0, r1
 80019b0:	e6dd      	b.n	800176e <__aeabi_dadd+0x3ee>
 80019b2:	0023      	movs	r3, r4
 80019b4:	433b      	orrs	r3, r7
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x63a>
 80019b8:	e6ad      	b.n	8001716 <__aeabi_dadd+0x396>
 80019ba:	e606      	b.n	80015ca <__aeabi_dadd+0x24a>
 80019bc:	0744      	lsls	r4, r0, #29
 80019be:	4323      	orrs	r3, r4
 80019c0:	2480      	movs	r4, #128	; 0x80
 80019c2:	08c0      	lsrs	r0, r0, #3
 80019c4:	0324      	lsls	r4, r4, #12
 80019c6:	4220      	tst	r0, r4
 80019c8:	d008      	beq.n	80019dc <__aeabi_dadd+0x65c>
 80019ca:	4642      	mov	r2, r8
 80019cc:	08d6      	lsrs	r6, r2, #3
 80019ce:	4226      	tst	r6, r4
 80019d0:	d104      	bne.n	80019dc <__aeabi_dadd+0x65c>
 80019d2:	4655      	mov	r5, sl
 80019d4:	0030      	movs	r0, r6
 80019d6:	08cb      	lsrs	r3, r1, #3
 80019d8:	0751      	lsls	r1, r2, #29
 80019da:	430b      	orrs	r3, r1
 80019dc:	0f5a      	lsrs	r2, r3, #29
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	08db      	lsrs	r3, r3, #3
 80019e2:	0752      	lsls	r2, r2, #29
 80019e4:	4313      	orrs	r3, r2
 80019e6:	e619      	b.n	800161c <__aeabi_dadd+0x29c>
 80019e8:	2300      	movs	r3, #0
 80019ea:	4a01      	ldr	r2, [pc, #4]	; (80019f0 <__aeabi_dadd+0x670>)
 80019ec:	001f      	movs	r7, r3
 80019ee:	e55e      	b.n	80014ae <__aeabi_dadd+0x12e>
 80019f0:	000007ff 	.word	0x000007ff
 80019f4:	ff7fffff 	.word	0xff7fffff

080019f8 <__aeabi_ddiv>:
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	4657      	mov	r7, sl
 80019fc:	464e      	mov	r6, r9
 80019fe:	4645      	mov	r5, r8
 8001a00:	46de      	mov	lr, fp
 8001a02:	b5e0      	push	{r5, r6, r7, lr}
 8001a04:	4681      	mov	r9, r0
 8001a06:	0005      	movs	r5, r0
 8001a08:	030c      	lsls	r4, r1, #12
 8001a0a:	0048      	lsls	r0, r1, #1
 8001a0c:	4692      	mov	sl, r2
 8001a0e:	001f      	movs	r7, r3
 8001a10:	b085      	sub	sp, #20
 8001a12:	0b24      	lsrs	r4, r4, #12
 8001a14:	0d40      	lsrs	r0, r0, #21
 8001a16:	0fce      	lsrs	r6, r1, #31
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_ddiv+0x26>
 8001a1c:	e156      	b.n	8001ccc <__aeabi_ddiv+0x2d4>
 8001a1e:	4bd4      	ldr	r3, [pc, #848]	; (8001d70 <__aeabi_ddiv+0x378>)
 8001a20:	4298      	cmp	r0, r3
 8001a22:	d100      	bne.n	8001a26 <__aeabi_ddiv+0x2e>
 8001a24:	e172      	b.n	8001d0c <__aeabi_ddiv+0x314>
 8001a26:	0f6b      	lsrs	r3, r5, #29
 8001a28:	00e4      	lsls	r4, r4, #3
 8001a2a:	431c      	orrs	r4, r3
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	4323      	orrs	r3, r4
 8001a32:	4698      	mov	r8, r3
 8001a34:	4bcf      	ldr	r3, [pc, #828]	; (8001d74 <__aeabi_ddiv+0x37c>)
 8001a36:	00ed      	lsls	r5, r5, #3
 8001a38:	469b      	mov	fp, r3
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	4483      	add	fp, r0
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	033c      	lsls	r4, r7, #12
 8001a44:	007b      	lsls	r3, r7, #1
 8001a46:	4650      	mov	r0, sl
 8001a48:	0b24      	lsrs	r4, r4, #12
 8001a4a:	0d5b      	lsrs	r3, r3, #21
 8001a4c:	0fff      	lsrs	r7, r7, #31
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_ddiv+0x5c>
 8001a52:	e11f      	b.n	8001c94 <__aeabi_ddiv+0x29c>
 8001a54:	4ac6      	ldr	r2, [pc, #792]	; (8001d70 <__aeabi_ddiv+0x378>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0x64>
 8001a5a:	e162      	b.n	8001d22 <__aeabi_ddiv+0x32a>
 8001a5c:	49c5      	ldr	r1, [pc, #788]	; (8001d74 <__aeabi_ddiv+0x37c>)
 8001a5e:	0f42      	lsrs	r2, r0, #29
 8001a60:	468c      	mov	ip, r1
 8001a62:	00e4      	lsls	r4, r4, #3
 8001a64:	4659      	mov	r1, fp
 8001a66:	4314      	orrs	r4, r2
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	4463      	add	r3, ip
 8001a6c:	0412      	lsls	r2, r2, #16
 8001a6e:	1acb      	subs	r3, r1, r3
 8001a70:	4314      	orrs	r4, r2
 8001a72:	469b      	mov	fp, r3
 8001a74:	00c2      	lsls	r2, r0, #3
 8001a76:	2000      	movs	r0, #0
 8001a78:	0033      	movs	r3, r6
 8001a7a:	407b      	eors	r3, r7
 8001a7c:	469a      	mov	sl, r3
 8001a7e:	464b      	mov	r3, r9
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d827      	bhi.n	8001ad4 <__aeabi_ddiv+0xdc>
 8001a84:	49bc      	ldr	r1, [pc, #752]	; (8001d78 <__aeabi_ddiv+0x380>)
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	58cb      	ldr	r3, [r1, r3]
 8001a8a:	469f      	mov	pc, r3
 8001a8c:	46b2      	mov	sl, r6
 8001a8e:	9b00      	ldr	r3, [sp, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d016      	beq.n	8001ac2 <__aeabi_ddiv+0xca>
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d100      	bne.n	8001a9a <__aeabi_ddiv+0xa2>
 8001a98:	e28e      	b.n	8001fb8 <__aeabi_ddiv+0x5c0>
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_ddiv+0xa8>
 8001a9e:	e0d9      	b.n	8001c54 <__aeabi_ddiv+0x25c>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2400      	movs	r4, #0
 8001aa4:	2500      	movs	r5, #0
 8001aa6:	4652      	mov	r2, sl
 8001aa8:	051b      	lsls	r3, r3, #20
 8001aaa:	4323      	orrs	r3, r4
 8001aac:	07d2      	lsls	r2, r2, #31
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	0028      	movs	r0, r5
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	b005      	add	sp, #20
 8001ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab8:	46bb      	mov	fp, r7
 8001aba:	46b2      	mov	sl, r6
 8001abc:	46a9      	mov	r9, r5
 8001abe:	46a0      	mov	r8, r4
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4baa      	ldr	r3, [pc, #680]	; (8001d70 <__aeabi_ddiv+0x378>)
 8001ac8:	e7ed      	b.n	8001aa6 <__aeabi_ddiv+0xae>
 8001aca:	46ba      	mov	sl, r7
 8001acc:	46a0      	mov	r8, r4
 8001ace:	0015      	movs	r5, r2
 8001ad0:	9000      	str	r0, [sp, #0]
 8001ad2:	e7dc      	b.n	8001a8e <__aeabi_ddiv+0x96>
 8001ad4:	4544      	cmp	r4, r8
 8001ad6:	d200      	bcs.n	8001ada <__aeabi_ddiv+0xe2>
 8001ad8:	e1c7      	b.n	8001e6a <__aeabi_ddiv+0x472>
 8001ada:	d100      	bne.n	8001ade <__aeabi_ddiv+0xe6>
 8001adc:	e1c2      	b.n	8001e64 <__aeabi_ddiv+0x46c>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	469c      	mov	ip, r3
 8001ae4:	002e      	movs	r6, r5
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	2500      	movs	r5, #0
 8001aea:	44e3      	add	fp, ip
 8001aec:	0223      	lsls	r3, r4, #8
 8001aee:	0e14      	lsrs	r4, r2, #24
 8001af0:	431c      	orrs	r4, r3
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	4699      	mov	r9, r3
 8001af6:	0423      	lsls	r3, r4, #16
 8001af8:	0c1f      	lsrs	r7, r3, #16
 8001afa:	0212      	lsls	r2, r2, #8
 8001afc:	4649      	mov	r1, r9
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	9701      	str	r7, [sp, #4]
 8001b02:	f7fe fba3 	bl	800024c <__aeabi_uidivmod>
 8001b06:	0002      	movs	r2, r0
 8001b08:	437a      	muls	r2, r7
 8001b0a:	040b      	lsls	r3, r1, #16
 8001b0c:	0c31      	lsrs	r1, r6, #16
 8001b0e:	4680      	mov	r8, r0
 8001b10:	4319      	orrs	r1, r3
 8001b12:	428a      	cmp	r2, r1
 8001b14:	d907      	bls.n	8001b26 <__aeabi_ddiv+0x12e>
 8001b16:	2301      	movs	r3, #1
 8001b18:	425b      	negs	r3, r3
 8001b1a:	469c      	mov	ip, r3
 8001b1c:	1909      	adds	r1, r1, r4
 8001b1e:	44e0      	add	r8, ip
 8001b20:	428c      	cmp	r4, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x12e>
 8001b24:	e207      	b.n	8001f36 <__aeabi_ddiv+0x53e>
 8001b26:	1a88      	subs	r0, r1, r2
 8001b28:	4649      	mov	r1, r9
 8001b2a:	f7fe fb8f 	bl	800024c <__aeabi_uidivmod>
 8001b2e:	0409      	lsls	r1, r1, #16
 8001b30:	468c      	mov	ip, r1
 8001b32:	0431      	lsls	r1, r6, #16
 8001b34:	4666      	mov	r6, ip
 8001b36:	9a01      	ldr	r2, [sp, #4]
 8001b38:	0c09      	lsrs	r1, r1, #16
 8001b3a:	4342      	muls	r2, r0
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	4331      	orrs	r1, r6
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d904      	bls.n	8001b4e <__aeabi_ddiv+0x156>
 8001b44:	1909      	adds	r1, r1, r4
 8001b46:	3b01      	subs	r3, #1
 8001b48:	428c      	cmp	r4, r1
 8001b4a:	d800      	bhi.n	8001b4e <__aeabi_ddiv+0x156>
 8001b4c:	e1ed      	b.n	8001f2a <__aeabi_ddiv+0x532>
 8001b4e:	1a88      	subs	r0, r1, r2
 8001b50:	4642      	mov	r2, r8
 8001b52:	0412      	lsls	r2, r2, #16
 8001b54:	431a      	orrs	r2, r3
 8001b56:	4690      	mov	r8, r2
 8001b58:	4641      	mov	r1, r8
 8001b5a:	9b00      	ldr	r3, [sp, #0]
 8001b5c:	040e      	lsls	r6, r1, #16
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	001f      	movs	r7, r3
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	9b00      	ldr	r3, [sp, #0]
 8001b66:	0c36      	lsrs	r6, r6, #16
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	0c19      	lsrs	r1, r3, #16
 8001b6c:	000b      	movs	r3, r1
 8001b6e:	4373      	muls	r3, r6
 8001b70:	0c12      	lsrs	r2, r2, #16
 8001b72:	437e      	muls	r6, r7
 8001b74:	9103      	str	r1, [sp, #12]
 8001b76:	4351      	muls	r1, r2
 8001b78:	437a      	muls	r2, r7
 8001b7a:	0c1f      	lsrs	r7, r3, #16
 8001b7c:	46bc      	mov	ip, r7
 8001b7e:	1876      	adds	r6, r6, r1
 8001b80:	4466      	add	r6, ip
 8001b82:	42b1      	cmp	r1, r6
 8001b84:	d903      	bls.n	8001b8e <__aeabi_ddiv+0x196>
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	0249      	lsls	r1, r1, #9
 8001b8a:	468c      	mov	ip, r1
 8001b8c:	4462      	add	r2, ip
 8001b8e:	0c31      	lsrs	r1, r6, #16
 8001b90:	188a      	adds	r2, r1, r2
 8001b92:	0431      	lsls	r1, r6, #16
 8001b94:	041e      	lsls	r6, r3, #16
 8001b96:	0c36      	lsrs	r6, r6, #16
 8001b98:	198e      	adds	r6, r1, r6
 8001b9a:	4290      	cmp	r0, r2
 8001b9c:	d302      	bcc.n	8001ba4 <__aeabi_ddiv+0x1ac>
 8001b9e:	d112      	bne.n	8001bc6 <__aeabi_ddiv+0x1ce>
 8001ba0:	42b5      	cmp	r5, r6
 8001ba2:	d210      	bcs.n	8001bc6 <__aeabi_ddiv+0x1ce>
 8001ba4:	4643      	mov	r3, r8
 8001ba6:	1e59      	subs	r1, r3, #1
 8001ba8:	9b00      	ldr	r3, [sp, #0]
 8001baa:	469c      	mov	ip, r3
 8001bac:	4465      	add	r5, ip
 8001bae:	001f      	movs	r7, r3
 8001bb0:	429d      	cmp	r5, r3
 8001bb2:	419b      	sbcs	r3, r3
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	191b      	adds	r3, r3, r4
 8001bb8:	18c0      	adds	r0, r0, r3
 8001bba:	4284      	cmp	r4, r0
 8001bbc:	d200      	bcs.n	8001bc0 <__aeabi_ddiv+0x1c8>
 8001bbe:	e1a0      	b.n	8001f02 <__aeabi_ddiv+0x50a>
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_ddiv+0x1cc>
 8001bc2:	e19b      	b.n	8001efc <__aeabi_ddiv+0x504>
 8001bc4:	4688      	mov	r8, r1
 8001bc6:	1bae      	subs	r6, r5, r6
 8001bc8:	42b5      	cmp	r5, r6
 8001bca:	41ad      	sbcs	r5, r5
 8001bcc:	1a80      	subs	r0, r0, r2
 8001bce:	426d      	negs	r5, r5
 8001bd0:	1b40      	subs	r0, r0, r5
 8001bd2:	4284      	cmp	r4, r0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_ddiv+0x1e0>
 8001bd6:	e1d5      	b.n	8001f84 <__aeabi_ddiv+0x58c>
 8001bd8:	4649      	mov	r1, r9
 8001bda:	f7fe fb37 	bl	800024c <__aeabi_uidivmod>
 8001bde:	9a01      	ldr	r2, [sp, #4]
 8001be0:	040b      	lsls	r3, r1, #16
 8001be2:	4342      	muls	r2, r0
 8001be4:	0c31      	lsrs	r1, r6, #16
 8001be6:	0005      	movs	r5, r0
 8001be8:	4319      	orrs	r1, r3
 8001bea:	428a      	cmp	r2, r1
 8001bec:	d900      	bls.n	8001bf0 <__aeabi_ddiv+0x1f8>
 8001bee:	e16c      	b.n	8001eca <__aeabi_ddiv+0x4d2>
 8001bf0:	1a88      	subs	r0, r1, r2
 8001bf2:	4649      	mov	r1, r9
 8001bf4:	f7fe fb2a 	bl	800024c <__aeabi_uidivmod>
 8001bf8:	9a01      	ldr	r2, [sp, #4]
 8001bfa:	0436      	lsls	r6, r6, #16
 8001bfc:	4342      	muls	r2, r0
 8001bfe:	0409      	lsls	r1, r1, #16
 8001c00:	0c36      	lsrs	r6, r6, #16
 8001c02:	0003      	movs	r3, r0
 8001c04:	430e      	orrs	r6, r1
 8001c06:	42b2      	cmp	r2, r6
 8001c08:	d900      	bls.n	8001c0c <__aeabi_ddiv+0x214>
 8001c0a:	e153      	b.n	8001eb4 <__aeabi_ddiv+0x4bc>
 8001c0c:	9803      	ldr	r0, [sp, #12]
 8001c0e:	1ab6      	subs	r6, r6, r2
 8001c10:	0002      	movs	r2, r0
 8001c12:	042d      	lsls	r5, r5, #16
 8001c14:	431d      	orrs	r5, r3
 8001c16:	9f02      	ldr	r7, [sp, #8]
 8001c18:	042b      	lsls	r3, r5, #16
 8001c1a:	0c1b      	lsrs	r3, r3, #16
 8001c1c:	435a      	muls	r2, r3
 8001c1e:	437b      	muls	r3, r7
 8001c20:	469c      	mov	ip, r3
 8001c22:	0c29      	lsrs	r1, r5, #16
 8001c24:	4348      	muls	r0, r1
 8001c26:	0c13      	lsrs	r3, r2, #16
 8001c28:	4484      	add	ip, r0
 8001c2a:	4463      	add	r3, ip
 8001c2c:	4379      	muls	r1, r7
 8001c2e:	4298      	cmp	r0, r3
 8001c30:	d903      	bls.n	8001c3a <__aeabi_ddiv+0x242>
 8001c32:	2080      	movs	r0, #128	; 0x80
 8001c34:	0240      	lsls	r0, r0, #9
 8001c36:	4684      	mov	ip, r0
 8001c38:	4461      	add	r1, ip
 8001c3a:	0c18      	lsrs	r0, r3, #16
 8001c3c:	0412      	lsls	r2, r2, #16
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	0c12      	lsrs	r2, r2, #16
 8001c42:	1841      	adds	r1, r0, r1
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	428e      	cmp	r6, r1
 8001c48:	d200      	bcs.n	8001c4c <__aeabi_ddiv+0x254>
 8001c4a:	e0ff      	b.n	8001e4c <__aeabi_ddiv+0x454>
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_ddiv+0x258>
 8001c4e:	e0fa      	b.n	8001e46 <__aeabi_ddiv+0x44e>
 8001c50:	2301      	movs	r3, #1
 8001c52:	431d      	orrs	r5, r3
 8001c54:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <__aeabi_ddiv+0x384>)
 8001c56:	445a      	add	r2, fp
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	dc00      	bgt.n	8001c5e <__aeabi_ddiv+0x266>
 8001c5c:	e0aa      	b.n	8001db4 <__aeabi_ddiv+0x3bc>
 8001c5e:	076b      	lsls	r3, r5, #29
 8001c60:	d000      	beq.n	8001c64 <__aeabi_ddiv+0x26c>
 8001c62:	e13d      	b.n	8001ee0 <__aeabi_ddiv+0x4e8>
 8001c64:	08ed      	lsrs	r5, r5, #3
 8001c66:	4643      	mov	r3, r8
 8001c68:	01db      	lsls	r3, r3, #7
 8001c6a:	d506      	bpl.n	8001c7a <__aeabi_ddiv+0x282>
 8001c6c:	4642      	mov	r2, r8
 8001c6e:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <__aeabi_ddiv+0x388>)
 8001c70:	401a      	ands	r2, r3
 8001c72:	4690      	mov	r8, r2
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	00d2      	lsls	r2, r2, #3
 8001c78:	445a      	add	r2, fp
 8001c7a:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <__aeabi_ddiv+0x38c>)
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_ddiv+0x28a>
 8001c80:	e71f      	b.n	8001ac2 <__aeabi_ddiv+0xca>
 8001c82:	4643      	mov	r3, r8
 8001c84:	075b      	lsls	r3, r3, #29
 8001c86:	431d      	orrs	r5, r3
 8001c88:	4643      	mov	r3, r8
 8001c8a:	0552      	lsls	r2, r2, #21
 8001c8c:	025c      	lsls	r4, r3, #9
 8001c8e:	0b24      	lsrs	r4, r4, #12
 8001c90:	0d53      	lsrs	r3, r2, #21
 8001c92:	e708      	b.n	8001aa6 <__aeabi_ddiv+0xae>
 8001c94:	4652      	mov	r2, sl
 8001c96:	4322      	orrs	r2, r4
 8001c98:	d100      	bne.n	8001c9c <__aeabi_ddiv+0x2a4>
 8001c9a:	e07b      	b.n	8001d94 <__aeabi_ddiv+0x39c>
 8001c9c:	2c00      	cmp	r4, #0
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_ddiv+0x2aa>
 8001ca0:	e0fa      	b.n	8001e98 <__aeabi_ddiv+0x4a0>
 8001ca2:	0020      	movs	r0, r4
 8001ca4:	f001 fa5c 	bl	8003160 <__clzsi2>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	3a0b      	subs	r2, #11
 8001cac:	231d      	movs	r3, #29
 8001cae:	0001      	movs	r1, r0
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	4652      	mov	r2, sl
 8001cb4:	3908      	subs	r1, #8
 8001cb6:	40da      	lsrs	r2, r3
 8001cb8:	408c      	lsls	r4, r1
 8001cba:	4314      	orrs	r4, r2
 8001cbc:	4652      	mov	r2, sl
 8001cbe:	408a      	lsls	r2, r1
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <__aeabi_ddiv+0x390>)
 8001cc2:	4458      	add	r0, fp
 8001cc4:	469b      	mov	fp, r3
 8001cc6:	4483      	add	fp, r0
 8001cc8:	2000      	movs	r0, #0
 8001cca:	e6d5      	b.n	8001a78 <__aeabi_ddiv+0x80>
 8001ccc:	464b      	mov	r3, r9
 8001cce:	4323      	orrs	r3, r4
 8001cd0:	4698      	mov	r8, r3
 8001cd2:	d044      	beq.n	8001d5e <__aeabi_ddiv+0x366>
 8001cd4:	2c00      	cmp	r4, #0
 8001cd6:	d100      	bne.n	8001cda <__aeabi_ddiv+0x2e2>
 8001cd8:	e0ce      	b.n	8001e78 <__aeabi_ddiv+0x480>
 8001cda:	0020      	movs	r0, r4
 8001cdc:	f001 fa40 	bl	8003160 <__clzsi2>
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	390b      	subs	r1, #11
 8001ce6:	231d      	movs	r3, #29
 8001ce8:	1a5b      	subs	r3, r3, r1
 8001cea:	4649      	mov	r1, r9
 8001cec:	0010      	movs	r0, r2
 8001cee:	40d9      	lsrs	r1, r3
 8001cf0:	3808      	subs	r0, #8
 8001cf2:	4084      	lsls	r4, r0
 8001cf4:	000b      	movs	r3, r1
 8001cf6:	464d      	mov	r5, r9
 8001cf8:	4323      	orrs	r3, r4
 8001cfa:	4698      	mov	r8, r3
 8001cfc:	4085      	lsls	r5, r0
 8001cfe:	4823      	ldr	r0, [pc, #140]	; (8001d8c <__aeabi_ddiv+0x394>)
 8001d00:	1a83      	subs	r3, r0, r2
 8001d02:	469b      	mov	fp, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	e69a      	b.n	8001a42 <__aeabi_ddiv+0x4a>
 8001d0c:	464b      	mov	r3, r9
 8001d0e:	4323      	orrs	r3, r4
 8001d10:	4698      	mov	r8, r3
 8001d12:	d11d      	bne.n	8001d50 <__aeabi_ddiv+0x358>
 8001d14:	2308      	movs	r3, #8
 8001d16:	4699      	mov	r9, r3
 8001d18:	3b06      	subs	r3, #6
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	4683      	mov	fp, r0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	e68f      	b.n	8001a42 <__aeabi_ddiv+0x4a>
 8001d22:	4652      	mov	r2, sl
 8001d24:	4322      	orrs	r2, r4
 8001d26:	d109      	bne.n	8001d3c <__aeabi_ddiv+0x344>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	4319      	orrs	r1, r3
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <__aeabi_ddiv+0x398>)
 8001d30:	4689      	mov	r9, r1
 8001d32:	469c      	mov	ip, r3
 8001d34:	2400      	movs	r4, #0
 8001d36:	2002      	movs	r0, #2
 8001d38:	44e3      	add	fp, ip
 8001d3a:	e69d      	b.n	8001a78 <__aeabi_ddiv+0x80>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	464a      	mov	r2, r9
 8001d40:	431a      	orrs	r2, r3
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <__aeabi_ddiv+0x398>)
 8001d44:	4691      	mov	r9, r2
 8001d46:	469c      	mov	ip, r3
 8001d48:	4652      	mov	r2, sl
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	44e3      	add	fp, ip
 8001d4e:	e693      	b.n	8001a78 <__aeabi_ddiv+0x80>
 8001d50:	230c      	movs	r3, #12
 8001d52:	4699      	mov	r9, r3
 8001d54:	3b09      	subs	r3, #9
 8001d56:	46a0      	mov	r8, r4
 8001d58:	4683      	mov	fp, r0
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	e671      	b.n	8001a42 <__aeabi_ddiv+0x4a>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	4699      	mov	r9, r3
 8001d62:	2300      	movs	r3, #0
 8001d64:	469b      	mov	fp, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	2500      	movs	r5, #0
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	e669      	b.n	8001a42 <__aeabi_ddiv+0x4a>
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	000007ff 	.word	0x000007ff
 8001d74:	fffffc01 	.word	0xfffffc01
 8001d78:	0800e170 	.word	0x0800e170
 8001d7c:	000003ff 	.word	0x000003ff
 8001d80:	feffffff 	.word	0xfeffffff
 8001d84:	000007fe 	.word	0x000007fe
 8001d88:	000003f3 	.word	0x000003f3
 8001d8c:	fffffc0d 	.word	0xfffffc0d
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	4649      	mov	r1, r9
 8001d96:	2301      	movs	r3, #1
 8001d98:	4319      	orrs	r1, r3
 8001d9a:	4689      	mov	r9, r1
 8001d9c:	2400      	movs	r4, #0
 8001d9e:	2001      	movs	r0, #1
 8001da0:	e66a      	b.n	8001a78 <__aeabi_ddiv+0x80>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2480      	movs	r4, #128	; 0x80
 8001da6:	469a      	mov	sl, r3
 8001da8:	2500      	movs	r5, #0
 8001daa:	4b8a      	ldr	r3, [pc, #552]	; (8001fd4 <__aeabi_ddiv+0x5dc>)
 8001dac:	0324      	lsls	r4, r4, #12
 8001dae:	e67a      	b.n	8001aa6 <__aeabi_ddiv+0xae>
 8001db0:	2501      	movs	r5, #1
 8001db2:	426d      	negs	r5, r5
 8001db4:	2301      	movs	r3, #1
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	2b38      	cmp	r3, #56	; 0x38
 8001dba:	dd00      	ble.n	8001dbe <__aeabi_ddiv+0x3c6>
 8001dbc:	e670      	b.n	8001aa0 <__aeabi_ddiv+0xa8>
 8001dbe:	2b1f      	cmp	r3, #31
 8001dc0:	dc00      	bgt.n	8001dc4 <__aeabi_ddiv+0x3cc>
 8001dc2:	e0bf      	b.n	8001f44 <__aeabi_ddiv+0x54c>
 8001dc4:	211f      	movs	r1, #31
 8001dc6:	4249      	negs	r1, r1
 8001dc8:	1a8a      	subs	r2, r1, r2
 8001dca:	4641      	mov	r1, r8
 8001dcc:	40d1      	lsrs	r1, r2
 8001dce:	000a      	movs	r2, r1
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d004      	beq.n	8001dde <__aeabi_ddiv+0x3e6>
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	4b80      	ldr	r3, [pc, #512]	; (8001fd8 <__aeabi_ddiv+0x5e0>)
 8001dd8:	445b      	add	r3, fp
 8001dda:	4099      	lsls	r1, r3
 8001ddc:	430d      	orrs	r5, r1
 8001dde:	1e6b      	subs	r3, r5, #1
 8001de0:	419d      	sbcs	r5, r3
 8001de2:	2307      	movs	r3, #7
 8001de4:	432a      	orrs	r2, r5
 8001de6:	001d      	movs	r5, r3
 8001de8:	2400      	movs	r4, #0
 8001dea:	4015      	ands	r5, r2
 8001dec:	4213      	tst	r3, r2
 8001dee:	d100      	bne.n	8001df2 <__aeabi_ddiv+0x3fa>
 8001df0:	e0d4      	b.n	8001f9c <__aeabi_ddiv+0x5a4>
 8001df2:	210f      	movs	r1, #15
 8001df4:	2300      	movs	r3, #0
 8001df6:	4011      	ands	r1, r2
 8001df8:	2904      	cmp	r1, #4
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_ddiv+0x406>
 8001dfc:	e0cb      	b.n	8001f96 <__aeabi_ddiv+0x59e>
 8001dfe:	1d11      	adds	r1, r2, #4
 8001e00:	4291      	cmp	r1, r2
 8001e02:	4192      	sbcs	r2, r2
 8001e04:	4252      	negs	r2, r2
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	000a      	movs	r2, r1
 8001e0a:	0219      	lsls	r1, r3, #8
 8001e0c:	d400      	bmi.n	8001e10 <__aeabi_ddiv+0x418>
 8001e0e:	e0c2      	b.n	8001f96 <__aeabi_ddiv+0x59e>
 8001e10:	2301      	movs	r3, #1
 8001e12:	2400      	movs	r4, #0
 8001e14:	2500      	movs	r5, #0
 8001e16:	e646      	b.n	8001aa6 <__aeabi_ddiv+0xae>
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	031b      	lsls	r3, r3, #12
 8001e1e:	4219      	tst	r1, r3
 8001e20:	d008      	beq.n	8001e34 <__aeabi_ddiv+0x43c>
 8001e22:	421c      	tst	r4, r3
 8001e24:	d106      	bne.n	8001e34 <__aeabi_ddiv+0x43c>
 8001e26:	431c      	orrs	r4, r3
 8001e28:	0324      	lsls	r4, r4, #12
 8001e2a:	46ba      	mov	sl, r7
 8001e2c:	0015      	movs	r5, r2
 8001e2e:	4b69      	ldr	r3, [pc, #420]	; (8001fd4 <__aeabi_ddiv+0x5dc>)
 8001e30:	0b24      	lsrs	r4, r4, #12
 8001e32:	e638      	b.n	8001aa6 <__aeabi_ddiv+0xae>
 8001e34:	2480      	movs	r4, #128	; 0x80
 8001e36:	4643      	mov	r3, r8
 8001e38:	0324      	lsls	r4, r4, #12
 8001e3a:	431c      	orrs	r4, r3
 8001e3c:	0324      	lsls	r4, r4, #12
 8001e3e:	46b2      	mov	sl, r6
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <__aeabi_ddiv+0x5dc>)
 8001e42:	0b24      	lsrs	r4, r4, #12
 8001e44:	e62f      	b.n	8001aa6 <__aeabi_ddiv+0xae>
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d100      	bne.n	8001e4c <__aeabi_ddiv+0x454>
 8001e4a:	e703      	b.n	8001c54 <__aeabi_ddiv+0x25c>
 8001e4c:	19a6      	adds	r6, r4, r6
 8001e4e:	1e68      	subs	r0, r5, #1
 8001e50:	42a6      	cmp	r6, r4
 8001e52:	d200      	bcs.n	8001e56 <__aeabi_ddiv+0x45e>
 8001e54:	e08d      	b.n	8001f72 <__aeabi_ddiv+0x57a>
 8001e56:	428e      	cmp	r6, r1
 8001e58:	d200      	bcs.n	8001e5c <__aeabi_ddiv+0x464>
 8001e5a:	e0a3      	b.n	8001fa4 <__aeabi_ddiv+0x5ac>
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_ddiv+0x468>
 8001e5e:	e0b3      	b.n	8001fc8 <__aeabi_ddiv+0x5d0>
 8001e60:	0005      	movs	r5, r0
 8001e62:	e6f5      	b.n	8001c50 <__aeabi_ddiv+0x258>
 8001e64:	42aa      	cmp	r2, r5
 8001e66:	d900      	bls.n	8001e6a <__aeabi_ddiv+0x472>
 8001e68:	e639      	b.n	8001ade <__aeabi_ddiv+0xe6>
 8001e6a:	4643      	mov	r3, r8
 8001e6c:	07de      	lsls	r6, r3, #31
 8001e6e:	0858      	lsrs	r0, r3, #1
 8001e70:	086b      	lsrs	r3, r5, #1
 8001e72:	431e      	orrs	r6, r3
 8001e74:	07ed      	lsls	r5, r5, #31
 8001e76:	e639      	b.n	8001aec <__aeabi_ddiv+0xf4>
 8001e78:	4648      	mov	r0, r9
 8001e7a:	f001 f971 	bl	8003160 <__clzsi2>
 8001e7e:	0001      	movs	r1, r0
 8001e80:	0002      	movs	r2, r0
 8001e82:	3115      	adds	r1, #21
 8001e84:	3220      	adds	r2, #32
 8001e86:	291c      	cmp	r1, #28
 8001e88:	dc00      	bgt.n	8001e8c <__aeabi_ddiv+0x494>
 8001e8a:	e72c      	b.n	8001ce6 <__aeabi_ddiv+0x2ee>
 8001e8c:	464b      	mov	r3, r9
 8001e8e:	3808      	subs	r0, #8
 8001e90:	4083      	lsls	r3, r0
 8001e92:	2500      	movs	r5, #0
 8001e94:	4698      	mov	r8, r3
 8001e96:	e732      	b.n	8001cfe <__aeabi_ddiv+0x306>
 8001e98:	f001 f962 	bl	8003160 <__clzsi2>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	3215      	adds	r2, #21
 8001ea2:	3020      	adds	r0, #32
 8001ea4:	2a1c      	cmp	r2, #28
 8001ea6:	dc00      	bgt.n	8001eaa <__aeabi_ddiv+0x4b2>
 8001ea8:	e700      	b.n	8001cac <__aeabi_ddiv+0x2b4>
 8001eaa:	4654      	mov	r4, sl
 8001eac:	3b08      	subs	r3, #8
 8001eae:	2200      	movs	r2, #0
 8001eb0:	409c      	lsls	r4, r3
 8001eb2:	e705      	b.n	8001cc0 <__aeabi_ddiv+0x2c8>
 8001eb4:	1936      	adds	r6, r6, r4
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	42b4      	cmp	r4, r6
 8001eba:	d900      	bls.n	8001ebe <__aeabi_ddiv+0x4c6>
 8001ebc:	e6a6      	b.n	8001c0c <__aeabi_ddiv+0x214>
 8001ebe:	42b2      	cmp	r2, r6
 8001ec0:	d800      	bhi.n	8001ec4 <__aeabi_ddiv+0x4cc>
 8001ec2:	e6a3      	b.n	8001c0c <__aeabi_ddiv+0x214>
 8001ec4:	1e83      	subs	r3, r0, #2
 8001ec6:	1936      	adds	r6, r6, r4
 8001ec8:	e6a0      	b.n	8001c0c <__aeabi_ddiv+0x214>
 8001eca:	1909      	adds	r1, r1, r4
 8001ecc:	3d01      	subs	r5, #1
 8001ece:	428c      	cmp	r4, r1
 8001ed0:	d900      	bls.n	8001ed4 <__aeabi_ddiv+0x4dc>
 8001ed2:	e68d      	b.n	8001bf0 <__aeabi_ddiv+0x1f8>
 8001ed4:	428a      	cmp	r2, r1
 8001ed6:	d800      	bhi.n	8001eda <__aeabi_ddiv+0x4e2>
 8001ed8:	e68a      	b.n	8001bf0 <__aeabi_ddiv+0x1f8>
 8001eda:	1e85      	subs	r5, r0, #2
 8001edc:	1909      	adds	r1, r1, r4
 8001ede:	e687      	b.n	8001bf0 <__aeabi_ddiv+0x1f8>
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	402b      	ands	r3, r5
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d100      	bne.n	8001eea <__aeabi_ddiv+0x4f2>
 8001ee8:	e6bc      	b.n	8001c64 <__aeabi_ddiv+0x26c>
 8001eea:	2305      	movs	r3, #5
 8001eec:	425b      	negs	r3, r3
 8001eee:	42ab      	cmp	r3, r5
 8001ef0:	419b      	sbcs	r3, r3
 8001ef2:	3504      	adds	r5, #4
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	08ed      	lsrs	r5, r5, #3
 8001ef8:	4498      	add	r8, r3
 8001efa:	e6b4      	b.n	8001c66 <__aeabi_ddiv+0x26e>
 8001efc:	42af      	cmp	r7, r5
 8001efe:	d900      	bls.n	8001f02 <__aeabi_ddiv+0x50a>
 8001f00:	e660      	b.n	8001bc4 <__aeabi_ddiv+0x1cc>
 8001f02:	4282      	cmp	r2, r0
 8001f04:	d804      	bhi.n	8001f10 <__aeabi_ddiv+0x518>
 8001f06:	d000      	beq.n	8001f0a <__aeabi_ddiv+0x512>
 8001f08:	e65c      	b.n	8001bc4 <__aeabi_ddiv+0x1cc>
 8001f0a:	42ae      	cmp	r6, r5
 8001f0c:	d800      	bhi.n	8001f10 <__aeabi_ddiv+0x518>
 8001f0e:	e659      	b.n	8001bc4 <__aeabi_ddiv+0x1cc>
 8001f10:	2302      	movs	r3, #2
 8001f12:	425b      	negs	r3, r3
 8001f14:	469c      	mov	ip, r3
 8001f16:	9b00      	ldr	r3, [sp, #0]
 8001f18:	44e0      	add	r8, ip
 8001f1a:	469c      	mov	ip, r3
 8001f1c:	4465      	add	r5, ip
 8001f1e:	429d      	cmp	r5, r3
 8001f20:	419b      	sbcs	r3, r3
 8001f22:	425b      	negs	r3, r3
 8001f24:	191b      	adds	r3, r3, r4
 8001f26:	18c0      	adds	r0, r0, r3
 8001f28:	e64d      	b.n	8001bc6 <__aeabi_ddiv+0x1ce>
 8001f2a:	428a      	cmp	r2, r1
 8001f2c:	d800      	bhi.n	8001f30 <__aeabi_ddiv+0x538>
 8001f2e:	e60e      	b.n	8001b4e <__aeabi_ddiv+0x156>
 8001f30:	1e83      	subs	r3, r0, #2
 8001f32:	1909      	adds	r1, r1, r4
 8001f34:	e60b      	b.n	8001b4e <__aeabi_ddiv+0x156>
 8001f36:	428a      	cmp	r2, r1
 8001f38:	d800      	bhi.n	8001f3c <__aeabi_ddiv+0x544>
 8001f3a:	e5f4      	b.n	8001b26 <__aeabi_ddiv+0x12e>
 8001f3c:	1e83      	subs	r3, r0, #2
 8001f3e:	4698      	mov	r8, r3
 8001f40:	1909      	adds	r1, r1, r4
 8001f42:	e5f0      	b.n	8001b26 <__aeabi_ddiv+0x12e>
 8001f44:	4925      	ldr	r1, [pc, #148]	; (8001fdc <__aeabi_ddiv+0x5e4>)
 8001f46:	0028      	movs	r0, r5
 8001f48:	4459      	add	r1, fp
 8001f4a:	408d      	lsls	r5, r1
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	408a      	lsls	r2, r1
 8001f50:	1e69      	subs	r1, r5, #1
 8001f52:	418d      	sbcs	r5, r1
 8001f54:	4641      	mov	r1, r8
 8001f56:	40d8      	lsrs	r0, r3
 8001f58:	40d9      	lsrs	r1, r3
 8001f5a:	4302      	orrs	r2, r0
 8001f5c:	432a      	orrs	r2, r5
 8001f5e:	000b      	movs	r3, r1
 8001f60:	0751      	lsls	r1, r2, #29
 8001f62:	d100      	bne.n	8001f66 <__aeabi_ddiv+0x56e>
 8001f64:	e751      	b.n	8001e0a <__aeabi_ddiv+0x412>
 8001f66:	210f      	movs	r1, #15
 8001f68:	4011      	ands	r1, r2
 8001f6a:	2904      	cmp	r1, #4
 8001f6c:	d000      	beq.n	8001f70 <__aeabi_ddiv+0x578>
 8001f6e:	e746      	b.n	8001dfe <__aeabi_ddiv+0x406>
 8001f70:	e74b      	b.n	8001e0a <__aeabi_ddiv+0x412>
 8001f72:	0005      	movs	r5, r0
 8001f74:	428e      	cmp	r6, r1
 8001f76:	d000      	beq.n	8001f7a <__aeabi_ddiv+0x582>
 8001f78:	e66a      	b.n	8001c50 <__aeabi_ddiv+0x258>
 8001f7a:	9a00      	ldr	r2, [sp, #0]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_ddiv+0x58a>
 8001f80:	e666      	b.n	8001c50 <__aeabi_ddiv+0x258>
 8001f82:	e667      	b.n	8001c54 <__aeabi_ddiv+0x25c>
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <__aeabi_ddiv+0x5e8>)
 8001f86:	445a      	add	r2, fp
 8001f88:	2a00      	cmp	r2, #0
 8001f8a:	dc00      	bgt.n	8001f8e <__aeabi_ddiv+0x596>
 8001f8c:	e710      	b.n	8001db0 <__aeabi_ddiv+0x3b8>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	2500      	movs	r5, #0
 8001f92:	4498      	add	r8, r3
 8001f94:	e667      	b.n	8001c66 <__aeabi_ddiv+0x26e>
 8001f96:	075d      	lsls	r5, r3, #29
 8001f98:	025b      	lsls	r3, r3, #9
 8001f9a:	0b1c      	lsrs	r4, r3, #12
 8001f9c:	08d2      	lsrs	r2, r2, #3
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	4315      	orrs	r5, r2
 8001fa2:	e580      	b.n	8001aa6 <__aeabi_ddiv+0xae>
 8001fa4:	9800      	ldr	r0, [sp, #0]
 8001fa6:	3d02      	subs	r5, #2
 8001fa8:	0042      	lsls	r2, r0, #1
 8001faa:	4282      	cmp	r2, r0
 8001fac:	41bf      	sbcs	r7, r7
 8001fae:	427f      	negs	r7, r7
 8001fb0:	193c      	adds	r4, r7, r4
 8001fb2:	1936      	adds	r6, r6, r4
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	e7dd      	b.n	8001f74 <__aeabi_ddiv+0x57c>
 8001fb8:	2480      	movs	r4, #128	; 0x80
 8001fba:	4643      	mov	r3, r8
 8001fbc:	0324      	lsls	r4, r4, #12
 8001fbe:	431c      	orrs	r4, r3
 8001fc0:	0324      	lsls	r4, r4, #12
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <__aeabi_ddiv+0x5dc>)
 8001fc4:	0b24      	lsrs	r4, r4, #12
 8001fc6:	e56e      	b.n	8001aa6 <__aeabi_ddiv+0xae>
 8001fc8:	9a00      	ldr	r2, [sp, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d3ea      	bcc.n	8001fa4 <__aeabi_ddiv+0x5ac>
 8001fce:	0005      	movs	r5, r0
 8001fd0:	e7d3      	b.n	8001f7a <__aeabi_ddiv+0x582>
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	000007ff 	.word	0x000007ff
 8001fd8:	0000043e 	.word	0x0000043e
 8001fdc:	0000041e 	.word	0x0000041e
 8001fe0:	000003ff 	.word	0x000003ff

08001fe4 <__eqdf2>:
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	464e      	mov	r6, r9
 8001fe8:	4645      	mov	r5, r8
 8001fea:	46de      	mov	lr, fp
 8001fec:	4657      	mov	r7, sl
 8001fee:	4690      	mov	r8, r2
 8001ff0:	b5e0      	push	{r5, r6, r7, lr}
 8001ff2:	0017      	movs	r7, r2
 8001ff4:	031a      	lsls	r2, r3, #12
 8001ff6:	0b12      	lsrs	r2, r2, #12
 8001ff8:	0005      	movs	r5, r0
 8001ffa:	4684      	mov	ip, r0
 8001ffc:	4819      	ldr	r0, [pc, #100]	; (8002064 <__eqdf2+0x80>)
 8001ffe:	030e      	lsls	r6, r1, #12
 8002000:	004c      	lsls	r4, r1, #1
 8002002:	4691      	mov	r9, r2
 8002004:	005a      	lsls	r2, r3, #1
 8002006:	0fdb      	lsrs	r3, r3, #31
 8002008:	469b      	mov	fp, r3
 800200a:	0b36      	lsrs	r6, r6, #12
 800200c:	0d64      	lsrs	r4, r4, #21
 800200e:	0fc9      	lsrs	r1, r1, #31
 8002010:	0d52      	lsrs	r2, r2, #21
 8002012:	4284      	cmp	r4, r0
 8002014:	d019      	beq.n	800204a <__eqdf2+0x66>
 8002016:	4282      	cmp	r2, r0
 8002018:	d010      	beq.n	800203c <__eqdf2+0x58>
 800201a:	2001      	movs	r0, #1
 800201c:	4294      	cmp	r4, r2
 800201e:	d10e      	bne.n	800203e <__eqdf2+0x5a>
 8002020:	454e      	cmp	r6, r9
 8002022:	d10c      	bne.n	800203e <__eqdf2+0x5a>
 8002024:	2001      	movs	r0, #1
 8002026:	45c4      	cmp	ip, r8
 8002028:	d109      	bne.n	800203e <__eqdf2+0x5a>
 800202a:	4559      	cmp	r1, fp
 800202c:	d017      	beq.n	800205e <__eqdf2+0x7a>
 800202e:	2c00      	cmp	r4, #0
 8002030:	d105      	bne.n	800203e <__eqdf2+0x5a>
 8002032:	0030      	movs	r0, r6
 8002034:	4328      	orrs	r0, r5
 8002036:	1e43      	subs	r3, r0, #1
 8002038:	4198      	sbcs	r0, r3
 800203a:	e000      	b.n	800203e <__eqdf2+0x5a>
 800203c:	2001      	movs	r0, #1
 800203e:	bcf0      	pop	{r4, r5, r6, r7}
 8002040:	46bb      	mov	fp, r7
 8002042:	46b2      	mov	sl, r6
 8002044:	46a9      	mov	r9, r5
 8002046:	46a0      	mov	r8, r4
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204a:	0033      	movs	r3, r6
 800204c:	2001      	movs	r0, #1
 800204e:	432b      	orrs	r3, r5
 8002050:	d1f5      	bne.n	800203e <__eqdf2+0x5a>
 8002052:	42a2      	cmp	r2, r4
 8002054:	d1f3      	bne.n	800203e <__eqdf2+0x5a>
 8002056:	464b      	mov	r3, r9
 8002058:	433b      	orrs	r3, r7
 800205a:	d1f0      	bne.n	800203e <__eqdf2+0x5a>
 800205c:	e7e2      	b.n	8002024 <__eqdf2+0x40>
 800205e:	2000      	movs	r0, #0
 8002060:	e7ed      	b.n	800203e <__eqdf2+0x5a>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	000007ff 	.word	0x000007ff

08002068 <__gedf2>:
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	4647      	mov	r7, r8
 800206c:	46ce      	mov	lr, r9
 800206e:	0004      	movs	r4, r0
 8002070:	0018      	movs	r0, r3
 8002072:	0016      	movs	r6, r2
 8002074:	031b      	lsls	r3, r3, #12
 8002076:	0b1b      	lsrs	r3, r3, #12
 8002078:	4d2d      	ldr	r5, [pc, #180]	; (8002130 <__gedf2+0xc8>)
 800207a:	004a      	lsls	r2, r1, #1
 800207c:	4699      	mov	r9, r3
 800207e:	b580      	push	{r7, lr}
 8002080:	0043      	lsls	r3, r0, #1
 8002082:	030f      	lsls	r7, r1, #12
 8002084:	46a4      	mov	ip, r4
 8002086:	46b0      	mov	r8, r6
 8002088:	0b3f      	lsrs	r7, r7, #12
 800208a:	0d52      	lsrs	r2, r2, #21
 800208c:	0fc9      	lsrs	r1, r1, #31
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	0fc0      	lsrs	r0, r0, #31
 8002092:	42aa      	cmp	r2, r5
 8002094:	d021      	beq.n	80020da <__gedf2+0x72>
 8002096:	42ab      	cmp	r3, r5
 8002098:	d013      	beq.n	80020c2 <__gedf2+0x5a>
 800209a:	2a00      	cmp	r2, #0
 800209c:	d122      	bne.n	80020e4 <__gedf2+0x7c>
 800209e:	433c      	orrs	r4, r7
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <__gedf2+0x42>
 80020a4:	464d      	mov	r5, r9
 80020a6:	432e      	orrs	r6, r5
 80020a8:	d022      	beq.n	80020f0 <__gedf2+0x88>
 80020aa:	2c00      	cmp	r4, #0
 80020ac:	d010      	beq.n	80020d0 <__gedf2+0x68>
 80020ae:	4281      	cmp	r1, r0
 80020b0:	d022      	beq.n	80020f8 <__gedf2+0x90>
 80020b2:	2002      	movs	r0, #2
 80020b4:	3901      	subs	r1, #1
 80020b6:	4008      	ands	r0, r1
 80020b8:	3801      	subs	r0, #1
 80020ba:	bcc0      	pop	{r6, r7}
 80020bc:	46b9      	mov	r9, r7
 80020be:	46b0      	mov	r8, r6
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c2:	464d      	mov	r5, r9
 80020c4:	432e      	orrs	r6, r5
 80020c6:	d129      	bne.n	800211c <__gedf2+0xb4>
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	d1f0      	bne.n	80020ae <__gedf2+0x46>
 80020cc:	433c      	orrs	r4, r7
 80020ce:	d1ee      	bne.n	80020ae <__gedf2+0x46>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d1f2      	bne.n	80020ba <__gedf2+0x52>
 80020d4:	2001      	movs	r0, #1
 80020d6:	4240      	negs	r0, r0
 80020d8:	e7ef      	b.n	80020ba <__gedf2+0x52>
 80020da:	003d      	movs	r5, r7
 80020dc:	4325      	orrs	r5, r4
 80020de:	d11d      	bne.n	800211c <__gedf2+0xb4>
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d0ee      	beq.n	80020c2 <__gedf2+0x5a>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e2      	bne.n	80020ae <__gedf2+0x46>
 80020e8:	464c      	mov	r4, r9
 80020ea:	4326      	orrs	r6, r4
 80020ec:	d1df      	bne.n	80020ae <__gedf2+0x46>
 80020ee:	e7e0      	b.n	80020b2 <__gedf2+0x4a>
 80020f0:	2000      	movs	r0, #0
 80020f2:	2c00      	cmp	r4, #0
 80020f4:	d0e1      	beq.n	80020ba <__gedf2+0x52>
 80020f6:	e7dc      	b.n	80020b2 <__gedf2+0x4a>
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dc0a      	bgt.n	8002112 <__gedf2+0xaa>
 80020fc:	dbe8      	blt.n	80020d0 <__gedf2+0x68>
 80020fe:	454f      	cmp	r7, r9
 8002100:	d8d7      	bhi.n	80020b2 <__gedf2+0x4a>
 8002102:	d00e      	beq.n	8002122 <__gedf2+0xba>
 8002104:	2000      	movs	r0, #0
 8002106:	454f      	cmp	r7, r9
 8002108:	d2d7      	bcs.n	80020ba <__gedf2+0x52>
 800210a:	2900      	cmp	r1, #0
 800210c:	d0e2      	beq.n	80020d4 <__gedf2+0x6c>
 800210e:	0008      	movs	r0, r1
 8002110:	e7d3      	b.n	80020ba <__gedf2+0x52>
 8002112:	4243      	negs	r3, r0
 8002114:	4158      	adcs	r0, r3
 8002116:	0040      	lsls	r0, r0, #1
 8002118:	3801      	subs	r0, #1
 800211a:	e7ce      	b.n	80020ba <__gedf2+0x52>
 800211c:	2002      	movs	r0, #2
 800211e:	4240      	negs	r0, r0
 8002120:	e7cb      	b.n	80020ba <__gedf2+0x52>
 8002122:	45c4      	cmp	ip, r8
 8002124:	d8c5      	bhi.n	80020b2 <__gedf2+0x4a>
 8002126:	2000      	movs	r0, #0
 8002128:	45c4      	cmp	ip, r8
 800212a:	d2c6      	bcs.n	80020ba <__gedf2+0x52>
 800212c:	e7ed      	b.n	800210a <__gedf2+0xa2>
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	000007ff 	.word	0x000007ff

08002134 <__ledf2>:
 8002134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002136:	4647      	mov	r7, r8
 8002138:	46ce      	mov	lr, r9
 800213a:	0004      	movs	r4, r0
 800213c:	0018      	movs	r0, r3
 800213e:	0016      	movs	r6, r2
 8002140:	031b      	lsls	r3, r3, #12
 8002142:	0b1b      	lsrs	r3, r3, #12
 8002144:	4d2c      	ldr	r5, [pc, #176]	; (80021f8 <__ledf2+0xc4>)
 8002146:	004a      	lsls	r2, r1, #1
 8002148:	4699      	mov	r9, r3
 800214a:	b580      	push	{r7, lr}
 800214c:	0043      	lsls	r3, r0, #1
 800214e:	030f      	lsls	r7, r1, #12
 8002150:	46a4      	mov	ip, r4
 8002152:	46b0      	mov	r8, r6
 8002154:	0b3f      	lsrs	r7, r7, #12
 8002156:	0d52      	lsrs	r2, r2, #21
 8002158:	0fc9      	lsrs	r1, r1, #31
 800215a:	0d5b      	lsrs	r3, r3, #21
 800215c:	0fc0      	lsrs	r0, r0, #31
 800215e:	42aa      	cmp	r2, r5
 8002160:	d00d      	beq.n	800217e <__ledf2+0x4a>
 8002162:	42ab      	cmp	r3, r5
 8002164:	d010      	beq.n	8002188 <__ledf2+0x54>
 8002166:	2a00      	cmp	r2, #0
 8002168:	d127      	bne.n	80021ba <__ledf2+0x86>
 800216a:	433c      	orrs	r4, r7
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <__ledf2+0x60>
 8002170:	464d      	mov	r5, r9
 8002172:	432e      	orrs	r6, r5
 8002174:	d10e      	bne.n	8002194 <__ledf2+0x60>
 8002176:	2000      	movs	r0, #0
 8002178:	2c00      	cmp	r4, #0
 800217a:	d015      	beq.n	80021a8 <__ledf2+0x74>
 800217c:	e00e      	b.n	800219c <__ledf2+0x68>
 800217e:	003d      	movs	r5, r7
 8002180:	4325      	orrs	r5, r4
 8002182:	d110      	bne.n	80021a6 <__ledf2+0x72>
 8002184:	4293      	cmp	r3, r2
 8002186:	d118      	bne.n	80021ba <__ledf2+0x86>
 8002188:	464d      	mov	r5, r9
 800218a:	432e      	orrs	r6, r5
 800218c:	d10b      	bne.n	80021a6 <__ledf2+0x72>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d102      	bne.n	8002198 <__ledf2+0x64>
 8002192:	433c      	orrs	r4, r7
 8002194:	2c00      	cmp	r4, #0
 8002196:	d00b      	beq.n	80021b0 <__ledf2+0x7c>
 8002198:	4281      	cmp	r1, r0
 800219a:	d014      	beq.n	80021c6 <__ledf2+0x92>
 800219c:	2002      	movs	r0, #2
 800219e:	3901      	subs	r1, #1
 80021a0:	4008      	ands	r0, r1
 80021a2:	3801      	subs	r0, #1
 80021a4:	e000      	b.n	80021a8 <__ledf2+0x74>
 80021a6:	2002      	movs	r0, #2
 80021a8:	bcc0      	pop	{r6, r7}
 80021aa:	46b9      	mov	r9, r7
 80021ac:	46b0      	mov	r8, r6
 80021ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d1f9      	bne.n	80021a8 <__ledf2+0x74>
 80021b4:	2001      	movs	r0, #1
 80021b6:	4240      	negs	r0, r0
 80021b8:	e7f6      	b.n	80021a8 <__ledf2+0x74>
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ec      	bne.n	8002198 <__ledf2+0x64>
 80021be:	464c      	mov	r4, r9
 80021c0:	4326      	orrs	r6, r4
 80021c2:	d1e9      	bne.n	8002198 <__ledf2+0x64>
 80021c4:	e7ea      	b.n	800219c <__ledf2+0x68>
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dd04      	ble.n	80021d4 <__ledf2+0xa0>
 80021ca:	4243      	negs	r3, r0
 80021cc:	4158      	adcs	r0, r3
 80021ce:	0040      	lsls	r0, r0, #1
 80021d0:	3801      	subs	r0, #1
 80021d2:	e7e9      	b.n	80021a8 <__ledf2+0x74>
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dbeb      	blt.n	80021b0 <__ledf2+0x7c>
 80021d8:	454f      	cmp	r7, r9
 80021da:	d8df      	bhi.n	800219c <__ledf2+0x68>
 80021dc:	d006      	beq.n	80021ec <__ledf2+0xb8>
 80021de:	2000      	movs	r0, #0
 80021e0:	454f      	cmp	r7, r9
 80021e2:	d2e1      	bcs.n	80021a8 <__ledf2+0x74>
 80021e4:	2900      	cmp	r1, #0
 80021e6:	d0e5      	beq.n	80021b4 <__ledf2+0x80>
 80021e8:	0008      	movs	r0, r1
 80021ea:	e7dd      	b.n	80021a8 <__ledf2+0x74>
 80021ec:	45c4      	cmp	ip, r8
 80021ee:	d8d5      	bhi.n	800219c <__ledf2+0x68>
 80021f0:	2000      	movs	r0, #0
 80021f2:	45c4      	cmp	ip, r8
 80021f4:	d2d8      	bcs.n	80021a8 <__ledf2+0x74>
 80021f6:	e7f5      	b.n	80021e4 <__ledf2+0xb0>
 80021f8:	000007ff 	.word	0x000007ff

080021fc <__aeabi_dmul>:
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	4657      	mov	r7, sl
 8002200:	464e      	mov	r6, r9
 8002202:	4645      	mov	r5, r8
 8002204:	46de      	mov	lr, fp
 8002206:	b5e0      	push	{r5, r6, r7, lr}
 8002208:	4698      	mov	r8, r3
 800220a:	030c      	lsls	r4, r1, #12
 800220c:	004b      	lsls	r3, r1, #1
 800220e:	0006      	movs	r6, r0
 8002210:	4692      	mov	sl, r2
 8002212:	b087      	sub	sp, #28
 8002214:	0b24      	lsrs	r4, r4, #12
 8002216:	0d5b      	lsrs	r3, r3, #21
 8002218:	0fcf      	lsrs	r7, r1, #31
 800221a:	2b00      	cmp	r3, #0
 800221c:	d100      	bne.n	8002220 <__aeabi_dmul+0x24>
 800221e:	e15c      	b.n	80024da <__aeabi_dmul+0x2de>
 8002220:	4ad9      	ldr	r2, [pc, #868]	; (8002588 <__aeabi_dmul+0x38c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d100      	bne.n	8002228 <__aeabi_dmul+0x2c>
 8002226:	e175      	b.n	8002514 <__aeabi_dmul+0x318>
 8002228:	0f42      	lsrs	r2, r0, #29
 800222a:	00e4      	lsls	r4, r4, #3
 800222c:	4314      	orrs	r4, r2
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	0412      	lsls	r2, r2, #16
 8002232:	4314      	orrs	r4, r2
 8002234:	4ad5      	ldr	r2, [pc, #852]	; (800258c <__aeabi_dmul+0x390>)
 8002236:	00c5      	lsls	r5, r0, #3
 8002238:	4694      	mov	ip, r2
 800223a:	4463      	add	r3, ip
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	4699      	mov	r9, r3
 8002242:	469b      	mov	fp, r3
 8002244:	4643      	mov	r3, r8
 8002246:	4642      	mov	r2, r8
 8002248:	031e      	lsls	r6, r3, #12
 800224a:	0fd2      	lsrs	r2, r2, #31
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4650      	mov	r0, sl
 8002250:	4690      	mov	r8, r2
 8002252:	0b36      	lsrs	r6, r6, #12
 8002254:	0d5b      	lsrs	r3, r3, #21
 8002256:	d100      	bne.n	800225a <__aeabi_dmul+0x5e>
 8002258:	e120      	b.n	800249c <__aeabi_dmul+0x2a0>
 800225a:	4acb      	ldr	r2, [pc, #812]	; (8002588 <__aeabi_dmul+0x38c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d100      	bne.n	8002262 <__aeabi_dmul+0x66>
 8002260:	e162      	b.n	8002528 <__aeabi_dmul+0x32c>
 8002262:	49ca      	ldr	r1, [pc, #808]	; (800258c <__aeabi_dmul+0x390>)
 8002264:	0f42      	lsrs	r2, r0, #29
 8002266:	468c      	mov	ip, r1
 8002268:	9900      	ldr	r1, [sp, #0]
 800226a:	4463      	add	r3, ip
 800226c:	00f6      	lsls	r6, r6, #3
 800226e:	468c      	mov	ip, r1
 8002270:	4316      	orrs	r6, r2
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	449c      	add	ip, r3
 8002276:	0412      	lsls	r2, r2, #16
 8002278:	4663      	mov	r3, ip
 800227a:	4316      	orrs	r6, r2
 800227c:	00c2      	lsls	r2, r0, #3
 800227e:	2000      	movs	r0, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	9900      	ldr	r1, [sp, #0]
 8002284:	4643      	mov	r3, r8
 8002286:	3101      	adds	r1, #1
 8002288:	468c      	mov	ip, r1
 800228a:	4649      	mov	r1, r9
 800228c:	407b      	eors	r3, r7
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	290f      	cmp	r1, #15
 8002292:	d826      	bhi.n	80022e2 <__aeabi_dmul+0xe6>
 8002294:	4bbe      	ldr	r3, [pc, #760]	; (8002590 <__aeabi_dmul+0x394>)
 8002296:	0089      	lsls	r1, r1, #2
 8002298:	5859      	ldr	r1, [r3, r1]
 800229a:	468f      	mov	pc, r1
 800229c:	4643      	mov	r3, r8
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	0034      	movs	r4, r6
 80022a2:	0015      	movs	r5, r2
 80022a4:	4683      	mov	fp, r0
 80022a6:	465b      	mov	r3, fp
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d016      	beq.n	80022da <__aeabi_dmul+0xde>
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d100      	bne.n	80022b2 <__aeabi_dmul+0xb6>
 80022b0:	e203      	b.n	80026ba <__aeabi_dmul+0x4be>
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d000      	beq.n	80022b8 <__aeabi_dmul+0xbc>
 80022b6:	e0cd      	b.n	8002454 <__aeabi_dmul+0x258>
 80022b8:	2200      	movs	r2, #0
 80022ba:	2400      	movs	r4, #0
 80022bc:	2500      	movs	r5, #0
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	0512      	lsls	r2, r2, #20
 80022c2:	4322      	orrs	r2, r4
 80022c4:	07db      	lsls	r3, r3, #31
 80022c6:	431a      	orrs	r2, r3
 80022c8:	0028      	movs	r0, r5
 80022ca:	0011      	movs	r1, r2
 80022cc:	b007      	add	sp, #28
 80022ce:	bcf0      	pop	{r4, r5, r6, r7}
 80022d0:	46bb      	mov	fp, r7
 80022d2:	46b2      	mov	sl, r6
 80022d4:	46a9      	mov	r9, r5
 80022d6:	46a0      	mov	r8, r4
 80022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022da:	2400      	movs	r4, #0
 80022dc:	2500      	movs	r5, #0
 80022de:	4aaa      	ldr	r2, [pc, #680]	; (8002588 <__aeabi_dmul+0x38c>)
 80022e0:	e7ed      	b.n	80022be <__aeabi_dmul+0xc2>
 80022e2:	0c28      	lsrs	r0, r5, #16
 80022e4:	042d      	lsls	r5, r5, #16
 80022e6:	0c2d      	lsrs	r5, r5, #16
 80022e8:	002b      	movs	r3, r5
 80022ea:	0c11      	lsrs	r1, r2, #16
 80022ec:	0412      	lsls	r2, r2, #16
 80022ee:	0c12      	lsrs	r2, r2, #16
 80022f0:	4353      	muls	r3, r2
 80022f2:	4698      	mov	r8, r3
 80022f4:	0013      	movs	r3, r2
 80022f6:	002f      	movs	r7, r5
 80022f8:	4343      	muls	r3, r0
 80022fa:	4699      	mov	r9, r3
 80022fc:	434f      	muls	r7, r1
 80022fe:	444f      	add	r7, r9
 8002300:	46bb      	mov	fp, r7
 8002302:	4647      	mov	r7, r8
 8002304:	000b      	movs	r3, r1
 8002306:	0c3f      	lsrs	r7, r7, #16
 8002308:	46ba      	mov	sl, r7
 800230a:	4343      	muls	r3, r0
 800230c:	44da      	add	sl, fp
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	45d1      	cmp	r9, sl
 8002312:	d904      	bls.n	800231e <__aeabi_dmul+0x122>
 8002314:	2780      	movs	r7, #128	; 0x80
 8002316:	027f      	lsls	r7, r7, #9
 8002318:	46b9      	mov	r9, r7
 800231a:	444b      	add	r3, r9
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	4653      	mov	r3, sl
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	469b      	mov	fp, r3
 8002324:	4653      	mov	r3, sl
 8002326:	041f      	lsls	r7, r3, #16
 8002328:	4643      	mov	r3, r8
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	4698      	mov	r8, r3
 8002330:	003b      	movs	r3, r7
 8002332:	4443      	add	r3, r8
 8002334:	9304      	str	r3, [sp, #16]
 8002336:	0c33      	lsrs	r3, r6, #16
 8002338:	0436      	lsls	r6, r6, #16
 800233a:	0c36      	lsrs	r6, r6, #16
 800233c:	4698      	mov	r8, r3
 800233e:	0033      	movs	r3, r6
 8002340:	4343      	muls	r3, r0
 8002342:	4699      	mov	r9, r3
 8002344:	4643      	mov	r3, r8
 8002346:	4343      	muls	r3, r0
 8002348:	002f      	movs	r7, r5
 800234a:	469a      	mov	sl, r3
 800234c:	4643      	mov	r3, r8
 800234e:	4377      	muls	r7, r6
 8002350:	435d      	muls	r5, r3
 8002352:	0c38      	lsrs	r0, r7, #16
 8002354:	444d      	add	r5, r9
 8002356:	1945      	adds	r5, r0, r5
 8002358:	45a9      	cmp	r9, r5
 800235a:	d903      	bls.n	8002364 <__aeabi_dmul+0x168>
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	4699      	mov	r9, r3
 8002362:	44ca      	add	sl, r9
 8002364:	043f      	lsls	r7, r7, #16
 8002366:	0c28      	lsrs	r0, r5, #16
 8002368:	0c3f      	lsrs	r7, r7, #16
 800236a:	042d      	lsls	r5, r5, #16
 800236c:	19ed      	adds	r5, r5, r7
 800236e:	0c27      	lsrs	r7, r4, #16
 8002370:	0424      	lsls	r4, r4, #16
 8002372:	0c24      	lsrs	r4, r4, #16
 8002374:	0003      	movs	r3, r0
 8002376:	0020      	movs	r0, r4
 8002378:	4350      	muls	r0, r2
 800237a:	437a      	muls	r2, r7
 800237c:	4691      	mov	r9, r2
 800237e:	003a      	movs	r2, r7
 8002380:	4453      	add	r3, sl
 8002382:	9305      	str	r3, [sp, #20]
 8002384:	0c03      	lsrs	r3, r0, #16
 8002386:	469a      	mov	sl, r3
 8002388:	434a      	muls	r2, r1
 800238a:	4361      	muls	r1, r4
 800238c:	4449      	add	r1, r9
 800238e:	4451      	add	r1, sl
 8002390:	44ab      	add	fp, r5
 8002392:	4589      	cmp	r9, r1
 8002394:	d903      	bls.n	800239e <__aeabi_dmul+0x1a2>
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	025b      	lsls	r3, r3, #9
 800239a:	4699      	mov	r9, r3
 800239c:	444a      	add	r2, r9
 800239e:	0400      	lsls	r0, r0, #16
 80023a0:	0c0b      	lsrs	r3, r1, #16
 80023a2:	0c00      	lsrs	r0, r0, #16
 80023a4:	0409      	lsls	r1, r1, #16
 80023a6:	1809      	adds	r1, r1, r0
 80023a8:	0020      	movs	r0, r4
 80023aa:	4699      	mov	r9, r3
 80023ac:	4643      	mov	r3, r8
 80023ae:	4370      	muls	r0, r6
 80023b0:	435c      	muls	r4, r3
 80023b2:	437e      	muls	r6, r7
 80023b4:	435f      	muls	r7, r3
 80023b6:	0c03      	lsrs	r3, r0, #16
 80023b8:	4698      	mov	r8, r3
 80023ba:	19a4      	adds	r4, r4, r6
 80023bc:	4444      	add	r4, r8
 80023be:	444a      	add	r2, r9
 80023c0:	9703      	str	r7, [sp, #12]
 80023c2:	42a6      	cmp	r6, r4
 80023c4:	d904      	bls.n	80023d0 <__aeabi_dmul+0x1d4>
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	025b      	lsls	r3, r3, #9
 80023ca:	4698      	mov	r8, r3
 80023cc:	4447      	add	r7, r8
 80023ce:	9703      	str	r7, [sp, #12]
 80023d0:	0423      	lsls	r3, r4, #16
 80023d2:	9e02      	ldr	r6, [sp, #8]
 80023d4:	469a      	mov	sl, r3
 80023d6:	9b05      	ldr	r3, [sp, #20]
 80023d8:	445e      	add	r6, fp
 80023da:	4698      	mov	r8, r3
 80023dc:	42ae      	cmp	r6, r5
 80023de:	41ad      	sbcs	r5, r5
 80023e0:	1876      	adds	r6, r6, r1
 80023e2:	428e      	cmp	r6, r1
 80023e4:	4189      	sbcs	r1, r1
 80023e6:	0400      	lsls	r0, r0, #16
 80023e8:	0c00      	lsrs	r0, r0, #16
 80023ea:	4450      	add	r0, sl
 80023ec:	4440      	add	r0, r8
 80023ee:	426d      	negs	r5, r5
 80023f0:	1947      	adds	r7, r0, r5
 80023f2:	46b8      	mov	r8, r7
 80023f4:	4693      	mov	fp, r2
 80023f6:	4249      	negs	r1, r1
 80023f8:	4689      	mov	r9, r1
 80023fa:	44c3      	add	fp, r8
 80023fc:	44d9      	add	r9, fp
 80023fe:	4298      	cmp	r0, r3
 8002400:	4180      	sbcs	r0, r0
 8002402:	45a8      	cmp	r8, r5
 8002404:	41ad      	sbcs	r5, r5
 8002406:	4593      	cmp	fp, r2
 8002408:	4192      	sbcs	r2, r2
 800240a:	4589      	cmp	r9, r1
 800240c:	4189      	sbcs	r1, r1
 800240e:	426d      	negs	r5, r5
 8002410:	4240      	negs	r0, r0
 8002412:	4328      	orrs	r0, r5
 8002414:	0c24      	lsrs	r4, r4, #16
 8002416:	4252      	negs	r2, r2
 8002418:	4249      	negs	r1, r1
 800241a:	430a      	orrs	r2, r1
 800241c:	9b03      	ldr	r3, [sp, #12]
 800241e:	1900      	adds	r0, r0, r4
 8002420:	1880      	adds	r0, r0, r2
 8002422:	18c7      	adds	r7, r0, r3
 8002424:	464b      	mov	r3, r9
 8002426:	0ddc      	lsrs	r4, r3, #23
 8002428:	9b04      	ldr	r3, [sp, #16]
 800242a:	0275      	lsls	r5, r6, #9
 800242c:	431d      	orrs	r5, r3
 800242e:	1e6a      	subs	r2, r5, #1
 8002430:	4195      	sbcs	r5, r2
 8002432:	464b      	mov	r3, r9
 8002434:	0df6      	lsrs	r6, r6, #23
 8002436:	027f      	lsls	r7, r7, #9
 8002438:	4335      	orrs	r5, r6
 800243a:	025a      	lsls	r2, r3, #9
 800243c:	433c      	orrs	r4, r7
 800243e:	4315      	orrs	r5, r2
 8002440:	01fb      	lsls	r3, r7, #7
 8002442:	d400      	bmi.n	8002446 <__aeabi_dmul+0x24a>
 8002444:	e11c      	b.n	8002680 <__aeabi_dmul+0x484>
 8002446:	2101      	movs	r1, #1
 8002448:	086a      	lsrs	r2, r5, #1
 800244a:	400d      	ands	r5, r1
 800244c:	4315      	orrs	r5, r2
 800244e:	07e2      	lsls	r2, r4, #31
 8002450:	4315      	orrs	r5, r2
 8002452:	0864      	lsrs	r4, r4, #1
 8002454:	494f      	ldr	r1, [pc, #316]	; (8002594 <__aeabi_dmul+0x398>)
 8002456:	4461      	add	r1, ip
 8002458:	2900      	cmp	r1, #0
 800245a:	dc00      	bgt.n	800245e <__aeabi_dmul+0x262>
 800245c:	e0b0      	b.n	80025c0 <__aeabi_dmul+0x3c4>
 800245e:	076b      	lsls	r3, r5, #29
 8002460:	d009      	beq.n	8002476 <__aeabi_dmul+0x27a>
 8002462:	220f      	movs	r2, #15
 8002464:	402a      	ands	r2, r5
 8002466:	2a04      	cmp	r2, #4
 8002468:	d005      	beq.n	8002476 <__aeabi_dmul+0x27a>
 800246a:	1d2a      	adds	r2, r5, #4
 800246c:	42aa      	cmp	r2, r5
 800246e:	41ad      	sbcs	r5, r5
 8002470:	426d      	negs	r5, r5
 8002472:	1964      	adds	r4, r4, r5
 8002474:	0015      	movs	r5, r2
 8002476:	01e3      	lsls	r3, r4, #7
 8002478:	d504      	bpl.n	8002484 <__aeabi_dmul+0x288>
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	4a46      	ldr	r2, [pc, #280]	; (8002598 <__aeabi_dmul+0x39c>)
 800247e:	00c9      	lsls	r1, r1, #3
 8002480:	4014      	ands	r4, r2
 8002482:	4461      	add	r1, ip
 8002484:	4a45      	ldr	r2, [pc, #276]	; (800259c <__aeabi_dmul+0x3a0>)
 8002486:	4291      	cmp	r1, r2
 8002488:	dd00      	ble.n	800248c <__aeabi_dmul+0x290>
 800248a:	e726      	b.n	80022da <__aeabi_dmul+0xde>
 800248c:	0762      	lsls	r2, r4, #29
 800248e:	08ed      	lsrs	r5, r5, #3
 8002490:	0264      	lsls	r4, r4, #9
 8002492:	0549      	lsls	r1, r1, #21
 8002494:	4315      	orrs	r5, r2
 8002496:	0b24      	lsrs	r4, r4, #12
 8002498:	0d4a      	lsrs	r2, r1, #21
 800249a:	e710      	b.n	80022be <__aeabi_dmul+0xc2>
 800249c:	4652      	mov	r2, sl
 800249e:	4332      	orrs	r2, r6
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dmul+0x2a8>
 80024a2:	e07f      	b.n	80025a4 <__aeabi_dmul+0x3a8>
 80024a4:	2e00      	cmp	r6, #0
 80024a6:	d100      	bne.n	80024aa <__aeabi_dmul+0x2ae>
 80024a8:	e0dc      	b.n	8002664 <__aeabi_dmul+0x468>
 80024aa:	0030      	movs	r0, r6
 80024ac:	f000 fe58 	bl	8003160 <__clzsi2>
 80024b0:	0002      	movs	r2, r0
 80024b2:	3a0b      	subs	r2, #11
 80024b4:	231d      	movs	r3, #29
 80024b6:	0001      	movs	r1, r0
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	4652      	mov	r2, sl
 80024bc:	3908      	subs	r1, #8
 80024be:	40da      	lsrs	r2, r3
 80024c0:	408e      	lsls	r6, r1
 80024c2:	4316      	orrs	r6, r2
 80024c4:	4652      	mov	r2, sl
 80024c6:	408a      	lsls	r2, r1
 80024c8:	9b00      	ldr	r3, [sp, #0]
 80024ca:	4935      	ldr	r1, [pc, #212]	; (80025a0 <__aeabi_dmul+0x3a4>)
 80024cc:	1a18      	subs	r0, r3, r0
 80024ce:	0003      	movs	r3, r0
 80024d0:	468c      	mov	ip, r1
 80024d2:	4463      	add	r3, ip
 80024d4:	2000      	movs	r0, #0
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	e6d3      	b.n	8002282 <__aeabi_dmul+0x86>
 80024da:	0025      	movs	r5, r4
 80024dc:	4305      	orrs	r5, r0
 80024de:	d04a      	beq.n	8002576 <__aeabi_dmul+0x37a>
 80024e0:	2c00      	cmp	r4, #0
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dmul+0x2ea>
 80024e4:	e0b0      	b.n	8002648 <__aeabi_dmul+0x44c>
 80024e6:	0020      	movs	r0, r4
 80024e8:	f000 fe3a 	bl	8003160 <__clzsi2>
 80024ec:	0001      	movs	r1, r0
 80024ee:	0002      	movs	r2, r0
 80024f0:	390b      	subs	r1, #11
 80024f2:	231d      	movs	r3, #29
 80024f4:	0010      	movs	r0, r2
 80024f6:	1a5b      	subs	r3, r3, r1
 80024f8:	0031      	movs	r1, r6
 80024fa:	0035      	movs	r5, r6
 80024fc:	3808      	subs	r0, #8
 80024fe:	4084      	lsls	r4, r0
 8002500:	40d9      	lsrs	r1, r3
 8002502:	4085      	lsls	r5, r0
 8002504:	430c      	orrs	r4, r1
 8002506:	4826      	ldr	r0, [pc, #152]	; (80025a0 <__aeabi_dmul+0x3a4>)
 8002508:	1a83      	subs	r3, r0, r2
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2300      	movs	r3, #0
 800250e:	4699      	mov	r9, r3
 8002510:	469b      	mov	fp, r3
 8002512:	e697      	b.n	8002244 <__aeabi_dmul+0x48>
 8002514:	0005      	movs	r5, r0
 8002516:	4325      	orrs	r5, r4
 8002518:	d126      	bne.n	8002568 <__aeabi_dmul+0x36c>
 800251a:	2208      	movs	r2, #8
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2302      	movs	r3, #2
 8002520:	2400      	movs	r4, #0
 8002522:	4691      	mov	r9, r2
 8002524:	469b      	mov	fp, r3
 8002526:	e68d      	b.n	8002244 <__aeabi_dmul+0x48>
 8002528:	4652      	mov	r2, sl
 800252a:	9b00      	ldr	r3, [sp, #0]
 800252c:	4332      	orrs	r2, r6
 800252e:	d110      	bne.n	8002552 <__aeabi_dmul+0x356>
 8002530:	4915      	ldr	r1, [pc, #84]	; (8002588 <__aeabi_dmul+0x38c>)
 8002532:	2600      	movs	r6, #0
 8002534:	468c      	mov	ip, r1
 8002536:	4463      	add	r3, ip
 8002538:	4649      	mov	r1, r9
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2302      	movs	r3, #2
 800253e:	4319      	orrs	r1, r3
 8002540:	4689      	mov	r9, r1
 8002542:	2002      	movs	r0, #2
 8002544:	e69d      	b.n	8002282 <__aeabi_dmul+0x86>
 8002546:	465b      	mov	r3, fp
 8002548:	9701      	str	r7, [sp, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d000      	beq.n	8002550 <__aeabi_dmul+0x354>
 800254e:	e6ad      	b.n	80022ac <__aeabi_dmul+0xb0>
 8002550:	e6c3      	b.n	80022da <__aeabi_dmul+0xde>
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <__aeabi_dmul+0x38c>)
 8002554:	2003      	movs	r0, #3
 8002556:	4694      	mov	ip, r2
 8002558:	4463      	add	r3, ip
 800255a:	464a      	mov	r2, r9
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2303      	movs	r3, #3
 8002560:	431a      	orrs	r2, r3
 8002562:	4691      	mov	r9, r2
 8002564:	4652      	mov	r2, sl
 8002566:	e68c      	b.n	8002282 <__aeabi_dmul+0x86>
 8002568:	220c      	movs	r2, #12
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2303      	movs	r3, #3
 800256e:	0005      	movs	r5, r0
 8002570:	4691      	mov	r9, r2
 8002572:	469b      	mov	fp, r3
 8002574:	e666      	b.n	8002244 <__aeabi_dmul+0x48>
 8002576:	2304      	movs	r3, #4
 8002578:	4699      	mov	r9, r3
 800257a:	2300      	movs	r3, #0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	2400      	movs	r4, #0
 8002582:	469b      	mov	fp, r3
 8002584:	e65e      	b.n	8002244 <__aeabi_dmul+0x48>
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	000007ff 	.word	0x000007ff
 800258c:	fffffc01 	.word	0xfffffc01
 8002590:	0800e1b0 	.word	0x0800e1b0
 8002594:	000003ff 	.word	0x000003ff
 8002598:	feffffff 	.word	0xfeffffff
 800259c:	000007fe 	.word	0x000007fe
 80025a0:	fffffc0d 	.word	0xfffffc0d
 80025a4:	4649      	mov	r1, r9
 80025a6:	2301      	movs	r3, #1
 80025a8:	4319      	orrs	r1, r3
 80025aa:	4689      	mov	r9, r1
 80025ac:	2600      	movs	r6, #0
 80025ae:	2001      	movs	r0, #1
 80025b0:	e667      	b.n	8002282 <__aeabi_dmul+0x86>
 80025b2:	2300      	movs	r3, #0
 80025b4:	2480      	movs	r4, #128	; 0x80
 80025b6:	2500      	movs	r5, #0
 80025b8:	4a43      	ldr	r2, [pc, #268]	; (80026c8 <__aeabi_dmul+0x4cc>)
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	0324      	lsls	r4, r4, #12
 80025be:	e67e      	b.n	80022be <__aeabi_dmul+0xc2>
 80025c0:	2001      	movs	r0, #1
 80025c2:	1a40      	subs	r0, r0, r1
 80025c4:	2838      	cmp	r0, #56	; 0x38
 80025c6:	dd00      	ble.n	80025ca <__aeabi_dmul+0x3ce>
 80025c8:	e676      	b.n	80022b8 <__aeabi_dmul+0xbc>
 80025ca:	281f      	cmp	r0, #31
 80025cc:	dd5b      	ble.n	8002686 <__aeabi_dmul+0x48a>
 80025ce:	221f      	movs	r2, #31
 80025d0:	0023      	movs	r3, r4
 80025d2:	4252      	negs	r2, r2
 80025d4:	1a51      	subs	r1, r2, r1
 80025d6:	40cb      	lsrs	r3, r1
 80025d8:	0019      	movs	r1, r3
 80025da:	2820      	cmp	r0, #32
 80025dc:	d003      	beq.n	80025e6 <__aeabi_dmul+0x3ea>
 80025de:	4a3b      	ldr	r2, [pc, #236]	; (80026cc <__aeabi_dmul+0x4d0>)
 80025e0:	4462      	add	r2, ip
 80025e2:	4094      	lsls	r4, r2
 80025e4:	4325      	orrs	r5, r4
 80025e6:	1e6a      	subs	r2, r5, #1
 80025e8:	4195      	sbcs	r5, r2
 80025ea:	002a      	movs	r2, r5
 80025ec:	430a      	orrs	r2, r1
 80025ee:	2107      	movs	r1, #7
 80025f0:	000d      	movs	r5, r1
 80025f2:	2400      	movs	r4, #0
 80025f4:	4015      	ands	r5, r2
 80025f6:	4211      	tst	r1, r2
 80025f8:	d05b      	beq.n	80026b2 <__aeabi_dmul+0x4b6>
 80025fa:	210f      	movs	r1, #15
 80025fc:	2400      	movs	r4, #0
 80025fe:	4011      	ands	r1, r2
 8002600:	2904      	cmp	r1, #4
 8002602:	d053      	beq.n	80026ac <__aeabi_dmul+0x4b0>
 8002604:	1d11      	adds	r1, r2, #4
 8002606:	4291      	cmp	r1, r2
 8002608:	4192      	sbcs	r2, r2
 800260a:	4252      	negs	r2, r2
 800260c:	18a4      	adds	r4, r4, r2
 800260e:	000a      	movs	r2, r1
 8002610:	0223      	lsls	r3, r4, #8
 8002612:	d54b      	bpl.n	80026ac <__aeabi_dmul+0x4b0>
 8002614:	2201      	movs	r2, #1
 8002616:	2400      	movs	r4, #0
 8002618:	2500      	movs	r5, #0
 800261a:	e650      	b.n	80022be <__aeabi_dmul+0xc2>
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	031b      	lsls	r3, r3, #12
 8002620:	421c      	tst	r4, r3
 8002622:	d009      	beq.n	8002638 <__aeabi_dmul+0x43c>
 8002624:	421e      	tst	r6, r3
 8002626:	d107      	bne.n	8002638 <__aeabi_dmul+0x43c>
 8002628:	4333      	orrs	r3, r6
 800262a:	031c      	lsls	r4, r3, #12
 800262c:	4643      	mov	r3, r8
 800262e:	0015      	movs	r5, r2
 8002630:	0b24      	lsrs	r4, r4, #12
 8002632:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <__aeabi_dmul+0x4cc>)
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	e642      	b.n	80022be <__aeabi_dmul+0xc2>
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	0312      	lsls	r2, r2, #12
 800263c:	4314      	orrs	r4, r2
 800263e:	0324      	lsls	r4, r4, #12
 8002640:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <__aeabi_dmul+0x4cc>)
 8002642:	0b24      	lsrs	r4, r4, #12
 8002644:	9701      	str	r7, [sp, #4]
 8002646:	e63a      	b.n	80022be <__aeabi_dmul+0xc2>
 8002648:	f000 fd8a 	bl	8003160 <__clzsi2>
 800264c:	0001      	movs	r1, r0
 800264e:	0002      	movs	r2, r0
 8002650:	3115      	adds	r1, #21
 8002652:	3220      	adds	r2, #32
 8002654:	291c      	cmp	r1, #28
 8002656:	dc00      	bgt.n	800265a <__aeabi_dmul+0x45e>
 8002658:	e74b      	b.n	80024f2 <__aeabi_dmul+0x2f6>
 800265a:	0034      	movs	r4, r6
 800265c:	3808      	subs	r0, #8
 800265e:	2500      	movs	r5, #0
 8002660:	4084      	lsls	r4, r0
 8002662:	e750      	b.n	8002506 <__aeabi_dmul+0x30a>
 8002664:	f000 fd7c 	bl	8003160 <__clzsi2>
 8002668:	0003      	movs	r3, r0
 800266a:	001a      	movs	r2, r3
 800266c:	3215      	adds	r2, #21
 800266e:	3020      	adds	r0, #32
 8002670:	2a1c      	cmp	r2, #28
 8002672:	dc00      	bgt.n	8002676 <__aeabi_dmul+0x47a>
 8002674:	e71e      	b.n	80024b4 <__aeabi_dmul+0x2b8>
 8002676:	4656      	mov	r6, sl
 8002678:	3b08      	subs	r3, #8
 800267a:	2200      	movs	r2, #0
 800267c:	409e      	lsls	r6, r3
 800267e:	e723      	b.n	80024c8 <__aeabi_dmul+0x2cc>
 8002680:	9b00      	ldr	r3, [sp, #0]
 8002682:	469c      	mov	ip, r3
 8002684:	e6e6      	b.n	8002454 <__aeabi_dmul+0x258>
 8002686:	4912      	ldr	r1, [pc, #72]	; (80026d0 <__aeabi_dmul+0x4d4>)
 8002688:	0022      	movs	r2, r4
 800268a:	4461      	add	r1, ip
 800268c:	002e      	movs	r6, r5
 800268e:	408d      	lsls	r5, r1
 8002690:	408a      	lsls	r2, r1
 8002692:	40c6      	lsrs	r6, r0
 8002694:	1e69      	subs	r1, r5, #1
 8002696:	418d      	sbcs	r5, r1
 8002698:	4332      	orrs	r2, r6
 800269a:	432a      	orrs	r2, r5
 800269c:	40c4      	lsrs	r4, r0
 800269e:	0753      	lsls	r3, r2, #29
 80026a0:	d0b6      	beq.n	8002610 <__aeabi_dmul+0x414>
 80026a2:	210f      	movs	r1, #15
 80026a4:	4011      	ands	r1, r2
 80026a6:	2904      	cmp	r1, #4
 80026a8:	d1ac      	bne.n	8002604 <__aeabi_dmul+0x408>
 80026aa:	e7b1      	b.n	8002610 <__aeabi_dmul+0x414>
 80026ac:	0765      	lsls	r5, r4, #29
 80026ae:	0264      	lsls	r4, r4, #9
 80026b0:	0b24      	lsrs	r4, r4, #12
 80026b2:	08d2      	lsrs	r2, r2, #3
 80026b4:	4315      	orrs	r5, r2
 80026b6:	2200      	movs	r2, #0
 80026b8:	e601      	b.n	80022be <__aeabi_dmul+0xc2>
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	0312      	lsls	r2, r2, #12
 80026be:	4314      	orrs	r4, r2
 80026c0:	0324      	lsls	r4, r4, #12
 80026c2:	4a01      	ldr	r2, [pc, #4]	; (80026c8 <__aeabi_dmul+0x4cc>)
 80026c4:	0b24      	lsrs	r4, r4, #12
 80026c6:	e5fa      	b.n	80022be <__aeabi_dmul+0xc2>
 80026c8:	000007ff 	.word	0x000007ff
 80026cc:	0000043e 	.word	0x0000043e
 80026d0:	0000041e 	.word	0x0000041e

080026d4 <__aeabi_dsub>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	4657      	mov	r7, sl
 80026d8:	464e      	mov	r6, r9
 80026da:	4645      	mov	r5, r8
 80026dc:	46de      	mov	lr, fp
 80026de:	b5e0      	push	{r5, r6, r7, lr}
 80026e0:	001e      	movs	r6, r3
 80026e2:	0017      	movs	r7, r2
 80026e4:	004a      	lsls	r2, r1, #1
 80026e6:	030b      	lsls	r3, r1, #12
 80026e8:	0d52      	lsrs	r2, r2, #21
 80026ea:	0a5b      	lsrs	r3, r3, #9
 80026ec:	4690      	mov	r8, r2
 80026ee:	0f42      	lsrs	r2, r0, #29
 80026f0:	431a      	orrs	r2, r3
 80026f2:	0fcd      	lsrs	r5, r1, #31
 80026f4:	4ccd      	ldr	r4, [pc, #820]	; (8002a2c <__aeabi_dsub+0x358>)
 80026f6:	0331      	lsls	r1, r6, #12
 80026f8:	00c3      	lsls	r3, r0, #3
 80026fa:	4694      	mov	ip, r2
 80026fc:	0070      	lsls	r0, r6, #1
 80026fe:	0f7a      	lsrs	r2, r7, #29
 8002700:	0a49      	lsrs	r1, r1, #9
 8002702:	00ff      	lsls	r7, r7, #3
 8002704:	469a      	mov	sl, r3
 8002706:	46b9      	mov	r9, r7
 8002708:	0d40      	lsrs	r0, r0, #21
 800270a:	0ff6      	lsrs	r6, r6, #31
 800270c:	4311      	orrs	r1, r2
 800270e:	42a0      	cmp	r0, r4
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x40>
 8002712:	e0b1      	b.n	8002878 <__aeabi_dsub+0x1a4>
 8002714:	2201      	movs	r2, #1
 8002716:	4056      	eors	r6, r2
 8002718:	46b3      	mov	fp, r6
 800271a:	42b5      	cmp	r5, r6
 800271c:	d100      	bne.n	8002720 <__aeabi_dsub+0x4c>
 800271e:	e088      	b.n	8002832 <__aeabi_dsub+0x15e>
 8002720:	4642      	mov	r2, r8
 8002722:	1a12      	subs	r2, r2, r0
 8002724:	2a00      	cmp	r2, #0
 8002726:	dc00      	bgt.n	800272a <__aeabi_dsub+0x56>
 8002728:	e0ae      	b.n	8002888 <__aeabi_dsub+0x1b4>
 800272a:	2800      	cmp	r0, #0
 800272c:	d100      	bne.n	8002730 <__aeabi_dsub+0x5c>
 800272e:	e0c1      	b.n	80028b4 <__aeabi_dsub+0x1e0>
 8002730:	48be      	ldr	r0, [pc, #760]	; (8002a2c <__aeabi_dsub+0x358>)
 8002732:	4580      	cmp	r8, r0
 8002734:	d100      	bne.n	8002738 <__aeabi_dsub+0x64>
 8002736:	e151      	b.n	80029dc <__aeabi_dsub+0x308>
 8002738:	2080      	movs	r0, #128	; 0x80
 800273a:	0400      	lsls	r0, r0, #16
 800273c:	4301      	orrs	r1, r0
 800273e:	2a38      	cmp	r2, #56	; 0x38
 8002740:	dd00      	ble.n	8002744 <__aeabi_dsub+0x70>
 8002742:	e17b      	b.n	8002a3c <__aeabi_dsub+0x368>
 8002744:	2a1f      	cmp	r2, #31
 8002746:	dd00      	ble.n	800274a <__aeabi_dsub+0x76>
 8002748:	e1ee      	b.n	8002b28 <__aeabi_dsub+0x454>
 800274a:	2020      	movs	r0, #32
 800274c:	003e      	movs	r6, r7
 800274e:	1a80      	subs	r0, r0, r2
 8002750:	000c      	movs	r4, r1
 8002752:	40d6      	lsrs	r6, r2
 8002754:	40d1      	lsrs	r1, r2
 8002756:	4087      	lsls	r7, r0
 8002758:	4662      	mov	r2, ip
 800275a:	4084      	lsls	r4, r0
 800275c:	1a52      	subs	r2, r2, r1
 800275e:	1e78      	subs	r0, r7, #1
 8002760:	4187      	sbcs	r7, r0
 8002762:	4694      	mov	ip, r2
 8002764:	4334      	orrs	r4, r6
 8002766:	4327      	orrs	r7, r4
 8002768:	1bdc      	subs	r4, r3, r7
 800276a:	42a3      	cmp	r3, r4
 800276c:	419b      	sbcs	r3, r3
 800276e:	4662      	mov	r2, ip
 8002770:	425b      	negs	r3, r3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	4699      	mov	r9, r3
 8002776:	464b      	mov	r3, r9
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	d400      	bmi.n	800277e <__aeabi_dsub+0xaa>
 800277c:	e118      	b.n	80029b0 <__aeabi_dsub+0x2dc>
 800277e:	464b      	mov	r3, r9
 8002780:	0258      	lsls	r0, r3, #9
 8002782:	0a43      	lsrs	r3, r0, #9
 8002784:	4699      	mov	r9, r3
 8002786:	464b      	mov	r3, r9
 8002788:	2b00      	cmp	r3, #0
 800278a:	d100      	bne.n	800278e <__aeabi_dsub+0xba>
 800278c:	e137      	b.n	80029fe <__aeabi_dsub+0x32a>
 800278e:	4648      	mov	r0, r9
 8002790:	f000 fce6 	bl	8003160 <__clzsi2>
 8002794:	0001      	movs	r1, r0
 8002796:	3908      	subs	r1, #8
 8002798:	2320      	movs	r3, #32
 800279a:	0022      	movs	r2, r4
 800279c:	4648      	mov	r0, r9
 800279e:	1a5b      	subs	r3, r3, r1
 80027a0:	40da      	lsrs	r2, r3
 80027a2:	4088      	lsls	r0, r1
 80027a4:	408c      	lsls	r4, r1
 80027a6:	4643      	mov	r3, r8
 80027a8:	4310      	orrs	r0, r2
 80027aa:	4588      	cmp	r8, r1
 80027ac:	dd00      	ble.n	80027b0 <__aeabi_dsub+0xdc>
 80027ae:	e136      	b.n	8002a1e <__aeabi_dsub+0x34a>
 80027b0:	1ac9      	subs	r1, r1, r3
 80027b2:	1c4b      	adds	r3, r1, #1
 80027b4:	2b1f      	cmp	r3, #31
 80027b6:	dd00      	ble.n	80027ba <__aeabi_dsub+0xe6>
 80027b8:	e0ea      	b.n	8002990 <__aeabi_dsub+0x2bc>
 80027ba:	2220      	movs	r2, #32
 80027bc:	0026      	movs	r6, r4
 80027be:	1ad2      	subs	r2, r2, r3
 80027c0:	0001      	movs	r1, r0
 80027c2:	4094      	lsls	r4, r2
 80027c4:	40de      	lsrs	r6, r3
 80027c6:	40d8      	lsrs	r0, r3
 80027c8:	2300      	movs	r3, #0
 80027ca:	4091      	lsls	r1, r2
 80027cc:	1e62      	subs	r2, r4, #1
 80027ce:	4194      	sbcs	r4, r2
 80027d0:	4681      	mov	r9, r0
 80027d2:	4698      	mov	r8, r3
 80027d4:	4331      	orrs	r1, r6
 80027d6:	430c      	orrs	r4, r1
 80027d8:	0763      	lsls	r3, r4, #29
 80027da:	d009      	beq.n	80027f0 <__aeabi_dsub+0x11c>
 80027dc:	230f      	movs	r3, #15
 80027de:	4023      	ands	r3, r4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d005      	beq.n	80027f0 <__aeabi_dsub+0x11c>
 80027e4:	1d23      	adds	r3, r4, #4
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	41a4      	sbcs	r4, r4
 80027ea:	4264      	negs	r4, r4
 80027ec:	44a1      	add	r9, r4
 80027ee:	001c      	movs	r4, r3
 80027f0:	464b      	mov	r3, r9
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	d400      	bmi.n	80027f8 <__aeabi_dsub+0x124>
 80027f6:	e0de      	b.n	80029b6 <__aeabi_dsub+0x2e2>
 80027f8:	4641      	mov	r1, r8
 80027fa:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <__aeabi_dsub+0x358>)
 80027fc:	3101      	adds	r1, #1
 80027fe:	4299      	cmp	r1, r3
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x130>
 8002802:	e0e7      	b.n	80029d4 <__aeabi_dsub+0x300>
 8002804:	464b      	mov	r3, r9
 8002806:	488a      	ldr	r0, [pc, #552]	; (8002a30 <__aeabi_dsub+0x35c>)
 8002808:	08e4      	lsrs	r4, r4, #3
 800280a:	4003      	ands	r3, r0
 800280c:	0018      	movs	r0, r3
 800280e:	0549      	lsls	r1, r1, #21
 8002810:	075b      	lsls	r3, r3, #29
 8002812:	0240      	lsls	r0, r0, #9
 8002814:	4323      	orrs	r3, r4
 8002816:	0d4a      	lsrs	r2, r1, #21
 8002818:	0b04      	lsrs	r4, r0, #12
 800281a:	0512      	lsls	r2, r2, #20
 800281c:	07ed      	lsls	r5, r5, #31
 800281e:	4322      	orrs	r2, r4
 8002820:	432a      	orrs	r2, r5
 8002822:	0018      	movs	r0, r3
 8002824:	0011      	movs	r1, r2
 8002826:	bcf0      	pop	{r4, r5, r6, r7}
 8002828:	46bb      	mov	fp, r7
 800282a:	46b2      	mov	sl, r6
 800282c:	46a9      	mov	r9, r5
 800282e:	46a0      	mov	r8, r4
 8002830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002832:	4642      	mov	r2, r8
 8002834:	1a12      	subs	r2, r2, r0
 8002836:	2a00      	cmp	r2, #0
 8002838:	dd52      	ble.n	80028e0 <__aeabi_dsub+0x20c>
 800283a:	2800      	cmp	r0, #0
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x16c>
 800283e:	e09c      	b.n	800297a <__aeabi_dsub+0x2a6>
 8002840:	45a0      	cmp	r8, r4
 8002842:	d100      	bne.n	8002846 <__aeabi_dsub+0x172>
 8002844:	e0ca      	b.n	80029dc <__aeabi_dsub+0x308>
 8002846:	2080      	movs	r0, #128	; 0x80
 8002848:	0400      	lsls	r0, r0, #16
 800284a:	4301      	orrs	r1, r0
 800284c:	2a38      	cmp	r2, #56	; 0x38
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x17e>
 8002850:	e149      	b.n	8002ae6 <__aeabi_dsub+0x412>
 8002852:	2a1f      	cmp	r2, #31
 8002854:	dc00      	bgt.n	8002858 <__aeabi_dsub+0x184>
 8002856:	e197      	b.n	8002b88 <__aeabi_dsub+0x4b4>
 8002858:	0010      	movs	r0, r2
 800285a:	000e      	movs	r6, r1
 800285c:	3820      	subs	r0, #32
 800285e:	40c6      	lsrs	r6, r0
 8002860:	2a20      	cmp	r2, #32
 8002862:	d004      	beq.n	800286e <__aeabi_dsub+0x19a>
 8002864:	2040      	movs	r0, #64	; 0x40
 8002866:	1a82      	subs	r2, r0, r2
 8002868:	4091      	lsls	r1, r2
 800286a:	430f      	orrs	r7, r1
 800286c:	46b9      	mov	r9, r7
 800286e:	464c      	mov	r4, r9
 8002870:	1e62      	subs	r2, r4, #1
 8002872:	4194      	sbcs	r4, r2
 8002874:	4334      	orrs	r4, r6
 8002876:	e13a      	b.n	8002aee <__aeabi_dsub+0x41a>
 8002878:	000a      	movs	r2, r1
 800287a:	433a      	orrs	r2, r7
 800287c:	d028      	beq.n	80028d0 <__aeabi_dsub+0x1fc>
 800287e:	46b3      	mov	fp, r6
 8002880:	42b5      	cmp	r5, r6
 8002882:	d02b      	beq.n	80028dc <__aeabi_dsub+0x208>
 8002884:	4a6b      	ldr	r2, [pc, #428]	; (8002a34 <__aeabi_dsub+0x360>)
 8002886:	4442      	add	r2, r8
 8002888:	2a00      	cmp	r2, #0
 800288a:	d05d      	beq.n	8002948 <__aeabi_dsub+0x274>
 800288c:	4642      	mov	r2, r8
 800288e:	4644      	mov	r4, r8
 8002890:	1a82      	subs	r2, r0, r2
 8002892:	2c00      	cmp	r4, #0
 8002894:	d000      	beq.n	8002898 <__aeabi_dsub+0x1c4>
 8002896:	e0f5      	b.n	8002a84 <__aeabi_dsub+0x3b0>
 8002898:	4665      	mov	r5, ip
 800289a:	431d      	orrs	r5, r3
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x1cc>
 800289e:	e19c      	b.n	8002bda <__aeabi_dsub+0x506>
 80028a0:	1e55      	subs	r5, r2, #1
 80028a2:	2a01      	cmp	r2, #1
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x1d4>
 80028a6:	e1fb      	b.n	8002ca0 <__aeabi_dsub+0x5cc>
 80028a8:	4c60      	ldr	r4, [pc, #384]	; (8002a2c <__aeabi_dsub+0x358>)
 80028aa:	42a2      	cmp	r2, r4
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x1dc>
 80028ae:	e1bd      	b.n	8002c2c <__aeabi_dsub+0x558>
 80028b0:	002a      	movs	r2, r5
 80028b2:	e0f0      	b.n	8002a96 <__aeabi_dsub+0x3c2>
 80028b4:	0008      	movs	r0, r1
 80028b6:	4338      	orrs	r0, r7
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0x1e8>
 80028ba:	e0c3      	b.n	8002a44 <__aeabi_dsub+0x370>
 80028bc:	1e50      	subs	r0, r2, #1
 80028be:	2a01      	cmp	r2, #1
 80028c0:	d100      	bne.n	80028c4 <__aeabi_dsub+0x1f0>
 80028c2:	e1a8      	b.n	8002c16 <__aeabi_dsub+0x542>
 80028c4:	4c59      	ldr	r4, [pc, #356]	; (8002a2c <__aeabi_dsub+0x358>)
 80028c6:	42a2      	cmp	r2, r4
 80028c8:	d100      	bne.n	80028cc <__aeabi_dsub+0x1f8>
 80028ca:	e087      	b.n	80029dc <__aeabi_dsub+0x308>
 80028cc:	0002      	movs	r2, r0
 80028ce:	e736      	b.n	800273e <__aeabi_dsub+0x6a>
 80028d0:	2201      	movs	r2, #1
 80028d2:	4056      	eors	r6, r2
 80028d4:	46b3      	mov	fp, r6
 80028d6:	42b5      	cmp	r5, r6
 80028d8:	d000      	beq.n	80028dc <__aeabi_dsub+0x208>
 80028da:	e721      	b.n	8002720 <__aeabi_dsub+0x4c>
 80028dc:	4a55      	ldr	r2, [pc, #340]	; (8002a34 <__aeabi_dsub+0x360>)
 80028de:	4442      	add	r2, r8
 80028e0:	2a00      	cmp	r2, #0
 80028e2:	d100      	bne.n	80028e6 <__aeabi_dsub+0x212>
 80028e4:	e0b5      	b.n	8002a52 <__aeabi_dsub+0x37e>
 80028e6:	4642      	mov	r2, r8
 80028e8:	4644      	mov	r4, r8
 80028ea:	1a82      	subs	r2, r0, r2
 80028ec:	2c00      	cmp	r4, #0
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x21e>
 80028f0:	e138      	b.n	8002b64 <__aeabi_dsub+0x490>
 80028f2:	4e4e      	ldr	r6, [pc, #312]	; (8002a2c <__aeabi_dsub+0x358>)
 80028f4:	42b0      	cmp	r0, r6
 80028f6:	d100      	bne.n	80028fa <__aeabi_dsub+0x226>
 80028f8:	e1de      	b.n	8002cb8 <__aeabi_dsub+0x5e4>
 80028fa:	2680      	movs	r6, #128	; 0x80
 80028fc:	4664      	mov	r4, ip
 80028fe:	0436      	lsls	r6, r6, #16
 8002900:	4334      	orrs	r4, r6
 8002902:	46a4      	mov	ip, r4
 8002904:	2a38      	cmp	r2, #56	; 0x38
 8002906:	dd00      	ble.n	800290a <__aeabi_dsub+0x236>
 8002908:	e196      	b.n	8002c38 <__aeabi_dsub+0x564>
 800290a:	2a1f      	cmp	r2, #31
 800290c:	dd00      	ble.n	8002910 <__aeabi_dsub+0x23c>
 800290e:	e224      	b.n	8002d5a <__aeabi_dsub+0x686>
 8002910:	2620      	movs	r6, #32
 8002912:	1ab4      	subs	r4, r6, r2
 8002914:	46a2      	mov	sl, r4
 8002916:	4664      	mov	r4, ip
 8002918:	4656      	mov	r6, sl
 800291a:	40b4      	lsls	r4, r6
 800291c:	46a1      	mov	r9, r4
 800291e:	001c      	movs	r4, r3
 8002920:	464e      	mov	r6, r9
 8002922:	40d4      	lsrs	r4, r2
 8002924:	4326      	orrs	r6, r4
 8002926:	0034      	movs	r4, r6
 8002928:	4656      	mov	r6, sl
 800292a:	40b3      	lsls	r3, r6
 800292c:	1e5e      	subs	r6, r3, #1
 800292e:	41b3      	sbcs	r3, r6
 8002930:	431c      	orrs	r4, r3
 8002932:	4663      	mov	r3, ip
 8002934:	40d3      	lsrs	r3, r2
 8002936:	18c9      	adds	r1, r1, r3
 8002938:	19e4      	adds	r4, r4, r7
 800293a:	42bc      	cmp	r4, r7
 800293c:	41bf      	sbcs	r7, r7
 800293e:	427f      	negs	r7, r7
 8002940:	46b9      	mov	r9, r7
 8002942:	4680      	mov	r8, r0
 8002944:	4489      	add	r9, r1
 8002946:	e0d8      	b.n	8002afa <__aeabi_dsub+0x426>
 8002948:	4640      	mov	r0, r8
 800294a:	4c3b      	ldr	r4, [pc, #236]	; (8002a38 <__aeabi_dsub+0x364>)
 800294c:	3001      	adds	r0, #1
 800294e:	4220      	tst	r0, r4
 8002950:	d000      	beq.n	8002954 <__aeabi_dsub+0x280>
 8002952:	e0b4      	b.n	8002abe <__aeabi_dsub+0x3ea>
 8002954:	4640      	mov	r0, r8
 8002956:	2800      	cmp	r0, #0
 8002958:	d000      	beq.n	800295c <__aeabi_dsub+0x288>
 800295a:	e144      	b.n	8002be6 <__aeabi_dsub+0x512>
 800295c:	4660      	mov	r0, ip
 800295e:	4318      	orrs	r0, r3
 8002960:	d100      	bne.n	8002964 <__aeabi_dsub+0x290>
 8002962:	e190      	b.n	8002c86 <__aeabi_dsub+0x5b2>
 8002964:	0008      	movs	r0, r1
 8002966:	4338      	orrs	r0, r7
 8002968:	d000      	beq.n	800296c <__aeabi_dsub+0x298>
 800296a:	e1aa      	b.n	8002cc2 <__aeabi_dsub+0x5ee>
 800296c:	4661      	mov	r1, ip
 800296e:	08db      	lsrs	r3, r3, #3
 8002970:	0749      	lsls	r1, r1, #29
 8002972:	430b      	orrs	r3, r1
 8002974:	4661      	mov	r1, ip
 8002976:	08cc      	lsrs	r4, r1, #3
 8002978:	e027      	b.n	80029ca <__aeabi_dsub+0x2f6>
 800297a:	0008      	movs	r0, r1
 800297c:	4338      	orrs	r0, r7
 800297e:	d061      	beq.n	8002a44 <__aeabi_dsub+0x370>
 8002980:	1e50      	subs	r0, r2, #1
 8002982:	2a01      	cmp	r2, #1
 8002984:	d100      	bne.n	8002988 <__aeabi_dsub+0x2b4>
 8002986:	e139      	b.n	8002bfc <__aeabi_dsub+0x528>
 8002988:	42a2      	cmp	r2, r4
 800298a:	d027      	beq.n	80029dc <__aeabi_dsub+0x308>
 800298c:	0002      	movs	r2, r0
 800298e:	e75d      	b.n	800284c <__aeabi_dsub+0x178>
 8002990:	0002      	movs	r2, r0
 8002992:	391f      	subs	r1, #31
 8002994:	40ca      	lsrs	r2, r1
 8002996:	0011      	movs	r1, r2
 8002998:	2b20      	cmp	r3, #32
 800299a:	d003      	beq.n	80029a4 <__aeabi_dsub+0x2d0>
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	4098      	lsls	r0, r3
 80029a2:	4304      	orrs	r4, r0
 80029a4:	1e63      	subs	r3, r4, #1
 80029a6:	419c      	sbcs	r4, r3
 80029a8:	2300      	movs	r3, #0
 80029aa:	4699      	mov	r9, r3
 80029ac:	4698      	mov	r8, r3
 80029ae:	430c      	orrs	r4, r1
 80029b0:	0763      	lsls	r3, r4, #29
 80029b2:	d000      	beq.n	80029b6 <__aeabi_dsub+0x2e2>
 80029b4:	e712      	b.n	80027dc <__aeabi_dsub+0x108>
 80029b6:	464b      	mov	r3, r9
 80029b8:	464a      	mov	r2, r9
 80029ba:	08e4      	lsrs	r4, r4, #3
 80029bc:	075b      	lsls	r3, r3, #29
 80029be:	4323      	orrs	r3, r4
 80029c0:	08d4      	lsrs	r4, r2, #3
 80029c2:	4642      	mov	r2, r8
 80029c4:	4919      	ldr	r1, [pc, #100]	; (8002a2c <__aeabi_dsub+0x358>)
 80029c6:	428a      	cmp	r2, r1
 80029c8:	d00e      	beq.n	80029e8 <__aeabi_dsub+0x314>
 80029ca:	0324      	lsls	r4, r4, #12
 80029cc:	0552      	lsls	r2, r2, #21
 80029ce:	0b24      	lsrs	r4, r4, #12
 80029d0:	0d52      	lsrs	r2, r2, #21
 80029d2:	e722      	b.n	800281a <__aeabi_dsub+0x146>
 80029d4:	000a      	movs	r2, r1
 80029d6:	2400      	movs	r4, #0
 80029d8:	2300      	movs	r3, #0
 80029da:	e71e      	b.n	800281a <__aeabi_dsub+0x146>
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	4662      	mov	r2, ip
 80029e0:	0752      	lsls	r2, r2, #29
 80029e2:	4313      	orrs	r3, r2
 80029e4:	4662      	mov	r2, ip
 80029e6:	08d4      	lsrs	r4, r2, #3
 80029e8:	001a      	movs	r2, r3
 80029ea:	4322      	orrs	r2, r4
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x31c>
 80029ee:	e1fc      	b.n	8002dea <__aeabi_dsub+0x716>
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	0312      	lsls	r2, r2, #12
 80029f4:	4314      	orrs	r4, r2
 80029f6:	0324      	lsls	r4, r4, #12
 80029f8:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <__aeabi_dsub+0x358>)
 80029fa:	0b24      	lsrs	r4, r4, #12
 80029fc:	e70d      	b.n	800281a <__aeabi_dsub+0x146>
 80029fe:	0020      	movs	r0, r4
 8002a00:	f000 fbae 	bl	8003160 <__clzsi2>
 8002a04:	0001      	movs	r1, r0
 8002a06:	3118      	adds	r1, #24
 8002a08:	291f      	cmp	r1, #31
 8002a0a:	dc00      	bgt.n	8002a0e <__aeabi_dsub+0x33a>
 8002a0c:	e6c4      	b.n	8002798 <__aeabi_dsub+0xc4>
 8002a0e:	3808      	subs	r0, #8
 8002a10:	4084      	lsls	r4, r0
 8002a12:	4643      	mov	r3, r8
 8002a14:	0020      	movs	r0, r4
 8002a16:	2400      	movs	r4, #0
 8002a18:	4588      	cmp	r8, r1
 8002a1a:	dc00      	bgt.n	8002a1e <__aeabi_dsub+0x34a>
 8002a1c:	e6c8      	b.n	80027b0 <__aeabi_dsub+0xdc>
 8002a1e:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <__aeabi_dsub+0x35c>)
 8002a20:	1a5b      	subs	r3, r3, r1
 8002a22:	4010      	ands	r0, r2
 8002a24:	4698      	mov	r8, r3
 8002a26:	4681      	mov	r9, r0
 8002a28:	e6d6      	b.n	80027d8 <__aeabi_dsub+0x104>
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	000007ff 	.word	0x000007ff
 8002a30:	ff7fffff 	.word	0xff7fffff
 8002a34:	fffff801 	.word	0xfffff801
 8002a38:	000007fe 	.word	0x000007fe
 8002a3c:	430f      	orrs	r7, r1
 8002a3e:	1e7a      	subs	r2, r7, #1
 8002a40:	4197      	sbcs	r7, r2
 8002a42:	e691      	b.n	8002768 <__aeabi_dsub+0x94>
 8002a44:	4661      	mov	r1, ip
 8002a46:	08db      	lsrs	r3, r3, #3
 8002a48:	0749      	lsls	r1, r1, #29
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	4661      	mov	r1, ip
 8002a4e:	08cc      	lsrs	r4, r1, #3
 8002a50:	e7b8      	b.n	80029c4 <__aeabi_dsub+0x2f0>
 8002a52:	4640      	mov	r0, r8
 8002a54:	4cd3      	ldr	r4, [pc, #844]	; (8002da4 <__aeabi_dsub+0x6d0>)
 8002a56:	3001      	adds	r0, #1
 8002a58:	4220      	tst	r0, r4
 8002a5a:	d000      	beq.n	8002a5e <__aeabi_dsub+0x38a>
 8002a5c:	e0a2      	b.n	8002ba4 <__aeabi_dsub+0x4d0>
 8002a5e:	4640      	mov	r0, r8
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d000      	beq.n	8002a66 <__aeabi_dsub+0x392>
 8002a64:	e101      	b.n	8002c6a <__aeabi_dsub+0x596>
 8002a66:	4660      	mov	r0, ip
 8002a68:	4318      	orrs	r0, r3
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x39a>
 8002a6c:	e15e      	b.n	8002d2c <__aeabi_dsub+0x658>
 8002a6e:	0008      	movs	r0, r1
 8002a70:	4338      	orrs	r0, r7
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x3a2>
 8002a74:	e15f      	b.n	8002d36 <__aeabi_dsub+0x662>
 8002a76:	4661      	mov	r1, ip
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	0749      	lsls	r1, r1, #29
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	4661      	mov	r1, ip
 8002a80:	08cc      	lsrs	r4, r1, #3
 8002a82:	e7a2      	b.n	80029ca <__aeabi_dsub+0x2f6>
 8002a84:	4dc8      	ldr	r5, [pc, #800]	; (8002da8 <__aeabi_dsub+0x6d4>)
 8002a86:	42a8      	cmp	r0, r5
 8002a88:	d100      	bne.n	8002a8c <__aeabi_dsub+0x3b8>
 8002a8a:	e0cf      	b.n	8002c2c <__aeabi_dsub+0x558>
 8002a8c:	2580      	movs	r5, #128	; 0x80
 8002a8e:	4664      	mov	r4, ip
 8002a90:	042d      	lsls	r5, r5, #16
 8002a92:	432c      	orrs	r4, r5
 8002a94:	46a4      	mov	ip, r4
 8002a96:	2a38      	cmp	r2, #56	; 0x38
 8002a98:	dc56      	bgt.n	8002b48 <__aeabi_dsub+0x474>
 8002a9a:	2a1f      	cmp	r2, #31
 8002a9c:	dd00      	ble.n	8002aa0 <__aeabi_dsub+0x3cc>
 8002a9e:	e0d1      	b.n	8002c44 <__aeabi_dsub+0x570>
 8002aa0:	2520      	movs	r5, #32
 8002aa2:	001e      	movs	r6, r3
 8002aa4:	1aad      	subs	r5, r5, r2
 8002aa6:	4664      	mov	r4, ip
 8002aa8:	40ab      	lsls	r3, r5
 8002aaa:	40ac      	lsls	r4, r5
 8002aac:	40d6      	lsrs	r6, r2
 8002aae:	1e5d      	subs	r5, r3, #1
 8002ab0:	41ab      	sbcs	r3, r5
 8002ab2:	4334      	orrs	r4, r6
 8002ab4:	4323      	orrs	r3, r4
 8002ab6:	4664      	mov	r4, ip
 8002ab8:	40d4      	lsrs	r4, r2
 8002aba:	1b09      	subs	r1, r1, r4
 8002abc:	e049      	b.n	8002b52 <__aeabi_dsub+0x47e>
 8002abe:	4660      	mov	r0, ip
 8002ac0:	1bdc      	subs	r4, r3, r7
 8002ac2:	1a46      	subs	r6, r0, r1
 8002ac4:	42a3      	cmp	r3, r4
 8002ac6:	4180      	sbcs	r0, r0
 8002ac8:	4240      	negs	r0, r0
 8002aca:	4681      	mov	r9, r0
 8002acc:	0030      	movs	r0, r6
 8002ace:	464e      	mov	r6, r9
 8002ad0:	1b80      	subs	r0, r0, r6
 8002ad2:	4681      	mov	r9, r0
 8002ad4:	0200      	lsls	r0, r0, #8
 8002ad6:	d476      	bmi.n	8002bc6 <__aeabi_dsub+0x4f2>
 8002ad8:	464b      	mov	r3, r9
 8002ada:	4323      	orrs	r3, r4
 8002adc:	d000      	beq.n	8002ae0 <__aeabi_dsub+0x40c>
 8002ade:	e652      	b.n	8002786 <__aeabi_dsub+0xb2>
 8002ae0:	2400      	movs	r4, #0
 8002ae2:	2500      	movs	r5, #0
 8002ae4:	e771      	b.n	80029ca <__aeabi_dsub+0x2f6>
 8002ae6:	4339      	orrs	r1, r7
 8002ae8:	000c      	movs	r4, r1
 8002aea:	1e62      	subs	r2, r4, #1
 8002aec:	4194      	sbcs	r4, r2
 8002aee:	18e4      	adds	r4, r4, r3
 8002af0:	429c      	cmp	r4, r3
 8002af2:	419b      	sbcs	r3, r3
 8002af4:	425b      	negs	r3, r3
 8002af6:	4463      	add	r3, ip
 8002af8:	4699      	mov	r9, r3
 8002afa:	464b      	mov	r3, r9
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	d400      	bmi.n	8002b02 <__aeabi_dsub+0x42e>
 8002b00:	e756      	b.n	80029b0 <__aeabi_dsub+0x2dc>
 8002b02:	2301      	movs	r3, #1
 8002b04:	469c      	mov	ip, r3
 8002b06:	4ba8      	ldr	r3, [pc, #672]	; (8002da8 <__aeabi_dsub+0x6d4>)
 8002b08:	44e0      	add	r8, ip
 8002b0a:	4598      	cmp	r8, r3
 8002b0c:	d038      	beq.n	8002b80 <__aeabi_dsub+0x4ac>
 8002b0e:	464b      	mov	r3, r9
 8002b10:	48a6      	ldr	r0, [pc, #664]	; (8002dac <__aeabi_dsub+0x6d8>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	4003      	ands	r3, r0
 8002b16:	0018      	movs	r0, r3
 8002b18:	0863      	lsrs	r3, r4, #1
 8002b1a:	4014      	ands	r4, r2
 8002b1c:	431c      	orrs	r4, r3
 8002b1e:	07c3      	lsls	r3, r0, #31
 8002b20:	431c      	orrs	r4, r3
 8002b22:	0843      	lsrs	r3, r0, #1
 8002b24:	4699      	mov	r9, r3
 8002b26:	e657      	b.n	80027d8 <__aeabi_dsub+0x104>
 8002b28:	0010      	movs	r0, r2
 8002b2a:	000e      	movs	r6, r1
 8002b2c:	3820      	subs	r0, #32
 8002b2e:	40c6      	lsrs	r6, r0
 8002b30:	2a20      	cmp	r2, #32
 8002b32:	d004      	beq.n	8002b3e <__aeabi_dsub+0x46a>
 8002b34:	2040      	movs	r0, #64	; 0x40
 8002b36:	1a82      	subs	r2, r0, r2
 8002b38:	4091      	lsls	r1, r2
 8002b3a:	430f      	orrs	r7, r1
 8002b3c:	46b9      	mov	r9, r7
 8002b3e:	464f      	mov	r7, r9
 8002b40:	1e7a      	subs	r2, r7, #1
 8002b42:	4197      	sbcs	r7, r2
 8002b44:	4337      	orrs	r7, r6
 8002b46:	e60f      	b.n	8002768 <__aeabi_dsub+0x94>
 8002b48:	4662      	mov	r2, ip
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	0013      	movs	r3, r2
 8002b4e:	1e5a      	subs	r2, r3, #1
 8002b50:	4193      	sbcs	r3, r2
 8002b52:	1afc      	subs	r4, r7, r3
 8002b54:	42a7      	cmp	r7, r4
 8002b56:	41bf      	sbcs	r7, r7
 8002b58:	427f      	negs	r7, r7
 8002b5a:	1bcb      	subs	r3, r1, r7
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	465d      	mov	r5, fp
 8002b60:	4680      	mov	r8, r0
 8002b62:	e608      	b.n	8002776 <__aeabi_dsub+0xa2>
 8002b64:	4666      	mov	r6, ip
 8002b66:	431e      	orrs	r6, r3
 8002b68:	d100      	bne.n	8002b6c <__aeabi_dsub+0x498>
 8002b6a:	e0be      	b.n	8002cea <__aeabi_dsub+0x616>
 8002b6c:	1e56      	subs	r6, r2, #1
 8002b6e:	2a01      	cmp	r2, #1
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x4a0>
 8002b72:	e109      	b.n	8002d88 <__aeabi_dsub+0x6b4>
 8002b74:	4c8c      	ldr	r4, [pc, #560]	; (8002da8 <__aeabi_dsub+0x6d4>)
 8002b76:	42a2      	cmp	r2, r4
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x4a8>
 8002b7a:	e119      	b.n	8002db0 <__aeabi_dsub+0x6dc>
 8002b7c:	0032      	movs	r2, r6
 8002b7e:	e6c1      	b.n	8002904 <__aeabi_dsub+0x230>
 8002b80:	4642      	mov	r2, r8
 8002b82:	2400      	movs	r4, #0
 8002b84:	2300      	movs	r3, #0
 8002b86:	e648      	b.n	800281a <__aeabi_dsub+0x146>
 8002b88:	2020      	movs	r0, #32
 8002b8a:	000c      	movs	r4, r1
 8002b8c:	1a80      	subs	r0, r0, r2
 8002b8e:	003e      	movs	r6, r7
 8002b90:	4087      	lsls	r7, r0
 8002b92:	4084      	lsls	r4, r0
 8002b94:	40d6      	lsrs	r6, r2
 8002b96:	1e78      	subs	r0, r7, #1
 8002b98:	4187      	sbcs	r7, r0
 8002b9a:	40d1      	lsrs	r1, r2
 8002b9c:	4334      	orrs	r4, r6
 8002b9e:	433c      	orrs	r4, r7
 8002ba0:	448c      	add	ip, r1
 8002ba2:	e7a4      	b.n	8002aee <__aeabi_dsub+0x41a>
 8002ba4:	4a80      	ldr	r2, [pc, #512]	; (8002da8 <__aeabi_dsub+0x6d4>)
 8002ba6:	4290      	cmp	r0, r2
 8002ba8:	d100      	bne.n	8002bac <__aeabi_dsub+0x4d8>
 8002baa:	e0e9      	b.n	8002d80 <__aeabi_dsub+0x6ac>
 8002bac:	19df      	adds	r7, r3, r7
 8002bae:	429f      	cmp	r7, r3
 8002bb0:	419b      	sbcs	r3, r3
 8002bb2:	4461      	add	r1, ip
 8002bb4:	425b      	negs	r3, r3
 8002bb6:	18c9      	adds	r1, r1, r3
 8002bb8:	07cc      	lsls	r4, r1, #31
 8002bba:	087f      	lsrs	r7, r7, #1
 8002bbc:	084b      	lsrs	r3, r1, #1
 8002bbe:	4699      	mov	r9, r3
 8002bc0:	4680      	mov	r8, r0
 8002bc2:	433c      	orrs	r4, r7
 8002bc4:	e6f4      	b.n	80029b0 <__aeabi_dsub+0x2dc>
 8002bc6:	1afc      	subs	r4, r7, r3
 8002bc8:	42a7      	cmp	r7, r4
 8002bca:	41bf      	sbcs	r7, r7
 8002bcc:	4663      	mov	r3, ip
 8002bce:	427f      	negs	r7, r7
 8002bd0:	1ac9      	subs	r1, r1, r3
 8002bd2:	1bcb      	subs	r3, r1, r7
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	465d      	mov	r5, fp
 8002bd8:	e5d5      	b.n	8002786 <__aeabi_dsub+0xb2>
 8002bda:	08ff      	lsrs	r7, r7, #3
 8002bdc:	074b      	lsls	r3, r1, #29
 8002bde:	465d      	mov	r5, fp
 8002be0:	433b      	orrs	r3, r7
 8002be2:	08cc      	lsrs	r4, r1, #3
 8002be4:	e6ee      	b.n	80029c4 <__aeabi_dsub+0x2f0>
 8002be6:	4662      	mov	r2, ip
 8002be8:	431a      	orrs	r2, r3
 8002bea:	d000      	beq.n	8002bee <__aeabi_dsub+0x51a>
 8002bec:	e082      	b.n	8002cf4 <__aeabi_dsub+0x620>
 8002bee:	000b      	movs	r3, r1
 8002bf0:	433b      	orrs	r3, r7
 8002bf2:	d11b      	bne.n	8002c2c <__aeabi_dsub+0x558>
 8002bf4:	2480      	movs	r4, #128	; 0x80
 8002bf6:	2500      	movs	r5, #0
 8002bf8:	0324      	lsls	r4, r4, #12
 8002bfa:	e6f9      	b.n	80029f0 <__aeabi_dsub+0x31c>
 8002bfc:	19dc      	adds	r4, r3, r7
 8002bfe:	429c      	cmp	r4, r3
 8002c00:	419b      	sbcs	r3, r3
 8002c02:	4461      	add	r1, ip
 8002c04:	4689      	mov	r9, r1
 8002c06:	425b      	negs	r3, r3
 8002c08:	4499      	add	r9, r3
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	d444      	bmi.n	8002c9a <__aeabi_dsub+0x5c6>
 8002c10:	2301      	movs	r3, #1
 8002c12:	4698      	mov	r8, r3
 8002c14:	e6cc      	b.n	80029b0 <__aeabi_dsub+0x2dc>
 8002c16:	1bdc      	subs	r4, r3, r7
 8002c18:	4662      	mov	r2, ip
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	419b      	sbcs	r3, r3
 8002c1e:	1a51      	subs	r1, r2, r1
 8002c20:	425b      	negs	r3, r3
 8002c22:	1acb      	subs	r3, r1, r3
 8002c24:	4699      	mov	r9, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	4698      	mov	r8, r3
 8002c2a:	e5a4      	b.n	8002776 <__aeabi_dsub+0xa2>
 8002c2c:	08ff      	lsrs	r7, r7, #3
 8002c2e:	074b      	lsls	r3, r1, #29
 8002c30:	465d      	mov	r5, fp
 8002c32:	433b      	orrs	r3, r7
 8002c34:	08cc      	lsrs	r4, r1, #3
 8002c36:	e6d7      	b.n	80029e8 <__aeabi_dsub+0x314>
 8002c38:	4662      	mov	r2, ip
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	0014      	movs	r4, r2
 8002c3e:	1e63      	subs	r3, r4, #1
 8002c40:	419c      	sbcs	r4, r3
 8002c42:	e679      	b.n	8002938 <__aeabi_dsub+0x264>
 8002c44:	0015      	movs	r5, r2
 8002c46:	4664      	mov	r4, ip
 8002c48:	3d20      	subs	r5, #32
 8002c4a:	40ec      	lsrs	r4, r5
 8002c4c:	46a0      	mov	r8, r4
 8002c4e:	2a20      	cmp	r2, #32
 8002c50:	d005      	beq.n	8002c5e <__aeabi_dsub+0x58a>
 8002c52:	2540      	movs	r5, #64	; 0x40
 8002c54:	4664      	mov	r4, ip
 8002c56:	1aaa      	subs	r2, r5, r2
 8002c58:	4094      	lsls	r4, r2
 8002c5a:	4323      	orrs	r3, r4
 8002c5c:	469a      	mov	sl, r3
 8002c5e:	4654      	mov	r4, sl
 8002c60:	1e63      	subs	r3, r4, #1
 8002c62:	419c      	sbcs	r4, r3
 8002c64:	4643      	mov	r3, r8
 8002c66:	4323      	orrs	r3, r4
 8002c68:	e773      	b.n	8002b52 <__aeabi_dsub+0x47e>
 8002c6a:	4662      	mov	r2, ip
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	d023      	beq.n	8002cb8 <__aeabi_dsub+0x5e4>
 8002c70:	000a      	movs	r2, r1
 8002c72:	433a      	orrs	r2, r7
 8002c74:	d000      	beq.n	8002c78 <__aeabi_dsub+0x5a4>
 8002c76:	e0a0      	b.n	8002dba <__aeabi_dsub+0x6e6>
 8002c78:	4662      	mov	r2, ip
 8002c7a:	08db      	lsrs	r3, r3, #3
 8002c7c:	0752      	lsls	r2, r2, #29
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	4662      	mov	r2, ip
 8002c82:	08d4      	lsrs	r4, r2, #3
 8002c84:	e6b0      	b.n	80029e8 <__aeabi_dsub+0x314>
 8002c86:	000b      	movs	r3, r1
 8002c88:	433b      	orrs	r3, r7
 8002c8a:	d100      	bne.n	8002c8e <__aeabi_dsub+0x5ba>
 8002c8c:	e728      	b.n	8002ae0 <__aeabi_dsub+0x40c>
 8002c8e:	08ff      	lsrs	r7, r7, #3
 8002c90:	074b      	lsls	r3, r1, #29
 8002c92:	465d      	mov	r5, fp
 8002c94:	433b      	orrs	r3, r7
 8002c96:	08cc      	lsrs	r4, r1, #3
 8002c98:	e697      	b.n	80029ca <__aeabi_dsub+0x2f6>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	4698      	mov	r8, r3
 8002c9e:	e736      	b.n	8002b0e <__aeabi_dsub+0x43a>
 8002ca0:	1afc      	subs	r4, r7, r3
 8002ca2:	42a7      	cmp	r7, r4
 8002ca4:	41bf      	sbcs	r7, r7
 8002ca6:	4663      	mov	r3, ip
 8002ca8:	427f      	negs	r7, r7
 8002caa:	1ac9      	subs	r1, r1, r3
 8002cac:	1bcb      	subs	r3, r1, r7
 8002cae:	4699      	mov	r9, r3
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	465d      	mov	r5, fp
 8002cb4:	4698      	mov	r8, r3
 8002cb6:	e55e      	b.n	8002776 <__aeabi_dsub+0xa2>
 8002cb8:	074b      	lsls	r3, r1, #29
 8002cba:	08ff      	lsrs	r7, r7, #3
 8002cbc:	433b      	orrs	r3, r7
 8002cbe:	08cc      	lsrs	r4, r1, #3
 8002cc0:	e692      	b.n	80029e8 <__aeabi_dsub+0x314>
 8002cc2:	1bdc      	subs	r4, r3, r7
 8002cc4:	4660      	mov	r0, ip
 8002cc6:	42a3      	cmp	r3, r4
 8002cc8:	41b6      	sbcs	r6, r6
 8002cca:	1a40      	subs	r0, r0, r1
 8002ccc:	4276      	negs	r6, r6
 8002cce:	1b80      	subs	r0, r0, r6
 8002cd0:	4681      	mov	r9, r0
 8002cd2:	0200      	lsls	r0, r0, #8
 8002cd4:	d560      	bpl.n	8002d98 <__aeabi_dsub+0x6c4>
 8002cd6:	1afc      	subs	r4, r7, r3
 8002cd8:	42a7      	cmp	r7, r4
 8002cda:	41bf      	sbcs	r7, r7
 8002cdc:	4663      	mov	r3, ip
 8002cde:	427f      	negs	r7, r7
 8002ce0:	1ac9      	subs	r1, r1, r3
 8002ce2:	1bcb      	subs	r3, r1, r7
 8002ce4:	4699      	mov	r9, r3
 8002ce6:	465d      	mov	r5, fp
 8002ce8:	e576      	b.n	80027d8 <__aeabi_dsub+0x104>
 8002cea:	08ff      	lsrs	r7, r7, #3
 8002cec:	074b      	lsls	r3, r1, #29
 8002cee:	433b      	orrs	r3, r7
 8002cf0:	08cc      	lsrs	r4, r1, #3
 8002cf2:	e667      	b.n	80029c4 <__aeabi_dsub+0x2f0>
 8002cf4:	000a      	movs	r2, r1
 8002cf6:	08db      	lsrs	r3, r3, #3
 8002cf8:	433a      	orrs	r2, r7
 8002cfa:	d100      	bne.n	8002cfe <__aeabi_dsub+0x62a>
 8002cfc:	e66f      	b.n	80029de <__aeabi_dsub+0x30a>
 8002cfe:	4662      	mov	r2, ip
 8002d00:	0752      	lsls	r2, r2, #29
 8002d02:	4313      	orrs	r3, r2
 8002d04:	4662      	mov	r2, ip
 8002d06:	08d4      	lsrs	r4, r2, #3
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	0312      	lsls	r2, r2, #12
 8002d0c:	4214      	tst	r4, r2
 8002d0e:	d007      	beq.n	8002d20 <__aeabi_dsub+0x64c>
 8002d10:	08c8      	lsrs	r0, r1, #3
 8002d12:	4210      	tst	r0, r2
 8002d14:	d104      	bne.n	8002d20 <__aeabi_dsub+0x64c>
 8002d16:	465d      	mov	r5, fp
 8002d18:	0004      	movs	r4, r0
 8002d1a:	08fb      	lsrs	r3, r7, #3
 8002d1c:	0749      	lsls	r1, r1, #29
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	0f5a      	lsrs	r2, r3, #29
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	08db      	lsrs	r3, r3, #3
 8002d26:	0752      	lsls	r2, r2, #29
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	e65d      	b.n	80029e8 <__aeabi_dsub+0x314>
 8002d2c:	074b      	lsls	r3, r1, #29
 8002d2e:	08ff      	lsrs	r7, r7, #3
 8002d30:	433b      	orrs	r3, r7
 8002d32:	08cc      	lsrs	r4, r1, #3
 8002d34:	e649      	b.n	80029ca <__aeabi_dsub+0x2f6>
 8002d36:	19dc      	adds	r4, r3, r7
 8002d38:	429c      	cmp	r4, r3
 8002d3a:	419b      	sbcs	r3, r3
 8002d3c:	4461      	add	r1, ip
 8002d3e:	4689      	mov	r9, r1
 8002d40:	425b      	negs	r3, r3
 8002d42:	4499      	add	r9, r3
 8002d44:	464b      	mov	r3, r9
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	d400      	bmi.n	8002d4c <__aeabi_dsub+0x678>
 8002d4a:	e631      	b.n	80029b0 <__aeabi_dsub+0x2dc>
 8002d4c:	464a      	mov	r2, r9
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <__aeabi_dsub+0x6d8>)
 8002d50:	401a      	ands	r2, r3
 8002d52:	2301      	movs	r3, #1
 8002d54:	4691      	mov	r9, r2
 8002d56:	4698      	mov	r8, r3
 8002d58:	e62a      	b.n	80029b0 <__aeabi_dsub+0x2dc>
 8002d5a:	0016      	movs	r6, r2
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3e20      	subs	r6, #32
 8002d60:	40f4      	lsrs	r4, r6
 8002d62:	46a0      	mov	r8, r4
 8002d64:	2a20      	cmp	r2, #32
 8002d66:	d005      	beq.n	8002d74 <__aeabi_dsub+0x6a0>
 8002d68:	2640      	movs	r6, #64	; 0x40
 8002d6a:	4664      	mov	r4, ip
 8002d6c:	1ab2      	subs	r2, r6, r2
 8002d6e:	4094      	lsls	r4, r2
 8002d70:	4323      	orrs	r3, r4
 8002d72:	469a      	mov	sl, r3
 8002d74:	4654      	mov	r4, sl
 8002d76:	1e63      	subs	r3, r4, #1
 8002d78:	419c      	sbcs	r4, r3
 8002d7a:	4643      	mov	r3, r8
 8002d7c:	431c      	orrs	r4, r3
 8002d7e:	e5db      	b.n	8002938 <__aeabi_dsub+0x264>
 8002d80:	0002      	movs	r2, r0
 8002d82:	2400      	movs	r4, #0
 8002d84:	2300      	movs	r3, #0
 8002d86:	e548      	b.n	800281a <__aeabi_dsub+0x146>
 8002d88:	19dc      	adds	r4, r3, r7
 8002d8a:	42bc      	cmp	r4, r7
 8002d8c:	41bf      	sbcs	r7, r7
 8002d8e:	4461      	add	r1, ip
 8002d90:	4689      	mov	r9, r1
 8002d92:	427f      	negs	r7, r7
 8002d94:	44b9      	add	r9, r7
 8002d96:	e738      	b.n	8002c0a <__aeabi_dsub+0x536>
 8002d98:	464b      	mov	r3, r9
 8002d9a:	4323      	orrs	r3, r4
 8002d9c:	d100      	bne.n	8002da0 <__aeabi_dsub+0x6cc>
 8002d9e:	e69f      	b.n	8002ae0 <__aeabi_dsub+0x40c>
 8002da0:	e606      	b.n	80029b0 <__aeabi_dsub+0x2dc>
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	000007fe 	.word	0x000007fe
 8002da8:	000007ff 	.word	0x000007ff
 8002dac:	ff7fffff 	.word	0xff7fffff
 8002db0:	08ff      	lsrs	r7, r7, #3
 8002db2:	074b      	lsls	r3, r1, #29
 8002db4:	433b      	orrs	r3, r7
 8002db6:	08cc      	lsrs	r4, r1, #3
 8002db8:	e616      	b.n	80029e8 <__aeabi_dsub+0x314>
 8002dba:	4662      	mov	r2, ip
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	0752      	lsls	r2, r2, #29
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	4662      	mov	r2, ip
 8002dc4:	08d4      	lsrs	r4, r2, #3
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	4214      	tst	r4, r2
 8002dcc:	d007      	beq.n	8002dde <__aeabi_dsub+0x70a>
 8002dce:	08c8      	lsrs	r0, r1, #3
 8002dd0:	4210      	tst	r0, r2
 8002dd2:	d104      	bne.n	8002dde <__aeabi_dsub+0x70a>
 8002dd4:	465d      	mov	r5, fp
 8002dd6:	0004      	movs	r4, r0
 8002dd8:	08fb      	lsrs	r3, r7, #3
 8002dda:	0749      	lsls	r1, r1, #29
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	0f5a      	lsrs	r2, r3, #29
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	0752      	lsls	r2, r2, #29
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	4313      	orrs	r3, r2
 8002de8:	e5fe      	b.n	80029e8 <__aeabi_dsub+0x314>
 8002dea:	2300      	movs	r3, #0
 8002dec:	4a01      	ldr	r2, [pc, #4]	; (8002df4 <__aeabi_dsub+0x720>)
 8002dee:	001c      	movs	r4, r3
 8002df0:	e513      	b.n	800281a <__aeabi_dsub+0x146>
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	000007ff 	.word	0x000007ff

08002df8 <__aeabi_dcmpun>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	0005      	movs	r5, r0
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <__aeabi_dcmpun+0x38>)
 8002dfe:	031c      	lsls	r4, r3, #12
 8002e00:	0016      	movs	r6, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	030a      	lsls	r2, r1, #12
 8002e06:	0049      	lsls	r1, r1, #1
 8002e08:	0b12      	lsrs	r2, r2, #12
 8002e0a:	0d49      	lsrs	r1, r1, #21
 8002e0c:	0b24      	lsrs	r4, r4, #12
 8002e0e:	0d5b      	lsrs	r3, r3, #21
 8002e10:	4281      	cmp	r1, r0
 8002e12:	d008      	beq.n	8002e26 <__aeabi_dcmpun+0x2e>
 8002e14:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <__aeabi_dcmpun+0x38>)
 8002e16:	2000      	movs	r0, #0
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <__aeabi_dcmpun+0x2c>
 8002e1c:	0020      	movs	r0, r4
 8002e1e:	4330      	orrs	r0, r6
 8002e20:	1e43      	subs	r3, r0, #1
 8002e22:	4198      	sbcs	r0, r3
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
 8002e26:	2001      	movs	r0, #1
 8002e28:	432a      	orrs	r2, r5
 8002e2a:	d1fb      	bne.n	8002e24 <__aeabi_dcmpun+0x2c>
 8002e2c:	e7f2      	b.n	8002e14 <__aeabi_dcmpun+0x1c>
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	000007ff 	.word	0x000007ff

08002e34 <__aeabi_d2iz>:
 8002e34:	000a      	movs	r2, r1
 8002e36:	b530      	push	{r4, r5, lr}
 8002e38:	4c13      	ldr	r4, [pc, #76]	; (8002e88 <__aeabi_d2iz+0x54>)
 8002e3a:	0053      	lsls	r3, r2, #1
 8002e3c:	0309      	lsls	r1, r1, #12
 8002e3e:	0005      	movs	r5, r0
 8002e40:	0b09      	lsrs	r1, r1, #12
 8002e42:	2000      	movs	r0, #0
 8002e44:	0d5b      	lsrs	r3, r3, #21
 8002e46:	0fd2      	lsrs	r2, r2, #31
 8002e48:	42a3      	cmp	r3, r4
 8002e4a:	dd04      	ble.n	8002e56 <__aeabi_d2iz+0x22>
 8002e4c:	480f      	ldr	r0, [pc, #60]	; (8002e8c <__aeabi_d2iz+0x58>)
 8002e4e:	4283      	cmp	r3, r0
 8002e50:	dd02      	ble.n	8002e58 <__aeabi_d2iz+0x24>
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <__aeabi_d2iz+0x5c>)
 8002e54:	18d0      	adds	r0, r2, r3
 8002e56:	bd30      	pop	{r4, r5, pc}
 8002e58:	2080      	movs	r0, #128	; 0x80
 8002e5a:	0340      	lsls	r0, r0, #13
 8002e5c:	4301      	orrs	r1, r0
 8002e5e:	480d      	ldr	r0, [pc, #52]	; (8002e94 <__aeabi_d2iz+0x60>)
 8002e60:	1ac0      	subs	r0, r0, r3
 8002e62:	281f      	cmp	r0, #31
 8002e64:	dd08      	ble.n	8002e78 <__aeabi_d2iz+0x44>
 8002e66:	480c      	ldr	r0, [pc, #48]	; (8002e98 <__aeabi_d2iz+0x64>)
 8002e68:	1ac3      	subs	r3, r0, r3
 8002e6a:	40d9      	lsrs	r1, r3
 8002e6c:	000b      	movs	r3, r1
 8002e6e:	4258      	negs	r0, r3
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d1f0      	bne.n	8002e56 <__aeabi_d2iz+0x22>
 8002e74:	0018      	movs	r0, r3
 8002e76:	e7ee      	b.n	8002e56 <__aeabi_d2iz+0x22>
 8002e78:	4c08      	ldr	r4, [pc, #32]	; (8002e9c <__aeabi_d2iz+0x68>)
 8002e7a:	40c5      	lsrs	r5, r0
 8002e7c:	46a4      	mov	ip, r4
 8002e7e:	4463      	add	r3, ip
 8002e80:	4099      	lsls	r1, r3
 8002e82:	000b      	movs	r3, r1
 8002e84:	432b      	orrs	r3, r5
 8002e86:	e7f2      	b.n	8002e6e <__aeabi_d2iz+0x3a>
 8002e88:	000003fe 	.word	0x000003fe
 8002e8c:	0000041d 	.word	0x0000041d
 8002e90:	7fffffff 	.word	0x7fffffff
 8002e94:	00000433 	.word	0x00000433
 8002e98:	00000413 	.word	0x00000413
 8002e9c:	fffffbed 	.word	0xfffffbed

08002ea0 <__aeabi_i2d>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d016      	beq.n	8002ed4 <__aeabi_i2d+0x34>
 8002ea6:	17c3      	asrs	r3, r0, #31
 8002ea8:	18c5      	adds	r5, r0, r3
 8002eaa:	405d      	eors	r5, r3
 8002eac:	0fc4      	lsrs	r4, r0, #31
 8002eae:	0028      	movs	r0, r5
 8002eb0:	f000 f956 	bl	8003160 <__clzsi2>
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <__aeabi_i2d+0x5c>)
 8002eb6:	1a12      	subs	r2, r2, r0
 8002eb8:	280a      	cmp	r0, #10
 8002eba:	dc16      	bgt.n	8002eea <__aeabi_i2d+0x4a>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	002e      	movs	r6, r5
 8002ec0:	3315      	adds	r3, #21
 8002ec2:	409e      	lsls	r6, r3
 8002ec4:	230b      	movs	r3, #11
 8002ec6:	1a18      	subs	r0, r3, r0
 8002ec8:	40c5      	lsrs	r5, r0
 8002eca:	0552      	lsls	r2, r2, #21
 8002ecc:	032d      	lsls	r5, r5, #12
 8002ece:	0b2d      	lsrs	r5, r5, #12
 8002ed0:	0d53      	lsrs	r3, r2, #21
 8002ed2:	e003      	b.n	8002edc <__aeabi_i2d+0x3c>
 8002ed4:	2400      	movs	r4, #0
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2500      	movs	r5, #0
 8002eda:	2600      	movs	r6, #0
 8002edc:	051b      	lsls	r3, r3, #20
 8002ede:	432b      	orrs	r3, r5
 8002ee0:	07e4      	lsls	r4, r4, #31
 8002ee2:	4323      	orrs	r3, r4
 8002ee4:	0030      	movs	r0, r6
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}
 8002eea:	380b      	subs	r0, #11
 8002eec:	4085      	lsls	r5, r0
 8002eee:	0552      	lsls	r2, r2, #21
 8002ef0:	032d      	lsls	r5, r5, #12
 8002ef2:	2600      	movs	r6, #0
 8002ef4:	0b2d      	lsrs	r5, r5, #12
 8002ef6:	0d53      	lsrs	r3, r2, #21
 8002ef8:	e7f0      	b.n	8002edc <__aeabi_i2d+0x3c>
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	0000041e 	.word	0x0000041e

08002f00 <__aeabi_ui2d>:
 8002f00:	b510      	push	{r4, lr}
 8002f02:	1e04      	subs	r4, r0, #0
 8002f04:	d010      	beq.n	8002f28 <__aeabi_ui2d+0x28>
 8002f06:	f000 f92b 	bl	8003160 <__clzsi2>
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <__aeabi_ui2d+0x48>)
 8002f0c:	1a1b      	subs	r3, r3, r0
 8002f0e:	280a      	cmp	r0, #10
 8002f10:	dc11      	bgt.n	8002f36 <__aeabi_ui2d+0x36>
 8002f12:	220b      	movs	r2, #11
 8002f14:	0021      	movs	r1, r4
 8002f16:	1a12      	subs	r2, r2, r0
 8002f18:	40d1      	lsrs	r1, r2
 8002f1a:	3015      	adds	r0, #21
 8002f1c:	030a      	lsls	r2, r1, #12
 8002f1e:	055b      	lsls	r3, r3, #21
 8002f20:	4084      	lsls	r4, r0
 8002f22:	0b12      	lsrs	r2, r2, #12
 8002f24:	0d5b      	lsrs	r3, r3, #21
 8002f26:	e001      	b.n	8002f2c <__aeabi_ui2d+0x2c>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	051b      	lsls	r3, r3, #20
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	0020      	movs	r0, r4
 8002f32:	0019      	movs	r1, r3
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	0022      	movs	r2, r4
 8002f38:	380b      	subs	r0, #11
 8002f3a:	4082      	lsls	r2, r0
 8002f3c:	055b      	lsls	r3, r3, #21
 8002f3e:	0312      	lsls	r2, r2, #12
 8002f40:	2400      	movs	r4, #0
 8002f42:	0b12      	lsrs	r2, r2, #12
 8002f44:	0d5b      	lsrs	r3, r3, #21
 8002f46:	e7f1      	b.n	8002f2c <__aeabi_ui2d+0x2c>
 8002f48:	0000041e 	.word	0x0000041e

08002f4c <__aeabi_f2d>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	0043      	lsls	r3, r0, #1
 8002f50:	0246      	lsls	r6, r0, #9
 8002f52:	0fc4      	lsrs	r4, r0, #31
 8002f54:	20fe      	movs	r0, #254	; 0xfe
 8002f56:	0e1b      	lsrs	r3, r3, #24
 8002f58:	1c59      	adds	r1, r3, #1
 8002f5a:	0a75      	lsrs	r5, r6, #9
 8002f5c:	4208      	tst	r0, r1
 8002f5e:	d00c      	beq.n	8002f7a <__aeabi_f2d+0x2e>
 8002f60:	22e0      	movs	r2, #224	; 0xe0
 8002f62:	0092      	lsls	r2, r2, #2
 8002f64:	4694      	mov	ip, r2
 8002f66:	076d      	lsls	r5, r5, #29
 8002f68:	0b36      	lsrs	r6, r6, #12
 8002f6a:	4463      	add	r3, ip
 8002f6c:	051b      	lsls	r3, r3, #20
 8002f6e:	4333      	orrs	r3, r6
 8002f70:	07e4      	lsls	r4, r4, #31
 8002f72:	4323      	orrs	r3, r4
 8002f74:	0028      	movs	r0, r5
 8002f76:	0019      	movs	r1, r3
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d114      	bne.n	8002fa8 <__aeabi_f2d+0x5c>
 8002f7e:	2d00      	cmp	r5, #0
 8002f80:	d01b      	beq.n	8002fba <__aeabi_f2d+0x6e>
 8002f82:	0028      	movs	r0, r5
 8002f84:	f000 f8ec 	bl	8003160 <__clzsi2>
 8002f88:	280a      	cmp	r0, #10
 8002f8a:	dc1c      	bgt.n	8002fc6 <__aeabi_f2d+0x7a>
 8002f8c:	230b      	movs	r3, #11
 8002f8e:	002e      	movs	r6, r5
 8002f90:	1a1b      	subs	r3, r3, r0
 8002f92:	40de      	lsrs	r6, r3
 8002f94:	0003      	movs	r3, r0
 8002f96:	3315      	adds	r3, #21
 8002f98:	409d      	lsls	r5, r3
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <__aeabi_f2d+0x88>)
 8002f9c:	0336      	lsls	r6, r6, #12
 8002f9e:	1a12      	subs	r2, r2, r0
 8002fa0:	0552      	lsls	r2, r2, #21
 8002fa2:	0b36      	lsrs	r6, r6, #12
 8002fa4:	0d53      	lsrs	r3, r2, #21
 8002fa6:	e7e1      	b.n	8002f6c <__aeabi_f2d+0x20>
 8002fa8:	2d00      	cmp	r5, #0
 8002faa:	d009      	beq.n	8002fc0 <__aeabi_f2d+0x74>
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	0b36      	lsrs	r6, r6, #12
 8002fb0:	0312      	lsls	r2, r2, #12
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <__aeabi_f2d+0x8c>)
 8002fb4:	076d      	lsls	r5, r5, #29
 8002fb6:	4316      	orrs	r6, r2
 8002fb8:	e7d8      	b.n	8002f6c <__aeabi_f2d+0x20>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	e7d5      	b.n	8002f6c <__aeabi_f2d+0x20>
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <__aeabi_f2d+0x8c>)
 8002fc4:	e7d2      	b.n	8002f6c <__aeabi_f2d+0x20>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	3b0b      	subs	r3, #11
 8002fca:	409d      	lsls	r5, r3
 8002fcc:	002e      	movs	r6, r5
 8002fce:	2500      	movs	r5, #0
 8002fd0:	e7e3      	b.n	8002f9a <__aeabi_f2d+0x4e>
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	00000389 	.word	0x00000389
 8002fd8:	000007ff 	.word	0x000007ff

08002fdc <__aeabi_d2f>:
 8002fdc:	0002      	movs	r2, r0
 8002fde:	004b      	lsls	r3, r1, #1
 8002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe2:	0d5b      	lsrs	r3, r3, #21
 8002fe4:	030c      	lsls	r4, r1, #12
 8002fe6:	4e3d      	ldr	r6, [pc, #244]	; (80030dc <__aeabi_d2f+0x100>)
 8002fe8:	0a64      	lsrs	r4, r4, #9
 8002fea:	0f40      	lsrs	r0, r0, #29
 8002fec:	1c5f      	adds	r7, r3, #1
 8002fee:	0fc9      	lsrs	r1, r1, #31
 8002ff0:	4304      	orrs	r4, r0
 8002ff2:	00d5      	lsls	r5, r2, #3
 8002ff4:	4237      	tst	r7, r6
 8002ff6:	d00a      	beq.n	800300e <__aeabi_d2f+0x32>
 8002ff8:	4839      	ldr	r0, [pc, #228]	; (80030e0 <__aeabi_d2f+0x104>)
 8002ffa:	181e      	adds	r6, r3, r0
 8002ffc:	2efe      	cmp	r6, #254	; 0xfe
 8002ffe:	dd16      	ble.n	800302e <__aeabi_d2f+0x52>
 8003000:	20ff      	movs	r0, #255	; 0xff
 8003002:	2400      	movs	r4, #0
 8003004:	05c0      	lsls	r0, r0, #23
 8003006:	4320      	orrs	r0, r4
 8003008:	07c9      	lsls	r1, r1, #31
 800300a:	4308      	orrs	r0, r1
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <__aeabi_d2f+0x44>
 8003012:	432c      	orrs	r4, r5
 8003014:	d026      	beq.n	8003064 <__aeabi_d2f+0x88>
 8003016:	2205      	movs	r2, #5
 8003018:	0192      	lsls	r2, r2, #6
 800301a:	0a54      	lsrs	r4, r2, #9
 800301c:	b2d8      	uxtb	r0, r3
 800301e:	e7f1      	b.n	8003004 <__aeabi_d2f+0x28>
 8003020:	4325      	orrs	r5, r4
 8003022:	d0ed      	beq.n	8003000 <__aeabi_d2f+0x24>
 8003024:	2080      	movs	r0, #128	; 0x80
 8003026:	03c0      	lsls	r0, r0, #15
 8003028:	4304      	orrs	r4, r0
 800302a:	20ff      	movs	r0, #255	; 0xff
 800302c:	e7ea      	b.n	8003004 <__aeabi_d2f+0x28>
 800302e:	2e00      	cmp	r6, #0
 8003030:	dd1b      	ble.n	800306a <__aeabi_d2f+0x8e>
 8003032:	0192      	lsls	r2, r2, #6
 8003034:	1e53      	subs	r3, r2, #1
 8003036:	419a      	sbcs	r2, r3
 8003038:	00e4      	lsls	r4, r4, #3
 800303a:	0f6d      	lsrs	r5, r5, #29
 800303c:	4322      	orrs	r2, r4
 800303e:	432a      	orrs	r2, r5
 8003040:	0753      	lsls	r3, r2, #29
 8003042:	d048      	beq.n	80030d6 <__aeabi_d2f+0xfa>
 8003044:	230f      	movs	r3, #15
 8003046:	4013      	ands	r3, r2
 8003048:	2b04      	cmp	r3, #4
 800304a:	d000      	beq.n	800304e <__aeabi_d2f+0x72>
 800304c:	3204      	adds	r2, #4
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	04db      	lsls	r3, r3, #19
 8003052:	4013      	ands	r3, r2
 8003054:	d03f      	beq.n	80030d6 <__aeabi_d2f+0xfa>
 8003056:	1c70      	adds	r0, r6, #1
 8003058:	2efe      	cmp	r6, #254	; 0xfe
 800305a:	d0d1      	beq.n	8003000 <__aeabi_d2f+0x24>
 800305c:	0192      	lsls	r2, r2, #6
 800305e:	0a54      	lsrs	r4, r2, #9
 8003060:	b2c0      	uxtb	r0, r0
 8003062:	e7cf      	b.n	8003004 <__aeabi_d2f+0x28>
 8003064:	2000      	movs	r0, #0
 8003066:	2400      	movs	r4, #0
 8003068:	e7cc      	b.n	8003004 <__aeabi_d2f+0x28>
 800306a:	0032      	movs	r2, r6
 800306c:	3217      	adds	r2, #23
 800306e:	db22      	blt.n	80030b6 <__aeabi_d2f+0xda>
 8003070:	2080      	movs	r0, #128	; 0x80
 8003072:	0400      	lsls	r0, r0, #16
 8003074:	4320      	orrs	r0, r4
 8003076:	241e      	movs	r4, #30
 8003078:	1ba4      	subs	r4, r4, r6
 800307a:	2c1f      	cmp	r4, #31
 800307c:	dd1d      	ble.n	80030ba <__aeabi_d2f+0xde>
 800307e:	2202      	movs	r2, #2
 8003080:	4252      	negs	r2, r2
 8003082:	1b96      	subs	r6, r2, r6
 8003084:	0002      	movs	r2, r0
 8003086:	40f2      	lsrs	r2, r6
 8003088:	0016      	movs	r6, r2
 800308a:	2c20      	cmp	r4, #32
 800308c:	d004      	beq.n	8003098 <__aeabi_d2f+0xbc>
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <__aeabi_d2f+0x108>)
 8003090:	4694      	mov	ip, r2
 8003092:	4463      	add	r3, ip
 8003094:	4098      	lsls	r0, r3
 8003096:	4305      	orrs	r5, r0
 8003098:	002a      	movs	r2, r5
 800309a:	1e53      	subs	r3, r2, #1
 800309c:	419a      	sbcs	r2, r3
 800309e:	4332      	orrs	r2, r6
 80030a0:	2600      	movs	r6, #0
 80030a2:	0753      	lsls	r3, r2, #29
 80030a4:	d1ce      	bne.n	8003044 <__aeabi_d2f+0x68>
 80030a6:	2480      	movs	r4, #128	; 0x80
 80030a8:	0013      	movs	r3, r2
 80030aa:	04e4      	lsls	r4, r4, #19
 80030ac:	2001      	movs	r0, #1
 80030ae:	4023      	ands	r3, r4
 80030b0:	4222      	tst	r2, r4
 80030b2:	d1d3      	bne.n	800305c <__aeabi_d2f+0x80>
 80030b4:	e7b0      	b.n	8003018 <__aeabi_d2f+0x3c>
 80030b6:	2300      	movs	r3, #0
 80030b8:	e7ad      	b.n	8003016 <__aeabi_d2f+0x3a>
 80030ba:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <__aeabi_d2f+0x10c>)
 80030bc:	4694      	mov	ip, r2
 80030be:	002a      	movs	r2, r5
 80030c0:	40e2      	lsrs	r2, r4
 80030c2:	0014      	movs	r4, r2
 80030c4:	002a      	movs	r2, r5
 80030c6:	4463      	add	r3, ip
 80030c8:	409a      	lsls	r2, r3
 80030ca:	4098      	lsls	r0, r3
 80030cc:	1e55      	subs	r5, r2, #1
 80030ce:	41aa      	sbcs	r2, r5
 80030d0:	4302      	orrs	r2, r0
 80030d2:	4322      	orrs	r2, r4
 80030d4:	e7e4      	b.n	80030a0 <__aeabi_d2f+0xc4>
 80030d6:	0033      	movs	r3, r6
 80030d8:	e79e      	b.n	8003018 <__aeabi_d2f+0x3c>
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	000007fe 	.word	0x000007fe
 80030e0:	fffffc80 	.word	0xfffffc80
 80030e4:	fffffca2 	.word	0xfffffca2
 80030e8:	fffffc82 	.word	0xfffffc82

080030ec <__aeabi_cfrcmple>:
 80030ec:	4684      	mov	ip, r0
 80030ee:	0008      	movs	r0, r1
 80030f0:	4661      	mov	r1, ip
 80030f2:	e7ff      	b.n	80030f4 <__aeabi_cfcmpeq>

080030f4 <__aeabi_cfcmpeq>:
 80030f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80030f6:	f000 f8c9 	bl	800328c <__lesf2>
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d401      	bmi.n	8003102 <__aeabi_cfcmpeq+0xe>
 80030fe:	2100      	movs	r1, #0
 8003100:	42c8      	cmn	r0, r1
 8003102:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003104 <__aeabi_fcmpeq>:
 8003104:	b510      	push	{r4, lr}
 8003106:	f000 f855 	bl	80031b4 <__eqsf2>
 800310a:	4240      	negs	r0, r0
 800310c:	3001      	adds	r0, #1
 800310e:	bd10      	pop	{r4, pc}

08003110 <__aeabi_fcmplt>:
 8003110:	b510      	push	{r4, lr}
 8003112:	f000 f8bb 	bl	800328c <__lesf2>
 8003116:	2800      	cmp	r0, #0
 8003118:	db01      	blt.n	800311e <__aeabi_fcmplt+0xe>
 800311a:	2000      	movs	r0, #0
 800311c:	bd10      	pop	{r4, pc}
 800311e:	2001      	movs	r0, #1
 8003120:	bd10      	pop	{r4, pc}
 8003122:	46c0      	nop			; (mov r8, r8)

08003124 <__aeabi_fcmple>:
 8003124:	b510      	push	{r4, lr}
 8003126:	f000 f8b1 	bl	800328c <__lesf2>
 800312a:	2800      	cmp	r0, #0
 800312c:	dd01      	ble.n	8003132 <__aeabi_fcmple+0xe>
 800312e:	2000      	movs	r0, #0
 8003130:	bd10      	pop	{r4, pc}
 8003132:	2001      	movs	r0, #1
 8003134:	bd10      	pop	{r4, pc}
 8003136:	46c0      	nop			; (mov r8, r8)

08003138 <__aeabi_fcmpgt>:
 8003138:	b510      	push	{r4, lr}
 800313a:	f000 f861 	bl	8003200 <__gesf2>
 800313e:	2800      	cmp	r0, #0
 8003140:	dc01      	bgt.n	8003146 <__aeabi_fcmpgt+0xe>
 8003142:	2000      	movs	r0, #0
 8003144:	bd10      	pop	{r4, pc}
 8003146:	2001      	movs	r0, #1
 8003148:	bd10      	pop	{r4, pc}
 800314a:	46c0      	nop			; (mov r8, r8)

0800314c <__aeabi_fcmpge>:
 800314c:	b510      	push	{r4, lr}
 800314e:	f000 f857 	bl	8003200 <__gesf2>
 8003152:	2800      	cmp	r0, #0
 8003154:	da01      	bge.n	800315a <__aeabi_fcmpge+0xe>
 8003156:	2000      	movs	r0, #0
 8003158:	bd10      	pop	{r4, pc}
 800315a:	2001      	movs	r0, #1
 800315c:	bd10      	pop	{r4, pc}
 800315e:	46c0      	nop			; (mov r8, r8)

08003160 <__clzsi2>:
 8003160:	211c      	movs	r1, #28
 8003162:	2301      	movs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	4298      	cmp	r0, r3
 8003168:	d301      	bcc.n	800316e <__clzsi2+0xe>
 800316a:	0c00      	lsrs	r0, r0, #16
 800316c:	3910      	subs	r1, #16
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	4298      	cmp	r0, r3
 8003172:	d301      	bcc.n	8003178 <__clzsi2+0x18>
 8003174:	0a00      	lsrs	r0, r0, #8
 8003176:	3908      	subs	r1, #8
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	4298      	cmp	r0, r3
 800317c:	d301      	bcc.n	8003182 <__clzsi2+0x22>
 800317e:	0900      	lsrs	r0, r0, #4
 8003180:	3904      	subs	r1, #4
 8003182:	a202      	add	r2, pc, #8	; (adr r2, 800318c <__clzsi2+0x2c>)
 8003184:	5c10      	ldrb	r0, [r2, r0]
 8003186:	1840      	adds	r0, r0, r1
 8003188:	4770      	bx	lr
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	02020304 	.word	0x02020304
 8003190:	01010101 	.word	0x01010101
	...

0800319c <__clzdi2>:
 800319c:	b510      	push	{r4, lr}
 800319e:	2900      	cmp	r1, #0
 80031a0:	d103      	bne.n	80031aa <__clzdi2+0xe>
 80031a2:	f7ff ffdd 	bl	8003160 <__clzsi2>
 80031a6:	3020      	adds	r0, #32
 80031a8:	e002      	b.n	80031b0 <__clzdi2+0x14>
 80031aa:	0008      	movs	r0, r1
 80031ac:	f7ff ffd8 	bl	8003160 <__clzsi2>
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)

080031b4 <__eqsf2>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	0042      	lsls	r2, r0, #1
 80031b8:	0245      	lsls	r5, r0, #9
 80031ba:	024e      	lsls	r6, r1, #9
 80031bc:	004c      	lsls	r4, r1, #1
 80031be:	0fc3      	lsrs	r3, r0, #31
 80031c0:	0a6d      	lsrs	r5, r5, #9
 80031c2:	2001      	movs	r0, #1
 80031c4:	0e12      	lsrs	r2, r2, #24
 80031c6:	0a76      	lsrs	r6, r6, #9
 80031c8:	0e24      	lsrs	r4, r4, #24
 80031ca:	0fc9      	lsrs	r1, r1, #31
 80031cc:	2aff      	cmp	r2, #255	; 0xff
 80031ce:	d006      	beq.n	80031de <__eqsf2+0x2a>
 80031d0:	2cff      	cmp	r4, #255	; 0xff
 80031d2:	d003      	beq.n	80031dc <__eqsf2+0x28>
 80031d4:	42a2      	cmp	r2, r4
 80031d6:	d101      	bne.n	80031dc <__eqsf2+0x28>
 80031d8:	42b5      	cmp	r5, r6
 80031da:	d006      	beq.n	80031ea <__eqsf2+0x36>
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
 80031de:	2d00      	cmp	r5, #0
 80031e0:	d1fc      	bne.n	80031dc <__eqsf2+0x28>
 80031e2:	2cff      	cmp	r4, #255	; 0xff
 80031e4:	d1fa      	bne.n	80031dc <__eqsf2+0x28>
 80031e6:	2e00      	cmp	r6, #0
 80031e8:	d1f8      	bne.n	80031dc <__eqsf2+0x28>
 80031ea:	428b      	cmp	r3, r1
 80031ec:	d006      	beq.n	80031fc <__eqsf2+0x48>
 80031ee:	2001      	movs	r0, #1
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d1f3      	bne.n	80031dc <__eqsf2+0x28>
 80031f4:	0028      	movs	r0, r5
 80031f6:	1e43      	subs	r3, r0, #1
 80031f8:	4198      	sbcs	r0, r3
 80031fa:	e7ef      	b.n	80031dc <__eqsf2+0x28>
 80031fc:	2000      	movs	r0, #0
 80031fe:	e7ed      	b.n	80031dc <__eqsf2+0x28>

08003200 <__gesf2>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	0042      	lsls	r2, r0, #1
 8003204:	0245      	lsls	r5, r0, #9
 8003206:	024e      	lsls	r6, r1, #9
 8003208:	004c      	lsls	r4, r1, #1
 800320a:	0fc3      	lsrs	r3, r0, #31
 800320c:	0a6d      	lsrs	r5, r5, #9
 800320e:	0e12      	lsrs	r2, r2, #24
 8003210:	0a76      	lsrs	r6, r6, #9
 8003212:	0e24      	lsrs	r4, r4, #24
 8003214:	0fc8      	lsrs	r0, r1, #31
 8003216:	2aff      	cmp	r2, #255	; 0xff
 8003218:	d01b      	beq.n	8003252 <__gesf2+0x52>
 800321a:	2cff      	cmp	r4, #255	; 0xff
 800321c:	d00e      	beq.n	800323c <__gesf2+0x3c>
 800321e:	2a00      	cmp	r2, #0
 8003220:	d11b      	bne.n	800325a <__gesf2+0x5a>
 8003222:	2c00      	cmp	r4, #0
 8003224:	d101      	bne.n	800322a <__gesf2+0x2a>
 8003226:	2e00      	cmp	r6, #0
 8003228:	d01c      	beq.n	8003264 <__gesf2+0x64>
 800322a:	2d00      	cmp	r5, #0
 800322c:	d00c      	beq.n	8003248 <__gesf2+0x48>
 800322e:	4283      	cmp	r3, r0
 8003230:	d01c      	beq.n	800326c <__gesf2+0x6c>
 8003232:	2102      	movs	r1, #2
 8003234:	1e58      	subs	r0, r3, #1
 8003236:	4008      	ands	r0, r1
 8003238:	3801      	subs	r0, #1
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	2e00      	cmp	r6, #0
 800323e:	d122      	bne.n	8003286 <__gesf2+0x86>
 8003240:	2a00      	cmp	r2, #0
 8003242:	d1f4      	bne.n	800322e <__gesf2+0x2e>
 8003244:	2d00      	cmp	r5, #0
 8003246:	d1f2      	bne.n	800322e <__gesf2+0x2e>
 8003248:	2800      	cmp	r0, #0
 800324a:	d1f6      	bne.n	800323a <__gesf2+0x3a>
 800324c:	2001      	movs	r0, #1
 800324e:	4240      	negs	r0, r0
 8003250:	e7f3      	b.n	800323a <__gesf2+0x3a>
 8003252:	2d00      	cmp	r5, #0
 8003254:	d117      	bne.n	8003286 <__gesf2+0x86>
 8003256:	2cff      	cmp	r4, #255	; 0xff
 8003258:	d0f0      	beq.n	800323c <__gesf2+0x3c>
 800325a:	2c00      	cmp	r4, #0
 800325c:	d1e7      	bne.n	800322e <__gesf2+0x2e>
 800325e:	2e00      	cmp	r6, #0
 8003260:	d1e5      	bne.n	800322e <__gesf2+0x2e>
 8003262:	e7e6      	b.n	8003232 <__gesf2+0x32>
 8003264:	2000      	movs	r0, #0
 8003266:	2d00      	cmp	r5, #0
 8003268:	d0e7      	beq.n	800323a <__gesf2+0x3a>
 800326a:	e7e2      	b.n	8003232 <__gesf2+0x32>
 800326c:	42a2      	cmp	r2, r4
 800326e:	dc05      	bgt.n	800327c <__gesf2+0x7c>
 8003270:	dbea      	blt.n	8003248 <__gesf2+0x48>
 8003272:	42b5      	cmp	r5, r6
 8003274:	d802      	bhi.n	800327c <__gesf2+0x7c>
 8003276:	d3e7      	bcc.n	8003248 <__gesf2+0x48>
 8003278:	2000      	movs	r0, #0
 800327a:	e7de      	b.n	800323a <__gesf2+0x3a>
 800327c:	4243      	negs	r3, r0
 800327e:	4158      	adcs	r0, r3
 8003280:	0040      	lsls	r0, r0, #1
 8003282:	3801      	subs	r0, #1
 8003284:	e7d9      	b.n	800323a <__gesf2+0x3a>
 8003286:	2002      	movs	r0, #2
 8003288:	4240      	negs	r0, r0
 800328a:	e7d6      	b.n	800323a <__gesf2+0x3a>

0800328c <__lesf2>:
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	0042      	lsls	r2, r0, #1
 8003290:	0245      	lsls	r5, r0, #9
 8003292:	024e      	lsls	r6, r1, #9
 8003294:	004c      	lsls	r4, r1, #1
 8003296:	0fc3      	lsrs	r3, r0, #31
 8003298:	0a6d      	lsrs	r5, r5, #9
 800329a:	0e12      	lsrs	r2, r2, #24
 800329c:	0a76      	lsrs	r6, r6, #9
 800329e:	0e24      	lsrs	r4, r4, #24
 80032a0:	0fc8      	lsrs	r0, r1, #31
 80032a2:	2aff      	cmp	r2, #255	; 0xff
 80032a4:	d00b      	beq.n	80032be <__lesf2+0x32>
 80032a6:	2cff      	cmp	r4, #255	; 0xff
 80032a8:	d00d      	beq.n	80032c6 <__lesf2+0x3a>
 80032aa:	2a00      	cmp	r2, #0
 80032ac:	d11f      	bne.n	80032ee <__lesf2+0x62>
 80032ae:	2c00      	cmp	r4, #0
 80032b0:	d116      	bne.n	80032e0 <__lesf2+0x54>
 80032b2:	2e00      	cmp	r6, #0
 80032b4:	d114      	bne.n	80032e0 <__lesf2+0x54>
 80032b6:	2000      	movs	r0, #0
 80032b8:	2d00      	cmp	r5, #0
 80032ba:	d010      	beq.n	80032de <__lesf2+0x52>
 80032bc:	e009      	b.n	80032d2 <__lesf2+0x46>
 80032be:	2d00      	cmp	r5, #0
 80032c0:	d10c      	bne.n	80032dc <__lesf2+0x50>
 80032c2:	2cff      	cmp	r4, #255	; 0xff
 80032c4:	d113      	bne.n	80032ee <__lesf2+0x62>
 80032c6:	2e00      	cmp	r6, #0
 80032c8:	d108      	bne.n	80032dc <__lesf2+0x50>
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	d008      	beq.n	80032e0 <__lesf2+0x54>
 80032ce:	4283      	cmp	r3, r0
 80032d0:	d012      	beq.n	80032f8 <__lesf2+0x6c>
 80032d2:	2102      	movs	r1, #2
 80032d4:	1e58      	subs	r0, r3, #1
 80032d6:	4008      	ands	r0, r1
 80032d8:	3801      	subs	r0, #1
 80032da:	e000      	b.n	80032de <__lesf2+0x52>
 80032dc:	2002      	movs	r0, #2
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d1f4      	bne.n	80032ce <__lesf2+0x42>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d1fa      	bne.n	80032de <__lesf2+0x52>
 80032e8:	2001      	movs	r0, #1
 80032ea:	4240      	negs	r0, r0
 80032ec:	e7f7      	b.n	80032de <__lesf2+0x52>
 80032ee:	2c00      	cmp	r4, #0
 80032f0:	d1ed      	bne.n	80032ce <__lesf2+0x42>
 80032f2:	2e00      	cmp	r6, #0
 80032f4:	d1eb      	bne.n	80032ce <__lesf2+0x42>
 80032f6:	e7ec      	b.n	80032d2 <__lesf2+0x46>
 80032f8:	42a2      	cmp	r2, r4
 80032fa:	dc05      	bgt.n	8003308 <__lesf2+0x7c>
 80032fc:	dbf2      	blt.n	80032e4 <__lesf2+0x58>
 80032fe:	42b5      	cmp	r5, r6
 8003300:	d802      	bhi.n	8003308 <__lesf2+0x7c>
 8003302:	d3ef      	bcc.n	80032e4 <__lesf2+0x58>
 8003304:	2000      	movs	r0, #0
 8003306:	e7ea      	b.n	80032de <__lesf2+0x52>
 8003308:	4243      	negs	r3, r0
 800330a:	4158      	adcs	r0, r3
 800330c:	0040      	lsls	r0, r0, #1
 800330e:	3801      	subs	r0, #1
 8003310:	e7e5      	b.n	80032de <__lesf2+0x52>
 8003312:	46c0      	nop			; (mov r8, r8)

08003314 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800331a:	003b      	movs	r3, r7
 800331c:	0018      	movs	r0, r3
 800331e:	2308      	movs	r3, #8
 8003320:	001a      	movs	r2, r3
 8003322:	2100      	movs	r1, #0
 8003324:	f007 fe7a 	bl	800b01c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003328:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <MX_ADC_Init+0xd0>)
 800332a:	4a2f      	ldr	r2, [pc, #188]	; (80033e8 <MX_ADC_Init+0xd4>)
 800332c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = ENABLE;
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003330:	2201      	movs	r2, #1
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003336:	220c      	movs	r2, #12
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800333a:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <MX_ADC_Init+0xd0>)
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003342:	2200      	movs	r2, #0
 8003344:	649a      	str	r2, [r3, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	05d2      	lsls	r2, r2, #23
 800334c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800334e:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003356:	2207      	movs	r2, #7
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <MX_ADC_Init+0xd0>)
 800335c:	2201      	movs	r2, #1
 800335e:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003360:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003366:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003368:	2220      	movs	r2, #32
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800336e:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003370:	2221      	movs	r2, #33	; 0x21
 8003372:	2100      	movs	r1, #0
 8003374:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003378:	2200      	movs	r2, #0
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <MX_ADC_Init+0xd0>)
 800337e:	22c2      	movs	r2, #194	; 0xc2
 8003380:	32ff      	adds	r2, #255	; 0xff
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003386:	222c      	movs	r2, #44	; 0x2c
 8003388:	2101      	movs	r1, #1
 800338a:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800338c:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <MX_ADC_Init+0xd0>)
 800338e:	2204      	movs	r2, #4
 8003390:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003392:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <MX_ADC_Init+0xd0>)
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <MX_ADC_Init+0xd0>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <MX_ADC_Init+0xd0>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <MX_ADC_Init+0xd0>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <MX_ADC_Init+0xd0>)
 80033ac:	0018      	movs	r0, r3
 80033ae:	f002 fb73 	bl	8005a98 <HAL_ADC_Init>
 80033b2:	1e03      	subs	r3, r0, #0
 80033b4:	d001      	beq.n	80033ba <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80033b6:	f000 fd2b 	bl	8003e10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80033ba:	003b      	movs	r3, r7
 80033bc:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <MX_ADC_Init+0xd8>)
 80033be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80033c0:	003b      	movs	r3, r7
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	0152      	lsls	r2, r2, #5
 80033c6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033c8:	003a      	movs	r2, r7
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <MX_ADC_Init+0xd0>)
 80033cc:	0011      	movs	r1, r2
 80033ce:	0018      	movs	r0, r3
 80033d0:	f002 fd70 	bl	8005eb4 <HAL_ADC_ConfigChannel>
 80033d4:	1e03      	subs	r3, r0, #0
 80033d6:	d001      	beq.n	80033dc <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 80033d8:	f000 fd1a 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	200001f8 	.word	0x200001f8
 80033e8:	40012400 	.word	0x40012400
 80033ec:	04000002 	.word	0x04000002

080033f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	240c      	movs	r4, #12
 80033fa:	193b      	adds	r3, r7, r4
 80033fc:	0018      	movs	r0, r3
 80033fe:	2314      	movs	r3, #20
 8003400:	001a      	movs	r2, r3
 8003402:	2100      	movs	r1, #0
 8003404:	f007 fe0a 	bl	800b01c <memset>
  if(adcHandle->Instance==ADC1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <HAL_ADC_MspInit+0xc8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d14d      	bne.n	80034ae <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	0089      	lsls	r1, r1, #2
 800341c:	430a      	orrs	r2, r1
 800341e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003420:	4b26      	ldr	r3, [pc, #152]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 8003426:	2101      	movs	r1, #1
 8003428:	430a      	orrs	r2, r1
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <HAL_ADC_MspInit+0xcc>)
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003438:	193b      	adds	r3, r7, r4
 800343a:	2202      	movs	r2, #2
 800343c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343e:	193b      	adds	r3, r7, r4
 8003440:	2203      	movs	r2, #3
 8003442:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	193b      	adds	r3, r7, r4
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	193a      	adds	r2, r7, r4
 800344c:	23a0      	movs	r3, #160	; 0xa0
 800344e:	05db      	lsls	r3, r3, #23
 8003450:	0011      	movs	r1, r2
 8003452:	0018      	movs	r0, r3
 8003454:	f003 f9ea 	bl	800682c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 800345a:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <HAL_ADC_MspInit+0xd4>)
 800345c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 8003460:	2200      	movs	r2, #0
 8003462:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 800346c:	2200      	movs	r2, #0
 800346e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	0052      	lsls	r2, r2, #1
 800347c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	00d2      	lsls	r2, r2, #3
 8003484:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 8003488:	2220      	movs	r2, #32
 800348a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 800348e:	2200      	movs	r2, #0
 8003490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 8003494:	0018      	movs	r0, r3
 8003496:	f003 f835 	bl	8006504 <HAL_DMA_Init>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d001      	beq.n	80034a2 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800349e:	f000 fcb7 	bl	8003e10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a06      	ldr	r2, [pc, #24]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 80034a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_ADC_MspInit+0xd0>)
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b009      	add	sp, #36	; 0x24
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40012400 	.word	0x40012400
 80034bc:	40021000 	.word	0x40021000
 80034c0:	20000254 	.word	0x20000254
 80034c4:	40020008 	.word	0x40020008

080034c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <MX_DMA_Init+0x28>)
 80034d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <MX_DMA_Init+0x28>)
 80034d4:	2101      	movs	r1, #1
 80034d6:	430a      	orrs	r2, r1
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <MX_DMA_Init+0x28>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	2201      	movs	r2, #1
 80034e0:	4013      	ands	r3, r2
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]

}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	40021000 	.word	0x40021000

080034f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fa:	240c      	movs	r4, #12
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	0018      	movs	r0, r3
 8003500:	2314      	movs	r3, #20
 8003502:	001a      	movs	r2, r3
 8003504:	2100      	movs	r1, #0
 8003506:	f007 fd89 	bl	800b01c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800350a:	4b57      	ldr	r3, [pc, #348]	; (8003668 <MX_GPIO_Init+0x174>)
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	4b56      	ldr	r3, [pc, #344]	; (8003668 <MX_GPIO_Init+0x174>)
 8003510:	2104      	movs	r1, #4
 8003512:	430a      	orrs	r2, r1
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c
 8003516:	4b54      	ldr	r3, [pc, #336]	; (8003668 <MX_GPIO_Init+0x174>)
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	2204      	movs	r2, #4
 800351c:	4013      	ands	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <MX_GPIO_Init+0x174>)
 8003524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003526:	4b50      	ldr	r3, [pc, #320]	; (8003668 <MX_GPIO_Init+0x174>)
 8003528:	2101      	movs	r1, #1
 800352a:	430a      	orrs	r2, r1
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c
 800352e:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <MX_GPIO_Init+0x174>)
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	2201      	movs	r2, #1
 8003534:	4013      	ands	r3, r2
 8003536:	607b      	str	r3, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800353a:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <MX_GPIO_Init+0x174>)
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <MX_GPIO_Init+0x174>)
 8003540:	2102      	movs	r1, #2
 8003542:	430a      	orrs	r2, r1
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c
 8003546:	4b48      	ldr	r3, [pc, #288]	; (8003668 <MX_GPIO_Init+0x174>)
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	2202      	movs	r2, #2
 800354c:	4013      	ands	r3, r2
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, GPIO_PIN_RESET);
 8003552:	23a0      	movs	r3, #160	; 0xa0
 8003554:	05db      	lsls	r3, r3, #23
 8003556:	2200      	movs	r2, #0
 8003558:	2120      	movs	r1, #32
 800355a:	0018      	movs	r0, r3
 800355c:	f003 fae4 	bl	8006b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8003560:	4b42      	ldr	r3, [pc, #264]	; (800366c <MX_GPIO_Init+0x178>)
 8003562:	2200      	movs	r2, #0
 8003564:	2144      	movs	r1, #68	; 0x44
 8003566:	0018      	movs	r0, r3
 8003568:	f003 fade 	bl	8006b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <MX_GPIO_Init+0x17c>)
 800356e:	2200      	movs	r2, #0
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	0018      	movs	r0, r3
 8003574:	f003 fad8 	bl	8006b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003578:	193b      	adds	r3, r7, r4
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	0192      	lsls	r2, r2, #6
 800357e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003580:	193b      	adds	r3, r7, r4
 8003582:	2200      	movs	r2, #0
 8003584:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	193b      	adds	r3, r7, r4
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800358c:	193b      	adds	r3, r7, r4
 800358e:	4a38      	ldr	r2, [pc, #224]	; (8003670 <MX_GPIO_Init+0x17c>)
 8003590:	0019      	movs	r1, r3
 8003592:	0010      	movs	r0, r2
 8003594:	f003 f94a 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin;
 8003598:	193b      	adds	r3, r7, r4
 800359a:	2220      	movs	r2, #32
 800359c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	2201      	movs	r2, #1
 80035a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	193b      	adds	r3, r7, r4
 80035ac:	2200      	movs	r2, #0
 80035ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M1_DIR_GPIO_Port, &GPIO_InitStruct);
 80035b0:	193a      	adds	r2, r7, r4
 80035b2:	23a0      	movs	r3, #160	; 0xa0
 80035b4:	05db      	lsls	r3, r3, #23
 80035b6:	0011      	movs	r1, r2
 80035b8:	0018      	movs	r0, r3
 80035ba:	f003 f937 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|M2_DIR_Pin;
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	2244      	movs	r2, #68	; 0x44
 80035c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	2201      	movs	r2, #1
 80035c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	4a24      	ldr	r2, [pc, #144]	; (800366c <MX_GPIO_Init+0x178>)
 80035da:	0019      	movs	r1, r3
 80035dc:	0010      	movs	r0, r2
 80035de:	f003 f925 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 80035e2:	193b      	adds	r3, r7, r4
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e8:	193b      	adds	r3, r7, r4
 80035ea:	2201      	movs	r2, #1
 80035ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	193b      	adds	r3, r7, r4
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <MX_GPIO_Init+0x17c>)
 80035fe:	0019      	movs	r1, r3
 8003600:	0010      	movs	r0, r2
 8003602:	f003 f913 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8003606:	193b      	adds	r3, r7, r4
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	0052      	lsls	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800360e:	193b      	adds	r3, r7, r4
 8003610:	2288      	movs	r2, #136	; 0x88
 8003612:	0352      	lsls	r2, r2, #13
 8003614:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003616:	193b      	adds	r3, r7, r4
 8003618:	2202      	movs	r2, #2
 800361a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800361c:	193a      	adds	r2, r7, r4
 800361e:	23a0      	movs	r3, #160	; 0xa0
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f003 f901 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800362a:	0021      	movs	r1, r4
 800362c:	187b      	adds	r3, r7, r1
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003634:	187b      	adds	r3, r7, r1
 8003636:	2284      	movs	r2, #132	; 0x84
 8003638:	0392      	lsls	r2, r2, #14
 800363a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	187b      	adds	r3, r7, r1
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003642:	187a      	adds	r2, r7, r1
 8003644:	23a0      	movs	r3, #160	; 0xa0
 8003646:	05db      	lsls	r3, r3, #23
 8003648:	0011      	movs	r1, r2
 800364a:	0018      	movs	r0, r3
 800364c:	f003 f8ee 	bl	800682c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8003650:	2200      	movs	r2, #0
 8003652:	2103      	movs	r1, #3
 8003654:	2007      	movs	r0, #7
 8003656:	f002 ff23 	bl	80064a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800365a:	2007      	movs	r0, #7
 800365c:	f002 ff35 	bl	80064ca <HAL_NVIC_EnableIRQ>

}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b009      	add	sp, #36	; 0x24
 8003666:	bd90      	pop	{r4, r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	50000400 	.word	0x50000400
 8003670:	50000800 	.word	0x50000800

08003674 <HCSR04_Read>:
  * @brief  Function to get current measurement value.
  * @param[in] *Result Pointer on the variable receiving the measurement
  * @retval None
  */
void HCSR04_Read(uint16_t *Result)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	*Result =  hcsr04_Distance;
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HCSR04_Read+0x1c>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29a      	uxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	801a      	strh	r2, [r3, #0]

}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b002      	add	sp, #8
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	200002a0 	.word	0x200002a0

08003694 <HCSR04_TIM_IC_CaptureCallback>:
  * @brief  Function to determine the value of the measured distance.
  * @param[in] *htim Pointer on the timer that triggers the measurement
  * @retval None
  */
void HCSR04_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	if(htim == htim_hcsr04)
 800369c:	4b13      	ldr	r3, [pc, #76]	; (80036ec <HCSR04_TIM_IC_CaptureCallback+0x58>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d11d      	bne.n	80036e2 <HCSR04_TIM_IC_CaptureCallback+0x4e>
	{
		uint16_t time;

		time = (uint16_t)((uint16_t)__HAL_TIM_GetCompare(htim_hcsr04, HCSR04_STOP_CHANNEL) - (uint16_t)__HAL_TIM_GetCompare(htim_hcsr04, HCSR04_START_CHANNEL));
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HCSR04_TIM_IC_CaptureCallback+0x58>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ae:	b299      	uxth	r1, r3
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HCSR04_TIM_IC_CaptureCallback+0x58>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	200e      	movs	r0, #14
 80036bc:	183b      	adds	r3, r7, r0
 80036be:	1a8a      	subs	r2, r1, r2
 80036c0:	801a      	strh	r2, [r3, #0]

		  /** Saving the distance to a volatile variable
		  */
		hcsr04_Distance = time / 58;
 80036c2:	183b      	adds	r3, r7, r0
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	213a      	movs	r1, #58	; 0x3a
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7fc fd39 	bl	8000140 <__udivsi3>
 80036ce:	0003      	movs	r3, r0
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HCSR04_TIM_IC_CaptureCallback+0x5c>)
 80036d4:	801a      	strh	r2, [r3, #0]


		HAL_TIM_IC_Start_IT(htim_hcsr04, HCSR04_STOP_CHANNEL);
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HCSR04_TIM_IC_CaptureCallback+0x58>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2100      	movs	r1, #0
 80036dc:	0018      	movs	r0, r3
 80036de:	f005 fb99 	bl	8008e14 <HAL_TIM_IC_Start_IT>
	}
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	2000029c 	.word	0x2000029c
 80036f0:	200002a0 	.word	0x200002a0

080036f4 <HCSR04_Init>:
/**
  * @brief  Init HCSR04 timers.
  * @retval None
  */
void HCSR04_Init(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	htim_hcsr04 = htim;
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HCSR04_Init+0x44>)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(htim_hcsr04);
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HCSR04_Init+0x44>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	0018      	movs	r0, r3
 8003708:	f005 f946 	bl	8008998 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_hcsr04, HCSR04_PWM_CHANNEL);
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HCSR04_Init+0x44>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2108      	movs	r1, #8
 8003712:	0018      	movs	r0, r3
 8003714:	f005 fa24 	bl	8008b60 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start(htim_hcsr04, HCSR04_START_CHANNEL);
 8003718:	4b07      	ldr	r3, [pc, #28]	; (8003738 <HCSR04_Init+0x44>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2104      	movs	r1, #4
 800371e:	0018      	movs	r0, r3
 8003720:	f005 faf0 	bl	8008d04 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(htim_hcsr04, HCSR04_STOP_CHANNEL);
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <HCSR04_Init+0x44>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2100      	movs	r1, #0
 800372a:	0018      	movs	r0, r3
 800372c:	f005 fb72 	bl	8008e14 <HAL_TIM_IC_Start_IT>

}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}
 8003738:	2000029c 	.word	0x2000029c

0800373c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <MX_I2C2_Init+0x74>)
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <MX_I2C2_Init+0x78>)
 8003744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <MX_I2C2_Init+0x74>)
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <MX_I2C2_Init+0x7c>)
 800374a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <MX_I2C2_Init+0x74>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <MX_I2C2_Init+0x74>)
 8003754:	2201      	movs	r2, #1
 8003756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <MX_I2C2_Init+0x74>)
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <MX_I2C2_Init+0x74>)
 8003760:	2200      	movs	r2, #0
 8003762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <MX_I2C2_Init+0x74>)
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <MX_I2C2_Init+0x74>)
 800376c:	2200      	movs	r2, #0
 800376e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <MX_I2C2_Init+0x74>)
 8003772:	2200      	movs	r2, #0
 8003774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <MX_I2C2_Init+0x74>)
 8003778:	0018      	movs	r0, r3
 800377a:	f003 fa0f 	bl	8006b9c <HAL_I2C_Init>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d001      	beq.n	8003786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003782:	f000 fb45 	bl	8003e10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <MX_I2C2_Init+0x74>)
 8003788:	2100      	movs	r1, #0
 800378a:	0018      	movs	r0, r3
 800378c:	f003 fa9c 	bl	8006cc8 <HAL_I2CEx_ConfigAnalogFilter>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003794:	f000 fb3c 	bl	8003e10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <MX_I2C2_Init+0x74>)
 800379a:	2100      	movs	r1, #0
 800379c:	0018      	movs	r0, r3
 800379e:	f003 fadf 	bl	8006d60 <HAL_I2CEx_ConfigDigitalFilter>
 80037a2:	1e03      	subs	r3, r0, #0
 80037a4:	d001      	beq.n	80037aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80037a6:	f000 fb33 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200002a4 	.word	0x200002a4
 80037b4:	40005800 	.word	0x40005800
 80037b8:	00707cbb 	.word	0x00707cbb

080037bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	240c      	movs	r4, #12
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	0018      	movs	r0, r3
 80037ca:	2314      	movs	r3, #20
 80037cc:	001a      	movs	r2, r3
 80037ce:	2100      	movs	r1, #0
 80037d0:	f007 fc24 	bl	800b01c <memset>
  if(i2cHandle->Instance==I2C2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a23      	ldr	r2, [pc, #140]	; (8003868 <HAL_I2C_MspInit+0xac>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d13f      	bne.n	800385e <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_I2C_MspInit+0xb0>)
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_I2C_MspInit+0xb0>)
 80037e4:	2102      	movs	r1, #2
 80037e6:	430a      	orrs	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_I2C_MspInit+0xb0>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	2202      	movs	r2, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037f6:	193b      	adds	r3, r7, r4
 80037f8:	2280      	movs	r2, #128	; 0x80
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037fe:	193b      	adds	r3, r7, r4
 8003800:	2212      	movs	r2, #18
 8003802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	193b      	adds	r3, r7, r4
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380a:	193b      	adds	r3, r7, r4
 800380c:	2203      	movs	r2, #3
 800380e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003810:	193b      	adds	r3, r7, r4
 8003812:	2206      	movs	r2, #6
 8003814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003816:	193b      	adds	r3, r7, r4
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <HAL_I2C_MspInit+0xb4>)
 800381a:	0019      	movs	r1, r3
 800381c:	0010      	movs	r0, r2
 800381e:	f003 f805 	bl	800682c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003822:	0021      	movs	r1, r4
 8003824:	187b      	adds	r3, r7, r1
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	0192      	lsls	r2, r2, #6
 800382a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800382c:	187b      	adds	r3, r7, r1
 800382e:	2212      	movs	r2, #18
 8003830:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	187b      	adds	r3, r7, r1
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003838:	187b      	adds	r3, r7, r1
 800383a:	2203      	movs	r2, #3
 800383c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800383e:	187b      	adds	r3, r7, r1
 8003840:	2205      	movs	r2, #5
 8003842:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003844:	187b      	adds	r3, r7, r1
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_I2C_MspInit+0xb4>)
 8003848:	0019      	movs	r1, r3
 800384a:	0010      	movs	r0, r2
 800384c:	f002 ffee 	bl	800682c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_I2C_MspInit+0xb0>)
 8003852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_I2C_MspInit+0xb0>)
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	03c9      	lsls	r1, r1, #15
 800385a:	430a      	orrs	r2, r1
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	46bd      	mov	sp, r7
 8003862:	b009      	add	sp, #36	; 0x24
 8003864:	bd90      	pop	{r4, r7, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	40005800 	.word	0x40005800
 800386c:	40021000 	.word	0x40021000
 8003870:	50000400 	.word	0x50000400

08003874 <KalmanFilter>:
  * @param[in] est_e Estimation error
  * @param[in] q Noise in the system
  * @retval None
  */
void KalmanFilter(Kalman_t *Kalman, uint16_t mea_e, uint16_t est_e, uint16_t q)
{
 8003874:	b5b0      	push	{r4, r5, r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	000c      	movs	r4, r1
 800387e:	0010      	movs	r0, r2
 8003880:	0019      	movs	r1, r3
 8003882:	250a      	movs	r5, #10
 8003884:	197b      	adds	r3, r7, r5
 8003886:	1c22      	adds	r2, r4, #0
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	2408      	movs	r4, #8
 800388c:	193b      	adds	r3, r7, r4
 800388e:	1c02      	adds	r2, r0, #0
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	1c0a      	adds	r2, r1, #0
 8003896:	801a      	strh	r2, [r3, #0]
	Kalman->_err_measure=mea_e;
 8003898:	197b      	adds	r3, r7, r5
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	0018      	movs	r0, r3
 800389e:	f7fd fd2d 	bl	80012fc <__aeabi_ui2f>
 80038a2:	1c02      	adds	r2, r0, #0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]
	Kalman->_err_est=est_e;
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7fd fd25 	bl	80012fc <__aeabi_ui2f>
 80038b2:	1c02      	adds	r2, r0, #0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]
	Kalman->_q = q;
 80038b8:	1dbb      	adds	r3, r7, #6
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	0018      	movs	r0, r3
 80038be:	f7fd fd1d 	bl	80012fc <__aeabi_ui2f>
 80038c2:	1c02      	adds	r2, r0, #0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b004      	add	sp, #16
 80038ce:	bdb0      	pop	{r4, r5, r7, pc}

080038d0 <estimate>:
  * @param[in] *Kalman Pointer to a structure that stores filter parameters
  * @param[in] mea Measurement
  * @param[out] _curr_est Measurement estimate
  */
uint16_t estimate(Kalman_t *Kalman, uint16_t mea)
{
 80038d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d2:	46c6      	mov	lr, r8
 80038d4:	b500      	push	{lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	000a      	movs	r2, r1
 80038de:	230a      	movs	r3, #10
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	801a      	strh	r2, [r3, #0]
	Kalman->_kalman_gain = (Kalman->_err_est)/((Kalman->_err_est) + (Kalman->_err_measure));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685e      	ldr	r6, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1c19      	adds	r1, r3, #0
 80038f2:	1c10      	adds	r0, r2, #0
 80038f4:	f7fc ff0a 	bl	800070c <__aeabi_fadd>
 80038f8:	1c03      	adds	r3, r0, #0
 80038fa:	1c19      	adds	r1, r3, #0
 80038fc:	1c30      	adds	r0, r6, #0
 80038fe:	f7fd f8a3 	bl	8000a48 <__aeabi_fdiv>
 8003902:	1c03      	adds	r3, r0, #0
 8003904:	1c1a      	adds	r2, r3, #0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	611a      	str	r2, [r3, #16]
	Kalman->_curr_est = Kalman->_last_est + Kalman->_kalman_gain * (mea - Kalman->_last_est);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	89db      	ldrh	r3, [r3, #14]
 800390e:	b29b      	uxth	r3, r3
 8003910:	0018      	movs	r0, r3
 8003912:	f7fd fca5 	bl	8001260 <__aeabi_i2f>
 8003916:	4680      	mov	r8, r0
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691e      	ldr	r6, [r3, #16]
 800391c:	230a      	movs	r3, #10
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	89d2      	ldrh	r2, [r2, #14]
 8003926:	b292      	uxth	r2, r2
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	0018      	movs	r0, r3
 800392c:	f7fd fc98 	bl	8001260 <__aeabi_i2f>
 8003930:	1c03      	adds	r3, r0, #0
 8003932:	1c19      	adds	r1, r3, #0
 8003934:	1c30      	adds	r0, r6, #0
 8003936:	f7fd f99f 	bl	8000c78 <__aeabi_fmul>
 800393a:	1c03      	adds	r3, r0, #0
 800393c:	1c19      	adds	r1, r3, #0
 800393e:	4640      	mov	r0, r8
 8003940:	f7fc fee4 	bl	800070c <__aeabi_fadd>
 8003944:	1c03      	adds	r3, r0, #0
 8003946:	1c18      	adds	r0, r3, #0
 8003948:	f7fc fdfc 	bl	8000544 <__aeabi_f2uiz>
 800394c:	0003      	movs	r3, r0
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	819a      	strh	r2, [r3, #12]
	Kalman->_err_est =  (1.0 - Kalman->_kalman_gain)*Kalman->_err_est + fabs(Kalman->_last_est-Kalman->_curr_est)*Kalman->_q;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	1c18      	adds	r0, r3, #0
 800395a:	f7ff faf7 	bl	8002f4c <__aeabi_f2d>
 800395e:	0002      	movs	r2, r0
 8003960:	000b      	movs	r3, r1
 8003962:	2000      	movs	r0, #0
 8003964:	4927      	ldr	r1, [pc, #156]	; (8003a04 <estimate+0x134>)
 8003966:	f7fe feb5 	bl	80026d4 <__aeabi_dsub>
 800396a:	0002      	movs	r2, r0
 800396c:	000b      	movs	r3, r1
 800396e:	603a      	str	r2, [r7, #0]
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	1c18      	adds	r0, r3, #0
 8003978:	f7ff fae8 	bl	8002f4c <__aeabi_f2d>
 800397c:	0002      	movs	r2, r0
 800397e:	000b      	movs	r3, r1
 8003980:	6838      	ldr	r0, [r7, #0]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	f7fe fc3a 	bl	80021fc <__aeabi_dmul>
 8003988:	0002      	movs	r2, r0
 800398a:	000b      	movs	r3, r1
 800398c:	603a      	str	r2, [r7, #0]
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	89db      	ldrh	r3, [r3, #14]
 8003994:	b29b      	uxth	r3, r3
 8003996:	001a      	movs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	899b      	ldrh	r3, [r3, #12]
 800399c:	b29b      	uxth	r3, r3
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7ff fa7d 	bl	8002ea0 <__aeabi_i2d>
 80039a6:	0002      	movs	r2, r0
 80039a8:	000b      	movs	r3, r1
 80039aa:	0011      	movs	r1, r2
 80039ac:	000c      	movs	r4, r1
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	085d      	lsrs	r5, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	1c18      	adds	r0, r3, #0
 80039b8:	f7ff fac8 	bl	8002f4c <__aeabi_f2d>
 80039bc:	0002      	movs	r2, r0
 80039be:	000b      	movs	r3, r1
 80039c0:	0020      	movs	r0, r4
 80039c2:	0029      	movs	r1, r5
 80039c4:	f7fe fc1a 	bl	80021fc <__aeabi_dmul>
 80039c8:	0002      	movs	r2, r0
 80039ca:	000b      	movs	r3, r1
 80039cc:	6838      	ldr	r0, [r7, #0]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	f7fd fcd6 	bl	8001380 <__aeabi_dadd>
 80039d4:	0002      	movs	r2, r0
 80039d6:	000b      	movs	r3, r1
 80039d8:	0010      	movs	r0, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	f7ff fafe 	bl	8002fdc <__aeabi_d2f>
 80039e0:	1c02      	adds	r2, r0, #0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]
	Kalman->_last_est=Kalman->_curr_est;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	899b      	ldrh	r3, [r3, #12]
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	81da      	strh	r2, [r3, #14]

  return Kalman->_curr_est;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	899b      	ldrh	r3, [r3, #12]
 80039f4:	b29b      	uxth	r3, r3
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bc80      	pop	{r7}
 80039fe:	46b8      	mov	r8, r7
 8003a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	3ff00000 	.word	0x3ff00000

08003a08 <MessegeHandle>:
  * @brief  Function to handle the message received by the radio module.
  * @param[in] Message[] Char table
  * @param[in] *DataStruct Pointer on the struct with PWM value
  * @retval None
  */
void MessegeHandle(uint8_t Message[], Motors_t *DataStruct){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	switch(Message[0]){
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b73      	cmp	r3, #115	; 0x73
 8003a18:	d000      	beq.n	8003a1c <MessegeHandle+0x14>
 8003a1a:	e072      	b.n	8003b02 <MessegeHandle+0xfa>
	case('s'):
		{
		if((Message[4] != '0' && Message[4] != '1' )){
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b30      	cmp	r3, #48	; 0x30
 8003a24:	d004      	beq.n	8003a30 <MessegeHandle+0x28>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b31      	cmp	r3, #49	; 0x31
 8003a2e:	d16a      	bne.n	8003b06 <MessegeHandle+0xfe>
			break;
		}
		char pwmRm[] = {Message[5], Message[6]};
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3305      	adds	r3, #5
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	210c      	movs	r1, #12
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3306      	adds	r3, #6
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	705a      	strb	r2, [r3, #1]
		DataStruct->pwmMotorRight = atoi(pwmRm)*100;
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f007 faad 	bl	800afa8 <atoi>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2264      	movs	r2, #100	; 0x64
 8003a54:	4353      	muls	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	b21a      	sxth	r2, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	801a      	strh	r2, [r3, #0]
		if(Message[4] == '1'){
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b31      	cmp	r3, #49	; 0x31
 8003a66:	d108      	bne.n	8003a7a <MessegeHandle+0x72>
			DataStruct->pwmMotorRight = DataStruct->pwmMotorRight*-1;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	5e9b      	ldrsh	r3, [r3, r2]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	425b      	negs	r3, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	b21a      	sxth	r2, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	801a      	strh	r2, [r3, #0]
		}
		char pwmLm[] = {Message[2], Message[3]};
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	2108      	movs	r1, #8
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3303      	adds	r3, #3
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	187b      	adds	r3, r7, r1
 8003a8e:	705a      	strb	r2, [r3, #1]
		DataStruct->pwmMotorLeft = atoi(pwmLm)*100;
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	0018      	movs	r0, r3
 8003a94:	f007 fa88 	bl	800afa8 <atoi>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2264      	movs	r2, #100	; 0x64
 8003a9e:	4353      	muls	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	b21a      	sxth	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	805a      	strh	r2, [r3, #2]
		if(Message[1] == '1'){
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b31      	cmp	r3, #49	; 0x31
 8003ab0:	d108      	bne.n	8003ac4 <MessegeHandle+0xbc>
			DataStruct->pwmMotorLeft = DataStruct->pwmMotorLeft*-1;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	425b      	negs	r3, r3
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	b21a      	sxth	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	805a      	strh	r2, [r3, #2]
		}
		if((HCSR04._last_est<20) && ((DataStruct->pwmMotorLeft) > 0 || (DataStruct->pwmMotorRight) > 0)){
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <MessegeHandle+0x108>)
 8003ac6:	89db      	ldrh	r3, [r3, #14]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b13      	cmp	r3, #19
 8003acc:	d80e      	bhi.n	8003aec <MessegeHandle+0xe4>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	5e9b      	ldrsh	r3, [r3, r2]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	dc04      	bgt.n	8003ae2 <MessegeHandle+0xda>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	5e9b      	ldrsh	r3, [r3, r2]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	dd04      	ble.n	8003aec <MessegeHandle+0xe4>
			setMotorPWM(0, 0);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f000 f998 	bl	8003e1a <setMotorPWM>
		}else{
			setMotorPWM(DataStruct->pwmMotorLeft, DataStruct->pwmMotorRight);
		}

		break;
 8003aea:	e00d      	b.n	8003b08 <MessegeHandle+0x100>
			setMotorPWM(DataStruct->pwmMotorLeft, DataStruct->pwmMotorRight);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2202      	movs	r2, #2
 8003af0:	5e9a      	ldrsh	r2, [r3, r2]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2100      	movs	r1, #0
 8003af6:	5e5b      	ldrsh	r3, [r3, r1]
 8003af8:	0019      	movs	r1, r3
 8003afa:	0010      	movs	r0, r2
 8003afc:	f000 f98d 	bl	8003e1a <setMotorPWM>
		break;
 8003b00:	e002      	b.n	8003b08 <MessegeHandle+0x100>
		}

	default:
		break;
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	e000      	b.n	8003b08 <MessegeHandle+0x100>
			break;
 8003b06:	46c0      	nop			; (mov r8, r8)
	}
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b004      	add	sp, #16
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000061c 	.word	0x2000061c

08003b14 <nRF24_EventRxCallback>:

/**
  * @brief  Callback to handle received messages.
  * @retval None
  */
void nRF24_EventRxCallback(void){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
	nRF24_ReadData(Message_RX, &MessageLength_RX);
 8003b18:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <nRF24_EventRxCallback+0x2c>)
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <nRF24_EventRxCallback+0x30>)
 8003b1c:	0011      	movs	r1, r2
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f001 fdae 	bl	8005680 <nRF24_ReadData>
	if(MessageLength_RX > 0){
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <nRF24_EventRxCallback+0x2c>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <nRF24_EventRxCallback+0x24>
		MessegeHandle(Message_RX, &Car1);
 8003b2c:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <nRF24_EventRxCallback+0x34>)
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <nRF24_EventRxCallback+0x30>)
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff ff68 	bl	8003a08 <MessegeHandle>
#ifdef DEBUG
	HAL_UART_Transmit_IT(&huart2, Message_RX, MessageLength_RX);
#endif
	}
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000618 	.word	0x20000618
 8003b44:	20000488 	.word	0x20000488
 8003b48:	200002f0 	.word	0x200002f0

08003b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b50:	f001 ff0e 	bl	8005970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b54:	f000 f860 	bl	8003c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b58:	f7ff fccc 	bl	80034f4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8003b5c:	f000 fd3e 	bl	80045dc <MX_TIM3_Init>
  MX_SPI1_Init();
 8003b60:	f000 fac6 	bl	80040f0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003b64:	f000 ff0c 	bl	8004980 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003b68:	f7ff fde8 	bl	800373c <MX_I2C2_Init>
  MX_DMA_Init();
 8003b6c:	f7ff fcac 	bl	80034c8 <MX_DMA_Init>
  MX_ADC_Init();
 8003b70:	f7ff fbd0 	bl	8003314 <MX_ADC_Init>
  MX_TIM2_Init();
 8003b74:	f000 fc9a 	bl	80044ac <MX_TIM2_Init>
  MX_TIM6_Init();
 8003b78:	f000 fdc4 	bl	8004704 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
#ifdef USE_HCSR04
  HCSR04_Init(&htim2);
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <main+0xa4>)
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff fdb8 	bl	80036f4 <HCSR04_Init>
  KalmanFilter(&HCSR04, 2, 2, 3);
 8003b84:	481b      	ldr	r0, [pc, #108]	; (8003bf4 <main+0xa8>)
 8003b86:	2303      	movs	r3, #3
 8003b88:	2202      	movs	r2, #2
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	f7ff fe72 	bl	8003874 <KalmanFilter>
  Distance = 50;
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <main+0xac>)
 8003b92:	2232      	movs	r2, #50	; 0x32
 8003b94:	801a      	strh	r2, [r3, #0]
  estimate(&HCSR04, Distance);
 8003b96:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <main+0xac>)
 8003b98:	881a      	ldrh	r2, [r3, #0]
 8003b9a:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <main+0xa8>)
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7ff fe96 	bl	80038d0 <estimate>
#endif
  MOTORS_Init(&htim3);
 8003ba4:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <main+0xb0>)
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 f9da 	bl	8003f60 <MOTORS_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <main+0xb4>)
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f004 ff3c 	bl	8008a2c <HAL_TIM_Base_Start_IT>

#ifdef USE_RADIO
  nRF24_Init(&hspi1);
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <main+0xb8>)
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f001 fe38 	bl	800582c <nRF24_Init>
  nRF24_SetRXAddress(0, (uint8_t*)"Odb");
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <main+0xbc>)
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f001 fad9 	bl	8005178 <nRF24_SetRXAddress>
  nRF24_SetTXAddress((uint8_t*)"Nad");
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <main+0xc0>)
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f001 fb1b 	bl	8005204 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 8003bce:	f001 f847 	bl	8004c60 <nRF24_RX_Mode>
#ifdef USE_IMU
  while (MPU6050_Init(&hi2c2) == 1);
#endif

#ifdef USE_ADC
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <main+0xc4>)
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f002 fb18 	bl	800620c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)current, 2);
 8003bdc:	490d      	ldr	r1, [pc, #52]	; (8003c14 <main+0xc8>)
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <main+0xc4>)
 8003be0:	2202      	movs	r2, #2
 8003be2:	0018      	movs	r0, r3
 8003be4:	f002 f8cc 	bl	8005d80 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	#ifdef USE_RADIO
	  nRF24_Event();
 8003be8:	f001 fde8 	bl	80057bc <nRF24_Event>
 8003bec:	e7fc      	b.n	8003be8 <main+0x9c>
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	20000694 	.word	0x20000694
 8003bf4:	2000061c 	.word	0x2000061c
 8003bf8:	2000061a 	.word	0x2000061a
 8003bfc:	200006d4 	.word	0x200006d4
 8003c00:	20000714 	.word	0x20000714
 8003c04:	20000638 	.word	0x20000638
 8003c08:	0800e098 	.word	0x0800e098
 8003c0c:	0800e09c 	.word	0x0800e09c
 8003c10:	200001f8 	.word	0x200001f8
 8003c14:	20000630 	.word	0x20000630

08003c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b09f      	sub	sp, #124	; 0x7c
 8003c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c1e:	2440      	movs	r4, #64	; 0x40
 8003c20:	193b      	adds	r3, r7, r4
 8003c22:	0018      	movs	r0, r3
 8003c24:	2338      	movs	r3, #56	; 0x38
 8003c26:	001a      	movs	r2, r3
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f007 f9f7 	bl	800b01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c2e:	232c      	movs	r3, #44	; 0x2c
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	0018      	movs	r0, r3
 8003c34:	2314      	movs	r3, #20
 8003c36:	001a      	movs	r2, r3
 8003c38:	2100      	movs	r1, #0
 8003c3a:	f007 f9ef 	bl	800b01c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	0018      	movs	r0, r3
 8003c42:	2328      	movs	r3, #40	; 0x28
 8003c44:	001a      	movs	r2, r3
 8003c46:	2100      	movs	r1, #0
 8003c48:	f007 f9e8 	bl	800b01c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c4c:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <SystemClock_Config+0xdc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <SystemClock_Config+0xe0>)
 8003c52:	401a      	ands	r2, r3
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <SystemClock_Config+0xdc>)
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	0109      	lsls	r1, r1, #4
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c5e:	0021      	movs	r1, r4
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	2202      	movs	r2, #2
 8003c64:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c66:	187b      	adds	r3, r7, r1
 8003c68:	2201      	movs	r2, #1
 8003c6a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	2210      	movs	r2, #16
 8003c70:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c72:	187b      	adds	r3, r7, r1
 8003c74:	2202      	movs	r2, #2
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	02d2      	lsls	r2, r2, #11
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	03d2      	lsls	r2, r2, #15
 8003c8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	0018      	movs	r0, r3
 8003c92:	f003 f8cb 	bl	8006e2c <HAL_RCC_OscConfig>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d001      	beq.n	8003c9e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003c9a:	f000 f8b9 	bl	8003e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	187b      	adds	r3, r7, r1
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ca6:	187b      	adds	r3, r7, r1
 8003ca8:	2203      	movs	r2, #3
 8003caa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cb2:	187b      	adds	r3, r7, r1
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003cbe:	187b      	adds	r3, r7, r1
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f003 fc86 	bl	80075d4 <HAL_RCC_ClockConfig>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d001      	beq.n	8003cd0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003ccc:	f000 f8a0 	bl	8003e10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cdc:	1d3b      	adds	r3, r7, #4
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f003 fe9c 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8003ce4:	1e03      	subs	r3, r0, #0
 8003ce6:	d001      	beq.n	8003cec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003ce8:	f000 f892 	bl	8003e10 <Error_Handler>
  }
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b01f      	add	sp, #124	; 0x7c
 8003cf2:	bd90      	pop	{r4, r7, pc}
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	ffffe7ff 	.word	0xffffe7ff

08003cfc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	0002      	movs	r2, r0
 8003d04:	1dbb      	adds	r3, r7, #6
 8003d06:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8003d08:	1dbb      	adds	r3, r7, #6
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d101      	bne.n	8003d18 <HAL_GPIO_EXTI_Callback+0x1c>
	{
#if (NRF24_USE_INTERRUPT == 1)
		nRF24_IRQ_Handler();
 8003d14:	f001 fce8 	bl	80056e8 <nRF24_IRQ_Handler>

#endif
	}
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	HCSR04_TIM_IC_CaptureCallback(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff fcb2 	bl	8003694 <HCSR04_TIM_IC_CaptureCallback>
	HCSR04_Read(&Distance);
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x54>)
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7ff fc9e 	bl	8003674 <HCSR04_Read>
	estimate(&HCSR04, Distance);
 8003d38:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x54>)
 8003d3a:	881a      	ldrh	r2, [r3, #0]
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x58>)
 8003d3e:	0011      	movs	r1, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7ff fdc5 	bl	80038d0 <estimate>
	if((HCSR04._last_est<20) && ((Car1.pwmMotorLeft) > 0 || (Car1.pwmMotorRight) > 0)){
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x58>)
 8003d48:	89db      	ldrh	r3, [r3, #14]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b13      	cmp	r3, #19
 8003d4e:	d80d      	bhi.n	8003d6c <HAL_TIM_IC_CaptureCallback+0x4c>
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8003d52:	2202      	movs	r2, #2
 8003d54:	5e9b      	ldrsh	r3, [r3, r2]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	dc04      	bgt.n	8003d64 <HAL_TIM_IC_CaptureCallback+0x44>
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	5e9b      	ldrsh	r3, [r3, r2]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	dd03      	ble.n	8003d6c <HAL_TIM_IC_CaptureCallback+0x4c>
		setMotorPWM(0, 0);
 8003d64:	2100      	movs	r1, #0
 8003d66:	2000      	movs	r0, #0
 8003d68:	f000 f857 	bl	8003e1a <setMotorPWM>
	}

}
 8003d6c:	46c0      	nop			; (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b002      	add	sp, #8
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	2000061a 	.word	0x2000061a
 8003d78:	2000061c 	.word	0x2000061c
 8003d7c:	200002f0 	.word	0x200002f0

08003d80 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d12b      	bne.n	8003de8 <HAL_TIM_PeriodElapsedCallback+0x68>

#ifdef USE_HCSR04
	  HCSR04_Read(&Distance);
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff fc6e 	bl	8003674 <HCSR04_Read>
	  MessageLength = sprintf((char *)Message, "d%.3d\n\r",HCSR04._last_est);
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003d9a:	89db      	ldrh	r3, [r3, #14]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	001a      	movs	r2, r3
 8003da0:	4916      	ldr	r1, [pc, #88]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003da2:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003da4:	0018      	movs	r0, r3
 8003da6:	f007 fea3 	bl	800baf0 <siprintf>
 8003daa:	0003      	movs	r3, r0
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003db0:	701a      	strb	r2, [r3, #0]

#ifdef USE_RADIO_SENT
	  nRF24_SendData(Message, MessageLength);
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f001 fbaa 	bl	8005514 <nRF24_SendData>

#endif

#ifdef USE_ADC
#ifdef USE_RADIO_SENT
	  MessageLength = sprintf((char *)Message, "v%.4d\n\r", current[0]);
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	001a      	movs	r2, r3
 8003dc8:	4910      	ldr	r1, [pc, #64]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f007 fe8f 	bl	800baf0 <siprintf>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003dd8:	701a      	strb	r2, [r3, #0]
	  nRF24_SendData(Message, MessageLength);
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f001 fb96 	bl	8005514 <nRF24_SendData>

#ifdef USE_IMU
	MPU6050_Read_All(&hi2c2, &MPU6050);
#endif
  }
}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000714 	.word	0x20000714
 8003df4:	2000061a 	.word	0x2000061a
 8003df8:	2000061c 	.word	0x2000061c
 8003dfc:	0800e0a0 	.word	0x0800e0a0
 8003e00:	200002f4 	.word	0x200002f4
 8003e04:	20000484 	.word	0x20000484
 8003e08:	20000630 	.word	0x20000630
 8003e0c:	0800e0a8 	.word	0x0800e0a8

08003e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <setMotorPWM>:
  * @brief  Top-level function for PWM control of motors.
  * @param[in] pwmLeft Left motor PWM
  * @param[in] pwmRight Right motor PWM
  * @retval None
  */
void setMotorPWM(int16_t pwmLeft, int16_t pwmRight){
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	0002      	movs	r2, r0
 8003e22:	1dbb      	adds	r3, r7, #6
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	1c0a      	adds	r2, r1, #0
 8003e2a:	801a      	strh	r2, [r3, #0]

	setActuator(MOTOR_LEFT, pwmLeft);
 8003e2c:	1dbb      	adds	r3, r7, #6
 8003e2e:	2200      	movs	r2, #0
 8003e30:	5e9b      	ldrsh	r3, [r3, r2]
 8003e32:	0019      	movs	r1, r3
 8003e34:	2000      	movs	r0, #0
 8003e36:	f000 f80b 	bl	8003e50 <setActuator>
	setActuator(MOTOR_RIGHT, pwmRight);
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	5e9b      	ldrsh	r3, [r3, r2]
 8003e40:	0019      	movs	r1, r3
 8003e42:	2001      	movs	r0, #1
 8003e44:	f000 f804 	bl	8003e50 <setActuator>
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <setActuator>:

/**
  * @brief  Selection and operation of the actuator.
  * @retval None
  */
void setActuator(char type, int16_t value){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	0002      	movs	r2, r0
 8003e58:	1dfb      	adds	r3, r7, #7
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	1d3b      	adds	r3, r7, #4
 8003e5e:	1c0a      	adds	r2, r1, #0
 8003e60:	801a      	strh	r2, [r3, #0]

  switch (type){
 8003e62:	1dfb      	adds	r3, r7, #7
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <setActuator+0x32>
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d112      	bne.n	8003e94 <setActuator+0x44>
    case MOTOR_RIGHT:setL298N(M1_DIR_GPIO_Port, M1_DIR_Pin, 15, value); break;
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	2200      	movs	r2, #0
 8003e72:	5e9b      	ldrsh	r3, [r3, r2]
 8003e74:	22a0      	movs	r2, #160	; 0xa0
 8003e76:	05d0      	lsls	r0, r2, #23
 8003e78:	220f      	movs	r2, #15
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	f000 f810 	bl	8003ea0 <setL298N>
 8003e80:	e008      	b.n	8003e94 <setActuator+0x44>
    case MOTOR_LEFT:setL298N(M2_DIR_GPIO_Port, M2_DIR_Pin, 16, value); break;
 8003e82:	1d3b      	adds	r3, r7, #4
 8003e84:	2200      	movs	r2, #0
 8003e86:	5e9b      	ldrsh	r3, [r3, r2]
 8003e88:	4804      	ldr	r0, [pc, #16]	; (8003e9c <setActuator+0x4c>)
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	2140      	movs	r1, #64	; 0x40
 8003e8e:	f000 f807 	bl	8003ea0 <setL298N>
 8003e92:	46c0      	nop			; (mov r8, r8)
  }
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	50000400 	.word	0x50000400

08003ea0 <setL298N>:

/**
  * @brief  Control L298N motor driver.
  * @retval None
  */
void setL298N(GPIO_TypeDef * portPinDir, int pinDir, int pinPWM, int16_t speed){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	001a      	movs	r2, r3
 8003eae:	1cbb      	adds	r3, r7, #2
 8003eb0:	801a      	strh	r2, [r3, #0]
  if (speed < 0){
 8003eb2:	1cbb      	adds	r3, r7, #2
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	5e9b      	ldrsh	r3, [r3, r2]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	da18      	bge.n	8003eee <setL298N+0x4e>
	HAL_GPIO_WritePin(portPinDir, pinDir, GPIO_PIN_SET);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	b299      	uxth	r1, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f002 fe2f 	bl	8006b28 <HAL_GPIO_WritePin>
	setPwmDrivenByTimer(pinPWM, 10000 - abs(speed));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	1cbb      	adds	r3, r7, #2
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	5e5b      	ldrsh	r3, [r3, r1]
 8003ed4:	17d9      	asrs	r1, r3, #31
 8003ed6:	185b      	adds	r3, r3, r1
 8003ed8:	404b      	eors	r3, r1
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	490e      	ldr	r1, [pc, #56]	; (8003f18 <setL298N+0x78>)
 8003ede:	1acb      	subs	r3, r1, r3
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	f000 f818 	bl	8003f1c <setPwmDrivenByTimer>
  } else {
	HAL_GPIO_WritePin(portPinDir, pinDir, GPIO_PIN_RESET);
	  setPwmDrivenByTimer(pinPWM, speed);
  }
}
 8003eec:	e00f      	b.n	8003f0e <setL298N+0x6e>
	HAL_GPIO_WritePin(portPinDir, pinDir, GPIO_PIN_RESET);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	b299      	uxth	r1, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f002 fe16 	bl	8006b28 <HAL_GPIO_WritePin>
	  setPwmDrivenByTimer(pinPWM, speed);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	1cbb      	adds	r3, r7, #2
 8003f02:	2100      	movs	r1, #0
 8003f04:	5e5b      	ldrsh	r3, [r3, r1]
 8003f06:	0019      	movs	r1, r3
 8003f08:	0010      	movs	r0, r2
 8003f0a:	f000 f807 	bl	8003f1c <setPwmDrivenByTimer>
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b004      	add	sp, #16
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	00002710 	.word	0x00002710

08003f1c <setPwmDrivenByTimer>:

/**
  * @brief  Set PWM Pulse on Timer Channels.
  * @retval None
  */
void setPwmDrivenByTimer(uint8_t pwm, int16_t duty) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	0002      	movs	r2, r0
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	1c0a      	adds	r2, r1, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
    switch (pwm) {
 8003f2e:	1dfb      	adds	r3, r7, #7
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	d002      	beq.n	8003f3c <setPwmDrivenByTimer+0x20>
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d006      	beq.n	8003f48 <setPwmDrivenByTimer+0x2c>
        case 15: TIM3->CCR1 = duty; break;
        case 16: TIM3->CCR2 = duty; break;

        default: break;
 8003f3a:	e00b      	b.n	8003f54 <setPwmDrivenByTimer+0x38>
        case 15: TIM3->CCR1 = duty; break;
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <setPwmDrivenByTimer+0x40>)
 8003f3e:	1d3a      	adds	r2, r7, #4
 8003f40:	2100      	movs	r1, #0
 8003f42:	5e52      	ldrsh	r2, [r2, r1]
 8003f44:	635a      	str	r2, [r3, #52]	; 0x34
 8003f46:	e005      	b.n	8003f54 <setPwmDrivenByTimer+0x38>
        case 16: TIM3->CCR2 = duty; break;
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <setPwmDrivenByTimer+0x40>)
 8003f4a:	1d3a      	adds	r2, r7, #4
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5e52      	ldrsh	r2, [r2, r1]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
 8003f52:	46c0      	nop			; (mov r8, r8)
    }
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b002      	add	sp, #8
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40000400 	.word	0x40000400

08003f60 <MOTORS_Init>:

/**
  * @brief  Init motors timers.
  * @retval None
  */
void MOTORS_Init(TIM_HandleTypeDef *htim) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	htim_motors = htim;
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <MOTORS_Init+0x38>)
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(htim_motors);
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <MOTORS_Init+0x38>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	0018      	movs	r0, r3
 8003f74:	f004 fd5a 	bl	8008a2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim_motors, MOTOR_M1_CHANNEL);
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <MOTORS_Init+0x38>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f004 fdee 	bl	8008b60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motors, MOTOR_M2_CHANNEL);
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <MOTORS_Init+0x38>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2104      	movs	r1, #4
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f004 fde8 	bl	8008b60 <HAL_TIM_PWM_Start>

}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000634 	.word	0x20000634

08003f9c <RB_CreateBuffer>:
#include "main.h"
#include "ring_buffer.h"
#include "stdlib.h"

RB_Status RB_CreateBuffer(RingBuffer **Buffer, uint8_t Size)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	000a      	movs	r2, r1
 8003fa6:	1cfb      	adds	r3, r7, #3
 8003fa8:	701a      	strb	r2, [r3, #0]
	*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));
 8003faa:	1cfb      	adds	r3, r7, #3
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f007 f829 	bl	800b008 <malloc>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	001a      	movs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]

	if(Buffer == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <RB_CreateBuffer+0x2c>
	{
		return RB_NOTCREATED;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e011      	b.n	8003fec <RB_CreateBuffer+0x50>
	}

	(*Buffer)->Size = Size;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	1cfa      	adds	r2, r7, #3
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
	(*Buffer)->Head = 0;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	705a      	strb	r2, [r3, #1]
	(*Buffer)->Tail = 0;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	709a      	strb	r2, [r3, #2]
	(*Buffer)->Elements = 0;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	70da      	strb	r2, [r3, #3]

	return RB_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	000a      	movs	r2, r1
 8003ffe:	1cfb      	adds	r3, r7, #3
 8004000:	701a      	strb	r2, [r3, #0]
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	0019      	movs	r1, r3
 800400e:	0010      	movs	r0, r2
 8004010:	f7fc fa06 	bl	8000420 <__aeabi_idivmod>
 8004014:	000b      	movs	r3, r1
 8004016:	001a      	movs	r2, r3
 8004018:	210f      	movs	r1, #15
 800401a:	187b      	adds	r3, r7, r1
 800401c:	701a      	strb	r2, [r3, #0]

	if( TempHead == Buffer->Tail) // No room for new data
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	789b      	ldrb	r3, [r3, #2]
 8004022:	187a      	adds	r2, r7, r1
 8004024:	7812      	ldrb	r2, [r2, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d101      	bne.n	800402e <RB_WriteToBuffer+0x3a>
	{
		return RB_NOFREESPACE;
 800402a:	2303      	movs	r3, #3
 800402c:	e020      	b.n	8004070 <RB_WriteToBuffer+0x7c>
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	001a      	movs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	189b      	adds	r3, r3, r2
 8004038:	1cfa      	adds	r2, r7, #3
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	711a      	strb	r2, [r3, #4]

		Buffer->Head++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	3301      	adds	r3, #1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	705a      	strb	r2, [r3, #1]
		Buffer->Head %= Buffer->Size;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	785a      	ldrb	r2, [r3, #1]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	0019      	movs	r1, r3
 8004054:	0010      	movs	r0, r2
 8004056:	f7fc f8f9 	bl	800024c <__aeabi_uidivmod>
 800405a:	000b      	movs	r3, r1
 800405c:	b2da      	uxtb	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	705a      	strb	r2, [r3, #1]

		Buffer->Elements++;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	78db      	ldrb	r3, [r3, #3]
 8004066:	3301      	adds	r3, #1
 8004068:	b2da      	uxtb	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	70da      	strb	r2, [r3, #3]
	}

	return RB_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	b004      	add	sp, #16
 8004076:	bd80      	pop	{r7, pc}

08004078 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	if( Buffer->Tail == Buffer->Head) // No data to read
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	789a      	ldrb	r2, [r3, #2]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	429a      	cmp	r2, r3
 800408c:	d101      	bne.n	8004092 <RB_ReadFromBuffer+0x1a>
	{
		return RB_NOELEMENTS;
 800408e:	2304      	movs	r3, #4
 8004090:	e020      	b.n	80040d4 <RB_ReadFromBuffer+0x5c>
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	789b      	ldrb	r3, [r3, #2]
 8004096:	001a      	movs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	189b      	adds	r3, r3, r2
 800409c:	791a      	ldrb	r2, [r3, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	701a      	strb	r2, [r3, #0]

		Buffer->Tail++;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	789b      	ldrb	r3, [r3, #2]
 80040a6:	3301      	adds	r3, #1
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	709a      	strb	r2, [r3, #2]
		Buffer->Tail %= Buffer->Size;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	789a      	ldrb	r2, [r3, #2]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	0019      	movs	r1, r3
 80040b8:	0010      	movs	r0, r2
 80040ba:	f7fc f8c7 	bl	800024c <__aeabi_uidivmod>
 80040be:	000b      	movs	r3, r1
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	709a      	strb	r2, [r3, #2]

		Buffer->Elements--;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	78db      	ldrb	r3, [r3, #3]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	70da      	strb	r2, [r3, #3]
	}
	return RB_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	return Buffer->Elements;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	78db      	ldrb	r3, [r3, #3]
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b002      	add	sp, #8
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80040f4:	4b18      	ldr	r3, [pc, #96]	; (8004158 <MX_SPI1_Init+0x68>)
 80040f6:	4a19      	ldr	r2, [pc, #100]	; (800415c <MX_SPI1_Init+0x6c>)
 80040f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <MX_SPI1_Init+0x68>)
 80040fc:	2282      	movs	r2, #130	; 0x82
 80040fe:	0052      	lsls	r2, r2, #1
 8004100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <MX_SPI1_Init+0x68>)
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004108:	4b13      	ldr	r3, [pc, #76]	; (8004158 <MX_SPI1_Init+0x68>)
 800410a:	2200      	movs	r2, #0
 800410c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <MX_SPI1_Init+0x68>)
 8004110:	2200      	movs	r2, #0
 8004112:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <MX_SPI1_Init+0x68>)
 8004116:	2200      	movs	r2, #0
 8004118:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <MX_SPI1_Init+0x68>)
 800411c:	2280      	movs	r2, #128	; 0x80
 800411e:	0092      	lsls	r2, r2, #2
 8004120:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004122:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <MX_SPI1_Init+0x68>)
 8004124:	2218      	movs	r2, #24
 8004126:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <MX_SPI1_Init+0x68>)
 800412a:	2200      	movs	r2, #0
 800412c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800412e:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <MX_SPI1_Init+0x68>)
 8004130:	2200      	movs	r2, #0
 8004132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <MX_SPI1_Init+0x68>)
 8004136:	2200      	movs	r2, #0
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <MX_SPI1_Init+0x68>)
 800413c:	2207      	movs	r2, #7
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <MX_SPI1_Init+0x68>)
 8004142:	0018      	movs	r0, r3
 8004144:	f003 fdde 	bl	8007d04 <HAL_SPI_Init>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d001      	beq.n	8004150 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800414c:	f7ff fe60 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	20000638 	.word	0x20000638
 800415c:	40013000 	.word	0x40013000

08004160 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b08b      	sub	sp, #44	; 0x2c
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004168:	2414      	movs	r4, #20
 800416a:	193b      	adds	r3, r7, r4
 800416c:	0018      	movs	r0, r3
 800416e:	2314      	movs	r3, #20
 8004170:	001a      	movs	r2, r3
 8004172:	2100      	movs	r1, #0
 8004174:	f006 ff52 	bl	800b01c <memset>
  if(spiHandle->Instance==SPI1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <HAL_SPI_MspInit+0xc4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d14b      	bne.n	800421a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_SPI_MspInit+0xc8>)
 8004184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004186:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_SPI_MspInit+0xc8>)
 8004188:	2180      	movs	r1, #128	; 0x80
 800418a:	0149      	lsls	r1, r1, #5
 800418c:	430a      	orrs	r2, r1
 800418e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_SPI_MspInit+0xc8>)
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_SPI_MspInit+0xc8>)
 8004196:	2101      	movs	r1, #1
 8004198:	430a      	orrs	r2, r1
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <HAL_SPI_MspInit+0xc8>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	2201      	movs	r2, #1
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a8:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <HAL_SPI_MspInit+0xc8>)
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <HAL_SPI_MspInit+0xc8>)
 80041ae:	2102      	movs	r1, #2
 80041b0:	430a      	orrs	r2, r1
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80041b4:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <HAL_SPI_MspInit+0xc8>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	2202      	movs	r2, #2
 80041ba:	4013      	ands	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	22c0      	movs	r2, #192	; 0xc0
 80041c4:	0152      	lsls	r2, r2, #5
 80041c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c8:	193b      	adds	r3, r7, r4
 80041ca:	2202      	movs	r2, #2
 80041cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d4:	193b      	adds	r3, r7, r4
 80041d6:	2203      	movs	r2, #3
 80041d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80041da:	193b      	adds	r3, r7, r4
 80041dc:	2200      	movs	r2, #0
 80041de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e0:	193a      	adds	r2, r7, r4
 80041e2:	23a0      	movs	r3, #160	; 0xa0
 80041e4:	05db      	lsls	r3, r3, #23
 80041e6:	0011      	movs	r1, r2
 80041e8:	0018      	movs	r0, r3
 80041ea:	f002 fb1f 	bl	800682c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041ee:	0021      	movs	r1, r4
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	2208      	movs	r2, #8
 80041f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f6:	187b      	adds	r3, r7, r1
 80041f8:	2202      	movs	r2, #2
 80041fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fc:	187b      	adds	r3, r7, r1
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004202:	187b      	adds	r3, r7, r1
 8004204:	2203      	movs	r2, #3
 8004206:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004208:	187b      	adds	r3, r7, r1
 800420a:	2200      	movs	r2, #0
 800420c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420e:	187b      	adds	r3, r7, r1
 8004210:	4a06      	ldr	r2, [pc, #24]	; (800422c <HAL_SPI_MspInit+0xcc>)
 8004212:	0019      	movs	r1, r3
 8004214:	0010      	movs	r0, r2
 8004216:	f002 fb09 	bl	800682c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b00b      	add	sp, #44	; 0x2c
 8004220:	bd90      	pop	{r4, r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	40013000 	.word	0x40013000
 8004228:	40021000 	.word	0x40021000
 800422c:	50000400 	.word	0x50000400

08004230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_MspInit+0x34>)
 8004236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_MspInit+0x34>)
 800423a:	2101      	movs	r1, #1
 800423c:	430a      	orrs	r2, r1
 800423e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_MspInit+0x34>)
 8004242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_MspInit+0x34>)
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	0549      	lsls	r1, r1, #21
 800424a:	430a      	orrs	r2, r1
 800424c:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800424e:	2200      	movs	r2, #0
 8004250:	2100      	movs	r1, #0
 8004252:	2001      	movs	r0, #1
 8004254:	f002 f924 	bl	80064a0 <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004258:	2001      	movs	r0, #1
 800425a:	f002 f936 	bl	80064ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000

08004268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800426c:	e7fe      	b.n	800426c <NMI_Handler+0x4>

0800426e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004272:	e7fe      	b.n	8004272 <HardFault_Handler+0x4>

08004274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800428c:	f001 fbc4 	bl	8005a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800429a:	f002 fdad 	bl	8006df8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	0018      	movs	r0, r3
 80042ae:	f002 fc59 	bl	8006b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	0018      	movs	r0, r3
 80042b8:	f002 fc54 	bl	8006b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <TIM2_IRQHandler+0x14>)
 80042ca:	0018      	movs	r0, r3
 80042cc:	f004 fe70 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	20000694 	.word	0x20000694

080042dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <TIM3_IRQHandler+0x14>)
 80042e2:	0018      	movs	r0, r3
 80042e4:	f004 fe64 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	200006d4 	.word	0x200006d4

080042f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <TIM6_DAC_IRQHandler+0x14>)
 80042fa:	0018      	movs	r0, r3
 80042fc:	f004 fe58 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	20000714 	.word	0x20000714

0800430c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <USART2_IRQHandler+0x14>)
 8004312:	0018      	movs	r0, r3
 8004314:	f005 fe46 	bl	8009fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	20000754 	.word	0x20000754

08004324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
	return 1;
 8004328:	2301      	movs	r3, #1
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_kill>:

int _kill(int pid, int sig)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800433a:	f006 fe3b 	bl	800afb4 <__errno>
 800433e:	0003      	movs	r3, r0
 8004340:	2216      	movs	r2, #22
 8004342:	601a      	str	r2, [r3, #0]
	return -1;
 8004344:	2301      	movs	r3, #1
 8004346:	425b      	negs	r3, r3
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <_exit>:

void _exit (int status)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004358:	2301      	movs	r3, #1
 800435a:	425a      	negs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	0011      	movs	r1, r2
 8004360:	0018      	movs	r0, r3
 8004362:	f7ff ffe5 	bl	8004330 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004366:	e7fe      	b.n	8004366 <_exit+0x16>

08004368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	e00a      	b.n	8004390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800437a:	e000      	b.n	800437e <_read+0x16>
 800437c:	bf00      	nop
 800437e:	0001      	movs	r1, r0
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	60ba      	str	r2, [r7, #8]
 8004386:	b2ca      	uxtb	r2, r1
 8004388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	3301      	adds	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	dbf0      	blt.n	800437a <_read+0x12>
	}

return len;
 8004398:	687b      	ldr	r3, [r7, #4]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b006      	add	sp, #24
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e009      	b.n	80043c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	60ba      	str	r2, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 fac7 	bl	8004950 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3301      	adds	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	dbf1      	blt.n	80043b4 <_write+0x12>
	}
	return len;
 80043d0:	687b      	ldr	r3, [r7, #4]
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b006      	add	sp, #24
 80043d8:	bd80      	pop	{r7, pc}

080043da <_close>:

int _close(int file)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
	return -1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	425b      	negs	r3, r3
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b002      	add	sp, #8
 80043ec:	bd80      	pop	{r7, pc}

080043ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	0192      	lsls	r2, r2, #6
 80043fe:	605a      	str	r2, [r3, #4]
	return 0;
 8004400:	2300      	movs	r3, #0
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b002      	add	sp, #8
 8004408:	bd80      	pop	{r7, pc}

0800440a <_isatty>:

int _isatty(int file)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
	return 1;
 8004412:	2301      	movs	r3, #1
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
	return 0;
 8004428:	2300      	movs	r3, #0
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b004      	add	sp, #16
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <_sbrk+0x5c>)
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <_sbrk+0x60>)
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <_sbrk+0x64>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <_sbrk+0x64>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <_sbrk+0x68>)
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	18d3      	adds	r3, r2, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d207      	bcs.n	8004474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004464:	f006 fda6 	bl	800afb4 <__errno>
 8004468:	0003      	movs	r3, r0
 800446a:	220c      	movs	r2, #12
 800446c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800446e:	2301      	movs	r3, #1
 8004470:	425b      	negs	r3, r3
 8004472:	e009      	b.n	8004488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <_sbrk+0x64>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	18d2      	adds	r2, r2, r3
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <_sbrk+0x64>)
 8004484:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004486:	68fb      	ldr	r3, [r7, #12]
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b006      	add	sp, #24
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20005000 	.word	0x20005000
 8004494:	00000400 	.word	0x00000400
 8004498:	20000690 	.word	0x20000690
 800449c:	20000800 	.word	0x20000800

080044a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b2:	2320      	movs	r3, #32
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	0018      	movs	r0, r3
 80044b8:	2308      	movs	r3, #8
 80044ba:	001a      	movs	r2, r3
 80044bc:	2100      	movs	r1, #0
 80044be:	f006 fdad 	bl	800b01c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80044c2:	2310      	movs	r3, #16
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	0018      	movs	r0, r3
 80044c8:	2310      	movs	r3, #16
 80044ca:	001a      	movs	r2, r3
 80044cc:	2100      	movs	r1, #0
 80044ce:	f006 fda5 	bl	800b01c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044d2:	003b      	movs	r3, r7
 80044d4:	0018      	movs	r0, r3
 80044d6:	2310      	movs	r3, #16
 80044d8:	001a      	movs	r2, r3
 80044da:	2100      	movs	r1, #0
 80044dc:	f006 fd9e 	bl	800b01c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044e0:	4b3c      	ldr	r3, [pc, #240]	; (80045d4 <MX_TIM2_Init+0x128>)
 80044e2:	2280      	movs	r2, #128	; 0x80
 80044e4:	05d2      	lsls	r2, r2, #23
 80044e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80044e8:	4b3a      	ldr	r3, [pc, #232]	; (80045d4 <MX_TIM2_Init+0x128>)
 80044ea:	221f      	movs	r2, #31
 80044ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <MX_TIM2_Init+0x128>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80044f4:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <MX_TIM2_Init+0x128>)
 80044f6:	4a38      	ldr	r2, [pc, #224]	; (80045d8 <MX_TIM2_Init+0x12c>)
 80044f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <MX_TIM2_Init+0x128>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004500:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <MX_TIM2_Init+0x128>)
 8004502:	2200      	movs	r2, #0
 8004504:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004506:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <MX_TIM2_Init+0x128>)
 8004508:	0018      	movs	r0, r3
 800450a:	f004 fbbb 	bl	8008c84 <HAL_TIM_IC_Init>
 800450e:	1e03      	subs	r3, r0, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004512:	f7ff fc7d 	bl	8003e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004516:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <MX_TIM2_Init+0x128>)
 8004518:	0018      	movs	r0, r3
 800451a:	f004 fad9 	bl	8008ad0 <HAL_TIM_PWM_Init>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004522:	f7ff fc75 	bl	8003e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004526:	2120      	movs	r1, #32
 8004528:	187b      	adds	r3, r7, r1
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800452e:	187b      	adds	r3, r7, r1
 8004530:	2200      	movs	r2, #0
 8004532:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004534:	187a      	adds	r2, r7, r1
 8004536:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <MX_TIM2_Init+0x128>)
 8004538:	0011      	movs	r1, r2
 800453a:	0018      	movs	r0, r3
 800453c:	f005 fbba 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8004540:	1e03      	subs	r3, r0, #0
 8004542:	d001      	beq.n	8004548 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004544:	f7ff fc64 	bl	8003e10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004548:	2110      	movs	r1, #16
 800454a:	187b      	adds	r3, r7, r1
 800454c:	2202      	movs	r2, #2
 800454e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004550:	187b      	adds	r3, r7, r1
 8004552:	2201      	movs	r2, #1
 8004554:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004556:	187b      	adds	r3, r7, r1
 8004558:	2200      	movs	r2, #0
 800455a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800455c:	187b      	adds	r3, r7, r1
 800455e:	2200      	movs	r2, #0
 8004560:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004562:	1879      	adds	r1, r7, r1
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <MX_TIM2_Init+0x128>)
 8004566:	2200      	movs	r2, #0
 8004568:	0018      	movs	r0, r3
 800456a:	f004 fe09 	bl	8009180 <HAL_TIM_IC_ConfigChannel>
 800456e:	1e03      	subs	r3, r0, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8004572:	f7ff fc4d 	bl	8003e10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004576:	2110      	movs	r1, #16
 8004578:	187b      	adds	r3, r7, r1
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800457e:	187b      	adds	r3, r7, r1
 8004580:	2202      	movs	r2, #2
 8004582:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004584:	1879      	adds	r1, r7, r1
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <MX_TIM2_Init+0x128>)
 8004588:	2204      	movs	r2, #4
 800458a:	0018      	movs	r0, r3
 800458c:	f004 fdf8 	bl	8009180 <HAL_TIM_IC_ConfigChannel>
 8004590:	1e03      	subs	r3, r0, #0
 8004592:	d001      	beq.n	8004598 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8004594:	f7ff fc3c 	bl	8003e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004598:	003b      	movs	r3, r7
 800459a:	2260      	movs	r2, #96	; 0x60
 800459c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 125;
 800459e:	003b      	movs	r3, r7
 80045a0:	227d      	movs	r2, #125	; 0x7d
 80045a2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045a4:	003b      	movs	r3, r7
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045aa:	003b      	movs	r3, r7
 80045ac:	2200      	movs	r2, #0
 80045ae:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80045b0:	0039      	movs	r1, r7
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <MX_TIM2_Init+0x128>)
 80045b4:	2208      	movs	r2, #8
 80045b6:	0018      	movs	r0, r3
 80045b8:	f004 fe86 	bl	80092c8 <HAL_TIM_PWM_ConfigChannel>
 80045bc:	1e03      	subs	r3, r0, #0
 80045be:	d001      	beq.n	80045c4 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80045c0:	f7ff fc26 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <MX_TIM2_Init+0x128>)
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 f95a 	bl	8004880 <HAL_TIM_MspPostInit>

}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b00a      	add	sp, #40	; 0x28
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000694 	.word	0x20000694
 80045d8:	0000ffff 	.word	0x0000ffff

080045dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045e2:	2318      	movs	r3, #24
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	0018      	movs	r0, r3
 80045e8:	2310      	movs	r3, #16
 80045ea:	001a      	movs	r2, r3
 80045ec:	2100      	movs	r1, #0
 80045ee:	f006 fd15 	bl	800b01c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045f2:	2310      	movs	r3, #16
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	0018      	movs	r0, r3
 80045f8:	2308      	movs	r3, #8
 80045fa:	001a      	movs	r2, r3
 80045fc:	2100      	movs	r1, #0
 80045fe:	f006 fd0d 	bl	800b01c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004602:	003b      	movs	r3, r7
 8004604:	0018      	movs	r0, r3
 8004606:	2310      	movs	r3, #16
 8004608:	001a      	movs	r2, r3
 800460a:	2100      	movs	r1, #0
 800460c:	f006 fd06 	bl	800b01c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004610:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <MX_TIM3_Init+0x11c>)
 8004612:	4a3a      	ldr	r2, [pc, #232]	; (80046fc <MX_TIM3_Init+0x120>)
 8004614:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8004616:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <MX_TIM3_Init+0x11c>)
 8004618:	221f      	movs	r2, #31
 800461a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800461c:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <MX_TIM3_Init+0x11c>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004622:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <MX_TIM3_Init+0x11c>)
 8004624:	4a36      	ldr	r2, [pc, #216]	; (8004700 <MX_TIM3_Init+0x124>)
 8004626:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004628:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <MX_TIM3_Init+0x11c>)
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800462e:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <MX_TIM3_Init+0x11c>)
 8004630:	2200      	movs	r2, #0
 8004632:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004634:	4b30      	ldr	r3, [pc, #192]	; (80046f8 <MX_TIM3_Init+0x11c>)
 8004636:	0018      	movs	r0, r3
 8004638:	f004 f96e 	bl	8008918 <HAL_TIM_Base_Init>
 800463c:	1e03      	subs	r3, r0, #0
 800463e:	d001      	beq.n	8004644 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004640:	f7ff fbe6 	bl	8003e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004644:	2118      	movs	r1, #24
 8004646:	187b      	adds	r3, r7, r1
 8004648:	2280      	movs	r2, #128	; 0x80
 800464a:	0152      	lsls	r2, r2, #5
 800464c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800464e:	187a      	adds	r2, r7, r1
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <MX_TIM3_Init+0x11c>)
 8004652:	0011      	movs	r1, r2
 8004654:	0018      	movs	r0, r3
 8004656:	f004 fefd 	bl	8009454 <HAL_TIM_ConfigClockSource>
 800465a:	1e03      	subs	r3, r0, #0
 800465c:	d001      	beq.n	8004662 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800465e:	f7ff fbd7 	bl	8003e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004662:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <MX_TIM3_Init+0x11c>)
 8004664:	0018      	movs	r0, r3
 8004666:	f004 fa33 	bl	8008ad0 <HAL_TIM_PWM_Init>
 800466a:	1e03      	subs	r3, r0, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800466e:	f7ff fbcf 	bl	8003e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004672:	2110      	movs	r1, #16
 8004674:	187b      	adds	r3, r7, r1
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467a:	187b      	adds	r3, r7, r1
 800467c:	2200      	movs	r2, #0
 800467e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004680:	187a      	adds	r2, r7, r1
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <MX_TIM3_Init+0x11c>)
 8004684:	0011      	movs	r1, r2
 8004686:	0018      	movs	r0, r3
 8004688:	f005 fb14 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 800468c:	1e03      	subs	r3, r0, #0
 800468e:	d001      	beq.n	8004694 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004690:	f7ff fbbe 	bl	8003e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004694:	003b      	movs	r3, r7
 8004696:	2260      	movs	r2, #96	; 0x60
 8004698:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800469a:	003b      	movs	r3, r7
 800469c:	2200      	movs	r2, #0
 800469e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046a0:	003b      	movs	r3, r7
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046a6:	003b      	movs	r3, r7
 80046a8:	2200      	movs	r2, #0
 80046aa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046ac:	0039      	movs	r1, r7
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <MX_TIM3_Init+0x11c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	0018      	movs	r0, r3
 80046b4:	f004 fe08 	bl	80092c8 <HAL_TIM_PWM_ConfigChannel>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d001      	beq.n	80046c0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80046bc:	f7ff fba8 	bl	8003e10 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <MX_TIM3_Init+0x11c>)
 80046c2:	2104      	movs	r1, #4
 80046c4:	0018      	movs	r0, r3
 80046c6:	f005 fb53 	bl	8009d70 <HAL_TIMEx_RemapConfig>
 80046ca:	1e03      	subs	r3, r0, #0
 80046cc:	d001      	beq.n	80046d2 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80046ce:	f7ff fb9f 	bl	8003e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80046d2:	0039      	movs	r1, r7
 80046d4:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <MX_TIM3_Init+0x11c>)
 80046d6:	2204      	movs	r2, #4
 80046d8:	0018      	movs	r0, r3
 80046da:	f004 fdf5 	bl	80092c8 <HAL_TIM_PWM_ConfigChannel>
 80046de:	1e03      	subs	r3, r0, #0
 80046e0:	d001      	beq.n	80046e6 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 80046e2:	f7ff fb95 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <MX_TIM3_Init+0x11c>)
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 f8c9 	bl	8004880 <HAL_TIM_MspPostInit>

}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b00a      	add	sp, #40	; 0x28
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	200006d4 	.word	0x200006d4
 80046fc:	40000400 	.word	0x40000400
 8004700:	0000270f 	.word	0x0000270f

08004704 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800470a:	003b      	movs	r3, r7
 800470c:	0018      	movs	r0, r3
 800470e:	2308      	movs	r3, #8
 8004710:	001a      	movs	r2, r3
 8004712:	2100      	movs	r1, #0
 8004714:	f006 fc82 	bl	800b01c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <MX_TIM6_Init+0x6c>)
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <MX_TIM6_Init+0x70>)
 800471c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 800471e:	4b14      	ldr	r3, [pc, #80]	; (8004770 <MX_TIM6_Init+0x6c>)
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <MX_TIM6_Init+0x74>)
 8004722:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <MX_TIM6_Init+0x6c>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <MX_TIM6_Init+0x6c>)
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <MX_TIM6_Init+0x78>)
 800472e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <MX_TIM6_Init+0x6c>)
 8004732:	2200      	movs	r2, #0
 8004734:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <MX_TIM6_Init+0x6c>)
 8004738:	0018      	movs	r0, r3
 800473a:	f004 f8ed 	bl	8008918 <HAL_TIM_Base_Init>
 800473e:	1e03      	subs	r3, r0, #0
 8004740:	d001      	beq.n	8004746 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004742:	f7ff fb65 	bl	8003e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004746:	003b      	movs	r3, r7
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800474c:	003b      	movs	r3, r7
 800474e:	2200      	movs	r2, #0
 8004750:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004752:	003a      	movs	r2, r7
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <MX_TIM6_Init+0x6c>)
 8004756:	0011      	movs	r1, r2
 8004758:	0018      	movs	r0, r3
 800475a:	f005 faab 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 800475e:	1e03      	subs	r3, r0, #0
 8004760:	d001      	beq.n	8004766 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8004762:	f7ff fb55 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	b002      	add	sp, #8
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	20000714 	.word	0x20000714
 8004774:	40001000 	.word	0x40001000
 8004778:	00000c7f 	.word	0x00000c7f
 800477c:	0000270f 	.word	0x0000270f

08004780 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004788:	240c      	movs	r4, #12
 800478a:	193b      	adds	r3, r7, r4
 800478c:	0018      	movs	r0, r3
 800478e:	2314      	movs	r3, #20
 8004790:	001a      	movs	r2, r3
 8004792:	2100      	movs	r1, #0
 8004794:	f006 fc42 	bl	800b01c <memset>
  if(tim_icHandle->Instance==TIM2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	05db      	lsls	r3, r3, #23
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d130      	bne.n	8004806 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047a4:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <HAL_TIM_IC_MspInit+0x90>)
 80047a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <HAL_TIM_IC_MspInit+0x90>)
 80047aa:	2101      	movs	r1, #1
 80047ac:	430a      	orrs	r2, r1
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b0:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_TIM_IC_MspInit+0x90>)
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4b16      	ldr	r3, [pc, #88]	; (8004810 <HAL_TIM_IC_MspInit+0x90>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	430a      	orrs	r2, r1
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80047bc:	4b14      	ldr	r3, [pc, #80]	; (8004810 <HAL_TIM_IC_MspInit+0x90>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	2201      	movs	r2, #1
 80047c2:	4013      	ands	r3, r2
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HCSR04_Echo_Pin;
 80047c8:	0021      	movs	r1, r4
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	2202      	movs	r2, #2
 80047d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	2200      	movs	r2, #0
 80047da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80047dc:	187b      	adds	r3, r7, r1
 80047de:	2201      	movs	r2, #1
 80047e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80047e2:	187b      	adds	r3, r7, r1
 80047e4:	2202      	movs	r2, #2
 80047e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HCSR04_Echo_GPIO_Port, &GPIO_InitStruct);
 80047e8:	187a      	adds	r2, r7, r1
 80047ea:	23a0      	movs	r3, #160	; 0xa0
 80047ec:	05db      	lsls	r3, r3, #23
 80047ee:	0011      	movs	r1, r2
 80047f0:	0018      	movs	r0, r3
 80047f2:	f002 f81b 	bl	800682c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80047f6:	2200      	movs	r2, #0
 80047f8:	2101      	movs	r1, #1
 80047fa:	200f      	movs	r0, #15
 80047fc:	f001 fe50 	bl	80064a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004800:	200f      	movs	r0, #15
 8004802:	f001 fe62 	bl	80064ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	46bd      	mov	sp, r7
 800480a:	b009      	add	sp, #36	; 0x24
 800480c:	bd90      	pop	{r4, r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	40021000 	.word	0x40021000

08004814 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a14      	ldr	r2, [pc, #80]	; (8004874 <HAL_TIM_Base_MspInit+0x60>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10e      	bne.n	8004844 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <HAL_TIM_Base_MspInit+0x64>)
 8004828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_TIM_Base_MspInit+0x64>)
 800482c:	2102      	movs	r1, #2
 800482e:	430a      	orrs	r2, r1
 8004830:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004832:	2200      	movs	r2, #0
 8004834:	2101      	movs	r1, #1
 8004836:	2010      	movs	r0, #16
 8004838:	f001 fe32 	bl	80064a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800483c:	2010      	movs	r0, #16
 800483e:	f001 fe44 	bl	80064ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004842:	e012      	b.n	800486a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a0c      	ldr	r2, [pc, #48]	; (800487c <HAL_TIM_Base_MspInit+0x68>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d10d      	bne.n	800486a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800484e:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <HAL_TIM_Base_MspInit+0x64>)
 8004850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_TIM_Base_MspInit+0x64>)
 8004854:	2110      	movs	r1, #16
 8004856:	430a      	orrs	r2, r1
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800485a:	2200      	movs	r2, #0
 800485c:	2102      	movs	r1, #2
 800485e:	2011      	movs	r0, #17
 8004860:	f001 fe1e 	bl	80064a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004864:	2011      	movs	r0, #17
 8004866:	f001 fe30 	bl	80064ca <HAL_NVIC_EnableIRQ>
}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	46bd      	mov	sp, r7
 800486e:	b002      	add	sp, #8
 8004870:	bd80      	pop	{r7, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	40000400 	.word	0x40000400
 8004878:	40021000 	.word	0x40021000
 800487c:	40001000 	.word	0x40001000

08004880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b08b      	sub	sp, #44	; 0x2c
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004888:	2414      	movs	r4, #20
 800488a:	193b      	adds	r3, r7, r4
 800488c:	0018      	movs	r0, r3
 800488e:	2314      	movs	r3, #20
 8004890:	001a      	movs	r2, r3
 8004892:	2100      	movs	r1, #0
 8004894:	f006 fbc2 	bl	800b01c <memset>
  if(timHandle->Instance==TIM2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	05db      	lsls	r3, r3, #23
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d123      	bne.n	80048ec <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_TIM_MspPostInit+0xc4>)
 80048a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a8:	4b26      	ldr	r3, [pc, #152]	; (8004944 <HAL_TIM_MspPostInit+0xc4>)
 80048aa:	2102      	movs	r1, #2
 80048ac:	430a      	orrs	r2, r1
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80048b0:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_TIM_MspPostInit+0xc4>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	2202      	movs	r2, #2
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = HCSR04_Trig_Pin;
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	2280      	movs	r2, #128	; 0x80
 80048c0:	00d2      	lsls	r2, r2, #3
 80048c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c4:	0021      	movs	r1, r4
 80048c6:	187b      	adds	r3, r7, r1
 80048c8:	2202      	movs	r2, #2
 80048ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80048d2:	187b      	adds	r3, r7, r1
 80048d4:	2201      	movs	r2, #1
 80048d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	2202      	movs	r2, #2
 80048dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HCSR04_Trig_GPIO_Port, &GPIO_InitStruct);
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <HAL_TIM_MspPostInit+0xc8>)
 80048e2:	0019      	movs	r1, r3
 80048e4:	0010      	movs	r0, r2
 80048e6:	f001 ffa1 	bl	800682c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80048ea:	e027      	b.n	800493c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a16      	ldr	r2, [pc, #88]	; (800494c <HAL_TIM_MspPostInit+0xcc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d122      	bne.n	800493c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <HAL_TIM_MspPostInit+0xc4>)
 80048f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_TIM_MspPostInit+0xc4>)
 80048fc:	2101      	movs	r1, #1
 80048fe:	430a      	orrs	r2, r1
 8004900:	62da      	str	r2, [r3, #44]	; 0x2c
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <HAL_TIM_MspPostInit+0xc4>)
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	2201      	movs	r2, #1
 8004908:	4013      	ands	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800490e:	2114      	movs	r1, #20
 8004910:	187b      	adds	r3, r7, r1
 8004912:	22c0      	movs	r2, #192	; 0xc0
 8004914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004916:	187b      	adds	r3, r7, r1
 8004918:	2202      	movs	r2, #2
 800491a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	187b      	adds	r3, r7, r1
 800491e:	2200      	movs	r2, #0
 8004920:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004922:	187b      	adds	r3, r7, r1
 8004924:	2200      	movs	r2, #0
 8004926:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004928:	187b      	adds	r3, r7, r1
 800492a:	2202      	movs	r2, #2
 800492c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492e:	187a      	adds	r2, r7, r1
 8004930:	23a0      	movs	r3, #160	; 0xa0
 8004932:	05db      	lsls	r3, r3, #23
 8004934:	0011      	movs	r1, r2
 8004936:	0018      	movs	r0, r3
 8004938:	f001 ff78 	bl	800682c <HAL_GPIO_Init>
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b00b      	add	sp, #44	; 0x2c
 8004942:	bd90      	pop	{r4, r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	50000400 	.word	0x50000400
 800494c:	40000400 	.word	0x40000400

08004950 <__io_putchar>:
#include "usart.h"



int __io_putchar(int ch)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b0a      	cmp	r3, #10
 800495c:	d102      	bne.n	8004964 <__io_putchar+0x14>
    __io_putchar('\r');
 800495e:	200d      	movs	r0, #13
 8004960:	f7ff fff6 	bl	8004950 <__io_putchar>
  }

  HAL_UART_Transmit(&UART_HANDLE, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004964:	2301      	movs	r3, #1
 8004966:	425b      	negs	r3, r3
 8004968:	1d39      	adds	r1, r7, #4
 800496a:	4804      	ldr	r0, [pc, #16]	; (800497c <__io_putchar+0x2c>)
 800496c:	2201      	movs	r2, #1
 800496e:	f005 fa71 	bl	8009e54 <HAL_UART_Transmit>

  return 1;
 8004972:	2301      	movs	r3, #1
}
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000754 	.word	0x20000754

08004980 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 8004986:	4a15      	ldr	r2, [pc, #84]	; (80049dc <MX_USART2_UART_Init+0x5c>)
 8004988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 800498c:	22e1      	movs	r2, #225	; 0xe1
 800498e:	0252      	lsls	r2, r2, #9
 8004990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 8004994:	2200      	movs	r2, #0
 8004996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 800499a:	2200      	movs	r2, #0
 800499c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 80049a6:	220c      	movs	r2, #12
 80049a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 80049be:	2200      	movs	r2, #0
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <MX_USART2_UART_Init+0x58>)
 80049c4:	0018      	movs	r0, r3
 80049c6:	f005 f9f1 	bl	8009dac <HAL_UART_Init>
 80049ca:	1e03      	subs	r3, r0, #0
 80049cc:	d001      	beq.n	80049d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80049ce:	f7ff fa1f 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000754 	.word	0x20000754
 80049dc:	40004400 	.word	0x40004400

080049e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e8:	240c      	movs	r4, #12
 80049ea:	193b      	adds	r3, r7, r4
 80049ec:	0018      	movs	r0, r3
 80049ee:	2314      	movs	r3, #20
 80049f0:	001a      	movs	r2, r3
 80049f2:	2100      	movs	r1, #0
 80049f4:	f006 fb12 	bl	800b01c <memset>
  if(uartHandle->Instance==USART2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_UART_MspInit+0x90>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d131      	bne.n	8004a66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a02:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <HAL_UART_MspInit+0x94>)
 8004a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a06:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <HAL_UART_MspInit+0x94>)
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	0289      	lsls	r1, r1, #10
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a10:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <HAL_UART_MspInit+0x94>)
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <HAL_UART_MspInit+0x94>)
 8004a16:	2101      	movs	r1, #1
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_UART_MspInit+0x94>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	2201      	movs	r2, #1
 8004a22:	4013      	ands	r3, r2
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a28:	0021      	movs	r1, r4
 8004a2a:	187b      	adds	r3, r7, r1
 8004a2c:	220c      	movs	r2, #12
 8004a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	187b      	adds	r3, r7, r1
 8004a32:	2202      	movs	r2, #2
 8004a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a36:	187b      	adds	r3, r7, r1
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	2203      	movs	r2, #3
 8004a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004a42:	187b      	adds	r3, r7, r1
 8004a44:	2204      	movs	r2, #4
 8004a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a48:	187a      	adds	r2, r7, r1
 8004a4a:	23a0      	movs	r3, #160	; 0xa0
 8004a4c:	05db      	lsls	r3, r3, #23
 8004a4e:	0011      	movs	r1, r2
 8004a50:	0018      	movs	r0, r3
 8004a52:	f001 feeb 	bl	800682c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8004a56:	2200      	movs	r2, #0
 8004a58:	2103      	movs	r1, #3
 8004a5a:	201c      	movs	r0, #28
 8004a5c:	f001 fd20 	bl	80064a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a60:	201c      	movs	r0, #28
 8004a62:	f001 fd32 	bl	80064ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b009      	add	sp, #36	; 0x24
 8004a6c:	bd90      	pop	{r4, r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	40004400 	.word	0x40004400
 8004a74:	40021000 	.word	0x40021000

08004a78 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	0002      	movs	r2, r0
 8004a80:	1dfb      	adds	r3, r7, #7
 8004a82:	701a      	strb	r2, [r3, #0]
	HAL_Delay(Time);
 8004a84:	1dfb      	adds	r3, r7, #7
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 ffe1 	bl	8005a50 <HAL_Delay>
}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b002      	add	sp, #8
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	000a      	movs	r2, r1
 8004aa2:	1cfb      	adds	r3, r7, #3
 8004aa4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <nRF24_SendSpi+0x2c>)
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	1cfb      	adds	r3, r7, #3
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	23fa      	movs	r3, #250	; 0xfa
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	f003 f9b9 	bl	8007e2c <HAL_SPI_Transmit>
}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b002      	add	sp, #8
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	200007d8 	.word	0x200007d8

08004ac8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	000a      	movs	r2, r1
 8004ad2:	1cfb      	adds	r3, r7, #3
 8004ad4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <nRF24_ReadSpi+0x2c>)
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	1cfb      	adds	r3, r7, #3
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	23fa      	movs	r3, #250	; 0xfa
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	f003 faf7 	bl	80080d8 <HAL_SPI_Receive>
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b002      	add	sp, #8
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	200007d8 	.word	0x200007d8

08004af8 <nRF24_ReadRegister>:

//
// END OF BASIC READ/WRITE FUNCTIONS
//
static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8004af8:	b590      	push	{r4, r7, lr}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	0002      	movs	r2, r0
 8004b00:	1dfb      	adds	r3, r7, #7
 8004b02:	701a      	strb	r2, [r3, #0]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8004b04:	1dfb      	adds	r3, r7, #7
 8004b06:	781a      	ldrb	r2, [r3, #0]
 8004b08:	1dfb      	adds	r3, r7, #7
 8004b0a:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8004b0c:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <nRF24_ReadRegister+0x50>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	0018      	movs	r0, r3
 8004b14:	f002 f808 	bl	8006b28 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8004b18:	1dfb      	adds	r3, r7, #7
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7ff ffbb 	bl	8004a98 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8004b22:	240f      	movs	r4, #15
 8004b24:	193b      	adds	r3, r7, r4
 8004b26:	2101      	movs	r1, #1
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7ff ffcd 	bl	8004ac8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <nRF24_ReadRegister+0x50>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	0018      	movs	r0, r3
 8004b36:	f001 fff7 	bl	8006b28 <HAL_GPIO_WritePin>

	return result;
 8004b3a:	193b      	adds	r3, r7, r4
 8004b3c:	781b      	ldrb	r3, [r3, #0]
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b005      	add	sp, #20
 8004b44:	bd90      	pop	{r4, r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	50000800 	.word	0x50000800

08004b4c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6039      	str	r1, [r7, #0]
 8004b54:	0011      	movs	r1, r2
 8004b56:	1dfb      	adds	r3, r7, #7
 8004b58:	1c02      	adds	r2, r0, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	1dbb      	adds	r3, r7, #6
 8004b5e:	1c0a      	adds	r2, r1, #0
 8004b60:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_R_REGISTER | reg;
 8004b62:	1dfb      	adds	r3, r7, #7
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	1dfb      	adds	r3, r7, #7
 8004b68:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <nRF24_ReadRegisters+0x58>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2180      	movs	r1, #128	; 0x80
 8004b70:	0018      	movs	r0, r3
 8004b72:	f001 ffd9 	bl	8006b28 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8004b76:	1dfb      	adds	r3, r7, #7
 8004b78:	2101      	movs	r1, #1
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7ff ff8c 	bl	8004a98 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8004b80:	1dbb      	adds	r3, r7, #6
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	0011      	movs	r1, r2
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff ff9d 	bl	8004ac8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <nRF24_ReadRegisters+0x58>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	2180      	movs	r1, #128	; 0x80
 8004b94:	0018      	movs	r0, r3
 8004b96:	f001 ffc7 	bl	8006b28 <HAL_GPIO_WritePin>
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b002      	add	sp, #8
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	50000800 	.word	0x50000800

08004ba8 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	0002      	movs	r2, r0
 8004bb0:	1dfb      	adds	r3, r7, #7
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	1dbb      	adds	r3, r7, #6
 8004bb6:	1c0a      	adds	r2, r1, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8004bba:	1dfb      	adds	r3, r7, #7
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	240c      	movs	r4, #12
 8004bc6:	193b      	adds	r3, r7, r4
 8004bc8:	701a      	strb	r2, [r3, #0]
	tmp[1] = val;
 8004bca:	193b      	adds	r3, r7, r4
 8004bcc:	1dba      	adds	r2, r7, #6
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	705a      	strb	r2, [r3, #1]

	NRF24_CSN_LOW;
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <nRF24_WriteRegister+0x54>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2180      	movs	r1, #128	; 0x80
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f001 ffa5 	bl	8006b28 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8004bde:	193b      	adds	r3, r7, r4
 8004be0:	2102      	movs	r1, #2
 8004be2:	0018      	movs	r0, r3
 8004be4:	f7ff ff58 	bl	8004a98 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <nRF24_WriteRegister+0x54>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f001 ff9a 	bl	8006b28 <HAL_GPIO_WritePin>
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b005      	add	sp, #20
 8004bfa:	bd90      	pop	{r4, r7, pc}
 8004bfc:	50000800 	.word	0x50000800

08004c00 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6039      	str	r1, [r7, #0]
 8004c08:	0011      	movs	r1, r2
 8004c0a:	1dfb      	adds	r3, r7, #7
 8004c0c:	1c02      	adds	r2, r0, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	1dbb      	adds	r3, r7, #6
 8004c12:	1c0a      	adds	r2, r1, #0
 8004c14:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_W_REGISTER | reg;
 8004c16:	1dfb      	adds	r3, r7, #7
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	1dfb      	adds	r3, r7, #7
 8004c22:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <nRF24_WriteRegisters+0x5c>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	2180      	movs	r1, #128	; 0x80
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f001 ff7c 	bl	8006b28 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	2101      	movs	r1, #1
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7ff ff2f 	bl	8004a98 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8004c3a:	1dbb      	adds	r3, r7, #6
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7ff ff28 	bl	8004a98 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <nRF24_WriteRegisters+0x5c>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	2180      	movs	r1, #128	; 0x80
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f001 ff6a 	bl	8006b28 <HAL_GPIO_WritePin>
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	50000800 	.word	0x50000800

08004c60 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8004c66:	1dfc      	adds	r4, r7, #7
 8004c68:	f000 f860 	bl	8004d2c <nRF24_ReadConfig>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	7023      	strb	r3, [r4, #0]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8004c70:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <nRF24_RX_Mode+0x64>)
 8004c72:	0019      	movs	r1, r3
 8004c74:	2000      	movs	r0, #0
 8004c76:	f000 fa7f 	bl	8005178 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8004c7a:	1dfb      	adds	r3, r7, #7
 8004c7c:	1dfa      	adds	r2, r7, #7
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	2102      	movs	r1, #2
 8004c82:	430a      	orrs	r2, r1
 8004c84:	701a      	strb	r2, [r3, #0]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8004c86:	1dfb      	adds	r3, r7, #7
 8004c88:	1dfa      	adds	r2, r7, #7
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8004c92:	1dfb      	adds	r3, r7, #7
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 f851 	bl	8004d3e <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004c9c:	2070      	movs	r0, #112	; 0x70
 8004c9e:	f000 f8c5 	bl	8004e2c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8004ca2:	f000 f901 	bl	8004ea8 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8004ca6:	f000 f91d 	bl	8004ee4 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8004caa:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <nRF24_RX_Mode+0x68>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	2104      	movs	r1, #4
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f001 ff39 	bl	8006b28 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f7ff fede 	bl	8004a78 <nRF24_Delay_ms>
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b003      	add	sp, #12
 8004cc2:	bd90      	pop	{r4, r7, pc}
 8004cc4:	200007dc 	.word	0x200007dc
 8004cc8:	50000400 	.word	0x50000400

08004ccc <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <nRF24_TX_Mode+0x5c>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f001 ff25 	bl	8006b28 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8004cde:	1dfc      	adds	r4, r7, #7
 8004ce0:	f000 f824 	bl	8004d2c <nRF24_ReadConfig>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	7023      	strb	r3, [r4, #0]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8004ce8:	1dfb      	adds	r3, r7, #7
 8004cea:	1dfa      	adds	r2, r7, #7
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	2102      	movs	r1, #2
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	701a      	strb	r2, [r3, #0]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8004cf4:	1dfb      	adds	r3, r7, #7
 8004cf6:	1dfa      	adds	r2, r7, #7
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	438a      	bics	r2, r1
 8004cfe:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8004d00:	1dfb      	adds	r3, r7, #7
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 f81a 	bl	8004d3e <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004d0a:	2070      	movs	r0, #112	; 0x70
 8004d0c:	f000 f88e 	bl	8004e2c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8004d10:	f000 f8ca 	bl	8004ea8 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8004d14:	f000 f8e6 	bl	8004ee4 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 8004d18:	2001      	movs	r0, #1
 8004d1a:	f7ff fead 	bl	8004a78 <nRF24_Delay_ms>
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b003      	add	sp, #12
 8004d24:	bd90      	pop	{r4, r7, pc}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	50000400 	.word	0x50000400

08004d2c <nRF24_ReadConfig>:

uint8_t nRF24_ReadConfig(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7ff fee1 	bl	8004af8 <nRF24_ReadRegister>
 8004d36:	0003      	movs	r3, r0
}
 8004d38:	0018      	movs	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	0002      	movs	r2, r0
 8004d46:	1dfb      	adds	r3, r7, #7
 8004d48:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8004d4a:	1dfb      	adds	r3, r7, #7
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	0019      	movs	r1, r3
 8004d50:	2000      	movs	r0, #0
 8004d52:	f7ff ff29 	bl	8004ba8 <nRF24_WriteRegister>
}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b002      	add	sp, #8
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8004d5e:	b5b0      	push	{r4, r5, r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	0002      	movs	r2, r0
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004d6a:	250f      	movs	r5, #15
 8004d6c:	197c      	adds	r4, r7, r5
 8004d6e:	2006      	movs	r0, #6
 8004d70:	f7ff fec2 	bl	8004af8 <nRF24_ReadRegister>
 8004d74:	0003      	movs	r3, r0
 8004d76:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xF8; // Clear PWR bits
 8004d78:	0028      	movs	r0, r5
 8004d7a:	183b      	adds	r3, r7, r0
 8004d7c:	183a      	adds	r2, r7, r0
 8004d7e:	7812      	ldrb	r2, [r2, #0]
 8004d80:	2107      	movs	r1, #7
 8004d82:	438a      	bics	r2, r1
 8004d84:	701a      	strb	r2, [r3, #0]
	rf_setup |= (lev<<1);
 8004d86:	1dfb      	adds	r3, r7, #7
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	b25a      	sxtb	r2, r3
 8004d8e:	183b      	adds	r3, r7, r0
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	4313      	orrs	r3, r2
 8004d96:	b25a      	sxtb	r2, r3
 8004d98:	183b      	adds	r3, r7, r0
 8004d9a:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004d9c:	183b      	adds	r3, r7, r0
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	0019      	movs	r1, r3
 8004da2:	2006      	movs	r0, #6
 8004da4:	f7ff ff00 	bl	8004ba8 <nRF24_WriteRegister>
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bdb0      	pop	{r4, r5, r7, pc}

08004db0 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8004db0:	b5b0      	push	{r4, r5, r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	0002      	movs	r2, r0
 8004db8:	1dfb      	adds	r3, r7, #7
 8004dba:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004dbc:	250f      	movs	r5, #15
 8004dbe:	197c      	adds	r4, r7, r5
 8004dc0:	2006      	movs	r0, #6
 8004dc2:	f7ff fe99 	bl	8004af8 <nRF24_ReadRegister>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8004dca:	0028      	movs	r0, r5
 8004dcc:	183b      	adds	r3, r7, r0
 8004dce:	183a      	adds	r2, r7, r0
 8004dd0:	7812      	ldrb	r2, [r2, #0]
 8004dd2:	2128      	movs	r1, #40	; 0x28
 8004dd4:	438a      	bics	r2, r1
 8004dd6:	701a      	strb	r2, [r3, #0]
	if(dr == NRF24_RF_DR_250KBPS)
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d106      	bne.n	8004dee <nRF24_SetDataRate+0x3e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8004de0:	183b      	adds	r3, r7, r0
 8004de2:	183a      	adds	r2, r7, r0
 8004de4:	7812      	ldrb	r2, [r2, #0]
 8004de6:	2120      	movs	r1, #32
 8004de8:	430a      	orrs	r2, r1
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e00a      	b.n	8004e04 <nRF24_SetDataRate+0x54>
	else if(dr == NRF24_RF_DR_2MBPS)
 8004dee:	1dfb      	adds	r3, r7, #7
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d106      	bne.n	8004e04 <nRF24_SetDataRate+0x54>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8004df6:	220f      	movs	r2, #15
 8004df8:	18bb      	adds	r3, r7, r2
 8004dfa:	18ba      	adds	r2, r7, r2
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	2108      	movs	r1, #8
 8004e00:	430a      	orrs	r2, r1
 8004e02:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004e04:	230f      	movs	r3, #15
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	2006      	movs	r0, #6
 8004e0e:	f7ff fecb 	bl	8004ba8 <nRF24_WriteRegister>
}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b004      	add	sp, #16
 8004e18:	bdb0      	pop	{r4, r5, r7, pc}

08004e1a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8004e1e:	2007      	movs	r0, #7
 8004e20:	f7ff fe6a 	bl	8004af8 <nRF24_ReadRegister>
 8004e24:	0003      	movs	r3, r0
}
 8004e26:	0018      	movs	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	0002      	movs	r2, r0
 8004e34:	1dfb      	adds	r3, r7, #7
 8004e36:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8004e38:	1dfb      	adds	r3, r7, #7
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	2007      	movs	r0, #7
 8004e40:	f7ff feb2 	bl	8004ba8 <nRF24_WriteRegister>
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8004e50:	2017      	movs	r0, #23
 8004e52:	f7ff fe51 	bl	8004af8 <nRF24_ReadRegister>
 8004e56:	0003      	movs	r3, r0
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8004e5e:	b5b0      	push	{r4, r5, r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	0002      	movs	r2, r0
 8004e66:	1dfb      	adds	r3, r7, #7
 8004e68:	701a      	strb	r2, [r3, #0]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8004e6a:	250f      	movs	r5, #15
 8004e6c:	197c      	adds	r4, r7, r5
 8004e6e:	f7ff ffed 	bl	8004e4c <nRF24_ReadFifoStatus>
 8004e72:	0003      	movs	r3, r0
 8004e74:	7023      	strb	r3, [r4, #0]

	if(FifoStatus & (1<<Bit))
 8004e76:	197b      	adds	r3, r7, r5
 8004e78:	781a      	ldrb	r2, [r3, #0]
 8004e7a:	1dfb      	adds	r3, r7, #7
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	411a      	asrs	r2, r3
 8004e80:	0013      	movs	r3, r2
 8004e82:	2201      	movs	r2, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d001      	beq.n	8004e8c <nRF24_IsBitSetInFifoStatus+0x2e>
	{
		return 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <nRF24_IsBitSetInFifoStatus+0x30>
	}

	return 0;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b004      	add	sp, #16
 8004e94:	bdb0      	pop	{r4, r5, r7, pc}

08004e96 <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	af00      	add	r7, sp, #0
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7ff ffdf 	bl	8004e5e <nRF24_IsBitSetInFifoStatus>
 8004ea0:	0003      	movs	r3, r0
}
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8004eae:	1dfb      	adds	r3, r7, #7
 8004eb0:	22e2      	movs	r2, #226	; 0xe2
 8004eb2:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <nRF24_FlushRX+0x38>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f001 fe34 	bl	8006b28 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8004ec0:	1dfb      	adds	r3, r7, #7
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff fde7 	bl	8004a98 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <nRF24_FlushRX+0x38>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f001 fe29 	bl	8006b28 <HAL_GPIO_WritePin>
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b002      	add	sp, #8
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	50000800 	.word	0x50000800

08004ee4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	22e1      	movs	r2, #225	; 0xe1
 8004eee:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <nRF24_FlushTX+0x38>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f001 fe16 	bl	8006b28 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8004efc:	1dfb      	adds	r3, r7, #7
 8004efe:	2101      	movs	r1, #1
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7ff fdc9 	bl	8004a98 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <nRF24_FlushTX+0x38>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f001 fe0b 	bl	8006b28 <HAL_GPIO_WritePin>
}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b002      	add	sp, #8
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	50000800 	.word	0x50000800

08004f20 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8004f20:	b5b0      	push	{r4, r5, r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	0002      	movs	r2, r0
 8004f28:	1dfb      	adds	r3, r7, #7
 8004f2a:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8004f2c:	250f      	movs	r5, #15
 8004f2e:	197c      	adds	r4, r7, r5
 8004f30:	f7ff fefc 	bl	8004d2c <nRF24_ReadConfig>
 8004f34:	0003      	movs	r3, r0
 8004f36:	7023      	strb	r3, [r4, #0]

	if(onoff)
 8004f38:	1dfb      	adds	r3, r7, #7
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d006      	beq.n	8004f4e <nRF24_EnableCRC+0x2e>
		config |= (1<<NRF24_EN_CRC);
 8004f40:	197b      	adds	r3, r7, r5
 8004f42:	197a      	adds	r2, r7, r5
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	2108      	movs	r1, #8
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e006      	b.n	8004f5c <nRF24_EnableCRC+0x3c>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8004f4e:	220f      	movs	r2, #15
 8004f50:	18bb      	adds	r3, r7, r2
 8004f52:	18ba      	adds	r2, r7, r2
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	2108      	movs	r1, #8
 8004f58:	438a      	bics	r2, r1
 8004f5a:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8004f5c:	230f      	movs	r3, #15
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	0018      	movs	r0, r3
 8004f64:	f7ff feeb 	bl	8004d3e <nRF24_WriteConfig>
}
 8004f68:	46c0      	nop			; (mov r8, r8)
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b004      	add	sp, #16
 8004f6e:	bdb0      	pop	{r4, r5, r7, pc}

08004f70 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8004f70:	b5b0      	push	{r4, r5, r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	0002      	movs	r2, r0
 8004f78:	1dfb      	adds	r3, r7, #7
 8004f7a:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8004f7c:	250f      	movs	r5, #15
 8004f7e:	197c      	adds	r4, r7, r5
 8004f80:	f7ff fed4 	bl	8004d2c <nRF24_ReadConfig>
 8004f84:	0003      	movs	r3, r0
 8004f86:	7023      	strb	r3, [r4, #0]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8004f88:	1dfb      	adds	r3, r7, #7
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d106      	bne.n	8004f9e <nRF24_SetCRCLength+0x2e>
		config |= (1<<NRF24_CRCO);
 8004f90:	197b      	adds	r3, r7, r5
 8004f92:	197a      	adds	r2, r7, r5
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	2104      	movs	r1, #4
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e006      	b.n	8004fac <nRF24_SetCRCLength+0x3c>
	else
		config &= ~(1<<NRF24_CRCO);
 8004f9e:	220f      	movs	r2, #15
 8004fa0:	18bb      	adds	r3, r7, r2
 8004fa2:	18ba      	adds	r2, r7, r2
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	2104      	movs	r1, #4
 8004fa8:	438a      	bics	r2, r1
 8004faa:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8004fac:	230f      	movs	r3, #15
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7ff fec3 	bl	8004d3e <nRF24_WriteConfig>
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b004      	add	sp, #16
 8004fbe:	bdb0      	pop	{r4, r5, r7, pc}

08004fc0 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	1dfb      	adds	r3, r7, #7
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	1dbb      	adds	r3, r7, #6
 8004fce:	1c0a      	adds	r2, r1, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8004fd2:	1dfb      	adds	r3, r7, #7
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	b25a      	sxtb	r2, r3
 8004fda:	1dbb      	adds	r3, r7, #6
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	210f      	movs	r1, #15
 8004fe2:	400b      	ands	r3, r1
 8004fe4:	b25b      	sxtb	r3, r3
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	0019      	movs	r1, r3
 8004fee:	2004      	movs	r0, #4
 8004ff0:	f7ff fdda 	bl	8004ba8 <nRF24_WriteRegister>
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	0002      	movs	r2, r0
 8005004:	1dfb      	adds	r3, r7, #7
 8005006:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8005008:	1dfb      	adds	r3, r7, #7
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	227f      	movs	r2, #127	; 0x7f
 800500e:	4013      	ands	r3, r2
 8005010:	b2db      	uxtb	r3, r3
 8005012:	0019      	movs	r1, r3
 8005014:	2005      	movs	r0, #5
 8005016:	f7ff fdc7 	bl	8004ba8 <nRF24_WriteRegister>
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	46bd      	mov	sp, r7
 800501e:	b002      	add	sp, #8
 8005020:	bd80      	pop	{r7, pc}

08005022 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8005022:	b5b0      	push	{r4, r5, r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	0002      	movs	r2, r0
 800502a:	1dfb      	adds	r3, r7, #7
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	1dbb      	adds	r3, r7, #6
 8005030:	1c0a      	adds	r2, r1, #0
 8005032:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b05      	cmp	r3, #5
 800503a:	d902      	bls.n	8005042 <nRF24_EnablePipe+0x20>
		pipe = 5; // Block too high pipe number
 800503c:	1dfb      	adds	r3, r7, #7
 800503e:	2205      	movs	r2, #5
 8005040:	701a      	strb	r2, [r3, #0]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8005042:	250f      	movs	r5, #15
 8005044:	197c      	adds	r4, r7, r5
 8005046:	2002      	movs	r0, #2
 8005048:	f7ff fd56 	bl	8004af8 <nRF24_ReadRegister>
 800504c:	0003      	movs	r3, r0
 800504e:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 8005050:	1dbb      	adds	r3, r7, #6
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d10d      	bne.n	8005074 <nRF24_EnablePipe+0x52>
		enable_pipe |= (1<<pipe);
 8005058:	1dfb      	adds	r3, r7, #7
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	0013      	movs	r3, r2
 8005062:	b25a      	sxtb	r2, r3
 8005064:	197b      	adds	r3, r7, r5
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b25b      	sxtb	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b25a      	sxtb	r2, r3
 800506e:	197b      	adds	r3, r7, r5
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	e00f      	b.n	8005094 <nRF24_EnablePipe+0x72>
	else
		enable_pipe &= ~(1<<pipe);
 8005074:	1dfb      	adds	r3, r7, #7
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	409a      	lsls	r2, r3
 800507c:	0013      	movs	r3, r2
 800507e:	b25b      	sxtb	r3, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	b25b      	sxtb	r3, r3
 8005084:	210f      	movs	r1, #15
 8005086:	187a      	adds	r2, r7, r1
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	b252      	sxtb	r2, r2
 800508c:	4013      	ands	r3, r2
 800508e:	b25a      	sxtb	r2, r3
 8005090:	187b      	adds	r3, r7, r1
 8005092:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8005094:	230f      	movs	r3, #15
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	0019      	movs	r1, r3
 800509c:	2002      	movs	r0, #2
 800509e:	f7ff fd83 	bl	8004ba8 <nRF24_WriteRegister>
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b004      	add	sp, #16
 80050a8:	bdb0      	pop	{r4, r5, r7, pc}

080050aa <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80050aa:	b5b0      	push	{r4, r5, r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	0002      	movs	r2, r0
 80050b2:	1dfb      	adds	r3, r7, #7
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	1dbb      	adds	r3, r7, #6
 80050b8:	1c0a      	adds	r2, r1, #0
 80050ba:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 80050bc:	1dfb      	adds	r3, r7, #7
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d902      	bls.n	80050ca <nRF24_AutoACK+0x20>
		pipe = 5; // Block too high pipe number
 80050c4:	1dfb      	adds	r3, r7, #7
 80050c6:	2205      	movs	r2, #5
 80050c8:	701a      	strb	r2, [r3, #0]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80050ca:	250f      	movs	r5, #15
 80050cc:	197c      	adds	r4, r7, r5
 80050ce:	2001      	movs	r0, #1
 80050d0:	f7ff fd12 	bl	8004af8 <nRF24_ReadRegister>
 80050d4:	0003      	movs	r3, r0
 80050d6:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 80050d8:	1dbb      	adds	r3, r7, #6
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10d      	bne.n	80050fc <nRF24_AutoACK+0x52>
		enaa |= (1<<pipe);
 80050e0:	1dfb      	adds	r3, r7, #7
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2201      	movs	r2, #1
 80050e6:	409a      	lsls	r2, r3
 80050e8:	0013      	movs	r3, r2
 80050ea:	b25a      	sxtb	r2, r3
 80050ec:	197b      	adds	r3, r7, r5
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b25b      	sxtb	r3, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b25a      	sxtb	r2, r3
 80050f6:	197b      	adds	r3, r7, r5
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e00f      	b.n	800511c <nRF24_AutoACK+0x72>
	else
		enaa &= ~(1<<pipe);
 80050fc:	1dfb      	adds	r3, r7, #7
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	0013      	movs	r3, r2
 8005106:	b25b      	sxtb	r3, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	b25b      	sxtb	r3, r3
 800510c:	210f      	movs	r1, #15
 800510e:	187a      	adds	r2, r7, r1
 8005110:	7812      	ldrb	r2, [r2, #0]
 8005112:	b252      	sxtb	r2, r2
 8005114:	4013      	ands	r3, r2
 8005116:	b25a      	sxtb	r2, r3
 8005118:	187b      	adds	r3, r7, r1
 800511a:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800511c:	230f      	movs	r3, #15
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	0019      	movs	r1, r3
 8005124:	2001      	movs	r0, #1
 8005126:	f7ff fd3f 	bl	8004ba8 <nRF24_WriteRegister>
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46bd      	mov	sp, r7
 800512e:	b004      	add	sp, #16
 8005130:	bdb0      	pop	{r4, r5, r7, pc}

08005132 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	0002      	movs	r2, r0
 800513a:	1dfb      	adds	r3, r7, #7
 800513c:	701a      	strb	r2, [r3, #0]
	if(size > 5)
 800513e:	1dfb      	adds	r3, r7, #7
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b05      	cmp	r3, #5
 8005144:	d902      	bls.n	800514c <nRF24_SetAddressWidth+0x1a>
		size = 5; // Maximum are 5 bytes
 8005146:	1dfb      	adds	r3, r7, #7
 8005148:	2205      	movs	r2, #5
 800514a:	701a      	strb	r2, [r3, #0]
	if(size < 3)
 800514c:	1dfb      	adds	r3, r7, #7
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d802      	bhi.n	800515a <nRF24_SetAddressWidth+0x28>
		size = 3; // Minimum are 3 bytes
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	2203      	movs	r2, #3
 8005158:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800515a:	1dfb      	adds	r3, r7, #7
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	3b02      	subs	r3, #2
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2203      	movs	r2, #3
 8005164:	4013      	ands	r3, r2
 8005166:	b2db      	uxtb	r3, r3
 8005168:	0019      	movs	r1, r3
 800516a:	2003      	movs	r0, #3
 800516c:	f7ff fd1c 	bl	8004ba8 <nRF24_WriteRegister>
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}

08005178 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	0002      	movs	r2, r0
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	1dfb      	adds	r3, r7, #7
 8005184:	701a      	strb	r2, [r3, #0]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8005186:	1dfb      	adds	r3, r7, #7
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <nRF24_SetRXAddress+0x1e>
 800518e:	1dfb      	adds	r3, r7, #7
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d126      	bne.n	80051e4 <nRF24_SetRXAddress+0x6c>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8005196:	230f      	movs	r3, #15
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e011      	b.n	80051c4 <nRF24_SetRXAddress+0x4c>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80051a0:	200f      	movs	r0, #15
 80051a2:	183b      	adds	r3, r7, r0
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	18d2      	adds	r2, r2, r3
 80051aa:	183b      	adds	r3, r7, r0
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2102      	movs	r1, #2
 80051b0:	1acb      	subs	r3, r1, r3
 80051b2:	7811      	ldrb	r1, [r2, #0]
 80051b4:	220c      	movs	r2, #12
 80051b6:	18ba      	adds	r2, r7, r2
 80051b8:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80051ba:	183b      	adds	r3, r7, r0
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	183b      	adds	r3, r7, r0
 80051c0:	3201      	adds	r2, #1
 80051c2:	701a      	strb	r2, [r3, #0]
 80051c4:	230f      	movs	r3, #15
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d9e8      	bls.n	80051a0 <nRF24_SetRXAddress+0x28>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80051ce:	1dfb      	adds	r3, r7, #7
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	330a      	adds	r3, #10
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	220c      	movs	r2, #12
 80051d8:	18b9      	adds	r1, r7, r2
 80051da:	2203      	movs	r2, #3
 80051dc:	0018      	movs	r0, r3
 80051de:	f7ff fd0f 	bl	8004c00 <nRF24_WriteRegisters>
	{
 80051e2:	e00b      	b.n	80051fc <nRF24_SetRXAddress+0x84>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80051e4:	1dfb      	adds	r3, r7, #7
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	330a      	adds	r3, #10
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	3302      	adds	r3, #2
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	0019      	movs	r1, r3
 80051f4:	0010      	movs	r0, r2
 80051f6:	f7ff fcd7 	bl	8004ba8 <nRF24_WriteRegister>
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	46bd      	mov	sp, r7
 8005200:	b004      	add	sp, #16
 8005202:	bd80      	pop	{r7, pc}

08005204 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8005204:	b590      	push	{r4, r7, lr}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800520c:	230c      	movs	r3, #12
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	2203      	movs	r2, #3
 8005212:	0019      	movs	r1, r3
 8005214:	200a      	movs	r0, #10
 8005216:	f7ff fc99 	bl	8004b4c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800521a:	230f      	movs	r3, #15
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e010      	b.n	8005246 <nRF24_SetTXAddress+0x42>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8005224:	200f      	movs	r0, #15
 8005226:	183b      	adds	r3, r7, r0
 8005228:	781a      	ldrb	r2, [r3, #0]
 800522a:	183b      	adds	r3, r7, r0
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2102      	movs	r1, #2
 8005230:	1acb      	subs	r3, r1, r3
 8005232:	210c      	movs	r1, #12
 8005234:	1879      	adds	r1, r7, r1
 8005236:	5c89      	ldrb	r1, [r1, r2]
 8005238:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <nRF24_SetTXAddress+0xa4>)
 800523a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800523c:	183b      	adds	r3, r7, r0
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	183b      	adds	r3, r7, r0
 8005242:	3201      	adds	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	220f      	movs	r2, #15
 8005248:	18bb      	adds	r3, r7, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d9e9      	bls.n	8005224 <nRF24_SetTXAddress+0x20>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8005250:	18bb      	adds	r3, r7, r2
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e011      	b.n	800527c <nRF24_SetTXAddress+0x78>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8005258:	200f      	movs	r0, #15
 800525a:	183b      	adds	r3, r7, r0
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	18d2      	adds	r2, r2, r3
 8005262:	183b      	adds	r3, r7, r0
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2102      	movs	r1, #2
 8005268:	1acb      	subs	r3, r1, r3
 800526a:	7811      	ldrb	r1, [r2, #0]
 800526c:	220c      	movs	r2, #12
 800526e:	18ba      	adds	r2, r7, r2
 8005270:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8005272:	183b      	adds	r3, r7, r0
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	183b      	adds	r3, r7, r0
 8005278:	3201      	adds	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	230f      	movs	r3, #15
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d9e8      	bls.n	8005258 <nRF24_SetTXAddress+0x54>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8005286:	240c      	movs	r4, #12
 8005288:	193b      	adds	r3, r7, r4
 800528a:	2203      	movs	r2, #3
 800528c:	0019      	movs	r1, r3
 800528e:	200a      	movs	r0, #10
 8005290:	f7ff fcb6 	bl	8004c00 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8005294:	193b      	adds	r3, r7, r4
 8005296:	2203      	movs	r2, #3
 8005298:	0019      	movs	r1, r3
 800529a:	2010      	movs	r0, #16
 800529c:	f7ff fcb0 	bl	8004c00 <nRF24_WriteRegisters>
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b005      	add	sp, #20
 80052a6:	bd90      	pop	{r4, r7, pc}
 80052a8:	200007dc 	.word	0x200007dc

080052ac <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80052ac:	b590      	push	{r4, r7, lr}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80052b2:	1dfc      	adds	r4, r7, #7
 80052b4:	f7ff fdb1 	bl	8004e1a <nRF24_ReadStatus>
 80052b8:	0003      	movs	r3, r0
 80052ba:	7023      	strb	r3, [r4, #0]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80052bc:	1dfb      	adds	r3, r7, #7
 80052be:	1dfa      	adds	r2, r7, #7
 80052c0:	7812      	ldrb	r2, [r2, #0]
 80052c2:	2170      	movs	r1, #112	; 0x70
 80052c4:	430a      	orrs	r2, r1
 80052c6:	701a      	strb	r2, [r3, #0]
	nRF24_WriteStatus(status);
 80052c8:	1dfb      	adds	r3, r7, #7
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7ff fdad 	bl	8004e2c <nRF24_WriteStatus>
}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b003      	add	sp, #12
 80052d8:	bd90      	pop	{r4, r7, pc}

080052da <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 80052da:	b590      	push	{r4, r7, lr}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80052e0:	1dfb      	adds	r3, r7, #7
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 80052e6:	1dfc      	adds	r4, r7, #7
 80052e8:	2060      	movs	r0, #96	; 0x60
 80052ea:	f7ff fc05 	bl	8004af8 <nRF24_ReadRegister>
 80052ee:	0003      	movs	r3, r0
 80052f0:	7023      	strb	r3, [r4, #0]

    if (result > 32) // Something went wrong :)
 80052f2:	1dfb      	adds	r3, r7, #7
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d906      	bls.n	8005308 <nRF24_GetDynamicPayloadSize+0x2e>
    {
        nRF24_FlushRX();
 80052fa:	f7ff fdd5 	bl	8004ea8 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 80052fe:	2002      	movs	r0, #2
 8005300:	f7ff fbba 	bl	8004a78 <nRF24_Delay_ms>
        return 0;
 8005304:	2300      	movs	r3, #0
 8005306:	e001      	b.n	800530c <nRF24_GetDynamicPayloadSize+0x32>
    }
    return result;
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	781b      	ldrb	r3, [r3, #0]
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b003      	add	sp, #12
 8005312:	bd90      	pop	{r4, r7, pc}

08005314 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8005314:	b5b0      	push	{r4, r5, r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	0002      	movs	r2, r0
 800531c:	1dfb      	adds	r3, r7, #7
 800531e:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8005320:	250f      	movs	r5, #15
 8005322:	197c      	adds	r4, r7, r5
 8005324:	f7ff fd02 	bl	8004d2c <nRF24_ReadConfig>
 8005328:	0003      	movs	r3, r0
 800532a:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 800532c:	1dfb      	adds	r3, r7, #7
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <nRF24_EnableRXDataReadyIRQ+0x2e>
		config |= (1<<NRF24_RX_DR);
 8005334:	197b      	adds	r3, r7, r5
 8005336:	197a      	adds	r2, r7, r5
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	2140      	movs	r1, #64	; 0x40
 800533c:	430a      	orrs	r2, r1
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e006      	b.n	8005350 <nRF24_EnableRXDataReadyIRQ+0x3c>
	else
		config &= ~(1<<NRF24_RX_DR);
 8005342:	220f      	movs	r2, #15
 8005344:	18bb      	adds	r3, r7, r2
 8005346:	18ba      	adds	r2, r7, r2
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	2140      	movs	r1, #64	; 0x40
 800534c:	438a      	bics	r2, r1
 800534e:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8005350:	230f      	movs	r3, #15
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	0018      	movs	r0, r3
 8005358:	f7ff fcf1 	bl	8004d3e <nRF24_WriteConfig>
}
 800535c:	46c0      	nop			; (mov r8, r8)
 800535e:	46bd      	mov	sp, r7
 8005360:	b004      	add	sp, #16
 8005362:	bdb0      	pop	{r4, r5, r7, pc}

08005364 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8005364:	b5b0      	push	{r4, r5, r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	0002      	movs	r2, r0
 800536c:	1dfb      	adds	r3, r7, #7
 800536e:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8005370:	250f      	movs	r5, #15
 8005372:	197c      	adds	r4, r7, r5
 8005374:	f7ff fcda 	bl	8004d2c <nRF24_ReadConfig>
 8005378:	0003      	movs	r3, r0
 800537a:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 800537c:	1dfb      	adds	r3, r7, #7
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <nRF24_EnableTXDataSentIRQ+0x2e>
		config |= (1<<NRF24_TX_DS);
 8005384:	197b      	adds	r3, r7, r5
 8005386:	197a      	adds	r2, r7, r5
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	2120      	movs	r1, #32
 800538c:	430a      	orrs	r2, r1
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e006      	b.n	80053a0 <nRF24_EnableTXDataSentIRQ+0x3c>
	else
		config &= ~(1<<NRF24_TX_DS);
 8005392:	220f      	movs	r2, #15
 8005394:	18bb      	adds	r3, r7, r2
 8005396:	18ba      	adds	r2, r7, r2
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	2120      	movs	r1, #32
 800539c:	438a      	bics	r2, r1
 800539e:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 80053a0:	230f      	movs	r3, #15
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f7ff fcc9 	bl	8004d3e <nRF24_WriteConfig>
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b004      	add	sp, #16
 80053b2:	bdb0      	pop	{r4, r5, r7, pc}

080053b4 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80053b4:	b5b0      	push	{r4, r5, r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	0002      	movs	r2, r0
 80053bc:	1dfb      	adds	r3, r7, #7
 80053be:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 80053c0:	250f      	movs	r5, #15
 80053c2:	197c      	adds	r4, r7, r5
 80053c4:	f7ff fcb2 	bl	8004d2c <nRF24_ReadConfig>
 80053c8:	0003      	movs	r3, r0
 80053ca:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 80053cc:	1dfb      	adds	r3, r7, #7
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <nRF24_EnableMaxRetransmitIRQ+0x2e>
		config |= (1<<NRF24_MAX_RT);
 80053d4:	197b      	adds	r3, r7, r5
 80053d6:	197a      	adds	r2, r7, r5
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	2110      	movs	r1, #16
 80053dc:	430a      	orrs	r2, r1
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e006      	b.n	80053f0 <nRF24_EnableMaxRetransmitIRQ+0x3c>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80053e2:	220f      	movs	r2, #15
 80053e4:	18bb      	adds	r3, r7, r2
 80053e6:	18ba      	adds	r2, r7, r2
 80053e8:	7812      	ldrb	r2, [r2, #0]
 80053ea:	2110      	movs	r1, #16
 80053ec:	438a      	bics	r2, r1
 80053ee:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 80053f0:	230f      	movs	r3, #15
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7ff fca1 	bl	8004d3e <nRF24_WriteConfig>
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b004      	add	sp, #16
 8005402:	bdb0      	pop	{r4, r5, r7, pc}

08005404 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	000a      	movs	r2, r1
 800540e:	1cfb      	adds	r3, r7, #3
 8005410:	701a      	strb	r2, [r3, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8005412:	1cfb      	adds	r3, r7, #3
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	0019      	movs	r1, r3
 800541a:	20a0      	movs	r0, #160	; 0xa0
 800541c:	f7ff fbf0 	bl	8004c00 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b002      	add	sp, #8
 8005426:	bd80      	pop	{r7, pc}

08005428 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8005432:	f7ff ff52 	bl	80052da <nRF24_GetDynamicPayloadSize>
 8005436:	0003      	movs	r3, r0
 8005438:	001a      	movs	r2, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	0019      	movs	r1, r3
 8005446:	2061      	movs	r0, #97	; 0x61
 8005448:	f7ff fb80 	bl	8004b4c <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 800544c:	2101      	movs	r1, #1
 800544e:	2007      	movs	r0, #7
 8005450:	f7ff fbaa 	bl	8004ba8 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8005454:	f7ff fce1 	bl	8004e1a <nRF24_ReadStatus>
 8005458:	0003      	movs	r3, r0
 800545a:	001a      	movs	r2, r3
 800545c:	2320      	movs	r3, #32
 800545e:	4013      	ands	r3, r2
 8005460:	d003      	beq.n	800546a <nRF24_ReadRXPaylaod+0x42>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8005462:	2120      	movs	r1, #32
 8005464:	2007      	movs	r0, #7
 8005466:	f7ff fb9f 	bl	8004ba8 <nRF24_WriteRegister>
#endif
}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b002      	add	sp, #8
 8005470:	bd80      	pop	{r7, pc}

08005472 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	000a      	movs	r2, r1
 800547c:	1cfb      	adds	r3, r7, #3
 800547e:	701a      	strb	r2, [r3, #0]
	if(Size > 32)
 8005480:	1cfb      	adds	r3, r7, #3
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b20      	cmp	r3, #32
 8005486:	d901      	bls.n	800548c <nRF24_SendPacket+0x1a>
		return NRF24_NO_TRANSMITTED_PACKET;
 8005488:	2301      	movs	r3, #1
 800548a:	e007      	b.n	800549c <nRF24_SendPacket+0x2a>

	nRF24_WriteTXPayload(Data, Size);
 800548c:	1cfb      	adds	r3, r7, #3
 800548e:	781a      	ldrb	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	0011      	movs	r1, r2
 8005494:	0018      	movs	r0, r3
 8005496:	f7ff ffb5 	bl	8005404 <nRF24_WriteTXPayload>
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
 800549a:	2300      	movs	r3, #0
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	b002      	add	sp, #8
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <nRF24_IsSomtehingToRead>:

#if (NRF24_USE_RINGBUFFER == 1)
uint8_t nRF24_IsSomtehingToRead(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
	return RB_ElementsAvailable(RXBuffer)?1:0;
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <nRF24_IsSomtehingToRead+0x1c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7fe fe15 	bl	80040dc <RB_ElementsAvailable>
 80054b2:	0003      	movs	r3, r0
 80054b4:	1e5a      	subs	r2, r3, #1
 80054b6:	4193      	sbcs	r3, r2
 80054b8:	b2db      	uxtb	r3, r3
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	200007e4 	.word	0x200007e4

080054c4 <nRF24_IsSomtehingToSend>:

uint8_t nRF24_IsSomtehingToSend(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
	return RB_ElementsAvailable(TXBuffer)?1:0;
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <nRF24_IsSomtehingToSend+0x1c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f7fe fe05 	bl	80040dc <RB_ElementsAvailable>
 80054d2:	0003      	movs	r3, r0
 80054d4:	1e5a      	subs	r2, r3, #1
 80054d6:	4193      	sbcs	r3, r2
 80054d8:	b2db      	uxtb	r3, r3
}
 80054da:	0018      	movs	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	200007e8 	.word	0x200007e8

080054e4 <nRF24_RXAvailable>:
#endif

uint8_t nRF24_RXAvailable(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
		return 1;
	}
	return 0;
#endif
#if (NRF24_USE_RINGBUFFER == 1)
	return nRF24_IsSomtehingToRead();
 80054e8:	f7ff ffdc 	bl	80054a4 <nRF24_IsSomtehingToRead>
 80054ec:	0003      	movs	r3, r0
#endif
}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <nRF24_ReceivePacket>:

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0011      	movs	r1, r2
 8005504:	0018      	movs	r0, r3
 8005506:	f7ff ff8f 	bl	8005428 <nRF24_ReadRXPaylaod>
		return NRF24_RECEIVED_PACKET;
 800550a:	2300      	movs	r3, #0
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b002      	add	sp, #8
 8005512:	bd80      	pop	{r7, pc}

08005514 <nRF24_SendData>:

nRF24_TX_Status nRF24_SendData(uint8_t* Data, uint8_t Size)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	000a      	movs	r2, r1
 800551e:	1cfb      	adds	r3, r7, #3
 8005520:	701a      	strb	r2, [r3, #0]
#if (NRF24_USE_RINGBUFFER != 1) // (NRF24_USE_INTERRUPT any)
	return nRF24_SendPacket(Data, Size);
#endif
#if (NRF24_USE_RINGBUFFER == 1)
	uint8_t i = 0;
 8005522:	230f      	movs	r3, #15
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]

	while(Size > 0)
 800552a:	e018      	b.n	800555e <nRF24_SendData+0x4a>
	{
		if(RB_OK == RB_WriteToBuffer(TXBuffer, Data[i++]))
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <nRF24_SendData+0x5c>)
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	220f      	movs	r2, #15
 8005532:	18bb      	adds	r3, r7, r2
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	18ba      	adds	r2, r7, r2
 8005538:	1c59      	adds	r1, r3, #1
 800553a:	7011      	strb	r1, [r2, #0]
 800553c:	001a      	movs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	189b      	adds	r3, r3, r2
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	0019      	movs	r1, r3
 8005546:	f7fe fd55 	bl	8003ff4 <RB_WriteToBuffer>
 800554a:	1e03      	subs	r3, r0, #0
 800554c:	d105      	bne.n	800555a <nRF24_SendData+0x46>
		{
			Size--;
 800554e:	1cfb      	adds	r3, r7, #3
 8005550:	781a      	ldrb	r2, [r3, #0]
 8005552:	1cfb      	adds	r3, r7, #3
 8005554:	3a01      	subs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e001      	b.n	800555e <nRF24_SendData+0x4a>
		}
		else
		{
			return NRF24_NO_TRANSMITTED_PACKET;
 800555a:	2301      	movs	r3, #1
 800555c:	e004      	b.n	8005568 <nRF24_SendData+0x54>
	while(Size > 0)
 800555e:	1cfb      	adds	r3, r7, #3
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e2      	bne.n	800552c <nRF24_SendData+0x18>
		}
	}
	return NRF24_TRANSMITTED_PACKET;
 8005566:	2300      	movs	r3, #0
#endif
}
 8005568:	0018      	movs	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	b004      	add	sp, #16
 800556e:	bd80      	pop	{r7, pc}
 8005570:	200007e8 	.word	0x200007e8

08005574 <nRF24_CheckTXAndSend>:
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8005574:	b5b0      	push	{r4, r5, r7, lr}
 8005576:	b08a      	sub	sp, #40	; 0x28
 8005578:	af00      	add	r7, sp, #0
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

//	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
		if(nRF24_IsSomtehingToSend())
 800557a:	f7ff ffa3 	bl	80054c4 <nRF24_IsSomtehingToSend>
 800557e:	1e03      	subs	r3, r0, #0
 8005580:	d042      	beq.n	8005608 <nRF24_CheckTXAndSend+0x94>
	{
		nRF24_TX_Mode();
 8005582:	f7ff fba3 	bl	8004ccc <nRF24_TX_Mode>

		Nrf24TXFreeFlag = 0;
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <nRF24_CheckTXAndSend+0x9c>)
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(TXBuffer);
 800558c:	4b21      	ldr	r3, [pc, #132]	; (8005614 <nRF24_CheckTXAndSend+0xa0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2526      	movs	r5, #38	; 0x26
 8005592:	197c      	adds	r4, r7, r5
 8005594:	0018      	movs	r0, r3
 8005596:	f7fe fda1 	bl	80040dc <RB_ElementsAvailable>
 800559a:	0003      	movs	r3, r0
 800559c:	7023      	strb	r3, [r4, #0]
		if(DataCounter > 32)
 800559e:	197b      	adds	r3, r7, r5
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d902      	bls.n	80055ac <nRF24_CheckTXAndSend+0x38>
		{
			DataCounter = 32; // Max Payload
 80055a6:	197b      	adds	r3, r7, r5
 80055a8:	2220      	movs	r2, #32
 80055aa:	701a      	strb	r2, [r3, #0]
		}

		for(i = 0; i < DataCounter; i++)
 80055ac:	2327      	movs	r3, #39	; 0x27
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e00e      	b.n	80055d4 <nRF24_CheckTXAndSend+0x60>
		{
			RB_ReadFromBuffer(TXBuffer, &TXPacket[i]);
 80055b6:	4b17      	ldr	r3, [pc, #92]	; (8005614 <nRF24_CheckTXAndSend+0xa0>)
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	2427      	movs	r4, #39	; 0x27
 80055bc:	193b      	adds	r3, r7, r4
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	1d3a      	adds	r2, r7, #4
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	0019      	movs	r1, r3
 80055c6:	f7fe fd57 	bl	8004078 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 80055ca:	193b      	adds	r3, r7, r4
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	193b      	adds	r3, r7, r4
 80055d0:	3201      	adds	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	2327      	movs	r3, #39	; 0x27
 80055d6:	18fa      	adds	r2, r7, r3
 80055d8:	2126      	movs	r1, #38	; 0x26
 80055da:	187b      	adds	r3, r7, r1
 80055dc:	7812      	ldrb	r2, [r2, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d3e8      	bcc.n	80055b6 <nRF24_CheckTXAndSend+0x42>
		}

		nRF24_SendPacket(TXPacket, DataCounter);
 80055e4:	187b      	adds	r3, r7, r1
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	0011      	movs	r1, r2
 80055ec:	0018      	movs	r0, r3
 80055ee:	f7ff ff40 	bl	8005472 <nRF24_SendPacket>
		NRF24_CE_HIGH;
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <nRF24_CheckTXAndSend+0xa4>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	2104      	movs	r1, #4
 80055f8:	0018      	movs	r0, r3
 80055fa:	f001 fa95 	bl	8006b28 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(2);
 80055fe:	2002      	movs	r0, #2
 8005600:	f7ff fa3a 	bl	8004a78 <nRF24_Delay_ms>
		nRF24_RX_Mode();
 8005604:	f7ff fb2c 	bl	8004c60 <nRF24_RX_Mode>
//		NRF24_CE_LOW;
	}
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b00a      	add	sp, #40	; 0x28
 800560e:	bdb0      	pop	{r4, r5, r7, pc}
 8005610:	200007e3 	.word	0x200007e3
 8005614:	200007e8 	.word	0x200007e8
 8005618:	50000400 	.word	0x50000400

0800561c <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b08b      	sub	sp, #44	; 0x2c
 8005620:	af00      	add	r7, sp, #0
#if (NRF24_USE_RINGBUFFER == 1)
	uint8_t i, DataCounter;
	uint8_t RXPacket[32];
	do
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 8005622:	2326      	movs	r3, #38	; 0x26
 8005624:	18fa      	adds	r2, r7, r3
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	0011      	movs	r1, r2
 800562a:	0018      	movs	r0, r3
 800562c:	f7ff ff62 	bl	80054f4 <nRF24_ReceivePacket>

		for(i = 0; i < DataCounter; i++)
 8005630:	2327      	movs	r3, #39	; 0x27
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e00e      	b.n	8005658 <nRF24_ReceiveData+0x3c>
		{
			RB_WriteToBuffer(RXBuffer, RXPacket[i]);
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <nRF24_ReceiveData+0x60>)
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	2427      	movs	r4, #39	; 0x27
 8005640:	193b      	adds	r3, r7, r4
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	1d3a      	adds	r2, r7, #4
 8005646:	5cd3      	ldrb	r3, [r2, r3]
 8005648:	0019      	movs	r1, r3
 800564a:	f7fe fcd3 	bl	8003ff4 <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 800564e:	193b      	adds	r3, r7, r4
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	193b      	adds	r3, r7, r4
 8005654:	3201      	adds	r2, #1
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	2326      	movs	r3, #38	; 0x26
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2227      	movs	r2, #39	; 0x27
 8005660:	18ba      	adds	r2, r7, r2
 8005662:	7812      	ldrb	r2, [r2, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d3e8      	bcc.n	800563a <nRF24_ReceiveData+0x1e>
		}

	}while(!nRF24_IsRxEmpty());
 8005668:	f7ff fc15 	bl	8004e96 <nRF24_IsRxEmpty>
 800566c:	1e03      	subs	r3, r0, #0
 800566e:	d0d8      	beq.n	8005622 <nRF24_ReceiveData+0x6>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	b00b      	add	sp, #44	; 0x2c
 8005678:	bd90      	pop	{r4, r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	200007e4 	.word	0x200007e4

08005680 <nRF24_ReadData>:
#endif

nRF24_RX_Status nRF24_ReadData(uint8_t *Data, uint8_t *Size)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	}
	*Size = 0;
	return NRF24_NO_RECEIVED_PACKET;
#endif
#if (NRF24_USE_INTERRUPT == 1)
	uint8_t i = 0;
 800568a:	230f      	movs	r3, #15
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
	*Size = 0;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2200      	movs	r2, #0
 8005696:	701a      	strb	r2, [r3, #0]

	  if(nRF24_RXAvailable())
 8005698:	f7ff ff24 	bl	80054e4 <nRF24_RXAvailable>
 800569c:	1e03      	subs	r3, r0, #0
 800569e:	d016      	beq.n	80056ce <nRF24_ReadData+0x4e>
	  {
#if (NRF24_USE_RINGBUFFER == 1)
		while(RB_OK == RB_ReadFromBuffer(RXBuffer, &Data[i]))
 80056a0:	e005      	b.n	80056ae <nRF24_ReadData+0x2e>
		{
			i++;
 80056a2:	210f      	movs	r1, #15
 80056a4:	187b      	adds	r3, r7, r1
 80056a6:	781a      	ldrb	r2, [r3, #0]
 80056a8:	187b      	adds	r3, r7, r1
 80056aa:	3201      	adds	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
		while(RB_OK == RB_ReadFromBuffer(RXBuffer, &Data[i]))
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <nRF24_ReadData+0x64>)
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	240f      	movs	r4, #15
 80056b4:	193b      	adds	r3, r7, r4
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	18d3      	adds	r3, r2, r3
 80056bc:	0019      	movs	r1, r3
 80056be:	f7fe fcdb 	bl	8004078 <RB_ReadFromBuffer>
 80056c2:	1e03      	subs	r3, r0, #0
 80056c4:	d0ed      	beq.n	80056a2 <nRF24_ReadData+0x22>
		}
		*Size = i;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	193a      	adds	r2, r7, r4
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	701a      	strb	r2, [r3, #0]
	  }
#if (NRF24_USE_RINGBUFFER == 0)
	*Size = RXDataCounter;
	RXDataCounter = 0;
#endif
	if(*Size == 0)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <nRF24_ReadData+0x5a>
	{
		return NRF24_NO_RECEIVED_PACKET;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <nRF24_ReadData+0x5c>
	}

	return NRF24_RECEIVED_PACKET;
 80056da:	2300      	movs	r3, #0
#endif
}
 80056dc:	0018      	movs	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	b005      	add	sp, #20
 80056e2:	bd90      	pop	{r4, r7, pc}
 80056e4:	200007e4 	.word	0x200007e4

080056e8 <nRF24_IRQ_Handler>:

#if (NRF24_USE_INTERRUPT == 1)
void nRF24_IRQ_Handler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	Nrf24InterruptFlag = 1;
 80056ec:	4b02      	ldr	r3, [pc, #8]	; (80056f8 <nRF24_IRQ_Handler+0x10>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	701a      	strb	r2, [r3, #0]
}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	200007e2 	.word	0x200007e2

080056fc <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <nRF24_IRQ_Read+0x98>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	d13f      	bne.n	800578c <nRF24_IRQ_Read+0x90>
	{
		Nrf24InterruptFlag = 0;
 800570c:	4b21      	ldr	r3, [pc, #132]	; (8005794 <nRF24_IRQ_Read+0x98>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8005712:	1dbc      	adds	r4, r7, #6
 8005714:	f7ff fb81 	bl	8004e1a <nRF24_ReadStatus>
 8005718:	0003      	movs	r3, r0
 800571a:	7023      	strb	r3, [r4, #0]
		uint8_t ClearIrq = 0;
 800571c:	1dfb      	adds	r3, r7, #7
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8005722:	1dbb      	adds	r3, r7, #6
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	4013      	ands	r3, r2
 800572a:	d008      	beq.n	800573e <nRF24_IRQ_Read+0x42>
		{
			nrf24_rx_flag = 1;
 800572c:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <nRF24_IRQ_Read+0x9c>)
 800572e:	2201      	movs	r2, #1
 8005730:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8005732:	1dfb      	adds	r3, r7, #7
 8005734:	1dfa      	adds	r2, r7, #7
 8005736:	7812      	ldrb	r2, [r2, #0]
 8005738:	2140      	movs	r1, #64	; 0x40
 800573a:	430a      	orrs	r2, r1
 800573c:	701a      	strb	r2, [r3, #0]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 800573e:	1dbb      	adds	r3, r7, #6
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2220      	movs	r2, #32
 8005744:	4013      	ands	r3, r2
 8005746:	d00e      	beq.n	8005766 <nRF24_IRQ_Read+0x6a>
		{//
			NRF24_CE_LOW;
 8005748:	4b14      	ldr	r3, [pc, #80]	; (800579c <nRF24_IRQ_Read+0xa0>)
 800574a:	2200      	movs	r2, #0
 800574c:	2104      	movs	r1, #4
 800574e:	0018      	movs	r0, r3
 8005750:	f001 f9ea 	bl	8006b28 <HAL_GPIO_WritePin>
			nrf24_tx_flag = 1;
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <nRF24_IRQ_Read+0xa4>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 800575a:	1dfb      	adds	r3, r7, #7
 800575c:	1dfa      	adds	r2, r7, #7
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	2120      	movs	r1, #32
 8005762:	430a      	orrs	r2, r1
 8005764:	701a      	strb	r2, [r3, #0]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8005766:	1dbb      	adds	r3, r7, #6
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	4013      	ands	r3, r2
 800576e:	d008      	beq.n	8005782 <nRF24_IRQ_Read+0x86>
		{
			nrf24_mr_flag = 1;
 8005770:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <nRF24_IRQ_Read+0xa8>)
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8005776:	1dfb      	adds	r3, r7, #7
 8005778:	1dfa      	adds	r2, r7, #7
 800577a:	7812      	ldrb	r2, [r2, #0]
 800577c:	2110      	movs	r1, #16
 800577e:	430a      	orrs	r2, r1
 8005780:	701a      	strb	r2, [r3, #0]
		}

		nRF24_WriteStatus(ClearIrq);
 8005782:	1dfb      	adds	r3, r7, #7
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	0018      	movs	r0, r3
 8005788:	f7ff fb50 	bl	8004e2c <nRF24_WriteStatus>
	}
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b003      	add	sp, #12
 8005792:	bd90      	pop	{r4, r7, pc}
 8005794:	200007e2 	.word	0x200007e2
 8005798:	200007df 	.word	0x200007df
 800579c:	50000400 	.word	0x50000400
 80057a0:	200007e0 	.word	0x200007e0
 80057a4:	200007e1 	.word	0x200007e1

080057a8 <nRF24_EventTxCallback>:
{

}

__weak void nRF24_EventTxCallback(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0

}
 80057ac:	46c0      	nop			; (mov r8, r8)
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	af00      	add	r7, sp, #0

}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <nRF24_Event>:

void nRF24_Event(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 80057c0:	f7ff ff9c 	bl	80056fc <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 80057c4:	f7ff fed6 	bl	8005574 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 80057c8:	4b14      	ldr	r3, [pc, #80]	; (800581c <nRF24_Event+0x60>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d006      	beq.n	80057de <nRF24_Event+0x22>
	{
#if (NRF24_USE_INTERRUPT == 1)
		nRF24_ReceiveData();
 80057d0:	f7ff ff24 	bl	800561c <nRF24_ReceiveData>
#endif
		nRF24_EventRxCallback();
 80057d4:	f7fe f99e 	bl	8003b14 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 80057d8:	4b10      	ldr	r3, [pc, #64]	; (800581c <nRF24_Event+0x60>)
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <nRF24_Event+0x64>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <nRF24_Event+0x3e>
	{
#if (NRF24_USE_RINGBUFFER == 1)

		Nrf24TXFreeFlag = 1;
 80057e6:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <nRF24_Event+0x68>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
#endif
		nRF24_EventTxCallback();
 80057ec:	f7ff ffdc 	bl	80057a8 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <nRF24_Event+0x64>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]

//		nRF24_WaitTX();
		nRF24_RX_Mode();
 80057f6:	f7ff fa33 	bl	8004c60 <nRF24_RX_Mode>
//		NRF24_CE_LOW;
	}

	if(nrf24_mr_flag)
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <nRF24_Event+0x6c>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <nRF24_Event+0x58>
	{
//		nRF24_WaitTX();
		nRF24_RX_Mode();
 8005802:	f7ff fa2d 	bl	8004c60 <nRF24_RX_Mode>
//		NRF24_CE_LOW;
		nRF24_EventMrCallback();
 8005806:	f7ff ffd4 	bl	80057b2 <nRF24_EventMrCallback>
//		Nrf24TXFreeFlag = 1;
		nrf24_mr_flag = 0;
 800580a:	4b07      	ldr	r3, [pc, #28]	; (8005828 <nRF24_Event+0x6c>)
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
		nRF24_RX_Mode();
 8005810:	f7ff fa26 	bl	8004c60 <nRF24_RX_Mode>

	}
}
 8005814:	46c0      	nop			; (mov r8, r8)
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	200007df 	.word	0x200007df
 8005820:	200007e0 	.word	0x200007e0
 8005824:	200007e3 	.word	0x200007e3
 8005828:	200007e1 	.word	0x200007e1

0800582c <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8005834:	4b33      	ldr	r3, [pc, #204]	; (8005904 <nRF24_Init+0xd8>)
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	601a      	str	r2, [r3, #0]

	NRF24_CE_LOW;
 800583a:	4b33      	ldr	r3, [pc, #204]	; (8005908 <nRF24_Init+0xdc>)
 800583c:	2200      	movs	r2, #0
 800583e:	2104      	movs	r1, #4
 8005840:	0018      	movs	r0, r3
 8005842:	f001 f971 	bl	8006b28 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8005846:	4b31      	ldr	r3, [pc, #196]	; (800590c <nRF24_Init+0xe0>)
 8005848:	2201      	movs	r2, #1
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	0018      	movs	r0, r3
 800584e:	f001 f96b 	bl	8006b28 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8005852:	2005      	movs	r0, #5
 8005854:	f7ff f910 	bl	8004a78 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8005858:	2003      	movs	r0, #3
 800585a:	f7ff fa80 	bl	8004d5e <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800585e:	2002      	movs	r0, #2
 8005860:	f7ff faa6 	bl	8004db0 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8005864:	2001      	movs	r0, #1
 8005866:	f7ff fb5b 	bl	8004f20 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800586a:	2000      	movs	r0, #0
 800586c:	f7ff fb80 	bl	8004f70 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8005870:	2107      	movs	r1, #7
 8005872:	2004      	movs	r0, #4
 8005874:	f7ff fba4 	bl	8004fc0 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8005878:	201d      	movs	r0, #29
 800587a:	f7ff f93d 	bl	8004af8 <nRF24_ReadRegister>
 800587e:	0003      	movs	r3, r0
 8005880:	001a      	movs	r2, r3
 8005882:	2304      	movs	r3, #4
 8005884:	4313      	orrs	r3, r2
 8005886:	b2db      	uxtb	r3, r3
 8005888:	0019      	movs	r1, r3
 800588a:	201d      	movs	r0, #29
 800588c:	f7ff f98c 	bl	8004ba8 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8005890:	213f      	movs	r1, #63	; 0x3f
 8005892:	201c      	movs	r0, #28
 8005894:	f7ff f988 	bl	8004ba8 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8005898:	200a      	movs	r0, #10
 800589a:	f7ff fbaf 	bl	8004ffc <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800589e:	2101      	movs	r1, #1
 80058a0:	2000      	movs	r0, #0
 80058a2:	f7ff fbbe 	bl	8005022 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80058a6:	2101      	movs	r1, #1
 80058a8:	2000      	movs	r0, #0
 80058aa:	f7ff fbfe 	bl	80050aa <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80058ae:	2003      	movs	r0, #3
 80058b0:	f7ff fc3f 	bl	8005132 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 80058b4:	2001      	movs	r0, #1
 80058b6:	f7ff f8df 	bl	8004a78 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 80058ba:	2001      	movs	r0, #1
 80058bc:	f7ff fd2a 	bl	8005314 <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 80058c0:	2000      	movs	r0, #0
 80058c2:	f7ff fd4f 	bl	8005364 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80058c6:	2000      	movs	r0, #0
 80058c8:	f7ff fd74 	bl	80053b4 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80058cc:	2001      	movs	r0, #1
 80058ce:	f7ff f8d3 	bl	8004a78 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80058d2:	f7ff fceb 	bl	80052ac <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 80058d6:	2001      	movs	r0, #1
 80058d8:	f7ff fd1c 	bl	8005314 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 80058dc:	2001      	movs	r0, #1
 80058de:	f7ff fd41 	bl	8005364 <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <nRF24_Init+0xe4>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <nRF24_Init+0xe8>)
 80058ea:	21f0      	movs	r1, #240	; 0xf0
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7fe fb55 	bl	8003f9c <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <nRF24_Init+0xec>)
 80058f4:	21f0      	movs	r1, #240	; 0xf0
 80058f6:	0018      	movs	r0, r3
 80058f8:	f7fe fb50 	bl	8003f9c <RB_CreateBuffer>
#endif
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b002      	add	sp, #8
 8005902:	bd80      	pop	{r7, pc}
 8005904:	200007d8 	.word	0x200007d8
 8005908:	50000400 	.word	0x50000400
 800590c:	50000800 	.word	0x50000800
 8005910:	200007e3 	.word	0x200007e3
 8005914:	200007e8 	.word	0x200007e8
 8005918:	200007e4 	.word	0x200007e4

0800591c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800591c:	480d      	ldr	r0, [pc, #52]	; (8005954 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800591e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005920:	480d      	ldr	r0, [pc, #52]	; (8005958 <LoopForever+0x6>)
  ldr r1, =_edata
 8005922:	490e      	ldr	r1, [pc, #56]	; (800595c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005924:	4a0e      	ldr	r2, [pc, #56]	; (8005960 <LoopForever+0xe>)
  movs r3, #0
 8005926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005928:	e002      	b.n	8005930 <LoopCopyDataInit>

0800592a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800592a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800592c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800592e:	3304      	adds	r3, #4

08005930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005934:	d3f9      	bcc.n	800592a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005936:	4a0b      	ldr	r2, [pc, #44]	; (8005964 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005938:	4c0b      	ldr	r4, [pc, #44]	; (8005968 <LoopForever+0x16>)
  movs r3, #0
 800593a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800593c:	e001      	b.n	8005942 <LoopFillZerobss>

0800593e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800593e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005940:	3204      	adds	r2, #4

08005942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005944:	d3fb      	bcc.n	800593e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005946:	f7fe fdab 	bl	80044a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800594a:	f005 fb39 	bl	800afc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800594e:	f7fe f8fd 	bl	8003b4c <main>

08005952 <LoopForever>:

LoopForever:
    b LoopForever
 8005952:	e7fe      	b.n	8005952 <LoopForever>
   ldr   r0, =_estack
 8005954:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800595c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005960:	0800e64c 	.word	0x0800e64c
  ldr r2, =_sbss
 8005964:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8005968:	20000800 	.word	0x20000800

0800596c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800596c:	e7fe      	b.n	800596c <ADC1_COMP_IRQHandler>
	...

08005970 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005976:	1dfb      	adds	r3, r7, #7
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_Init+0x3c>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <HAL_Init+0x3c>)
 8005982:	2140      	movs	r1, #64	; 0x40
 8005984:	430a      	orrs	r2, r1
 8005986:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005988:	2000      	movs	r0, #0
 800598a:	f000 f811 	bl	80059b0 <HAL_InitTick>
 800598e:	1e03      	subs	r3, r0, #0
 8005990:	d003      	beq.n	800599a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005992:	1dfb      	adds	r3, r7, #7
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e001      	b.n	800599e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800599a:	f7fe fc49 	bl	8004230 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800599e:	1dfb      	adds	r3, r7, #7
 80059a0:	781b      	ldrb	r3, [r3, #0]
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b002      	add	sp, #8
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	40022000 	.word	0x40022000

080059b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <HAL_InitTick+0x5c>)
 80059ba:	681c      	ldr	r4, [r3, #0]
 80059bc:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <HAL_InitTick+0x60>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	0019      	movs	r1, r3
 80059c2:	23fa      	movs	r3, #250	; 0xfa
 80059c4:	0098      	lsls	r0, r3, #2
 80059c6:	f7fa fbbb 	bl	8000140 <__udivsi3>
 80059ca:	0003      	movs	r3, r0
 80059cc:	0019      	movs	r1, r3
 80059ce:	0020      	movs	r0, r4
 80059d0:	f7fa fbb6 	bl	8000140 <__udivsi3>
 80059d4:	0003      	movs	r3, r0
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 fd87 	bl	80064ea <HAL_SYSTICK_Config>
 80059dc:	1e03      	subs	r3, r0, #0
 80059de:	d001      	beq.n	80059e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e00f      	b.n	8005a04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d80b      	bhi.n	8005a02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	2301      	movs	r3, #1
 80059ee:	425b      	negs	r3, r3
 80059f0:	2200      	movs	r2, #0
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 fd54 	bl	80064a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <HAL_InitTick+0x64>)
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e000      	b.n	8005a04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b003      	add	sp, #12
 8005a0a:	bd90      	pop	{r4, r7, pc}
 8005a0c:	20000000 	.word	0x20000000
 8005a10:	20000008 	.word	0x20000008
 8005a14:	20000004 	.word	0x20000004

08005a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <HAL_IncTick+0x1c>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	001a      	movs	r2, r3
 8005a22:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <HAL_IncTick+0x20>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	18d2      	adds	r2, r2, r3
 8005a28:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <HAL_IncTick+0x20>)
 8005a2a:	601a      	str	r2, [r3, #0]
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	20000008 	.word	0x20000008
 8005a38:	200007ec 	.word	0x200007ec

08005a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a40:	4b02      	ldr	r3, [pc, #8]	; (8005a4c <HAL_GetTick+0x10>)
 8005a42:	681b      	ldr	r3, [r3, #0]
}
 8005a44:	0018      	movs	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	200007ec 	.word	0x200007ec

08005a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a58:	f7ff fff0 	bl	8005a3c <HAL_GetTick>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3301      	adds	r3, #1
 8005a68:	d005      	beq.n	8005a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <HAL_Delay+0x44>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	001a      	movs	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	f7ff ffe0 	bl	8005a3c <HAL_GetTick>
 8005a7c:	0002      	movs	r2, r0
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d8f7      	bhi.n	8005a78 <HAL_Delay+0x28>
  {
  }
}
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b004      	add	sp, #16
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	20000008 	.word	0x20000008

08005a98 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e159      	b.n	8005d5e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2250      	movs	r2, #80	; 0x50
 8005abc:	2100      	movs	r1, #0
 8005abe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f7fd fc94 	bl	80033f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	2210      	movs	r2, #16
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d005      	beq.n	8005ae0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2204      	movs	r2, #4
 8005adc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005ade:	d00b      	beq.n	8005af8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2250      	movs	r2, #80	; 0x50
 8005af0:	2100      	movs	r1, #0
 8005af2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e132      	b.n	8005d5e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	4a9a      	ldr	r2, [pc, #616]	; (8005d68 <HAL_ADC_Init+0x2d0>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	2202      	movs	r2, #2
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2203      	movs	r2, #3
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d108      	bne.n	8005b28 <HAL_ADC_Init+0x90>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_ADC_Init+0x90>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <HAL_ADC_Init+0x92>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d149      	bne.n	8005bc2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	23c0      	movs	r3, #192	; 0xc0
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d00b      	beq.n	8005b52 <HAL_ADC_Init+0xba>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	05db      	lsls	r3, r3, #23
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d005      	beq.n	8005b52 <HAL_ADC_Init+0xba>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	061b      	lsls	r3, r3, #24
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d111      	bne.n	8005b76 <HAL_ADC_Init+0xde>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	0092      	lsls	r2, r2, #2
 8005b5e:	0892      	lsrs	r2, r2, #2
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6919      	ldr	r1, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	611a      	str	r2, [r3, #16]
 8005b74:	e014      	b.n	8005ba0 <HAL_ADC_Init+0x108>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	0092      	lsls	r2, r2, #2
 8005b82:	0892      	lsrs	r2, r2, #2
 8005b84:	611a      	str	r2, [r3, #16]
 8005b86:	4b79      	ldr	r3, [pc, #484]	; (8005d6c <HAL_ADC_Init+0x2d4>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b78      	ldr	r3, [pc, #480]	; (8005d6c <HAL_ADC_Init+0x2d4>)
 8005b8c:	4978      	ldr	r1, [pc, #480]	; (8005d70 <HAL_ADC_Init+0x2d8>)
 8005b8e:	400a      	ands	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	4b76      	ldr	r3, [pc, #472]	; (8005d6c <HAL_ADC_Init+0x2d4>)
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	4b74      	ldr	r3, [pc, #464]	; (8005d6c <HAL_ADC_Init+0x2d4>)
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2118      	movs	r1, #24
 8005bac:	438a      	bics	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68d9      	ldr	r1, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005bc2:	4b6a      	ldr	r3, [pc, #424]	; (8005d6c <HAL_ADC_Init+0x2d4>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b69      	ldr	r3, [pc, #420]	; (8005d6c <HAL_ADC_Init+0x2d4>)
 8005bc8:	496a      	ldr	r1, [pc, #424]	; (8005d74 <HAL_ADC_Init+0x2dc>)
 8005bca:	400a      	ands	r2, r1
 8005bcc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8005bce:	4b67      	ldr	r3, [pc, #412]	; (8005d6c <HAL_ADC_Init+0x2d4>)
 8005bd0:	6819      	ldr	r1, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	065a      	lsls	r2, r3, #25
 8005bd8:	4b64      	ldr	r3, [pc, #400]	; (8005d6c <HAL_ADC_Init+0x2d4>)
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	055b      	lsls	r3, r3, #21
 8005be8:	4013      	ands	r3, r2
 8005bea:	d108      	bne.n	8005bfe <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2180      	movs	r1, #128	; 0x80
 8005bf8:	0549      	lsls	r1, r1, #21
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	495b      	ldr	r1, [pc, #364]	; (8005d78 <HAL_ADC_Init+0x2e0>)
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68d9      	ldr	r1, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d101      	bne.n	8005c24 <HAL_ADC_Init+0x18c>
 8005c20:	2304      	movs	r3, #4
 8005c22:	e000      	b.n	8005c26 <HAL_ADC_Init+0x18e>
 8005c24:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005c26:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2020      	movs	r0, #32
 8005c2c:	5c1b      	ldrb	r3, [r3, r0]
 8005c2e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005c30:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	202c      	movs	r0, #44	; 0x2c
 8005c36:	5c1b      	ldrb	r3, [r3, r0]
 8005c38:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005c3a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005c40:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005c48:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005c50:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c5e:	23c2      	movs	r3, #194	; 0xc2
 8005c60:	33ff      	adds	r3, #255	; 0xff
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d00b      	beq.n	8005c7e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68d9      	ldr	r1, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2221      	movs	r2, #33	; 0x21
 8005c82:	5c9b      	ldrb	r3, [r3, r2]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d11a      	bne.n	8005cbe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	5c9b      	ldrb	r3, [r3, r2]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2180      	movs	r1, #128	; 0x80
 8005c9e:	0249      	lsls	r1, r1, #9
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	60da      	str	r2, [r3, #12]
 8005ca4:	e00b      	b.n	8005cbe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005caa:	2220      	movs	r2, #32
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d11f      	bne.n	8005d06 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	492a      	ldr	r1, [pc, #168]	; (8005d7c <HAL_ADC_Init+0x2e4>)
 8005cd2:	400a      	ands	r2, r1
 8005cd4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6919      	ldr	r1, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005ce4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8005cea:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2101      	movs	r1, #1
 8005d00:	430a      	orrs	r2, r1
 8005d02:	611a      	str	r2, [r3, #16]
 8005d04:	e00e      	b.n	8005d24 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d107      	bne.n	8005d24 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2101      	movs	r1, #1
 8005d20:	438a      	bics	r2, r1
 8005d22:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2107      	movs	r1, #7
 8005d30:	438a      	bics	r2, r1
 8005d32:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6959      	ldr	r1, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d50:	2203      	movs	r2, #3
 8005d52:	4393      	bics	r3, r2
 8005d54:	2201      	movs	r2, #1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	0018      	movs	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b002      	add	sp, #8
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	fffffefd 	.word	0xfffffefd
 8005d6c:	40012708 	.word	0x40012708
 8005d70:	ffc3ffff 	.word	0xffc3ffff
 8005d74:	fdffffff 	.word	0xfdffffff
 8005d78:	fffe0219 	.word	0xfffe0219
 8005d7c:	fffffc03 	.word	0xfffffc03

08005d80 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d8c:	2317      	movs	r3, #23
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d15e      	bne.n	8005e5e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2250      	movs	r2, #80	; 0x50
 8005da4:	5c9b      	ldrb	r3, [r3, r2]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_ADC_Start_DMA+0x2e>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e05e      	b.n	8005e6c <HAL_ADC_Start_DMA+0xec>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2250      	movs	r2, #80	; 0x50
 8005db2:	2101      	movs	r1, #1
 8005db4:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d007      	beq.n	8005dde <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005dce:	2317      	movs	r3, #23
 8005dd0:	18fc      	adds	r4, r7, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f000 f90d 	bl	8005ff4 <ADC_Enable>
 8005dda:	0003      	movs	r3, r0
 8005ddc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005dde:	2317      	movs	r3, #23
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d13e      	bne.n	8005e66 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dec:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <HAL_ADC_Start_DMA+0xf4>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	2280      	movs	r2, #128	; 0x80
 8005df2:	0052      	lsls	r2, r2, #1
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2250      	movs	r2, #80	; 0x50
 8005e04:	2100      	movs	r1, #0
 8005e06:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0c:	4a1a      	ldr	r2, [pc, #104]	; (8005e78 <HAL_ADC_Start_DMA+0xf8>)
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <HAL_ADC_Start_DMA+0xfc>)
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1c:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <HAL_ADC_Start_DMA+0x100>)
 8005e1e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	221c      	movs	r2, #28
 8005e26:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2110      	movs	r1, #16
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3340      	adds	r3, #64	; 0x40
 8005e42:	0019      	movs	r1, r3
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f000 fbd4 	bl	80065f4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2104      	movs	r1, #4
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	e003      	b.n	8005e66 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005e5e:	2317      	movs	r3, #23
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	2202      	movs	r2, #2
 8005e64:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005e66:	2317      	movs	r3, #23
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	781b      	ldrb	r3, [r3, #0]
}
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b007      	add	sp, #28
 8005e72:	bd90      	pop	{r4, r7, pc}
 8005e74:	fffff0fe 	.word	0xfffff0fe
 8005e78:	080060c5 	.word	0x080060c5
 8005e7c:	08006179 	.word	0x08006179
 8005e80:	08006197 	.word	0x08006197

08005e84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005e8c:	46c0      	nop			; (mov r8, r8)
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b002      	add	sp, #8
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005eac:	46c0      	nop			; (mov r8, r8)
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2250      	movs	r2, #80	; 0x50
 8005ec2:	5c9b      	ldrb	r3, [r3, r2]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_ADC_ConfigChannel+0x18>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e085      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x124>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2250      	movs	r2, #80	; 0x50
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2204      	movs	r2, #4
 8005edc:	4013      	ands	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2250      	movs	r2, #80	; 0x50
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e06f      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4a38      	ldr	r2, [pc, #224]	; (8005fe0 <HAL_ADC_ConfigChannel+0x12c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d035      	beq.n	8005f6e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	035b      	lsls	r3, r3, #13
 8005f0e:	0b5a      	lsrs	r2, r3, #13
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	02db      	lsls	r3, r3, #11
 8005f20:	4013      	ands	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8005f24:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	0409      	lsls	r1, r1, #16
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005f32:	200a      	movs	r0, #10
 8005f34:	f000 f94a 	bl	80061cc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	029b      	lsls	r3, r3, #10
 8005f40:	4013      	ands	r3, r2
 8005f42:	d006      	beq.n	8005f52 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005f44:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005f4a:	2180      	movs	r1, #128	; 0x80
 8005f4c:	03c9      	lsls	r1, r1, #15
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	025b      	lsls	r3, r3, #9
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d037      	beq.n	8005fce <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8005f5e:	4b21      	ldr	r3, [pc, #132]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005f64:	2180      	movs	r1, #128	; 0x80
 8005f66:	0449      	lsls	r1, r1, #17
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	e02f      	b.n	8005fce <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	035b      	lsls	r3, r3, #13
 8005f7a:	0b5b      	lsrs	r3, r3, #13
 8005f7c:	43d9      	mvns	r1, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	400a      	ands	r2, r1
 8005f84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	02db      	lsls	r3, r3, #11
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d005      	beq.n	8005f9e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005f98:	4913      	ldr	r1, [pc, #76]	; (8005fe8 <HAL_ADC_ConfigChannel+0x134>)
 8005f9a:	400a      	ands	r2, r1
 8005f9c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	029b      	lsls	r3, r3, #10
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d005      	beq.n	8005fb6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005fb0:	490e      	ldr	r1, [pc, #56]	; (8005fec <HAL_ADC_ConfigChannel+0x138>)
 8005fb2:	400a      	ands	r2, r1
 8005fb4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	2380      	movs	r3, #128	; 0x80
 8005fbc:	025b      	lsls	r3, r3, #9
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d005      	beq.n	8005fce <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <HAL_ADC_ConfigChannel+0x130>)
 8005fc8:	4909      	ldr	r1, [pc, #36]	; (8005ff0 <HAL_ADC_ConfigChannel+0x13c>)
 8005fca:	400a      	ands	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2250      	movs	r2, #80	; 0x50
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	00001001 	.word	0x00001001
 8005fe4:	40012708 	.word	0x40012708
 8005fe8:	ff7fffff 	.word	0xff7fffff
 8005fec:	ffbfffff 	.word	0xffbfffff
 8005ff0:	feffffff 	.word	0xfeffffff

08005ff4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2203      	movs	r2, #3
 8006008:	4013      	ands	r3, r2
 800600a:	2b01      	cmp	r3, #1
 800600c:	d108      	bne.n	8006020 <ADC_Enable+0x2c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2201      	movs	r2, #1
 8006016:	4013      	ands	r3, r2
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <ADC_Enable+0x2c>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <ADC_Enable+0x2e>
 8006020:	2300      	movs	r3, #0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d146      	bne.n	80060b4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <ADC_Enable+0xcc>)
 800602e:	4013      	ands	r3, r2
 8006030:	d00d      	beq.n	800604e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006036:	2210      	movs	r2, #16
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006042:	2201      	movs	r2, #1
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e033      	b.n	80060b6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2101      	movs	r1, #1
 800605a:	430a      	orrs	r2, r1
 800605c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800605e:	2001      	movs	r0, #1
 8006060:	f000 f8b4 	bl	80061cc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006064:	f7ff fcea 	bl	8005a3c <HAL_GetTick>
 8006068:	0003      	movs	r3, r0
 800606a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800606c:	e01b      	b.n	80060a6 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800606e:	f7ff fce5 	bl	8005a3c <HAL_GetTick>
 8006072:	0002      	movs	r2, r0
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b0a      	cmp	r3, #10
 800607a:	d914      	bls.n	80060a6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2201      	movs	r2, #1
 8006084:	4013      	ands	r3, r2
 8006086:	2b01      	cmp	r3, #1
 8006088:	d00d      	beq.n	80060a6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	2210      	movs	r2, #16
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	2201      	movs	r2, #1
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e007      	b.n	80060b6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d1dc      	bne.n	800606e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b004      	add	sp, #16
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	80000017 	.word	0x80000017

080060c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	2250      	movs	r2, #80	; 0x50
 80060d8:	4013      	ands	r3, r2
 80060da:	d141      	bne.n	8006160 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	0092      	lsls	r2, r2, #2
 80060e4:	431a      	orrs	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	23c0      	movs	r3, #192	; 0xc0
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	4013      	ands	r3, r2
 80060f6:	d12e      	bne.n	8006156 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d129      	bne.n	8006156 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2208      	movs	r2, #8
 800610a:	4013      	ands	r3, r2
 800610c:	2b08      	cmp	r3, #8
 800610e:	d122      	bne.n	8006156 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2204      	movs	r2, #4
 8006118:	4013      	ands	r3, r2
 800611a:	d110      	bne.n	800613e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	210c      	movs	r1, #12
 8006128:	438a      	bics	r2, r1
 800612a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	4a10      	ldr	r2, [pc, #64]	; (8006174 <ADC_DMAConvCplt+0xb0>)
 8006132:	4013      	ands	r3, r2
 8006134:	2201      	movs	r2, #1
 8006136:	431a      	orrs	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
 800613c:	e00b      	b.n	8006156 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	2220      	movs	r2, #32
 8006144:	431a      	orrs	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614e:	2201      	movs	r2, #1
 8006150:	431a      	orrs	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	0018      	movs	r0, r3
 800615a:	f7ff fe93 	bl	8005e84 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800615e:	e005      	b.n	800616c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	0010      	movs	r0, r2
 800616a:	4798      	blx	r3
}
 800616c:	46c0      	nop			; (mov r8, r8)
 800616e:	46bd      	mov	sp, r7
 8006170:	b004      	add	sp, #16
 8006172:	bd80      	pop	{r7, pc}
 8006174:	fffffefe 	.word	0xfffffefe

08006178 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	0018      	movs	r0, r3
 800618a:	f7ff fe83 	bl	8005e94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	46bd      	mov	sp, r7
 8006192:	b004      	add	sp, #16
 8006194:	bd80      	pop	{r7, pc}

08006196 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	2240      	movs	r2, #64	; 0x40
 80061aa:	431a      	orrs	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b4:	2204      	movs	r2, #4
 80061b6:	431a      	orrs	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	0018      	movs	r0, r3
 80061c0:	f7ff fe70 	bl	8005ea4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061c4:	46c0      	nop			; (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b004      	add	sp, #16
 80061ca:	bd80      	pop	{r7, pc}

080061cc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <ADC_DelayMicroSecond+0x38>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	490b      	ldr	r1, [pc, #44]	; (8006208 <ADC_DelayMicroSecond+0x3c>)
 80061da:	0018      	movs	r0, r3
 80061dc:	f7f9 ffb0 	bl	8000140 <__udivsi3>
 80061e0:	0003      	movs	r3, r0
 80061e2:	001a      	movs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4353      	muls	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80061ea:	e002      	b.n	80061f2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f9      	bne.n	80061ec <ADC_DelayMicroSecond+0x20>
  } 
}
 80061f8:	46c0      	nop			; (mov r8, r8)
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b004      	add	sp, #16
 8006200:	bd80      	pop	{r7, pc}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	20000000 	.word	0x20000000
 8006208:	000f4240 	.word	0x000f4240

0800620c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006216:	2317      	movs	r3, #23
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2250      	movs	r2, #80	; 0x50
 800622a:	5c9b      	ldrb	r3, [r3, r2]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_ADCEx_Calibration_Start+0x28>
 8006230:	2302      	movs	r3, #2
 8006232:	e083      	b.n	800633c <HAL_ADCEx_Calibration_Start+0x130>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2250      	movs	r2, #80	; 0x50
 8006238:	2101      	movs	r1, #1
 800623a:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2203      	movs	r2, #3
 8006244:	4013      	ands	r3, r2
 8006246:	2b01      	cmp	r3, #1
 8006248:	d108      	bne.n	800625c <HAL_ADCEx_Calibration_Start+0x50>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2201      	movs	r2, #1
 8006252:	4013      	ands	r3, r2
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_ADCEx_Calibration_Start+0x50>
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <HAL_ADCEx_Calibration_Start+0x52>
 800625c:	2300      	movs	r3, #0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d15b      	bne.n	800631a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006266:	4a37      	ldr	r2, [pc, #220]	; (8006344 <HAL_ADCEx_Calibration_Start+0x138>)
 8006268:	4013      	ands	r3, r2
 800626a:	2202      	movs	r2, #2
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2203      	movs	r2, #3
 800627a:	4013      	ands	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2103      	movs	r1, #3
 800628a:	438a      	bics	r2, r1
 800628c:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	0609      	lsls	r1, r1, #24
 800629c:	430a      	orrs	r2, r1
 800629e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80062a0:	f7ff fbcc 	bl	8005a3c <HAL_GetTick>
 80062a4:	0003      	movs	r3, r0
 80062a6:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80062a8:	e01d      	b.n	80062e6 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80062aa:	f7ff fbc7 	bl	8005a3c <HAL_GetTick>
 80062ae:	0002      	movs	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b0a      	cmp	r3, #10
 80062b6:	d916      	bls.n	80062e6 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	0fdb      	lsrs	r3, r3, #31
 80062c0:	07da      	lsls	r2, r3, #31
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	061b      	lsls	r3, r3, #24
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d10d      	bne.n	80062e6 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	2212      	movs	r2, #18
 80062d0:	4393      	bics	r3, r2
 80062d2:	2210      	movs	r2, #16
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2250      	movs	r2, #80	; 0x50
 80062de:	2100      	movs	r1, #0
 80062e0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e02a      	b.n	800633c <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	0fdb      	lsrs	r3, r3, #31
 80062ee:	07da      	lsls	r2, r3, #31
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	061b      	lsls	r3, r3, #24
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d0d8      	beq.n	80062aa <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	430a      	orrs	r2, r1
 8006306:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630c:	2203      	movs	r2, #3
 800630e:	4393      	bics	r3, r2
 8006310:	2201      	movs	r2, #1
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	655a      	str	r2, [r3, #84]	; 0x54
 8006318:	e009      	b.n	800632e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	2220      	movs	r2, #32
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006326:	2317      	movs	r3, #23
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2250      	movs	r2, #80	; 0x50
 8006332:	2100      	movs	r1, #0
 8006334:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006336:	2317      	movs	r3, #23
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	781b      	ldrb	r3, [r3, #0]
}
 800633c:	0018      	movs	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	b006      	add	sp, #24
 8006342:	bd80      	pop	{r7, pc}
 8006344:	fffffefd 	.word	0xfffffefd

08006348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	0002      	movs	r2, r0
 8006350:	1dfb      	adds	r3, r7, #7
 8006352:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006354:	1dfb      	adds	r3, r7, #7
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b7f      	cmp	r3, #127	; 0x7f
 800635a:	d809      	bhi.n	8006370 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800635c:	1dfb      	adds	r3, r7, #7
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	001a      	movs	r2, r3
 8006362:	231f      	movs	r3, #31
 8006364:	401a      	ands	r2, r3
 8006366:	4b04      	ldr	r3, [pc, #16]	; (8006378 <__NVIC_EnableIRQ+0x30>)
 8006368:	2101      	movs	r1, #1
 800636a:	4091      	lsls	r1, r2
 800636c:	000a      	movs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]
  }
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b002      	add	sp, #8
 8006376:	bd80      	pop	{r7, pc}
 8006378:	e000e100 	.word	0xe000e100

0800637c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800637c:	b590      	push	{r4, r7, lr}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	0002      	movs	r2, r0
 8006384:	6039      	str	r1, [r7, #0]
 8006386:	1dfb      	adds	r3, r7, #7
 8006388:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800638a:	1dfb      	adds	r3, r7, #7
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b7f      	cmp	r3, #127	; 0x7f
 8006390:	d828      	bhi.n	80063e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006392:	4a2f      	ldr	r2, [pc, #188]	; (8006450 <__NVIC_SetPriority+0xd4>)
 8006394:	1dfb      	adds	r3, r7, #7
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	b25b      	sxtb	r3, r3
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	33c0      	adds	r3, #192	; 0xc0
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	589b      	ldr	r3, [r3, r2]
 80063a2:	1dfa      	adds	r2, r7, #7
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	0011      	movs	r1, r2
 80063a8:	2203      	movs	r2, #3
 80063aa:	400a      	ands	r2, r1
 80063ac:	00d2      	lsls	r2, r2, #3
 80063ae:	21ff      	movs	r1, #255	; 0xff
 80063b0:	4091      	lsls	r1, r2
 80063b2:	000a      	movs	r2, r1
 80063b4:	43d2      	mvns	r2, r2
 80063b6:	401a      	ands	r2, r3
 80063b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	019b      	lsls	r3, r3, #6
 80063be:	22ff      	movs	r2, #255	; 0xff
 80063c0:	401a      	ands	r2, r3
 80063c2:	1dfb      	adds	r3, r7, #7
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	0018      	movs	r0, r3
 80063c8:	2303      	movs	r3, #3
 80063ca:	4003      	ands	r3, r0
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80063d0:	481f      	ldr	r0, [pc, #124]	; (8006450 <__NVIC_SetPriority+0xd4>)
 80063d2:	1dfb      	adds	r3, r7, #7
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	b25b      	sxtb	r3, r3
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	430a      	orrs	r2, r1
 80063dc:	33c0      	adds	r3, #192	; 0xc0
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80063e2:	e031      	b.n	8006448 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80063e4:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <__NVIC_SetPriority+0xd8>)
 80063e6:	1dfb      	adds	r3, r7, #7
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	0019      	movs	r1, r3
 80063ec:	230f      	movs	r3, #15
 80063ee:	400b      	ands	r3, r1
 80063f0:	3b08      	subs	r3, #8
 80063f2:	089b      	lsrs	r3, r3, #2
 80063f4:	3306      	adds	r3, #6
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	18d3      	adds	r3, r2, r3
 80063fa:	3304      	adds	r3, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1dfa      	adds	r2, r7, #7
 8006400:	7812      	ldrb	r2, [r2, #0]
 8006402:	0011      	movs	r1, r2
 8006404:	2203      	movs	r2, #3
 8006406:	400a      	ands	r2, r1
 8006408:	00d2      	lsls	r2, r2, #3
 800640a:	21ff      	movs	r1, #255	; 0xff
 800640c:	4091      	lsls	r1, r2
 800640e:	000a      	movs	r2, r1
 8006410:	43d2      	mvns	r2, r2
 8006412:	401a      	ands	r2, r3
 8006414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	019b      	lsls	r3, r3, #6
 800641a:	22ff      	movs	r2, #255	; 0xff
 800641c:	401a      	ands	r2, r3
 800641e:	1dfb      	adds	r3, r7, #7
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	0018      	movs	r0, r3
 8006424:	2303      	movs	r3, #3
 8006426:	4003      	ands	r3, r0
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800642c:	4809      	ldr	r0, [pc, #36]	; (8006454 <__NVIC_SetPriority+0xd8>)
 800642e:	1dfb      	adds	r3, r7, #7
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	001c      	movs	r4, r3
 8006434:	230f      	movs	r3, #15
 8006436:	4023      	ands	r3, r4
 8006438:	3b08      	subs	r3, #8
 800643a:	089b      	lsrs	r3, r3, #2
 800643c:	430a      	orrs	r2, r1
 800643e:	3306      	adds	r3, #6
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	18c3      	adds	r3, r0, r3
 8006444:	3304      	adds	r3, #4
 8006446:	601a      	str	r2, [r3, #0]
}
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	b003      	add	sp, #12
 800644e:	bd90      	pop	{r4, r7, pc}
 8006450:	e000e100 	.word	0xe000e100
 8006454:	e000ed00 	.word	0xe000ed00

08006458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	1e5a      	subs	r2, r3, #1
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	045b      	lsls	r3, r3, #17
 8006468:	429a      	cmp	r2, r3
 800646a:	d301      	bcc.n	8006470 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800646c:	2301      	movs	r3, #1
 800646e:	e010      	b.n	8006492 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <SysTick_Config+0x44>)
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	3a01      	subs	r2, #1
 8006476:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006478:	2301      	movs	r3, #1
 800647a:	425b      	negs	r3, r3
 800647c:	2103      	movs	r1, #3
 800647e:	0018      	movs	r0, r3
 8006480:	f7ff ff7c 	bl	800637c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <SysTick_Config+0x44>)
 8006486:	2200      	movs	r2, #0
 8006488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800648a:	4b04      	ldr	r3, [pc, #16]	; (800649c <SysTick_Config+0x44>)
 800648c:	2207      	movs	r2, #7
 800648e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006490:	2300      	movs	r3, #0
}
 8006492:	0018      	movs	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	b002      	add	sp, #8
 8006498:	bd80      	pop	{r7, pc}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	e000e010 	.word	0xe000e010

080064a0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
 80064aa:	210f      	movs	r1, #15
 80064ac:	187b      	adds	r3, r7, r1
 80064ae:	1c02      	adds	r2, r0, #0
 80064b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	187b      	adds	r3, r7, r1
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	b25b      	sxtb	r3, r3
 80064ba:	0011      	movs	r1, r2
 80064bc:	0018      	movs	r0, r3
 80064be:	f7ff ff5d 	bl	800637c <__NVIC_SetPriority>
}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	46bd      	mov	sp, r7
 80064c6:	b004      	add	sp, #16
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	0002      	movs	r2, r0
 80064d2:	1dfb      	adds	r3, r7, #7
 80064d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064d6:	1dfb      	adds	r3, r7, #7
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	0018      	movs	r0, r3
 80064de:	f7ff ff33 	bl	8006348 <__NVIC_EnableIRQ>
}
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b002      	add	sp, #8
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	0018      	movs	r0, r3
 80064f6:	f7ff ffaf 	bl	8006458 <SysTick_Config>
 80064fa:	0003      	movs	r3, r0
}
 80064fc:	0018      	movs	r0, r3
 80064fe:	46bd      	mov	sp, r7
 8006500:	b002      	add	sp, #8
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e061      	b.n	80065da <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a32      	ldr	r2, [pc, #200]	; (80065e4 <HAL_DMA_Init+0xe0>)
 800651c:	4694      	mov	ip, r2
 800651e:	4463      	add	r3, ip
 8006520:	2114      	movs	r1, #20
 8006522:	0018      	movs	r0, r3
 8006524:	f7f9 fe0c 	bl	8000140 <__udivsi3>
 8006528:	0003      	movs	r3, r0
 800652a:	009a      	lsls	r2, r3, #2
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2d      	ldr	r2, [pc, #180]	; (80065e8 <HAL_DMA_Init+0xe4>)
 8006534:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2225      	movs	r2, #37	; 0x25
 800653a:	2102      	movs	r1, #2
 800653c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a28      	ldr	r2, [pc, #160]	; (80065ec <HAL_DMA_Init+0xe8>)
 800654a:	4013      	ands	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006556:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800656e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	01db      	lsls	r3, r3, #7
 800658c:	429a      	cmp	r2, r3
 800658e:	d018      	beq.n	80065c2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006590:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <HAL_DMA_Init+0xec>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	211c      	movs	r1, #28
 800659a:	400b      	ands	r3, r1
 800659c:	210f      	movs	r1, #15
 800659e:	4099      	lsls	r1, r3
 80065a0:	000b      	movs	r3, r1
 80065a2:	43d9      	mvns	r1, r3
 80065a4:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <HAL_DMA_Init+0xec>)
 80065a6:	400a      	ands	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80065aa:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <HAL_DMA_Init+0xec>)
 80065ac:	6819      	ldr	r1, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	201c      	movs	r0, #28
 80065b8:	4003      	ands	r3, r0
 80065ba:	409a      	lsls	r2, r3
 80065bc:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <HAL_DMA_Init+0xec>)
 80065be:	430a      	orrs	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2225      	movs	r2, #37	; 0x25
 80065cc:	2101      	movs	r1, #1
 80065ce:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2224      	movs	r2, #36	; 0x24
 80065d4:	2100      	movs	r1, #0
 80065d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	0018      	movs	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	b004      	add	sp, #16
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	bffdfff8 	.word	0xbffdfff8
 80065e8:	40020000 	.word	0x40020000
 80065ec:	ffff800f 	.word	0xffff800f
 80065f0:	400200a8 	.word	0x400200a8

080065f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006602:	2317      	movs	r3, #23
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2224      	movs	r2, #36	; 0x24
 800660e:	5c9b      	ldrb	r3, [r3, r2]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_DMA_Start_IT+0x24>
 8006614:	2302      	movs	r3, #2
 8006616:	e04f      	b.n	80066b8 <HAL_DMA_Start_IT+0xc4>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2224      	movs	r2, #36	; 0x24
 800661c:	2101      	movs	r1, #1
 800661e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2225      	movs	r2, #37	; 0x25
 8006624:	5c9b      	ldrb	r3, [r3, r2]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d13a      	bne.n	80066a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2225      	movs	r2, #37	; 0x25
 8006630:	2102      	movs	r1, #2
 8006632:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2101      	movs	r1, #1
 8006646:	438a      	bics	r2, r1
 8006648:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f8bc 	bl	80067ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	210e      	movs	r1, #14
 800666a:	430a      	orrs	r2, r1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e00f      	b.n	8006690 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2104      	movs	r1, #4
 800667c:	438a      	bics	r2, r1
 800667e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	210a      	movs	r1, #10
 800668c:	430a      	orrs	r2, r1
 800668e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2101      	movs	r1, #1
 800669c:	430a      	orrs	r2, r1
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	e007      	b.n	80066b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2224      	movs	r2, #36	; 0x24
 80066a6:	2100      	movs	r1, #0
 80066a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80066aa:	2317      	movs	r3, #23
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	2202      	movs	r2, #2
 80066b0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80066b2:	2317      	movs	r3, #23
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	781b      	ldrb	r3, [r3, #0]
}
 80066b8:	0018      	movs	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b006      	add	sp, #24
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	230f      	movs	r3, #15
 80066ca:	18fb      	adds	r3, r7, r3
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2225      	movs	r2, #37	; 0x25
 80066d4:	5c9b      	ldrb	r3, [r3, r2]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d008      	beq.n	80066ee <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2204      	movs	r2, #4
 80066e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2224      	movs	r2, #36	; 0x24
 80066e6:	2100      	movs	r1, #0
 80066e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e024      	b.n	8006738 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	210e      	movs	r1, #14
 80066fa:	438a      	bics	r2, r1
 80066fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2101      	movs	r1, #1
 800670a:	438a      	bics	r2, r1
 800670c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	221c      	movs	r2, #28
 8006714:	401a      	ands	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	2101      	movs	r1, #1
 800671c:	4091      	lsls	r1, r2
 800671e:	000a      	movs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2225      	movs	r2, #37	; 0x25
 8006726:	2101      	movs	r1, #1
 8006728:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2224      	movs	r2, #36	; 0x24
 800672e:	2100      	movs	r1, #0
 8006730:	5499      	strb	r1, [r3, r2]

    return status;
 8006732:	230f      	movs	r3, #15
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006738:	0018      	movs	r0, r3
 800673a:	46bd      	mov	sp, r7
 800673c:	b004      	add	sp, #16
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006748:	210f      	movs	r1, #15
 800674a:	187b      	adds	r3, r7, r1
 800674c:	2200      	movs	r2, #0
 800674e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2225      	movs	r2, #37	; 0x25
 8006754:	5c9b      	ldrb	r3, [r3, r2]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d006      	beq.n	800676a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2204      	movs	r2, #4
 8006760:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006762:	187b      	adds	r3, r7, r1
 8006764:	2201      	movs	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e02a      	b.n	80067c0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	210e      	movs	r1, #14
 8006776:	438a      	bics	r2, r1
 8006778:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2101      	movs	r1, #1
 8006786:	438a      	bics	r2, r1
 8006788:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678e:	221c      	movs	r2, #28
 8006790:	401a      	ands	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	2101      	movs	r1, #1
 8006798:	4091      	lsls	r1, r2
 800679a:	000a      	movs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2225      	movs	r2, #37	; 0x25
 80067a2:	2101      	movs	r1, #1
 80067a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2224      	movs	r2, #36	; 0x24
 80067aa:	2100      	movs	r1, #0
 80067ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	0010      	movs	r0, r2
 80067be:	4798      	blx	r3
    }
  }
  return status;
 80067c0:	230f      	movs	r3, #15
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	781b      	ldrb	r3, [r3, #0]
}
 80067c6:	0018      	movs	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b004      	add	sp, #16
 80067cc:	bd80      	pop	{r7, pc}

080067ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e0:	221c      	movs	r2, #28
 80067e2:	401a      	ands	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	2101      	movs	r1, #1
 80067ea:	4091      	lsls	r1, r2
 80067ec:	000a      	movs	r2, r1
 80067ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d108      	bne.n	8006812 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006810:	e007      	b.n	8006822 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	60da      	str	r2, [r3, #12]
}
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	46bd      	mov	sp, r7
 8006826:	b004      	add	sp, #16
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006842:	e155      	b.n	8006af0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2101      	movs	r1, #1
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4091      	lsls	r1, r2
 800684e:	000a      	movs	r2, r1
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d100      	bne.n	800685c <HAL_GPIO_Init+0x30>
 800685a:	e146      	b.n	8006aea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2203      	movs	r2, #3
 8006862:	4013      	ands	r3, r2
 8006864:	2b01      	cmp	r3, #1
 8006866:	d005      	beq.n	8006874 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2203      	movs	r2, #3
 800686e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006870:	2b02      	cmp	r3, #2
 8006872:	d130      	bne.n	80068d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	2203      	movs	r2, #3
 8006880:	409a      	lsls	r2, r3
 8006882:	0013      	movs	r3, r2
 8006884:	43da      	mvns	r2, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4013      	ands	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	409a      	lsls	r2, r3
 8006896:	0013      	movs	r3, r2
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068aa:	2201      	movs	r2, #1
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	409a      	lsls	r2, r3
 80068b0:	0013      	movs	r3, r2
 80068b2:	43da      	mvns	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4013      	ands	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	2201      	movs	r2, #1
 80068c2:	401a      	ands	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	409a      	lsls	r2, r3
 80068c8:	0013      	movs	r3, r2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2203      	movs	r2, #3
 80068dc:	4013      	ands	r3, r2
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d017      	beq.n	8006912 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	2203      	movs	r2, #3
 80068ee:	409a      	lsls	r2, r3
 80068f0:	0013      	movs	r3, r2
 80068f2:	43da      	mvns	r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4013      	ands	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	409a      	lsls	r2, r3
 8006904:	0013      	movs	r3, r2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2203      	movs	r2, #3
 8006918:	4013      	ands	r3, r2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d123      	bne.n	8006966 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	08da      	lsrs	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3208      	adds	r2, #8
 8006926:	0092      	lsls	r2, r2, #2
 8006928:	58d3      	ldr	r3, [r2, r3]
 800692a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2207      	movs	r2, #7
 8006930:	4013      	ands	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	220f      	movs	r2, #15
 8006936:	409a      	lsls	r2, r3
 8006938:	0013      	movs	r3, r2
 800693a:	43da      	mvns	r2, r3
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4013      	ands	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2107      	movs	r1, #7
 800694a:	400b      	ands	r3, r1
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	409a      	lsls	r2, r3
 8006950:	0013      	movs	r3, r2
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	08da      	lsrs	r2, r3, #3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3208      	adds	r2, #8
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	6939      	ldr	r1, [r7, #16]
 8006964:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	2203      	movs	r2, #3
 8006972:	409a      	lsls	r2, r3
 8006974:	0013      	movs	r3, r2
 8006976:	43da      	mvns	r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2203      	movs	r2, #3
 8006984:	401a      	ands	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	409a      	lsls	r2, r3
 800698c:	0013      	movs	r3, r2
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	23c0      	movs	r3, #192	; 0xc0
 80069a0:	029b      	lsls	r3, r3, #10
 80069a2:	4013      	ands	r3, r2
 80069a4:	d100      	bne.n	80069a8 <HAL_GPIO_Init+0x17c>
 80069a6:	e0a0      	b.n	8006aea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a8:	4b57      	ldr	r3, [pc, #348]	; (8006b08 <HAL_GPIO_Init+0x2dc>)
 80069aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ac:	4b56      	ldr	r3, [pc, #344]	; (8006b08 <HAL_GPIO_Init+0x2dc>)
 80069ae:	2101      	movs	r1, #1
 80069b0:	430a      	orrs	r2, r1
 80069b2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80069b4:	4a55      	ldr	r2, [pc, #340]	; (8006b0c <HAL_GPIO_Init+0x2e0>)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	089b      	lsrs	r3, r3, #2
 80069ba:	3302      	adds	r3, #2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	589b      	ldr	r3, [r3, r2]
 80069c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2203      	movs	r2, #3
 80069c6:	4013      	ands	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	220f      	movs	r2, #15
 80069cc:	409a      	lsls	r2, r3
 80069ce:	0013      	movs	r3, r2
 80069d0:	43da      	mvns	r2, r3
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	4013      	ands	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	23a0      	movs	r3, #160	; 0xa0
 80069dc:	05db      	lsls	r3, r3, #23
 80069de:	429a      	cmp	r2, r3
 80069e0:	d01f      	beq.n	8006a22 <HAL_GPIO_Init+0x1f6>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a4a      	ldr	r2, [pc, #296]	; (8006b10 <HAL_GPIO_Init+0x2e4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d019      	beq.n	8006a1e <HAL_GPIO_Init+0x1f2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a49      	ldr	r2, [pc, #292]	; (8006b14 <HAL_GPIO_Init+0x2e8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <HAL_GPIO_Init+0x1ee>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a48      	ldr	r2, [pc, #288]	; (8006b18 <HAL_GPIO_Init+0x2ec>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00d      	beq.n	8006a16 <HAL_GPIO_Init+0x1ea>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a47      	ldr	r2, [pc, #284]	; (8006b1c <HAL_GPIO_Init+0x2f0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <HAL_GPIO_Init+0x1e6>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a46      	ldr	r2, [pc, #280]	; (8006b20 <HAL_GPIO_Init+0x2f4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d101      	bne.n	8006a0e <HAL_GPIO_Init+0x1e2>
 8006a0a:	2305      	movs	r3, #5
 8006a0c:	e00a      	b.n	8006a24 <HAL_GPIO_Init+0x1f8>
 8006a0e:	2306      	movs	r3, #6
 8006a10:	e008      	b.n	8006a24 <HAL_GPIO_Init+0x1f8>
 8006a12:	2304      	movs	r3, #4
 8006a14:	e006      	b.n	8006a24 <HAL_GPIO_Init+0x1f8>
 8006a16:	2303      	movs	r3, #3
 8006a18:	e004      	b.n	8006a24 <HAL_GPIO_Init+0x1f8>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e002      	b.n	8006a24 <HAL_GPIO_Init+0x1f8>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <HAL_GPIO_Init+0x1f8>
 8006a22:	2300      	movs	r3, #0
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	2103      	movs	r1, #3
 8006a28:	400a      	ands	r2, r1
 8006a2a:	0092      	lsls	r2, r2, #2
 8006a2c:	4093      	lsls	r3, r2
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a34:	4935      	ldr	r1, [pc, #212]	; (8006b0c <HAL_GPIO_Init+0x2e0>)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	3302      	adds	r3, #2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a42:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	43da      	mvns	r2, r3
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	025b      	lsls	r3, r3, #9
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006a66:	4b2f      	ldr	r3, [pc, #188]	; (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006a6c:	4b2d      	ldr	r3, [pc, #180]	; (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	43da      	mvns	r2, r3
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	2380      	movs	r3, #128	; 0x80
 8006a82:	029b      	lsls	r3, r3, #10
 8006a84:	4013      	ands	r3, r2
 8006a86:	d003      	beq.n	8006a90 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a96:	4b23      	ldr	r3, [pc, #140]	; (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	43da      	mvns	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	2380      	movs	r3, #128	; 0x80
 8006aac:	035b      	lsls	r3, r3, #13
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d003      	beq.n	8006aba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006aba:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006ac0:	4b18      	ldr	r3, [pc, #96]	; (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	43da      	mvns	r2, r3
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	4013      	ands	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	039b      	lsls	r3, r3, #14
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006ae4:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	3301      	adds	r3, #1
 8006aee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	40da      	lsrs	r2, r3
 8006af8:	1e13      	subs	r3, r2, #0
 8006afa:	d000      	beq.n	8006afe <HAL_GPIO_Init+0x2d2>
 8006afc:	e6a2      	b.n	8006844 <HAL_GPIO_Init+0x18>
  }
}
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	46c0      	nop			; (mov r8, r8)
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b006      	add	sp, #24
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	50000400 	.word	0x50000400
 8006b14:	50000800 	.word	0x50000800
 8006b18:	50000c00 	.word	0x50000c00
 8006b1c:	50001000 	.word	0x50001000
 8006b20:	50001c00 	.word	0x50001c00
 8006b24:	40010400 	.word	0x40010400

08006b28 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	0008      	movs	r0, r1
 8006b32:	0011      	movs	r1, r2
 8006b34:	1cbb      	adds	r3, r7, #2
 8006b36:	1c02      	adds	r2, r0, #0
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	1c7b      	adds	r3, r7, #1
 8006b3c:	1c0a      	adds	r2, r1, #0
 8006b3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b40:	1c7b      	adds	r3, r7, #1
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b48:	1cbb      	adds	r3, r7, #2
 8006b4a:	881a      	ldrh	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006b50:	e003      	b.n	8006b5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006b52:	1cbb      	adds	r3, r7, #2
 8006b54:	881a      	ldrh	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b002      	add	sp, #8
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	0002      	movs	r2, r0
 8006b6c:	1dbb      	adds	r3, r7, #6
 8006b6e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b70:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	1dba      	adds	r2, r7, #6
 8006b76:	8812      	ldrh	r2, [r2, #0]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d008      	beq.n	8006b8e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006b7e:	1dba      	adds	r2, r7, #6
 8006b80:	8812      	ldrh	r2, [r2, #0]
 8006b82:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b84:	1dbb      	adds	r3, r7, #6
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7fd f8b7 	bl	8003cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b002      	add	sp, #8
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	40010400 	.word	0x40010400

08006b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e082      	b.n	8006cb4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2241      	movs	r2, #65	; 0x41
 8006bb2:	5c9b      	ldrb	r3, [r3, r2]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d107      	bne.n	8006bca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2240      	movs	r2, #64	; 0x40
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f7fc fdf9 	bl	80037bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2241      	movs	r2, #65	; 0x41
 8006bce:	2124      	movs	r1, #36	; 0x24
 8006bd0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2101      	movs	r1, #1
 8006bde:	438a      	bics	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4934      	ldr	r1, [pc, #208]	; (8006cbc <HAL_I2C_Init+0x120>)
 8006bec:	400a      	ands	r2, r1
 8006bee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4931      	ldr	r1, [pc, #196]	; (8006cc0 <HAL_I2C_Init+0x124>)
 8006bfc:	400a      	ands	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d108      	bne.n	8006c1a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2180      	movs	r1, #128	; 0x80
 8006c12:	0209      	lsls	r1, r1, #8
 8006c14:	430a      	orrs	r2, r1
 8006c16:	609a      	str	r2, [r3, #8]
 8006c18:	e007      	b.n	8006c2a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2184      	movs	r1, #132	; 0x84
 8006c24:	0209      	lsls	r1, r1, #8
 8006c26:	430a      	orrs	r2, r1
 8006c28:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d104      	bne.n	8006c3c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	0112      	lsls	r2, r2, #4
 8006c3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	491f      	ldr	r1, [pc, #124]	; (8006cc4 <HAL_I2C_Init+0x128>)
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	491a      	ldr	r1, [pc, #104]	; (8006cc0 <HAL_I2C_Init+0x124>)
 8006c58:	400a      	ands	r2, r1
 8006c5a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69d9      	ldr	r1, [r3, #28]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1a      	ldr	r2, [r3, #32]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2101      	movs	r1, #1
 8006c92:	430a      	orrs	r2, r1
 8006c94:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2241      	movs	r2, #65	; 0x41
 8006ca0:	2120      	movs	r1, #32
 8006ca2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2242      	movs	r2, #66	; 0x42
 8006cae:	2100      	movs	r1, #0
 8006cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	b002      	add	sp, #8
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	f0ffffff 	.word	0xf0ffffff
 8006cc0:	ffff7fff 	.word	0xffff7fff
 8006cc4:	02008000 	.word	0x02008000

08006cc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2241      	movs	r2, #65	; 0x41
 8006cd6:	5c9b      	ldrb	r3, [r3, r2]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d138      	bne.n	8006d50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2240      	movs	r2, #64	; 0x40
 8006ce2:	5c9b      	ldrb	r3, [r3, r2]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e032      	b.n	8006d52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2240      	movs	r2, #64	; 0x40
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2241      	movs	r2, #65	; 0x41
 8006cf8:	2124      	movs	r1, #36	; 0x24
 8006cfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2101      	movs	r1, #1
 8006d08:	438a      	bics	r2, r1
 8006d0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4911      	ldr	r1, [pc, #68]	; (8006d5c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006d18:	400a      	ands	r2, r1
 8006d1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6819      	ldr	r1, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2101      	movs	r1, #1
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2241      	movs	r2, #65	; 0x41
 8006d40:	2120      	movs	r1, #32
 8006d42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2240      	movs	r2, #64	; 0x40
 8006d48:	2100      	movs	r1, #0
 8006d4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e000      	b.n	8006d52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d50:	2302      	movs	r3, #2
  }
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b002      	add	sp, #8
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	ffffefff 	.word	0xffffefff

08006d60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2241      	movs	r2, #65	; 0x41
 8006d6e:	5c9b      	ldrb	r3, [r3, r2]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d139      	bne.n	8006dea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2240      	movs	r2, #64	; 0x40
 8006d7a:	5c9b      	ldrb	r3, [r3, r2]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e033      	b.n	8006dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2240      	movs	r2, #64	; 0x40
 8006d88:	2101      	movs	r1, #1
 8006d8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2241      	movs	r2, #65	; 0x41
 8006d90:	2124      	movs	r1, #36	; 0x24
 8006d92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2101      	movs	r1, #1
 8006da0:	438a      	bics	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4a11      	ldr	r2, [pc, #68]	; (8006df4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2241      	movs	r2, #65	; 0x41
 8006dda:	2120      	movs	r1, #32
 8006ddc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2240      	movs	r2, #64	; 0x40
 8006de2:	2100      	movs	r1, #0
 8006de4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e000      	b.n	8006dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
  }
}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b004      	add	sp, #16
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	fffff0ff 	.word	0xfffff0ff

08006df8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006dfc:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <HAL_PWR_PVD_IRQHandler+0x24>)
 8006dfe:	695a      	ldr	r2, [r3, #20]
 8006e00:	2380      	movs	r3, #128	; 0x80
 8006e02:	025b      	lsls	r3, r3, #9
 8006e04:	4013      	ands	r3, r2
 8006e06:	d005      	beq.n	8006e14 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006e08:	f000 f80a 	bl	8006e20 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006e0c:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <HAL_PWR_PVD_IRQHandler+0x24>)
 8006e0e:	2280      	movs	r2, #128	; 0x80
 8006e10:	0252      	lsls	r2, r2, #9
 8006e12:	615a      	str	r2, [r3, #20]
  }
}
 8006e14:	46c0      	nop			; (mov r8, r8)
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	40010400 	.word	0x40010400

08006e20 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006e24:	46c0      	nop			; (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e2c:	b5b0      	push	{r4, r5, r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f000 fbbf 	bl	80075be <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e40:	4bc9      	ldr	r3, [pc, #804]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	220c      	movs	r2, #12
 8006e46:	4013      	ands	r3, r2
 8006e48:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e4a:	4bc7      	ldr	r3, [pc, #796]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	2380      	movs	r3, #128	; 0x80
 8006e50:	025b      	lsls	r3, r3, #9
 8006e52:	4013      	ands	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d100      	bne.n	8006e62 <HAL_RCC_OscConfig+0x36>
 8006e60:	e07e      	b.n	8006f60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d007      	beq.n	8006e78 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	2b0c      	cmp	r3, #12
 8006e6c:	d112      	bne.n	8006e94 <HAL_RCC_OscConfig+0x68>
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	2380      	movs	r3, #128	; 0x80
 8006e72:	025b      	lsls	r3, r3, #9
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d10d      	bne.n	8006e94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e78:	4bbb      	ldr	r3, [pc, #748]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	4013      	ands	r3, r2
 8006e82:	d100      	bne.n	8006e86 <HAL_RCC_OscConfig+0x5a>
 8006e84:	e06b      	b.n	8006f5e <HAL_RCC_OscConfig+0x132>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d167      	bne.n	8006f5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f000 fb95 	bl	80075be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	025b      	lsls	r3, r3, #9
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x84>
 8006ea0:	4bb1      	ldr	r3, [pc, #708]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	4bb0      	ldr	r3, [pc, #704]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ea6:	2180      	movs	r1, #128	; 0x80
 8006ea8:	0249      	lsls	r1, r1, #9
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e027      	b.n	8006f00 <HAL_RCC_OscConfig+0xd4>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	23a0      	movs	r3, #160	; 0xa0
 8006eb6:	02db      	lsls	r3, r3, #11
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d10e      	bne.n	8006eda <HAL_RCC_OscConfig+0xae>
 8006ebc:	4baa      	ldr	r3, [pc, #680]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4ba9      	ldr	r3, [pc, #676]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ec2:	2180      	movs	r1, #128	; 0x80
 8006ec4:	02c9      	lsls	r1, r1, #11
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	4ba7      	ldr	r3, [pc, #668]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	4ba6      	ldr	r3, [pc, #664]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ed0:	2180      	movs	r1, #128	; 0x80
 8006ed2:	0249      	lsls	r1, r1, #9
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e012      	b.n	8006f00 <HAL_RCC_OscConfig+0xd4>
 8006eda:	4ba3      	ldr	r3, [pc, #652]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4ba2      	ldr	r3, [pc, #648]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ee0:	49a2      	ldr	r1, [pc, #648]	; (800716c <HAL_RCC_OscConfig+0x340>)
 8006ee2:	400a      	ands	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	4ba0      	ldr	r3, [pc, #640]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	2380      	movs	r3, #128	; 0x80
 8006eec:	025b      	lsls	r3, r3, #9
 8006eee:	4013      	ands	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4b9c      	ldr	r3, [pc, #624]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	4b9b      	ldr	r3, [pc, #620]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006efa:	499d      	ldr	r1, [pc, #628]	; (8007170 <HAL_RCC_OscConfig+0x344>)
 8006efc:	400a      	ands	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d015      	beq.n	8006f34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f08:	f7fe fd98 	bl	8005a3c <HAL_GetTick>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f10:	e009      	b.n	8006f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f12:	f7fe fd93 	bl	8005a3c <HAL_GetTick>
 8006f16:	0002      	movs	r2, r0
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b64      	cmp	r3, #100	; 0x64
 8006f1e:	d902      	bls.n	8006f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	f000 fb4c 	bl	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f26:	4b90      	ldr	r3, [pc, #576]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	2380      	movs	r3, #128	; 0x80
 8006f2c:	029b      	lsls	r3, r3, #10
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d0ef      	beq.n	8006f12 <HAL_RCC_OscConfig+0xe6>
 8006f32:	e015      	b.n	8006f60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f34:	f7fe fd82 	bl	8005a3c <HAL_GetTick>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f3e:	f7fe fd7d 	bl	8005a3c <HAL_GetTick>
 8006f42:	0002      	movs	r2, r0
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b64      	cmp	r3, #100	; 0x64
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e336      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f50:	4b85      	ldr	r3, [pc, #532]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	2380      	movs	r3, #128	; 0x80
 8006f56:	029b      	lsls	r3, r3, #10
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d1f0      	bne.n	8006f3e <HAL_RCC_OscConfig+0x112>
 8006f5c:	e000      	b.n	8006f60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2202      	movs	r2, #2
 8006f66:	4013      	ands	r3, r2
 8006f68:	d100      	bne.n	8006f6c <HAL_RCC_OscConfig+0x140>
 8006f6a:	e099      	b.n	80070a0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	2220      	movs	r2, #32
 8006f76:	4013      	ands	r3, r2
 8006f78:	d009      	beq.n	8006f8e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006f7a:	4b7b      	ldr	r3, [pc, #492]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4b7a      	ldr	r3, [pc, #488]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006f80:	2120      	movs	r1, #32
 8006f82:	430a      	orrs	r2, r1
 8006f84:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	2220      	movs	r2, #32
 8006f8a:	4393      	bics	r3, r2
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d005      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b0c      	cmp	r3, #12
 8006f98:	d13e      	bne.n	8007018 <HAL_RCC_OscConfig+0x1ec>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d13b      	bne.n	8007018 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006fa0:	4b71      	ldr	r3, [pc, #452]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	d004      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x188>
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e304      	b.n	80075be <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb4:	4b6c      	ldr	r3, [pc, #432]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	4a6e      	ldr	r2, [pc, #440]	; (8007174 <HAL_RCC_OscConfig+0x348>)
 8006fba:	4013      	ands	r3, r2
 8006fbc:	0019      	movs	r1, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	021a      	lsls	r2, r3, #8
 8006fc4:	4b68      	ldr	r3, [pc, #416]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006fca:	4b67      	ldr	r3, [pc, #412]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2209      	movs	r2, #9
 8006fd0:	4393      	bics	r3, r2
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	4b64      	ldr	r3, [pc, #400]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fdc:	f000 fc42 	bl	8007864 <HAL_RCC_GetSysClockFreq>
 8006fe0:	0001      	movs	r1, r0
 8006fe2:	4b61      	ldr	r3, [pc, #388]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	091b      	lsrs	r3, r3, #4
 8006fe8:	220f      	movs	r2, #15
 8006fea:	4013      	ands	r3, r2
 8006fec:	4a62      	ldr	r2, [pc, #392]	; (8007178 <HAL_RCC_OscConfig+0x34c>)
 8006fee:	5cd3      	ldrb	r3, [r2, r3]
 8006ff0:	000a      	movs	r2, r1
 8006ff2:	40da      	lsrs	r2, r3
 8006ff4:	4b61      	ldr	r3, [pc, #388]	; (800717c <HAL_RCC_OscConfig+0x350>)
 8006ff6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006ff8:	4b61      	ldr	r3, [pc, #388]	; (8007180 <HAL_RCC_OscConfig+0x354>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2513      	movs	r5, #19
 8006ffe:	197c      	adds	r4, r7, r5
 8007000:	0018      	movs	r0, r3
 8007002:	f7fe fcd5 	bl	80059b0 <HAL_InitTick>
 8007006:	0003      	movs	r3, r0
 8007008:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800700a:	197b      	adds	r3, r7, r5
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d046      	beq.n	80070a0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8007012:	197b      	adds	r3, r7, r5
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	e2d2      	b.n	80075be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d027      	beq.n	800706e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800701e:	4b52      	ldr	r3, [pc, #328]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2209      	movs	r2, #9
 8007024:	4393      	bics	r3, r2
 8007026:	0019      	movs	r1, r3
 8007028:	4b4f      	ldr	r3, [pc, #316]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 800702a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702c:	430a      	orrs	r2, r1
 800702e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007030:	f7fe fd04 	bl	8005a3c <HAL_GetTick>
 8007034:	0003      	movs	r3, r0
 8007036:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007038:	e008      	b.n	800704c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800703a:	f7fe fcff 	bl	8005a3c <HAL_GetTick>
 800703e:	0002      	movs	r2, r0
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b02      	cmp	r3, #2
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e2b8      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800704c:	4b46      	ldr	r3, [pc, #280]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2204      	movs	r2, #4
 8007052:	4013      	ands	r3, r2
 8007054:	d0f1      	beq.n	800703a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007056:	4b44      	ldr	r3, [pc, #272]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	4a46      	ldr	r2, [pc, #280]	; (8007174 <HAL_RCC_OscConfig+0x348>)
 800705c:	4013      	ands	r3, r2
 800705e:	0019      	movs	r1, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	021a      	lsls	r2, r3, #8
 8007066:	4b40      	ldr	r3, [pc, #256]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8007068:	430a      	orrs	r2, r1
 800706a:	605a      	str	r2, [r3, #4]
 800706c:	e018      	b.n	80070a0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800706e:	4b3e      	ldr	r3, [pc, #248]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b3d      	ldr	r3, [pc, #244]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8007074:	2101      	movs	r1, #1
 8007076:	438a      	bics	r2, r1
 8007078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800707a:	f7fe fcdf 	bl	8005a3c <HAL_GetTick>
 800707e:	0003      	movs	r3, r0
 8007080:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007084:	f7fe fcda 	bl	8005a3c <HAL_GetTick>
 8007088:	0002      	movs	r2, r0
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e293      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007096:	4b34      	ldr	r3, [pc, #208]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2204      	movs	r2, #4
 800709c:	4013      	ands	r3, r2
 800709e:	d1f1      	bne.n	8007084 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2210      	movs	r2, #16
 80070a6:	4013      	ands	r3, r2
 80070a8:	d100      	bne.n	80070ac <HAL_RCC_OscConfig+0x280>
 80070aa:	e0a2      	b.n	80071f2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d140      	bne.n	8007134 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80070b2:	4b2d      	ldr	r3, [pc, #180]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4013      	ands	r3, r2
 80070bc:	d005      	beq.n	80070ca <HAL_RCC_OscConfig+0x29e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e279      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070ca:	4b27      	ldr	r3, [pc, #156]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4a2d      	ldr	r2, [pc, #180]	; (8007184 <HAL_RCC_OscConfig+0x358>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	0019      	movs	r1, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070d8:	4b23      	ldr	r3, [pc, #140]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070de:	4b22      	ldr	r3, [pc, #136]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	0a19      	lsrs	r1, r3, #8
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	061a      	lsls	r2, r3, #24
 80070ec:	4b1e      	ldr	r3, [pc, #120]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	0b5b      	lsrs	r3, r3, #13
 80070f8:	3301      	adds	r3, #1
 80070fa:	2280      	movs	r2, #128	; 0x80
 80070fc:	0212      	lsls	r2, r2, #8
 80070fe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007100:	4b19      	ldr	r3, [pc, #100]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	091b      	lsrs	r3, r3, #4
 8007106:	210f      	movs	r1, #15
 8007108:	400b      	ands	r3, r1
 800710a:	491b      	ldr	r1, [pc, #108]	; (8007178 <HAL_RCC_OscConfig+0x34c>)
 800710c:	5ccb      	ldrb	r3, [r1, r3]
 800710e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <HAL_RCC_OscConfig+0x350>)
 8007112:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007114:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <HAL_RCC_OscConfig+0x354>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2513      	movs	r5, #19
 800711a:	197c      	adds	r4, r7, r5
 800711c:	0018      	movs	r0, r3
 800711e:	f7fe fc47 	bl	80059b0 <HAL_InitTick>
 8007122:	0003      	movs	r3, r0
 8007124:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007126:	197b      	adds	r3, r7, r5
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d061      	beq.n	80071f2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800712e:	197b      	adds	r3, r7, r5
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	e244      	b.n	80075be <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d040      	beq.n	80071be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800713c:	4b0a      	ldr	r3, [pc, #40]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <HAL_RCC_OscConfig+0x33c>)
 8007142:	2180      	movs	r1, #128	; 0x80
 8007144:	0049      	lsls	r1, r1, #1
 8007146:	430a      	orrs	r2, r1
 8007148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800714a:	f7fe fc77 	bl	8005a3c <HAL_GetTick>
 800714e:	0003      	movs	r3, r0
 8007150:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007152:	e019      	b.n	8007188 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007154:	f7fe fc72 	bl	8005a3c <HAL_GetTick>
 8007158:	0002      	movs	r2, r0
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d912      	bls.n	8007188 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e22b      	b.n	80075be <HAL_RCC_OscConfig+0x792>
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	40021000 	.word	0x40021000
 800716c:	fffeffff 	.word	0xfffeffff
 8007170:	fffbffff 	.word	0xfffbffff
 8007174:	ffffe0ff 	.word	0xffffe0ff
 8007178:	0800e1f0 	.word	0x0800e1f0
 800717c:	20000000 	.word	0x20000000
 8007180:	20000004 	.word	0x20000004
 8007184:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007188:	4bca      	ldr	r3, [pc, #808]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	2380      	movs	r3, #128	; 0x80
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4013      	ands	r3, r2
 8007192:	d0df      	beq.n	8007154 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007194:	4bc7      	ldr	r3, [pc, #796]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4ac7      	ldr	r2, [pc, #796]	; (80074b8 <HAL_RCC_OscConfig+0x68c>)
 800719a:	4013      	ands	r3, r2
 800719c:	0019      	movs	r1, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071a2:	4bc4      	ldr	r3, [pc, #784]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80071a4:	430a      	orrs	r2, r1
 80071a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071a8:	4bc2      	ldr	r3, [pc, #776]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	0a19      	lsrs	r1, r3, #8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	061a      	lsls	r2, r3, #24
 80071b6:	4bbf      	ldr	r3, [pc, #764]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80071b8:	430a      	orrs	r2, r1
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	e019      	b.n	80071f2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80071be:	4bbd      	ldr	r3, [pc, #756]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4bbc      	ldr	r3, [pc, #752]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80071c4:	49bd      	ldr	r1, [pc, #756]	; (80074bc <HAL_RCC_OscConfig+0x690>)
 80071c6:	400a      	ands	r2, r1
 80071c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ca:	f7fe fc37 	bl	8005a3c <HAL_GetTick>
 80071ce:	0003      	movs	r3, r0
 80071d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071d4:	f7fe fc32 	bl	8005a3c <HAL_GetTick>
 80071d8:	0002      	movs	r2, r0
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e1eb      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80071e6:	4bb3      	ldr	r3, [pc, #716]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	2380      	movs	r3, #128	; 0x80
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4013      	ands	r3, r2
 80071f0:	d1f0      	bne.n	80071d4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2208      	movs	r2, #8
 80071f8:	4013      	ands	r3, r2
 80071fa:	d036      	beq.n	800726a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d019      	beq.n	8007238 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007204:	4bab      	ldr	r3, [pc, #684]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007208:	4baa      	ldr	r3, [pc, #680]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800720a:	2101      	movs	r1, #1
 800720c:	430a      	orrs	r2, r1
 800720e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007210:	f7fe fc14 	bl	8005a3c <HAL_GetTick>
 8007214:	0003      	movs	r3, r0
 8007216:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800721a:	f7fe fc0f 	bl	8005a3c <HAL_GetTick>
 800721e:	0002      	movs	r2, r0
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e1c8      	b.n	80075be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800722c:	4ba1      	ldr	r3, [pc, #644]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	2202      	movs	r2, #2
 8007232:	4013      	ands	r3, r2
 8007234:	d0f1      	beq.n	800721a <HAL_RCC_OscConfig+0x3ee>
 8007236:	e018      	b.n	800726a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007238:	4b9e      	ldr	r3, [pc, #632]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800723a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800723c:	4b9d      	ldr	r3, [pc, #628]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800723e:	2101      	movs	r1, #1
 8007240:	438a      	bics	r2, r1
 8007242:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007244:	f7fe fbfa 	bl	8005a3c <HAL_GetTick>
 8007248:	0003      	movs	r3, r0
 800724a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800724e:	f7fe fbf5 	bl	8005a3c <HAL_GetTick>
 8007252:	0002      	movs	r2, r0
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e1ae      	b.n	80075be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007260:	4b94      	ldr	r3, [pc, #592]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007264:	2202      	movs	r2, #2
 8007266:	4013      	ands	r3, r2
 8007268:	d1f1      	bne.n	800724e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2204      	movs	r2, #4
 8007270:	4013      	ands	r3, r2
 8007272:	d100      	bne.n	8007276 <HAL_RCC_OscConfig+0x44a>
 8007274:	e0ae      	b.n	80073d4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007276:	2023      	movs	r0, #35	; 0x23
 8007278:	183b      	adds	r3, r7, r0
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800727e:	4b8d      	ldr	r3, [pc, #564]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	055b      	lsls	r3, r3, #21
 8007286:	4013      	ands	r3, r2
 8007288:	d109      	bne.n	800729e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728a:	4b8a      	ldr	r3, [pc, #552]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800728c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800728e:	4b89      	ldr	r3, [pc, #548]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	0549      	lsls	r1, r1, #21
 8007294:	430a      	orrs	r2, r1
 8007296:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007298:	183b      	adds	r3, r7, r0
 800729a:	2201      	movs	r2, #1
 800729c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729e:	4b88      	ldr	r3, [pc, #544]	; (80074c0 <HAL_RCC_OscConfig+0x694>)
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	2380      	movs	r3, #128	; 0x80
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4013      	ands	r3, r2
 80072a8:	d11a      	bne.n	80072e0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072aa:	4b85      	ldr	r3, [pc, #532]	; (80074c0 <HAL_RCC_OscConfig+0x694>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b84      	ldr	r3, [pc, #528]	; (80074c0 <HAL_RCC_OscConfig+0x694>)
 80072b0:	2180      	movs	r1, #128	; 0x80
 80072b2:	0049      	lsls	r1, r1, #1
 80072b4:	430a      	orrs	r2, r1
 80072b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072b8:	f7fe fbc0 	bl	8005a3c <HAL_GetTick>
 80072bc:	0003      	movs	r3, r0
 80072be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c0:	e008      	b.n	80072d4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c2:	f7fe fbbb 	bl	8005a3c <HAL_GetTick>
 80072c6:	0002      	movs	r2, r0
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b64      	cmp	r3, #100	; 0x64
 80072ce:	d901      	bls.n	80072d4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e174      	b.n	80075be <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d4:	4b7a      	ldr	r3, [pc, #488]	; (80074c0 <HAL_RCC_OscConfig+0x694>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	2380      	movs	r3, #128	; 0x80
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	4013      	ands	r3, r2
 80072de:	d0f0      	beq.n	80072c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d107      	bne.n	80072fc <HAL_RCC_OscConfig+0x4d0>
 80072ec:	4b71      	ldr	r3, [pc, #452]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80072ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072f0:	4b70      	ldr	r3, [pc, #448]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80072f2:	2180      	movs	r1, #128	; 0x80
 80072f4:	0049      	lsls	r1, r1, #1
 80072f6:	430a      	orrs	r2, r1
 80072f8:	651a      	str	r2, [r3, #80]	; 0x50
 80072fa:	e031      	b.n	8007360 <HAL_RCC_OscConfig+0x534>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10c      	bne.n	800731e <HAL_RCC_OscConfig+0x4f2>
 8007304:	4b6b      	ldr	r3, [pc, #428]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007308:	4b6a      	ldr	r3, [pc, #424]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800730a:	496c      	ldr	r1, [pc, #432]	; (80074bc <HAL_RCC_OscConfig+0x690>)
 800730c:	400a      	ands	r2, r1
 800730e:	651a      	str	r2, [r3, #80]	; 0x50
 8007310:	4b68      	ldr	r3, [pc, #416]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007314:	4b67      	ldr	r3, [pc, #412]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007316:	496b      	ldr	r1, [pc, #428]	; (80074c4 <HAL_RCC_OscConfig+0x698>)
 8007318:	400a      	ands	r2, r1
 800731a:	651a      	str	r2, [r3, #80]	; 0x50
 800731c:	e020      	b.n	8007360 <HAL_RCC_OscConfig+0x534>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	23a0      	movs	r3, #160	; 0xa0
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	429a      	cmp	r2, r3
 8007328:	d10e      	bne.n	8007348 <HAL_RCC_OscConfig+0x51c>
 800732a:	4b62      	ldr	r3, [pc, #392]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800732c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800732e:	4b61      	ldr	r3, [pc, #388]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007330:	2180      	movs	r1, #128	; 0x80
 8007332:	00c9      	lsls	r1, r1, #3
 8007334:	430a      	orrs	r2, r1
 8007336:	651a      	str	r2, [r3, #80]	; 0x50
 8007338:	4b5e      	ldr	r3, [pc, #376]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800733a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800733c:	4b5d      	ldr	r3, [pc, #372]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	0049      	lsls	r1, r1, #1
 8007342:	430a      	orrs	r2, r1
 8007344:	651a      	str	r2, [r3, #80]	; 0x50
 8007346:	e00b      	b.n	8007360 <HAL_RCC_OscConfig+0x534>
 8007348:	4b5a      	ldr	r3, [pc, #360]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800734a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800734c:	4b59      	ldr	r3, [pc, #356]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800734e:	495b      	ldr	r1, [pc, #364]	; (80074bc <HAL_RCC_OscConfig+0x690>)
 8007350:	400a      	ands	r2, r1
 8007352:	651a      	str	r2, [r3, #80]	; 0x50
 8007354:	4b57      	ldr	r3, [pc, #348]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007358:	4b56      	ldr	r3, [pc, #344]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800735a:	495a      	ldr	r1, [pc, #360]	; (80074c4 <HAL_RCC_OscConfig+0x698>)
 800735c:	400a      	ands	r2, r1
 800735e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d015      	beq.n	8007394 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007368:	f7fe fb68 	bl	8005a3c <HAL_GetTick>
 800736c:	0003      	movs	r3, r0
 800736e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007370:	e009      	b.n	8007386 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007372:	f7fe fb63 	bl	8005a3c <HAL_GetTick>
 8007376:	0002      	movs	r2, r0
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	4a52      	ldr	r2, [pc, #328]	; (80074c8 <HAL_RCC_OscConfig+0x69c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e11b      	b.n	80075be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007386:	4b4b      	ldr	r3, [pc, #300]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800738a:	2380      	movs	r3, #128	; 0x80
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4013      	ands	r3, r2
 8007390:	d0ef      	beq.n	8007372 <HAL_RCC_OscConfig+0x546>
 8007392:	e014      	b.n	80073be <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007394:	f7fe fb52 	bl	8005a3c <HAL_GetTick>
 8007398:	0003      	movs	r3, r0
 800739a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800739c:	e009      	b.n	80073b2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800739e:	f7fe fb4d 	bl	8005a3c <HAL_GetTick>
 80073a2:	0002      	movs	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	4a47      	ldr	r2, [pc, #284]	; (80074c8 <HAL_RCC_OscConfig+0x69c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e105      	b.n	80075be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073b2:	4b40      	ldr	r3, [pc, #256]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80073b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073b6:	2380      	movs	r3, #128	; 0x80
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4013      	ands	r3, r2
 80073bc:	d1ef      	bne.n	800739e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80073be:	2323      	movs	r3, #35	; 0x23
 80073c0:	18fb      	adds	r3, r7, r3
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d105      	bne.n	80073d4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c8:	4b3a      	ldr	r3, [pc, #232]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80073ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073cc:	4b39      	ldr	r3, [pc, #228]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80073ce:	493f      	ldr	r1, [pc, #252]	; (80074cc <HAL_RCC_OscConfig+0x6a0>)
 80073d0:	400a      	ands	r2, r1
 80073d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2220      	movs	r2, #32
 80073da:	4013      	ands	r3, r2
 80073dc:	d049      	beq.n	8007472 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d026      	beq.n	8007434 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80073e6:	4b33      	ldr	r3, [pc, #204]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	4b32      	ldr	r3, [pc, #200]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80073ec:	2101      	movs	r1, #1
 80073ee:	430a      	orrs	r2, r1
 80073f0:	609a      	str	r2, [r3, #8]
 80073f2:	4b30      	ldr	r3, [pc, #192]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80073f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 80073f8:	2101      	movs	r1, #1
 80073fa:	430a      	orrs	r2, r1
 80073fc:	635a      	str	r2, [r3, #52]	; 0x34
 80073fe:	4b34      	ldr	r3, [pc, #208]	; (80074d0 <HAL_RCC_OscConfig+0x6a4>)
 8007400:	6a1a      	ldr	r2, [r3, #32]
 8007402:	4b33      	ldr	r3, [pc, #204]	; (80074d0 <HAL_RCC_OscConfig+0x6a4>)
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	0189      	lsls	r1, r1, #6
 8007408:	430a      	orrs	r2, r1
 800740a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800740c:	f7fe fb16 	bl	8005a3c <HAL_GetTick>
 8007410:	0003      	movs	r3, r0
 8007412:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007414:	e008      	b.n	8007428 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007416:	f7fe fb11 	bl	8005a3c <HAL_GetTick>
 800741a:	0002      	movs	r2, r0
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0ca      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007428:	4b22      	ldr	r3, [pc, #136]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2202      	movs	r2, #2
 800742e:	4013      	ands	r3, r2
 8007430:	d0f1      	beq.n	8007416 <HAL_RCC_OscConfig+0x5ea>
 8007432:	e01e      	b.n	8007472 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007434:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800743a:	2101      	movs	r1, #1
 800743c:	438a      	bics	r2, r1
 800743e:	609a      	str	r2, [r3, #8]
 8007440:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <HAL_RCC_OscConfig+0x6a4>)
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <HAL_RCC_OscConfig+0x6a4>)
 8007446:	4923      	ldr	r1, [pc, #140]	; (80074d4 <HAL_RCC_OscConfig+0x6a8>)
 8007448:	400a      	ands	r2, r1
 800744a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744c:	f7fe faf6 	bl	8005a3c <HAL_GetTick>
 8007450:	0003      	movs	r3, r0
 8007452:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007456:	f7fe faf1 	bl	8005a3c <HAL_GetTick>
 800745a:	0002      	movs	r2, r0
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e0aa      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007468:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2202      	movs	r2, #2
 800746e:	4013      	ands	r3, r2
 8007470:	d1f1      	bne.n	8007456 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	2b00      	cmp	r3, #0
 8007478:	d100      	bne.n	800747c <HAL_RCC_OscConfig+0x650>
 800747a:	e09f      	b.n	80075bc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	2b0c      	cmp	r3, #12
 8007480:	d100      	bne.n	8007484 <HAL_RCC_OscConfig+0x658>
 8007482:	e078      	b.n	8007576 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	2b02      	cmp	r3, #2
 800748a:	d159      	bne.n	8007540 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800748c:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <HAL_RCC_OscConfig+0x688>)
 8007492:	4911      	ldr	r1, [pc, #68]	; (80074d8 <HAL_RCC_OscConfig+0x6ac>)
 8007494:	400a      	ands	r2, r1
 8007496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007498:	f7fe fad0 	bl	8005a3c <HAL_GetTick>
 800749c:	0003      	movs	r3, r0
 800749e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80074a0:	e01c      	b.n	80074dc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074a2:	f7fe facb 	bl	8005a3c <HAL_GetTick>
 80074a6:	0002      	movs	r2, r0
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d915      	bls.n	80074dc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e084      	b.n	80075be <HAL_RCC_OscConfig+0x792>
 80074b4:	40021000 	.word	0x40021000
 80074b8:	ffff1fff 	.word	0xffff1fff
 80074bc:	fffffeff 	.word	0xfffffeff
 80074c0:	40007000 	.word	0x40007000
 80074c4:	fffffbff 	.word	0xfffffbff
 80074c8:	00001388 	.word	0x00001388
 80074cc:	efffffff 	.word	0xefffffff
 80074d0:	40010000 	.word	0x40010000
 80074d4:	ffffdfff 	.word	0xffffdfff
 80074d8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80074dc:	4b3a      	ldr	r3, [pc, #232]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	2380      	movs	r3, #128	; 0x80
 80074e2:	049b      	lsls	r3, r3, #18
 80074e4:	4013      	ands	r3, r2
 80074e6:	d1dc      	bne.n	80074a2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074e8:	4b37      	ldr	r3, [pc, #220]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4a37      	ldr	r2, [pc, #220]	; (80075cc <HAL_RCC_OscConfig+0x7a0>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	0019      	movs	r1, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007500:	431a      	orrs	r2, r3
 8007502:	4b31      	ldr	r3, [pc, #196]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 8007504:	430a      	orrs	r2, r1
 8007506:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007508:	4b2f      	ldr	r3, [pc, #188]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 800750e:	2180      	movs	r1, #128	; 0x80
 8007510:	0449      	lsls	r1, r1, #17
 8007512:	430a      	orrs	r2, r1
 8007514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007516:	f7fe fa91 	bl	8005a3c <HAL_GetTick>
 800751a:	0003      	movs	r3, r0
 800751c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800751e:	e008      	b.n	8007532 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007520:	f7fe fa8c 	bl	8005a3c <HAL_GetTick>
 8007524:	0002      	movs	r2, r0
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e045      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007532:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	049b      	lsls	r3, r3, #18
 800753a:	4013      	ands	r3, r2
 800753c:	d0f0      	beq.n	8007520 <HAL_RCC_OscConfig+0x6f4>
 800753e:	e03d      	b.n	80075bc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007540:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 8007546:	4922      	ldr	r1, [pc, #136]	; (80075d0 <HAL_RCC_OscConfig+0x7a4>)
 8007548:	400a      	ands	r2, r1
 800754a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754c:	f7fe fa76 	bl	8005a3c <HAL_GetTick>
 8007550:	0003      	movs	r3, r0
 8007552:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007554:	e008      	b.n	8007568 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007556:	f7fe fa71 	bl	8005a3c <HAL_GetTick>
 800755a:	0002      	movs	r2, r0
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e02a      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007568:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	049b      	lsls	r3, r3, #18
 8007570:	4013      	ands	r3, r2
 8007572:	d1f0      	bne.n	8007556 <HAL_RCC_OscConfig+0x72a>
 8007574:	e022      	b.n	80075bc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e01d      	b.n	80075be <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007582:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <HAL_RCC_OscConfig+0x79c>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	2380      	movs	r3, #128	; 0x80
 800758c:	025b      	lsls	r3, r3, #9
 800758e:	401a      	ands	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	429a      	cmp	r2, r3
 8007596:	d10f      	bne.n	80075b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	23f0      	movs	r3, #240	; 0xf0
 800759c:	039b      	lsls	r3, r3, #14
 800759e:	401a      	ands	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d107      	bne.n	80075b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	23c0      	movs	r3, #192	; 0xc0
 80075ac:	041b      	lsls	r3, r3, #16
 80075ae:	401a      	ands	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d001      	beq.n	80075bc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	0018      	movs	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b00a      	add	sp, #40	; 0x28
 80075c4:	bdb0      	pop	{r4, r5, r7, pc}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	40021000 	.word	0x40021000
 80075cc:	ff02ffff 	.word	0xff02ffff
 80075d0:	feffffff 	.word	0xfeffffff

080075d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075d4:	b5b0      	push	{r4, r5, r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e128      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075e8:	4b96      	ldr	r3, [pc, #600]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2201      	movs	r2, #1
 80075ee:	4013      	ands	r3, r2
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d91e      	bls.n	8007634 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f6:	4b93      	ldr	r3, [pc, #588]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2201      	movs	r2, #1
 80075fc:	4393      	bics	r3, r2
 80075fe:	0019      	movs	r1, r3
 8007600:	4b90      	ldr	r3, [pc, #576]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007608:	f7fe fa18 	bl	8005a3c <HAL_GetTick>
 800760c:	0003      	movs	r3, r0
 800760e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007610:	e009      	b.n	8007626 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007612:	f7fe fa13 	bl	8005a3c <HAL_GetTick>
 8007616:	0002      	movs	r2, r0
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	4a8a      	ldr	r2, [pc, #552]	; (8007848 <HAL_RCC_ClockConfig+0x274>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e109      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007626:	4b87      	ldr	r3, [pc, #540]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2201      	movs	r2, #1
 800762c:	4013      	ands	r3, r2
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d1ee      	bne.n	8007612 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2202      	movs	r2, #2
 800763a:	4013      	ands	r3, r2
 800763c:	d009      	beq.n	8007652 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800763e:	4b83      	ldr	r3, [pc, #524]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	22f0      	movs	r2, #240	; 0xf0
 8007644:	4393      	bics	r3, r2
 8007646:	0019      	movs	r1, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	4b7f      	ldr	r3, [pc, #508]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 800764e:	430a      	orrs	r2, r1
 8007650:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2201      	movs	r2, #1
 8007658:	4013      	ands	r3, r2
 800765a:	d100      	bne.n	800765e <HAL_RCC_ClockConfig+0x8a>
 800765c:	e089      	b.n	8007772 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b02      	cmp	r3, #2
 8007664:	d107      	bne.n	8007676 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007666:	4b79      	ldr	r3, [pc, #484]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	2380      	movs	r3, #128	; 0x80
 800766c:	029b      	lsls	r3, r3, #10
 800766e:	4013      	ands	r3, r2
 8007670:	d120      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0e1      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d107      	bne.n	800768e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800767e:	4b73      	ldr	r3, [pc, #460]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	2380      	movs	r3, #128	; 0x80
 8007684:	049b      	lsls	r3, r3, #18
 8007686:	4013      	ands	r3, r2
 8007688:	d114      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e0d5      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d106      	bne.n	80076a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007696:	4b6d      	ldr	r3, [pc, #436]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2204      	movs	r2, #4
 800769c:	4013      	ands	r3, r2
 800769e:	d109      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e0ca      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80076a4:	4b69      	ldr	r3, [pc, #420]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	2380      	movs	r3, #128	; 0x80
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4013      	ands	r3, r2
 80076ae:	d101      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0c2      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076b4:	4b65      	ldr	r3, [pc, #404]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2203      	movs	r2, #3
 80076ba:	4393      	bics	r3, r2
 80076bc:	0019      	movs	r1, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	4b62      	ldr	r3, [pc, #392]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 80076c4:	430a      	orrs	r2, r1
 80076c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076c8:	f7fe f9b8 	bl	8005a3c <HAL_GetTick>
 80076cc:	0003      	movs	r3, r0
 80076ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d111      	bne.n	80076fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80076d8:	e009      	b.n	80076ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076da:	f7fe f9af 	bl	8005a3c <HAL_GetTick>
 80076de:	0002      	movs	r2, r0
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	4a58      	ldr	r2, [pc, #352]	; (8007848 <HAL_RCC_ClockConfig+0x274>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e0a5      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80076ee:	4b57      	ldr	r3, [pc, #348]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	220c      	movs	r2, #12
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d1ef      	bne.n	80076da <HAL_RCC_ClockConfig+0x106>
 80076fa:	e03a      	b.n	8007772 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b03      	cmp	r3, #3
 8007702:	d111      	bne.n	8007728 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007704:	e009      	b.n	800771a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007706:	f7fe f999 	bl	8005a3c <HAL_GetTick>
 800770a:	0002      	movs	r2, r0
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	4a4d      	ldr	r2, [pc, #308]	; (8007848 <HAL_RCC_ClockConfig+0x274>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d901      	bls.n	800771a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e08f      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800771a:	4b4c      	ldr	r3, [pc, #304]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	220c      	movs	r2, #12
 8007720:	4013      	ands	r3, r2
 8007722:	2b0c      	cmp	r3, #12
 8007724:	d1ef      	bne.n	8007706 <HAL_RCC_ClockConfig+0x132>
 8007726:	e024      	b.n	8007772 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d11b      	bne.n	8007768 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007730:	e009      	b.n	8007746 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007732:	f7fe f983 	bl	8005a3c <HAL_GetTick>
 8007736:	0002      	movs	r2, r0
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	4a42      	ldr	r2, [pc, #264]	; (8007848 <HAL_RCC_ClockConfig+0x274>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e079      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007746:	4b41      	ldr	r3, [pc, #260]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	220c      	movs	r2, #12
 800774c:	4013      	ands	r3, r2
 800774e:	2b04      	cmp	r3, #4
 8007750:	d1ef      	bne.n	8007732 <HAL_RCC_ClockConfig+0x15e>
 8007752:	e00e      	b.n	8007772 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007754:	f7fe f972 	bl	8005a3c <HAL_GetTick>
 8007758:	0002      	movs	r2, r0
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	4a3a      	ldr	r2, [pc, #232]	; (8007848 <HAL_RCC_ClockConfig+0x274>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e068      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007768:	4b38      	ldr	r3, [pc, #224]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	220c      	movs	r2, #12
 800776e:	4013      	ands	r3, r2
 8007770:	d1f0      	bne.n	8007754 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007772:	4b34      	ldr	r3, [pc, #208]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2201      	movs	r2, #1
 8007778:	4013      	ands	r3, r2
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d21e      	bcs.n	80077be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007780:	4b30      	ldr	r3, [pc, #192]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2201      	movs	r2, #1
 8007786:	4393      	bics	r3, r2
 8007788:	0019      	movs	r1, r3
 800778a:	4b2e      	ldr	r3, [pc, #184]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007792:	f7fe f953 	bl	8005a3c <HAL_GetTick>
 8007796:	0003      	movs	r3, r0
 8007798:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800779a:	e009      	b.n	80077b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800779c:	f7fe f94e 	bl	8005a3c <HAL_GetTick>
 80077a0:	0002      	movs	r2, r0
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	4a28      	ldr	r2, [pc, #160]	; (8007848 <HAL_RCC_ClockConfig+0x274>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e044      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077b0:	4b24      	ldr	r3, [pc, #144]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2201      	movs	r2, #1
 80077b6:	4013      	ands	r3, r2
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d1ee      	bne.n	800779c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2204      	movs	r2, #4
 80077c4:	4013      	ands	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077c8:	4b20      	ldr	r3, [pc, #128]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	4a20      	ldr	r2, [pc, #128]	; (8007850 <HAL_RCC_ClockConfig+0x27c>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	0019      	movs	r1, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	4b1d      	ldr	r3, [pc, #116]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 80077d8:	430a      	orrs	r2, r1
 80077da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2208      	movs	r2, #8
 80077e2:	4013      	ands	r3, r2
 80077e4:	d00a      	beq.n	80077fc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077e6:	4b19      	ldr	r3, [pc, #100]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4a1a      	ldr	r2, [pc, #104]	; (8007854 <HAL_RCC_ClockConfig+0x280>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	0019      	movs	r1, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	00da      	lsls	r2, r3, #3
 80077f6:	4b15      	ldr	r3, [pc, #84]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 80077f8:	430a      	orrs	r2, r1
 80077fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077fc:	f000 f832 	bl	8007864 <HAL_RCC_GetSysClockFreq>
 8007800:	0001      	movs	r1, r0
 8007802:	4b12      	ldr	r3, [pc, #72]	; (800784c <HAL_RCC_ClockConfig+0x278>)
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	220f      	movs	r2, #15
 800780a:	4013      	ands	r3, r2
 800780c:	4a12      	ldr	r2, [pc, #72]	; (8007858 <HAL_RCC_ClockConfig+0x284>)
 800780e:	5cd3      	ldrb	r3, [r2, r3]
 8007810:	000a      	movs	r2, r1
 8007812:	40da      	lsrs	r2, r3
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <HAL_RCC_ClockConfig+0x288>)
 8007816:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <HAL_RCC_ClockConfig+0x28c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	250b      	movs	r5, #11
 800781e:	197c      	adds	r4, r7, r5
 8007820:	0018      	movs	r0, r3
 8007822:	f7fe f8c5 	bl	80059b0 <HAL_InitTick>
 8007826:	0003      	movs	r3, r0
 8007828:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800782a:	197b      	adds	r3, r7, r5
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8007832:	197b      	adds	r3, r7, r5
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	e000      	b.n	800783a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	0018      	movs	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	b004      	add	sp, #16
 8007840:	bdb0      	pop	{r4, r5, r7, pc}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	40022000 	.word	0x40022000
 8007848:	00001388 	.word	0x00001388
 800784c:	40021000 	.word	0x40021000
 8007850:	fffff8ff 	.word	0xfffff8ff
 8007854:	ffffc7ff 	.word	0xffffc7ff
 8007858:	0800e1f0 	.word	0x0800e1f0
 800785c:	20000000 	.word	0x20000000
 8007860:	20000004 	.word	0x20000004

08007864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007864:	b5b0      	push	{r4, r5, r7, lr}
 8007866:	b08e      	sub	sp, #56	; 0x38
 8007868:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800786a:	4b4c      	ldr	r3, [pc, #304]	; (800799c <HAL_RCC_GetSysClockFreq+0x138>)
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007872:	230c      	movs	r3, #12
 8007874:	4013      	ands	r3, r2
 8007876:	2b0c      	cmp	r3, #12
 8007878:	d014      	beq.n	80078a4 <HAL_RCC_GetSysClockFreq+0x40>
 800787a:	d900      	bls.n	800787e <HAL_RCC_GetSysClockFreq+0x1a>
 800787c:	e07b      	b.n	8007976 <HAL_RCC_GetSysClockFreq+0x112>
 800787e:	2b04      	cmp	r3, #4
 8007880:	d002      	beq.n	8007888 <HAL_RCC_GetSysClockFreq+0x24>
 8007882:	2b08      	cmp	r3, #8
 8007884:	d00b      	beq.n	800789e <HAL_RCC_GetSysClockFreq+0x3a>
 8007886:	e076      	b.n	8007976 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007888:	4b44      	ldr	r3, [pc, #272]	; (800799c <HAL_RCC_GetSysClockFreq+0x138>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2210      	movs	r2, #16
 800788e:	4013      	ands	r3, r2
 8007890:	d002      	beq.n	8007898 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007892:	4b43      	ldr	r3, [pc, #268]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007894:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007896:	e07c      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8007898:	4b42      	ldr	r3, [pc, #264]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800789a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800789c:	e079      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800789e:	4b42      	ldr	r3, [pc, #264]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80078a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80078a2:	e076      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	0c9a      	lsrs	r2, r3, #18
 80078a8:	230f      	movs	r3, #15
 80078aa:	401a      	ands	r2, r3
 80078ac:	4b3f      	ldr	r3, [pc, #252]	; (80079ac <HAL_RCC_GetSysClockFreq+0x148>)
 80078ae:	5c9b      	ldrb	r3, [r3, r2]
 80078b0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	0d9a      	lsrs	r2, r3, #22
 80078b6:	2303      	movs	r3, #3
 80078b8:	4013      	ands	r3, r2
 80078ba:	3301      	adds	r3, #1
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078be:	4b37      	ldr	r3, [pc, #220]	; (800799c <HAL_RCC_GetSysClockFreq+0x138>)
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	2380      	movs	r3, #128	; 0x80
 80078c4:	025b      	lsls	r3, r3, #9
 80078c6:	4013      	ands	r3, r2
 80078c8:	d01a      	beq.n	8007900 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]
 80078d2:	4a35      	ldr	r2, [pc, #212]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	69b8      	ldr	r0, [r7, #24]
 80078d8:	69f9      	ldr	r1, [r7, #28]
 80078da:	f7f8 fe05 	bl	80004e8 <__aeabi_lmul>
 80078de:	0002      	movs	r2, r0
 80078e0:	000b      	movs	r3, r1
 80078e2:	0010      	movs	r0, r2
 80078e4:	0019      	movs	r1, r3
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f7f8 fdd9 	bl	80004a8 <__aeabi_uldivmod>
 80078f6:	0002      	movs	r2, r0
 80078f8:	000b      	movs	r3, r1
 80078fa:	0013      	movs	r3, r2
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
 80078fe:	e037      	b.n	8007970 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007900:	4b26      	ldr	r3, [pc, #152]	; (800799c <HAL_RCC_GetSysClockFreq+0x138>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2210      	movs	r2, #16
 8007906:	4013      	ands	r3, r2
 8007908:	d01a      	beq.n	8007940 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	4a23      	ldr	r2, [pc, #140]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007914:	2300      	movs	r3, #0
 8007916:	68b8      	ldr	r0, [r7, #8]
 8007918:	68f9      	ldr	r1, [r7, #12]
 800791a:	f7f8 fde5 	bl	80004e8 <__aeabi_lmul>
 800791e:	0002      	movs	r2, r0
 8007920:	000b      	movs	r3, r1
 8007922:	0010      	movs	r0, r2
 8007924:	0019      	movs	r1, r3
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	603b      	str	r3, [r7, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f7f8 fdb9 	bl	80004a8 <__aeabi_uldivmod>
 8007936:	0002      	movs	r2, r0
 8007938:	000b      	movs	r3, r1
 800793a:	0013      	movs	r3, r2
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
 800793e:	e017      	b.n	8007970 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	0018      	movs	r0, r3
 8007944:	2300      	movs	r3, #0
 8007946:	0019      	movs	r1, r3
 8007948:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800794a:	2300      	movs	r3, #0
 800794c:	f7f8 fdcc 	bl	80004e8 <__aeabi_lmul>
 8007950:	0002      	movs	r2, r0
 8007952:	000b      	movs	r3, r1
 8007954:	0010      	movs	r0, r2
 8007956:	0019      	movs	r1, r3
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	001c      	movs	r4, r3
 800795c:	2300      	movs	r3, #0
 800795e:	001d      	movs	r5, r3
 8007960:	0022      	movs	r2, r4
 8007962:	002b      	movs	r3, r5
 8007964:	f7f8 fda0 	bl	80004a8 <__aeabi_uldivmod>
 8007968:	0002      	movs	r2, r0
 800796a:	000b      	movs	r3, r1
 800796c:	0013      	movs	r3, r2
 800796e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8007970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007972:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007974:	e00d      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_RCC_GetSysClockFreq+0x138>)
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	0b5b      	lsrs	r3, r3, #13
 800797c:	2207      	movs	r2, #7
 800797e:	4013      	ands	r3, r2
 8007980:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	3301      	adds	r3, #1
 8007986:	2280      	movs	r2, #128	; 0x80
 8007988:	0212      	lsls	r2, r2, #8
 800798a:	409a      	lsls	r2, r3
 800798c:	0013      	movs	r3, r2
 800798e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007990:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007994:	0018      	movs	r0, r3
 8007996:	46bd      	mov	sp, r7
 8007998:	b00e      	add	sp, #56	; 0x38
 800799a:	bdb0      	pop	{r4, r5, r7, pc}
 800799c:	40021000 	.word	0x40021000
 80079a0:	003d0900 	.word	0x003d0900
 80079a4:	00f42400 	.word	0x00f42400
 80079a8:	007a1200 	.word	0x007a1200
 80079ac:	0800e208 	.word	0x0800e208

080079b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079b4:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80079b6:	681b      	ldr	r3, [r3, #0]
}
 80079b8:	0018      	movs	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	20000000 	.word	0x20000000

080079c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079c8:	f7ff fff2 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 80079cc:	0001      	movs	r1, r0
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	2207      	movs	r2, #7
 80079d6:	4013      	ands	r3, r2
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80079da:	5cd3      	ldrb	r3, [r2, r3]
 80079dc:	40d9      	lsrs	r1, r3
 80079de:	000b      	movs	r3, r1
}
 80079e0:	0018      	movs	r0, r3
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	40021000 	.word	0x40021000
 80079ec:	0800e200 	.word	0x0800e200

080079f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079f4:	f7ff ffdc 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 80079f8:	0001      	movs	r1, r0
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	0adb      	lsrs	r3, r3, #11
 8007a00:	2207      	movs	r2, #7
 8007a02:	4013      	ands	r3, r2
 8007a04:	4a04      	ldr	r2, [pc, #16]	; (8007a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a06:	5cd3      	ldrb	r3, [r2, r3]
 8007a08:	40d9      	lsrs	r1, r3
 8007a0a:	000b      	movs	r3, r1
}
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	40021000 	.word	0x40021000
 8007a18:	0800e200 	.word	0x0800e200

08007a1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007a24:	2317      	movs	r3, #23
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2220      	movs	r2, #32
 8007a32:	4013      	ands	r3, r2
 8007a34:	d106      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	2380      	movs	r3, #128	; 0x80
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	4013      	ands	r3, r2
 8007a40:	d100      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8007a42:	e0d9      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a44:	4ba4      	ldr	r3, [pc, #656]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a48:	2380      	movs	r3, #128	; 0x80
 8007a4a:	055b      	lsls	r3, r3, #21
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	d10a      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a50:	4ba1      	ldr	r3, [pc, #644]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a54:	4ba0      	ldr	r3, [pc, #640]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a56:	2180      	movs	r1, #128	; 0x80
 8007a58:	0549      	lsls	r1, r1, #21
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007a5e:	2317      	movs	r3, #23
 8007a60:	18fb      	adds	r3, r7, r3
 8007a62:	2201      	movs	r2, #1
 8007a64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a66:	4b9d      	ldr	r3, [pc, #628]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	2380      	movs	r3, #128	; 0x80
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	4013      	ands	r3, r2
 8007a70:	d11a      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a72:	4b9a      	ldr	r3, [pc, #616]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	4b99      	ldr	r3, [pc, #612]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007a78:	2180      	movs	r1, #128	; 0x80
 8007a7a:	0049      	lsls	r1, r1, #1
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a80:	f7fd ffdc 	bl	8005a3c <HAL_GetTick>
 8007a84:	0003      	movs	r3, r0
 8007a86:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a88:	e008      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a8a:	f7fd ffd7 	bl	8005a3c <HAL_GetTick>
 8007a8e:	0002      	movs	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b64      	cmp	r3, #100	; 0x64
 8007a96:	d901      	bls.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e118      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a9c:	4b8f      	ldr	r3, [pc, #572]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	2380      	movs	r3, #128	; 0x80
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	d0f0      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8007aa8:	4b8b      	ldr	r3, [pc, #556]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	23c0      	movs	r3, #192	; 0xc0
 8007aae:	039b      	lsls	r3, r3, #14
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	23c0      	movs	r3, #192	; 0xc0
 8007aba:	039b      	lsls	r3, r3, #14
 8007abc:	4013      	ands	r3, r2
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d107      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	23c0      	movs	r3, #192	; 0xc0
 8007aca:	039b      	lsls	r3, r3, #14
 8007acc:	4013      	ands	r3, r2
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d013      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	23c0      	movs	r3, #192	; 0xc0
 8007ada:	029b      	lsls	r3, r3, #10
 8007adc:	401a      	ands	r2, r3
 8007ade:	23c0      	movs	r3, #192	; 0xc0
 8007ae0:	029b      	lsls	r3, r3, #10
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d10a      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ae6:	4b7c      	ldr	r3, [pc, #496]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	2380      	movs	r3, #128	; 0x80
 8007aec:	029b      	lsls	r3, r3, #10
 8007aee:	401a      	ands	r2, r3
 8007af0:	2380      	movs	r3, #128	; 0x80
 8007af2:	029b      	lsls	r3, r3, #10
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d101      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e0e8      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007afc:	4b76      	ldr	r3, [pc, #472]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b00:	23c0      	movs	r3, #192	; 0xc0
 8007b02:	029b      	lsls	r3, r3, #10
 8007b04:	4013      	ands	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d049      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	23c0      	movs	r3, #192	; 0xc0
 8007b14:	029b      	lsls	r3, r3, #10
 8007b16:	4013      	ands	r3, r2
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d004      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2220      	movs	r2, #32
 8007b24:	4013      	ands	r3, r2
 8007b26:	d10d      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	23c0      	movs	r3, #192	; 0xc0
 8007b2e:	029b      	lsls	r3, r3, #10
 8007b30:	4013      	ands	r3, r2
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d034      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	2380      	movs	r3, #128	; 0x80
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	4013      	ands	r3, r2
 8007b42:	d02e      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007b44:	4b64      	ldr	r3, [pc, #400]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b48:	4a65      	ldr	r2, [pc, #404]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b4e:	4b62      	ldr	r3, [pc, #392]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b52:	4b61      	ldr	r3, [pc, #388]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b54:	2180      	movs	r1, #128	; 0x80
 8007b56:	0309      	lsls	r1, r1, #12
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b5c:	4b5e      	ldr	r3, [pc, #376]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b60:	4b5d      	ldr	r3, [pc, #372]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b62:	4960      	ldr	r1, [pc, #384]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007b64:	400a      	ands	r2, r1
 8007b66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007b68:	4b5b      	ldr	r3, [pc, #364]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	2380      	movs	r3, #128	; 0x80
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	4013      	ands	r3, r2
 8007b76:	d014      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b78:	f7fd ff60 	bl	8005a3c <HAL_GetTick>
 8007b7c:	0003      	movs	r3, r0
 8007b7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b80:	e009      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b82:	f7fd ff5b 	bl	8005a3c <HAL_GetTick>
 8007b86:	0002      	movs	r2, r0
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	4a56      	ldr	r2, [pc, #344]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e09b      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b96:	4b50      	ldr	r3, [pc, #320]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b9a:	2380      	movs	r3, #128	; 0x80
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	d0ef      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	23c0      	movs	r3, #192	; 0xc0
 8007ba8:	029b      	lsls	r3, r3, #10
 8007baa:	401a      	ands	r2, r3
 8007bac:	23c0      	movs	r3, #192	; 0xc0
 8007bae:	029b      	lsls	r3, r3, #10
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d10c      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007bb4:	4b48      	ldr	r3, [pc, #288]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a4c      	ldr	r2, [pc, #304]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	0019      	movs	r1, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	23c0      	movs	r3, #192	; 0xc0
 8007bc4:	039b      	lsls	r3, r3, #14
 8007bc6:	401a      	ands	r2, r3
 8007bc8:	4b43      	ldr	r3, [pc, #268]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	4b42      	ldr	r3, [pc, #264]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bd0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	23c0      	movs	r3, #192	; 0xc0
 8007bd8:	029b      	lsls	r3, r3, #10
 8007bda:	401a      	ands	r2, r3
 8007bdc:	4b3e      	ldr	r3, [pc, #248]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bde:	430a      	orrs	r2, r1
 8007be0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007be2:	2317      	movs	r3, #23
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d105      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bec:	4b3a      	ldr	r3, [pc, #232]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf0:	4b39      	ldr	r3, [pc, #228]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bf2:	493f      	ldr	r1, [pc, #252]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007bf4:	400a      	ands	r2, r1
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d009      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c02:	4b35      	ldr	r3, [pc, #212]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c06:	2203      	movs	r2, #3
 8007c08:	4393      	bics	r3, r2
 8007c0a:	0019      	movs	r1, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	4b31      	ldr	r3, [pc, #196]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c12:	430a      	orrs	r2, r1
 8007c14:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	d009      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c20:	4b2d      	ldr	r3, [pc, #180]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c24:	220c      	movs	r2, #12
 8007c26:	4393      	bics	r3, r2
 8007c28:	0019      	movs	r1, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691a      	ldr	r2, [r3, #16]
 8007c2e:	4b2a      	ldr	r3, [pc, #168]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c30:	430a      	orrs	r2, r1
 8007c32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2204      	movs	r2, #4
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	d009      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c3e:	4b26      	ldr	r3, [pc, #152]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c42:	4a2c      	ldr	r2, [pc, #176]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	0019      	movs	r1, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695a      	ldr	r2, [r3, #20]
 8007c4c:	4b22      	ldr	r3, [pc, #136]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2208      	movs	r2, #8
 8007c58:	4013      	ands	r3, r2
 8007c5a:	d009      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c5c:	4b1e      	ldr	r3, [pc, #120]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c60:	4a25      	ldr	r2, [pc, #148]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	0019      	movs	r1, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	2380      	movs	r3, #128	; 0x80
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	4013      	ands	r3, r2
 8007c7a:	d009      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c7c:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c80:	4a17      	ldr	r2, [pc, #92]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c82:	4013      	ands	r3, r2
 8007c84:	0019      	movs	r1, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69da      	ldr	r2, [r3, #28]
 8007c8a:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2240      	movs	r2, #64	; 0x40
 8007c96:	4013      	ands	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c9a:	4b0f      	ldr	r3, [pc, #60]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9e:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	0019      	movs	r1, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007caa:	430a      	orrs	r2, r1
 8007cac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2280      	movs	r2, #128	; 0x80
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007cb8:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cbc:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	0019      	movs	r1, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1a      	ldr	r2, [r3, #32]
 8007cc6:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	0018      	movs	r0, r3
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	b006      	add	sp, #24
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	40021000 	.word	0x40021000
 8007cdc:	40007000 	.word	0x40007000
 8007ce0:	fffcffff 	.word	0xfffcffff
 8007ce4:	fff7ffff 	.word	0xfff7ffff
 8007ce8:	00001388 	.word	0x00001388
 8007cec:	ffcfffff 	.word	0xffcfffff
 8007cf0:	efffffff 	.word	0xefffffff
 8007cf4:	fffff3ff 	.word	0xfffff3ff
 8007cf8:	ffffcfff 	.word	0xffffcfff
 8007cfc:	fbffffff 	.word	0xfbffffff
 8007d00:	fff3ffff 	.word	0xfff3ffff

08007d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e083      	b.n	8007e1e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	2382      	movs	r3, #130	; 0x82
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d009      	beq.n	8007d3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	61da      	str	r2, [r3, #28]
 8007d30:	e005      	b.n	8007d3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2251      	movs	r2, #81	; 0x51
 8007d48:	5c9b      	ldrb	r3, [r3, r2]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d107      	bne.n	8007d60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2250      	movs	r2, #80	; 0x50
 8007d54:	2100      	movs	r1, #0
 8007d56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f7fc fa00 	bl	8004160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2251      	movs	r2, #81	; 0x51
 8007d64:	2102      	movs	r1, #2
 8007d66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2140      	movs	r1, #64	; 0x40
 8007d74:	438a      	bics	r2, r1
 8007d76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	2382      	movs	r3, #130	; 0x82
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	401a      	ands	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6899      	ldr	r1, [r3, #8]
 8007d86:	2384      	movs	r3, #132	; 0x84
 8007d88:	021b      	lsls	r3, r3, #8
 8007d8a:	400b      	ands	r3, r1
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68d9      	ldr	r1, [r3, #12]
 8007d92:	2380      	movs	r3, #128	; 0x80
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	400b      	ands	r3, r1
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2102      	movs	r1, #2
 8007da0:	400b      	ands	r3, r1
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2101      	movs	r1, #1
 8007daa:	400b      	ands	r3, r1
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6999      	ldr	r1, [r3, #24]
 8007db2:	2380      	movs	r3, #128	; 0x80
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	400b      	ands	r3, r1
 8007db8:	431a      	orrs	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	2138      	movs	r1, #56	; 0x38
 8007dc0:	400b      	ands	r3, r1
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	2180      	movs	r1, #128	; 0x80
 8007dca:	400b      	ands	r3, r1
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	0011      	movs	r1, r2
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dd4:	2380      	movs	r3, #128	; 0x80
 8007dd6:	019b      	lsls	r3, r3, #6
 8007dd8:	401a      	ands	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	2204      	movs	r2, #4
 8007dea:	4013      	ands	r3, r2
 8007dec:	0019      	movs	r1, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	2210      	movs	r2, #16
 8007df4:	401a      	ands	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4907      	ldr	r1, [pc, #28]	; (8007e28 <HAL_SPI_Init+0x124>)
 8007e0a:	400a      	ands	r2, r1
 8007e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2251      	movs	r2, #81	; 0x51
 8007e18:	2101      	movs	r1, #1
 8007e1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	0018      	movs	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b002      	add	sp, #8
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	fffff7ff 	.word	0xfffff7ff

08007e2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	1dbb      	adds	r3, r7, #6
 8007e3a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e3c:	231f      	movs	r3, #31
 8007e3e:	18fb      	adds	r3, r7, r3
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2250      	movs	r2, #80	; 0x50
 8007e48:	5c9b      	ldrb	r3, [r3, r2]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_SPI_Transmit+0x26>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e13e      	b.n	80080d0 <HAL_SPI_Transmit+0x2a4>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2250      	movs	r2, #80	; 0x50
 8007e56:	2101      	movs	r1, #1
 8007e58:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e5a:	f7fd fdef 	bl	8005a3c <HAL_GetTick>
 8007e5e:	0003      	movs	r3, r0
 8007e60:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007e62:	2316      	movs	r3, #22
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	1dba      	adds	r2, r7, #6
 8007e68:	8812      	ldrh	r2, [r2, #0]
 8007e6a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2251      	movs	r2, #81	; 0x51
 8007e70:	5c9b      	ldrb	r3, [r3, r2]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d004      	beq.n	8007e82 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007e78:	231f      	movs	r3, #31
 8007e7a:	18fb      	adds	r3, r7, r3
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e80:	e11b      	b.n	80080ba <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_SPI_Transmit+0x64>
 8007e88:	1dbb      	adds	r3, r7, #6
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007e90:	231f      	movs	r3, #31
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	2201      	movs	r2, #1
 8007e96:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e98:	e10f      	b.n	80080ba <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2251      	movs	r2, #81	; 0x51
 8007e9e:	2103      	movs	r1, #3
 8007ea0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	1dba      	adds	r2, r7, #6
 8007eb2:	8812      	ldrh	r2, [r2, #0]
 8007eb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	1dba      	adds	r2, r7, #6
 8007eba:	8812      	ldrh	r2, [r2, #0]
 8007ebc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	2380      	movs	r3, #128	; 0x80
 8007ee2:	021b      	lsls	r3, r3, #8
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d110      	bne.n	8007f0a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2140      	movs	r1, #64	; 0x40
 8007ef4:	438a      	bics	r2, r1
 8007ef6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2180      	movs	r1, #128	; 0x80
 8007f04:	01c9      	lsls	r1, r1, #7
 8007f06:	430a      	orrs	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2240      	movs	r2, #64	; 0x40
 8007f12:	4013      	ands	r3, r2
 8007f14:	2b40      	cmp	r3, #64	; 0x40
 8007f16:	d007      	beq.n	8007f28 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2140      	movs	r1, #64	; 0x40
 8007f24:	430a      	orrs	r2, r1
 8007f26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	2380      	movs	r3, #128	; 0x80
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d14e      	bne.n	8007fd2 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <HAL_SPI_Transmit+0x11a>
 8007f3c:	2316      	movs	r3, #22
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d13f      	bne.n	8007fc6 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	881a      	ldrh	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	1c9a      	adds	r2, r3, #2
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	3b01      	subs	r3, #1
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f6a:	e02c      	b.n	8007fc6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2202      	movs	r2, #2
 8007f74:	4013      	ands	r3, r2
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d112      	bne.n	8007fa0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7e:	881a      	ldrh	r2, [r3, #0]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	1c9a      	adds	r2, r3, #2
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f9e:	e012      	b.n	8007fc6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fa0:	f7fd fd4c 	bl	8005a3c <HAL_GetTick>
 8007fa4:	0002      	movs	r2, r0
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d802      	bhi.n	8007fb6 <HAL_SPI_Transmit+0x18a>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	d102      	bne.n	8007fbc <HAL_SPI_Transmit+0x190>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8007fbc:	231f      	movs	r3, #31
 8007fbe:	18fb      	adds	r3, r7, r3
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	701a      	strb	r2, [r3, #0]
          goto error;
 8007fc4:	e079      	b.n	80080ba <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1cd      	bne.n	8007f6c <HAL_SPI_Transmit+0x140>
 8007fd0:	e04f      	b.n	8008072 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <HAL_SPI_Transmit+0x1b8>
 8007fda:	2316      	movs	r3, #22
 8007fdc:	18fb      	adds	r3, r7, r3
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d141      	bne.n	8008068 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	330c      	adds	r3, #12
 8007fee:	7812      	ldrb	r2, [r2, #0]
 8007ff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800800a:	e02d      	b.n	8008068 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2202      	movs	r2, #2
 8008014:	4013      	ands	r3, r2
 8008016:	2b02      	cmp	r3, #2
 8008018:	d113      	bne.n	8008042 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	330c      	adds	r3, #12
 8008024:	7812      	ldrb	r2, [r2, #0]
 8008026:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008036:	b29b      	uxth	r3, r3
 8008038:	3b01      	subs	r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008040:	e012      	b.n	8008068 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008042:	f7fd fcfb 	bl	8005a3c <HAL_GetTick>
 8008046:	0002      	movs	r2, r0
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	d802      	bhi.n	8008058 <HAL_SPI_Transmit+0x22c>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	d102      	bne.n	800805e <HAL_SPI_Transmit+0x232>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800805e:	231f      	movs	r3, #31
 8008060:	18fb      	adds	r3, r7, r3
 8008062:	2203      	movs	r2, #3
 8008064:	701a      	strb	r2, [r3, #0]
          goto error;
 8008066:	e028      	b.n	80080ba <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1cc      	bne.n	800800c <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	0018      	movs	r0, r3
 800807a:	f000 fc07 	bl	800888c <SPI_EndRxTxTransaction>
 800807e:	1e03      	subs	r3, r0, #0
 8008080:	d002      	beq.n	8008088 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2220      	movs	r2, #32
 8008086:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008090:	2300      	movs	r3, #0
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	613b      	str	r3, [r7, #16]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80080ae:	231f      	movs	r3, #31
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	2201      	movs	r2, #1
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e000      	b.n	80080ba <HAL_SPI_Transmit+0x28e>
  }

error:
 80080b8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2251      	movs	r2, #81	; 0x51
 80080be:	2101      	movs	r1, #1
 80080c0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2250      	movs	r2, #80	; 0x50
 80080c6:	2100      	movs	r1, #0
 80080c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80080ca:	231f      	movs	r3, #31
 80080cc:	18fb      	adds	r3, r7, r3
 80080ce:	781b      	ldrb	r3, [r3, #0]
}
 80080d0:	0018      	movs	r0, r3
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b008      	add	sp, #32
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080d8:	b590      	push	{r4, r7, lr}
 80080da:	b089      	sub	sp, #36	; 0x24
 80080dc:	af02      	add	r7, sp, #8
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	1dbb      	adds	r3, r7, #6
 80080e6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080e8:	2317      	movs	r3, #23
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	2382      	movs	r3, #130	; 0x82
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d113      	bne.n	8008124 <HAL_SPI_Receive+0x4c>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10f      	bne.n	8008124 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2251      	movs	r2, #81	; 0x51
 8008108:	2104      	movs	r1, #4
 800810a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800810c:	1dbb      	adds	r3, r7, #6
 800810e:	881c      	ldrh	r4, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	0023      	movs	r3, r4
 800811c:	f000 f902 	bl	8008324 <HAL_SPI_TransmitReceive>
 8008120:	0003      	movs	r3, r0
 8008122:	e0f9      	b.n	8008318 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2250      	movs	r2, #80	; 0x50
 8008128:	5c9b      	ldrb	r3, [r3, r2]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_SPI_Receive+0x5a>
 800812e:	2302      	movs	r3, #2
 8008130:	e0f2      	b.n	8008318 <HAL_SPI_Receive+0x240>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2250      	movs	r2, #80	; 0x50
 8008136:	2101      	movs	r1, #1
 8008138:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800813a:	f7fd fc7f 	bl	8005a3c <HAL_GetTick>
 800813e:	0003      	movs	r3, r0
 8008140:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2251      	movs	r2, #81	; 0x51
 8008146:	5c9b      	ldrb	r3, [r3, r2]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d004      	beq.n	8008158 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800814e:	2317      	movs	r3, #23
 8008150:	18fb      	adds	r3, r7, r3
 8008152:	2202      	movs	r2, #2
 8008154:	701a      	strb	r2, [r3, #0]
    goto error;
 8008156:	e0d4      	b.n	8008302 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_SPI_Receive+0x8e>
 800815e:	1dbb      	adds	r3, r7, #6
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8008166:	2317      	movs	r3, #23
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	2201      	movs	r2, #1
 800816c:	701a      	strb	r2, [r3, #0]
    goto error;
 800816e:	e0c8      	b.n	8008302 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2251      	movs	r2, #81	; 0x51
 8008174:	2104      	movs	r1, #4
 8008176:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	1dba      	adds	r2, r7, #6
 8008188:	8812      	ldrh	r2, [r2, #0]
 800818a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	1dba      	adds	r2, r7, #6
 8008190:	8812      	ldrh	r2, [r2, #0]
 8008192:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	2380      	movs	r3, #128	; 0x80
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d10f      	bne.n	80081de <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2140      	movs	r1, #64	; 0x40
 80081ca:	438a      	bics	r2, r1
 80081cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4951      	ldr	r1, [pc, #324]	; (8008320 <HAL_SPI_Receive+0x248>)
 80081da:	400a      	ands	r2, r1
 80081dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2240      	movs	r2, #64	; 0x40
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b40      	cmp	r3, #64	; 0x40
 80081ea:	d007      	beq.n	80081fc <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2140      	movs	r1, #64	; 0x40
 80081f8:	430a      	orrs	r2, r1
 80081fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d164      	bne.n	80082ce <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008204:	e02f      	b.n	8008266 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2201      	movs	r2, #1
 800820e:	4013      	ands	r3, r2
 8008210:	2b01      	cmp	r3, #1
 8008212:	d115      	bne.n	8008240 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	330c      	adds	r3, #12
 800821a:	001a      	movs	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800823e:	e012      	b.n	8008266 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008240:	f7fd fbfc 	bl	8005a3c <HAL_GetTick>
 8008244:	0002      	movs	r2, r0
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d802      	bhi.n	8008256 <HAL_SPI_Receive+0x17e>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	3301      	adds	r3, #1
 8008254:	d102      	bne.n	800825c <HAL_SPI_Receive+0x184>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800825c:	2317      	movs	r3, #23
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	2203      	movs	r2, #3
 8008262:	701a      	strb	r2, [r3, #0]
          goto error;
 8008264:	e04d      	b.n	8008302 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800826a:	b29b      	uxth	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1ca      	bne.n	8008206 <HAL_SPI_Receive+0x12e>
 8008270:	e032      	b.n	80082d8 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2201      	movs	r2, #1
 800827a:	4013      	ands	r3, r2
 800827c:	2b01      	cmp	r3, #1
 800827e:	d113      	bne.n	80082a8 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	b292      	uxth	r2, r2
 800828c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	1c9a      	adds	r2, r3, #2
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082a6:	e012      	b.n	80082ce <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082a8:	f7fd fbc8 	bl	8005a3c <HAL_GetTick>
 80082ac:	0002      	movs	r2, r0
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d802      	bhi.n	80082be <HAL_SPI_Receive+0x1e6>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	3301      	adds	r3, #1
 80082bc:	d102      	bne.n	80082c4 <HAL_SPI_Receive+0x1ec>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d104      	bne.n	80082ce <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80082c4:	2317      	movs	r3, #23
 80082c6:	18fb      	adds	r3, r7, r3
 80082c8:	2203      	movs	r2, #3
 80082ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80082cc:	e019      	b.n	8008302 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1cc      	bne.n	8008272 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	0018      	movs	r0, r3
 80082e0:	f000 fa6a 	bl	80087b8 <SPI_EndRxTransaction>
 80082e4:	1e03      	subs	r3, r0, #0
 80082e6:	d002      	beq.n	80082ee <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2220      	movs	r2, #32
 80082ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 80082f6:	2317      	movs	r3, #23
 80082f8:	18fb      	adds	r3, r7, r3
 80082fa:	2201      	movs	r2, #1
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	e000      	b.n	8008302 <HAL_SPI_Receive+0x22a>
  }

error :
 8008300:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2251      	movs	r2, #81	; 0x51
 8008306:	2101      	movs	r1, #1
 8008308:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2250      	movs	r2, #80	; 0x50
 800830e:	2100      	movs	r1, #0
 8008310:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008312:	2317      	movs	r3, #23
 8008314:	18fb      	adds	r3, r7, r3
 8008316:	781b      	ldrb	r3, [r3, #0]
}
 8008318:	0018      	movs	r0, r3
 800831a:	46bd      	mov	sp, r7
 800831c:	b007      	add	sp, #28
 800831e:	bd90      	pop	{r4, r7, pc}
 8008320:	ffffbfff 	.word	0xffffbfff

08008324 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08c      	sub	sp, #48	; 0x30
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	001a      	movs	r2, r3
 8008332:	1cbb      	adds	r3, r7, #2
 8008334:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008336:	2301      	movs	r3, #1
 8008338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800833a:	232b      	movs	r3, #43	; 0x2b
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2250      	movs	r2, #80	; 0x50
 8008346:	5c9b      	ldrb	r3, [r3, r2]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <HAL_SPI_TransmitReceive+0x2c>
 800834c:	2302      	movs	r3, #2
 800834e:	e1a0      	b.n	8008692 <HAL_SPI_TransmitReceive+0x36e>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2250      	movs	r2, #80	; 0x50
 8008354:	2101      	movs	r1, #1
 8008356:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008358:	f7fd fb70 	bl	8005a3c <HAL_GetTick>
 800835c:	0003      	movs	r3, r0
 800835e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008360:	2023      	movs	r0, #35	; 0x23
 8008362:	183b      	adds	r3, r7, r0
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	2151      	movs	r1, #81	; 0x51
 8008368:	5c52      	ldrb	r2, [r2, r1]
 800836a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008372:	231a      	movs	r3, #26
 8008374:	18fb      	adds	r3, r7, r3
 8008376:	1cba      	adds	r2, r7, #2
 8008378:	8812      	ldrh	r2, [r2, #0]
 800837a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800837c:	183b      	adds	r3, r7, r0
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d011      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x84>
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	2382      	movs	r3, #130	; 0x82
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	429a      	cmp	r2, r3
 800838c:	d107      	bne.n	800839e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d103      	bne.n	800839e <HAL_SPI_TransmitReceive+0x7a>
 8008396:	183b      	adds	r3, r7, r0
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b04      	cmp	r3, #4
 800839c:	d004      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800839e:	232b      	movs	r3, #43	; 0x2b
 80083a0:	18fb      	adds	r3, r7, r3
 80083a2:	2202      	movs	r2, #2
 80083a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80083a6:	e169      	b.n	800867c <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d006      	beq.n	80083bc <HAL_SPI_TransmitReceive+0x98>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <HAL_SPI_TransmitReceive+0x98>
 80083b4:	1cbb      	adds	r3, r7, #2
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80083bc:	232b      	movs	r3, #43	; 0x2b
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	2201      	movs	r2, #1
 80083c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80083c4:	e15a      	b.n	800867c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2251      	movs	r2, #81	; 0x51
 80083ca:	5c9b      	ldrb	r3, [r3, r2]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d003      	beq.n	80083da <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2251      	movs	r2, #81	; 0x51
 80083d6:	2105      	movs	r1, #5
 80083d8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1cba      	adds	r2, r7, #2
 80083ea:	8812      	ldrh	r2, [r2, #0]
 80083ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1cba      	adds	r2, r7, #2
 80083f2:	8812      	ldrh	r2, [r2, #0]
 80083f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	1cba      	adds	r2, r7, #2
 8008400:	8812      	ldrh	r2, [r2, #0]
 8008402:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	1cba      	adds	r2, r7, #2
 8008408:	8812      	ldrh	r2, [r2, #0]
 800840a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	4013      	ands	r3, r2
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d007      	beq.n	8008436 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2140      	movs	r1, #64	; 0x40
 8008432:	430a      	orrs	r2, r1
 8008434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	2380      	movs	r3, #128	; 0x80
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	429a      	cmp	r2, r3
 8008440:	d000      	beq.n	8008444 <HAL_SPI_TransmitReceive+0x120>
 8008442:	e07a      	b.n	800853a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <HAL_SPI_TransmitReceive+0x132>
 800844c:	231a      	movs	r3, #26
 800844e:	18fb      	adds	r3, r7, r3
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d166      	bne.n	8008524 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	881a      	ldrh	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	1c9a      	adds	r2, r3, #2
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800847a:	e053      	b.n	8008524 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2202      	movs	r2, #2
 8008484:	4013      	ands	r3, r2
 8008486:	2b02      	cmp	r3, #2
 8008488:	d11b      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x19e>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800848e:	b29b      	uxth	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d016      	beq.n	80084c2 <HAL_SPI_TransmitReceive+0x19e>
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	2b01      	cmp	r3, #1
 8008498:	d113      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	881a      	ldrh	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	1c9a      	adds	r2, r3, #2
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	2201      	movs	r2, #1
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d119      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x1e0>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	b292      	uxth	r2, r2
 80084e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008500:	2301      	movs	r3, #1
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008504:	f7fd fa9a 	bl	8005a3c <HAL_GetTick>
 8008508:	0002      	movs	r2, r0
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008510:	429a      	cmp	r2, r3
 8008512:	d807      	bhi.n	8008524 <HAL_SPI_TransmitReceive+0x200>
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	3301      	adds	r3, #1
 8008518:	d004      	beq.n	8008524 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800851a:	232b      	movs	r3, #43	; 0x2b
 800851c:	18fb      	adds	r3, r7, r3
 800851e:	2203      	movs	r2, #3
 8008520:	701a      	strb	r2, [r3, #0]
        goto error;
 8008522:	e0ab      	b.n	800867c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1a6      	bne.n	800847c <HAL_SPI_TransmitReceive+0x158>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1a1      	bne.n	800847c <HAL_SPI_TransmitReceive+0x158>
 8008538:	e07f      	b.n	800863a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d005      	beq.n	800854e <HAL_SPI_TransmitReceive+0x22a>
 8008542:	231a      	movs	r3, #26
 8008544:	18fb      	adds	r3, r7, r3
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d000      	beq.n	800854e <HAL_SPI_TransmitReceive+0x22a>
 800854c:	e06b      	b.n	8008626 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	330c      	adds	r3, #12
 8008558:	7812      	ldrb	r2, [r2, #0]
 800855a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008574:	e057      	b.n	8008626 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2202      	movs	r2, #2
 800857e:	4013      	ands	r3, r2
 8008580:	2b02      	cmp	r3, #2
 8008582:	d11c      	bne.n	80085be <HAL_SPI_TransmitReceive+0x29a>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d017      	beq.n	80085be <HAL_SPI_TransmitReceive+0x29a>
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d114      	bne.n	80085be <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	330c      	adds	r3, #12
 800859e:	7812      	ldrb	r2, [r2, #0]
 80085a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	2201      	movs	r2, #1
 80085c6:	4013      	ands	r3, r2
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d119      	bne.n	8008600 <HAL_SPI_TransmitReceive+0x2dc>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d014      	beq.n	8008600 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	b2d2      	uxtb	r2, r2
 80085e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085fc:	2301      	movs	r3, #1
 80085fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008600:	f7fd fa1c 	bl	8005a3c <HAL_GetTick>
 8008604:	0002      	movs	r2, r0
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800860c:	429a      	cmp	r2, r3
 800860e:	d802      	bhi.n	8008616 <HAL_SPI_TransmitReceive+0x2f2>
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	3301      	adds	r3, #1
 8008614:	d102      	bne.n	800861c <HAL_SPI_TransmitReceive+0x2f8>
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800861c:	232b      	movs	r3, #43	; 0x2b
 800861e:	18fb      	adds	r3, r7, r3
 8008620:	2203      	movs	r2, #3
 8008622:	701a      	strb	r2, [r3, #0]
        goto error;
 8008624:	e02a      	b.n	800867c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1a2      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x252>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d19d      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800863a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	0018      	movs	r0, r3
 8008642:	f000 f923 	bl	800888c <SPI_EndRxTxTransaction>
 8008646:	1e03      	subs	r3, r0, #0
 8008648:	d007      	beq.n	800865a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800864a:	232b      	movs	r3, #43	; 0x2b
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	2201      	movs	r2, #1
 8008650:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2220      	movs	r2, #32
 8008656:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008658:	e010      	b.n	800867c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	e000      	b.n	800867c <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800867a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2251      	movs	r2, #81	; 0x51
 8008680:	2101      	movs	r1, #1
 8008682:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2250      	movs	r2, #80	; 0x50
 8008688:	2100      	movs	r1, #0
 800868a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800868c:	232b      	movs	r3, #43	; 0x2b
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	781b      	ldrb	r3, [r3, #0]
}
 8008692:	0018      	movs	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	b00c      	add	sp, #48	; 0x30
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	1dfb      	adds	r3, r7, #7
 80086aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086ac:	f7fd f9c6 	bl	8005a3c <HAL_GetTick>
 80086b0:	0002      	movs	r2, r0
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	18d3      	adds	r3, r2, r3
 80086ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086bc:	f7fd f9be 	bl	8005a3c <HAL_GetTick>
 80086c0:	0003      	movs	r3, r0
 80086c2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086c4:	4b3a      	ldr	r3, [pc, #232]	; (80087b0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	015b      	lsls	r3, r3, #5
 80086ca:	0d1b      	lsrs	r3, r3, #20
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	4353      	muls	r3, r2
 80086d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086d2:	e058      	b.n	8008786 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	3301      	adds	r3, #1
 80086d8:	d055      	beq.n	8008786 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086da:	f7fd f9af 	bl	8005a3c <HAL_GetTick>
 80086de:	0002      	movs	r2, r0
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d902      	bls.n	80086f0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d142      	bne.n	8008776 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	21e0      	movs	r1, #224	; 0xe0
 80086fc:	438a      	bics	r2, r1
 80086fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	2382      	movs	r3, #130	; 0x82
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	429a      	cmp	r2, r3
 800870a:	d113      	bne.n	8008734 <SPI_WaitFlagStateUntilTimeout+0x98>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	2380      	movs	r3, #128	; 0x80
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	429a      	cmp	r2, r3
 8008716:	d005      	beq.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	2380      	movs	r3, #128	; 0x80
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	429a      	cmp	r2, r3
 8008722:	d107      	bne.n	8008734 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2140      	movs	r1, #64	; 0x40
 8008730:	438a      	bics	r2, r1
 8008732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008738:	2380      	movs	r3, #128	; 0x80
 800873a:	019b      	lsls	r3, r3, #6
 800873c:	429a      	cmp	r2, r3
 800873e:	d110      	bne.n	8008762 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	491a      	ldr	r1, [pc, #104]	; (80087b4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800874c:	400a      	ands	r2, r1
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2180      	movs	r1, #128	; 0x80
 800875c:	0189      	lsls	r1, r1, #6
 800875e:	430a      	orrs	r2, r1
 8008760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2251      	movs	r2, #81	; 0x51
 8008766:	2101      	movs	r1, #1
 8008768:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2250      	movs	r2, #80	; 0x50
 800876e:	2100      	movs	r1, #0
 8008770:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e017      	b.n	80087a6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	3b01      	subs	r3, #1
 8008784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	4013      	ands	r3, r2
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	425a      	negs	r2, r3
 8008796:	4153      	adcs	r3, r2
 8008798:	b2db      	uxtb	r3, r3
 800879a:	001a      	movs	r2, r3
 800879c:	1dfb      	adds	r3, r7, #7
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d197      	bne.n	80086d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	0018      	movs	r0, r3
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b008      	add	sp, #32
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	20000000 	.word	0x20000000
 80087b4:	ffffdfff 	.word	0xffffdfff

080087b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af02      	add	r7, sp, #8
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	2382      	movs	r3, #130	; 0x82
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d113      	bne.n	80087f8 <SPI_EndRxTransaction+0x40>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	2380      	movs	r3, #128	; 0x80
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	429a      	cmp	r2, r3
 80087da:	d005      	beq.n	80087e8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	2380      	movs	r3, #128	; 0x80
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d107      	bne.n	80087f8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2140      	movs	r1, #64	; 0x40
 80087f4:	438a      	bics	r2, r1
 80087f6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	2382      	movs	r3, #130	; 0x82
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	429a      	cmp	r2, r3
 8008802:	d12b      	bne.n	800885c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	2380      	movs	r3, #128	; 0x80
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	429a      	cmp	r2, r3
 800880e:	d012      	beq.n	8008836 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	0013      	movs	r3, r2
 800881a:	2200      	movs	r2, #0
 800881c:	2180      	movs	r1, #128	; 0x80
 800881e:	f7ff ff3d 	bl	800869c <SPI_WaitFlagStateUntilTimeout>
 8008822:	1e03      	subs	r3, r0, #0
 8008824:	d02d      	beq.n	8008882 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882a:	2220      	movs	r2, #32
 800882c:	431a      	orrs	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e026      	b.n	8008884 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	0013      	movs	r3, r2
 8008840:	2200      	movs	r2, #0
 8008842:	2101      	movs	r1, #1
 8008844:	f7ff ff2a 	bl	800869c <SPI_WaitFlagStateUntilTimeout>
 8008848:	1e03      	subs	r3, r0, #0
 800884a:	d01a      	beq.n	8008882 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008850:	2220      	movs	r2, #32
 8008852:	431a      	orrs	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e013      	b.n	8008884 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	0013      	movs	r3, r2
 8008866:	2200      	movs	r2, #0
 8008868:	2101      	movs	r1, #1
 800886a:	f7ff ff17 	bl	800869c <SPI_WaitFlagStateUntilTimeout>
 800886e:	1e03      	subs	r3, r0, #0
 8008870:	d007      	beq.n	8008882 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008876:	2220      	movs	r2, #32
 8008878:	431a      	orrs	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e000      	b.n	8008884 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	0018      	movs	r0, r3
 8008886:	46bd      	mov	sp, r7
 8008888:	b004      	add	sp, #16
 800888a:	bd80      	pop	{r7, pc}

0800888c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af02      	add	r7, sp, #8
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008898:	4b1d      	ldr	r3, [pc, #116]	; (8008910 <SPI_EndRxTxTransaction+0x84>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	491d      	ldr	r1, [pc, #116]	; (8008914 <SPI_EndRxTxTransaction+0x88>)
 800889e:	0018      	movs	r0, r3
 80088a0:	f7f7 fc4e 	bl	8000140 <__udivsi3>
 80088a4:	0003      	movs	r3, r0
 80088a6:	001a      	movs	r2, r3
 80088a8:	0013      	movs	r3, r2
 80088aa:	015b      	lsls	r3, r3, #5
 80088ac:	1a9b      	subs	r3, r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	189b      	adds	r3, r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	2382      	movs	r3, #130	; 0x82
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	429a      	cmp	r2, r3
 80088c0:	d112      	bne.n	80088e8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	0013      	movs	r3, r2
 80088cc:	2200      	movs	r2, #0
 80088ce:	2180      	movs	r1, #128	; 0x80
 80088d0:	f7ff fee4 	bl	800869c <SPI_WaitFlagStateUntilTimeout>
 80088d4:	1e03      	subs	r3, r0, #0
 80088d6:	d016      	beq.n	8008906 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088dc:	2220      	movs	r2, #32
 80088de:	431a      	orrs	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e00f      	b.n	8008908 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00a      	beq.n	8008904 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	2280      	movs	r2, #128	; 0x80
 80088fc:	4013      	ands	r3, r2
 80088fe:	2b80      	cmp	r3, #128	; 0x80
 8008900:	d0f2      	beq.n	80088e8 <SPI_EndRxTxTransaction+0x5c>
 8008902:	e000      	b.n	8008906 <SPI_EndRxTxTransaction+0x7a>
        break;
 8008904:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	0018      	movs	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	b006      	add	sp, #24
 800890e:	bd80      	pop	{r7, pc}
 8008910:	20000000 	.word	0x20000000
 8008914:	016e3600 	.word	0x016e3600

08008918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e032      	b.n	8008990 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2239      	movs	r2, #57	; 0x39
 800892e:	5c9b      	ldrb	r3, [r3, r2]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d107      	bne.n	8008946 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2238      	movs	r2, #56	; 0x38
 800893a:	2100      	movs	r1, #0
 800893c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	0018      	movs	r0, r3
 8008942:	f7fb ff67 	bl	8004814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2239      	movs	r2, #57	; 0x39
 800894a:	2102      	movs	r1, #2
 800894c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3304      	adds	r3, #4
 8008956:	0019      	movs	r1, r3
 8008958:	0010      	movs	r0, r2
 800895a:	f000 fe67 	bl	800962c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	223e      	movs	r2, #62	; 0x3e
 8008962:	2101      	movs	r1, #1
 8008964:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	223a      	movs	r2, #58	; 0x3a
 800896a:	2101      	movs	r1, #1
 800896c:	5499      	strb	r1, [r3, r2]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	223b      	movs	r2, #59	; 0x3b
 8008972:	2101      	movs	r1, #1
 8008974:	5499      	strb	r1, [r3, r2]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	223c      	movs	r2, #60	; 0x3c
 800897a:	2101      	movs	r1, #1
 800897c:	5499      	strb	r1, [r3, r2]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	223d      	movs	r2, #61	; 0x3d
 8008982:	2101      	movs	r1, #1
 8008984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2239      	movs	r2, #57	; 0x39
 800898a:	2101      	movs	r1, #1
 800898c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	0018      	movs	r0, r3
 8008992:	46bd      	mov	sp, r7
 8008994:	b002      	add	sp, #8
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2239      	movs	r2, #57	; 0x39
 80089a4:	5c9b      	ldrb	r3, [r3, r2]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d001      	beq.n	80089b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e033      	b.n	8008a18 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2239      	movs	r2, #57	; 0x39
 80089b4:	2102      	movs	r1, #2
 80089b6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	2380      	movs	r3, #128	; 0x80
 80089be:	05db      	lsls	r3, r3, #23
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d00e      	beq.n	80089e2 <HAL_TIM_Base_Start+0x4a>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <HAL_TIM_Base_Start+0x88>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d009      	beq.n	80089e2 <HAL_TIM_Base_Start+0x4a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a14      	ldr	r2, [pc, #80]	; (8008a24 <HAL_TIM_Base_Start+0x8c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d004      	beq.n	80089e2 <HAL_TIM_Base_Start+0x4a>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <HAL_TIM_Base_Start+0x90>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d111      	bne.n	8008a06 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	2207      	movs	r2, #7
 80089ea:	4013      	ands	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b06      	cmp	r3, #6
 80089f2:	d010      	beq.n	8008a16 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2101      	movs	r1, #1
 8008a00:	430a      	orrs	r2, r1
 8008a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a04:	e007      	b.n	8008a16 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2101      	movs	r1, #1
 8008a12:	430a      	orrs	r2, r1
 8008a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	0018      	movs	r0, r3
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	b004      	add	sp, #16
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	40000400 	.word	0x40000400
 8008a24:	40010800 	.word	0x40010800
 8008a28:	40011400 	.word	0x40011400

08008a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2239      	movs	r2, #57	; 0x39
 8008a38:	5c9b      	ldrb	r3, [r3, r2]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d001      	beq.n	8008a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e03b      	b.n	8008abc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2239      	movs	r2, #57	; 0x39
 8008a48:	2102      	movs	r1, #2
 8008a4a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2101      	movs	r1, #1
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	2380      	movs	r3, #128	; 0x80
 8008a62:	05db      	lsls	r3, r3, #23
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d00e      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x5a>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a15      	ldr	r2, [pc, #84]	; (8008ac4 <HAL_TIM_Base_Start_IT+0x98>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d009      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x5a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a14      	ldr	r2, [pc, #80]	; (8008ac8 <HAL_TIM_Base_Start_IT+0x9c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d004      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x5a>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a12      	ldr	r2, [pc, #72]	; (8008acc <HAL_TIM_Base_Start_IT+0xa0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d111      	bne.n	8008aaa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	4013      	ands	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b06      	cmp	r3, #6
 8008a96:	d010      	beq.n	8008aba <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa8:	e007      	b.n	8008aba <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	0018      	movs	r0, r3
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	b004      	add	sp, #16
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	40000400 	.word	0x40000400
 8008ac8:	40010800 	.word	0x40010800
 8008acc:	40011400 	.word	0x40011400

08008ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e032      	b.n	8008b48 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2239      	movs	r2, #57	; 0x39
 8008ae6:	5c9b      	ldrb	r3, [r3, r2]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d107      	bne.n	8008afe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2238      	movs	r2, #56	; 0x38
 8008af2:	2100      	movs	r1, #0
 8008af4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0018      	movs	r0, r3
 8008afa:	f000 f829 	bl	8008b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2239      	movs	r2, #57	; 0x39
 8008b02:	2102      	movs	r1, #2
 8008b04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	0019      	movs	r1, r3
 8008b10:	0010      	movs	r0, r2
 8008b12:	f000 fd8b 	bl	800962c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	223e      	movs	r2, #62	; 0x3e
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	223a      	movs	r2, #58	; 0x3a
 8008b22:	2101      	movs	r1, #1
 8008b24:	5499      	strb	r1, [r3, r2]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	223b      	movs	r2, #59	; 0x3b
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	5499      	strb	r1, [r3, r2]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	223c      	movs	r2, #60	; 0x3c
 8008b32:	2101      	movs	r1, #1
 8008b34:	5499      	strb	r1, [r3, r2]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	223d      	movs	r2, #61	; 0x3d
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2239      	movs	r2, #57	; 0x39
 8008b42:	2101      	movs	r1, #1
 8008b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	0018      	movs	r0, r3
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	b002      	add	sp, #8
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b58:	46c0      	nop			; (mov r8, r8)
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	b002      	add	sp, #8
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d108      	bne.n	8008b82 <HAL_TIM_PWM_Start+0x22>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	223a      	movs	r2, #58	; 0x3a
 8008b74:	5c9b      	ldrb	r3, [r3, r2]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	1e5a      	subs	r2, r3, #1
 8008b7c:	4193      	sbcs	r3, r2
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	e01f      	b.n	8008bc2 <HAL_TIM_PWM_Start+0x62>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d108      	bne.n	8008b9a <HAL_TIM_PWM_Start+0x3a>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	223b      	movs	r2, #59	; 0x3b
 8008b8c:	5c9b      	ldrb	r3, [r3, r2]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	3b01      	subs	r3, #1
 8008b92:	1e5a      	subs	r2, r3, #1
 8008b94:	4193      	sbcs	r3, r2
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	e013      	b.n	8008bc2 <HAL_TIM_PWM_Start+0x62>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d108      	bne.n	8008bb2 <HAL_TIM_PWM_Start+0x52>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	223c      	movs	r2, #60	; 0x3c
 8008ba4:	5c9b      	ldrb	r3, [r3, r2]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	1e5a      	subs	r2, r3, #1
 8008bac:	4193      	sbcs	r3, r2
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	e007      	b.n	8008bc2 <HAL_TIM_PWM_Start+0x62>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	223d      	movs	r2, #61	; 0x3d
 8008bb6:	5c9b      	ldrb	r3, [r3, r2]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	1e5a      	subs	r2, r3, #1
 8008bbe:	4193      	sbcs	r3, r2
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e052      	b.n	8008c70 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <HAL_TIM_PWM_Start+0x7a>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	223a      	movs	r2, #58	; 0x3a
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	5499      	strb	r1, [r3, r2]
 8008bd8:	e013      	b.n	8008c02 <HAL_TIM_PWM_Start+0xa2>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_PWM_Start+0x8a>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	223b      	movs	r2, #59	; 0x3b
 8008be4:	2102      	movs	r1, #2
 8008be6:	5499      	strb	r1, [r3, r2]
 8008be8:	e00b      	b.n	8008c02 <HAL_TIM_PWM_Start+0xa2>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_PWM_Start+0x9a>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	223c      	movs	r2, #60	; 0x3c
 8008bf4:	2102      	movs	r1, #2
 8008bf6:	5499      	strb	r1, [r3, r2]
 8008bf8:	e003      	b.n	8008c02 <HAL_TIM_PWM_Start+0xa2>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	223d      	movs	r2, #61	; 0x3d
 8008bfe:	2102      	movs	r1, #2
 8008c00:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f001 f82e 	bl	8009c6c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	2380      	movs	r3, #128	; 0x80
 8008c16:	05db      	lsls	r3, r3, #23
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d00e      	beq.n	8008c3a <HAL_TIM_PWM_Start+0xda>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a15      	ldr	r2, [pc, #84]	; (8008c78 <HAL_TIM_PWM_Start+0x118>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d009      	beq.n	8008c3a <HAL_TIM_PWM_Start+0xda>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a14      	ldr	r2, [pc, #80]	; (8008c7c <HAL_TIM_PWM_Start+0x11c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d004      	beq.n	8008c3a <HAL_TIM_PWM_Start+0xda>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a12      	ldr	r2, [pc, #72]	; (8008c80 <HAL_TIM_PWM_Start+0x120>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d111      	bne.n	8008c5e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2207      	movs	r2, #7
 8008c42:	4013      	ands	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b06      	cmp	r3, #6
 8008c4a:	d010      	beq.n	8008c6e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2101      	movs	r1, #1
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5c:	e007      	b.n	8008c6e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2101      	movs	r1, #1
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	0018      	movs	r0, r3
 8008c72:	46bd      	mov	sp, r7
 8008c74:	b004      	add	sp, #16
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	40000400 	.word	0x40000400
 8008c7c:	40010800 	.word	0x40010800
 8008c80:	40011400 	.word	0x40011400

08008c84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e032      	b.n	8008cfc <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2239      	movs	r2, #57	; 0x39
 8008c9a:	5c9b      	ldrb	r3, [r3, r2]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d107      	bne.n	8008cb2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2238      	movs	r2, #56	; 0x38
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	0018      	movs	r0, r3
 8008cae:	f7fb fd67 	bl	8004780 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2239      	movs	r2, #57	; 0x39
 8008cb6:	2102      	movs	r1, #2
 8008cb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	0019      	movs	r1, r3
 8008cc4:	0010      	movs	r0, r2
 8008cc6:	f000 fcb1 	bl	800962c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	223e      	movs	r2, #62	; 0x3e
 8008cce:	2101      	movs	r1, #1
 8008cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	223a      	movs	r2, #58	; 0x3a
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	5499      	strb	r1, [r3, r2]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	223b      	movs	r2, #59	; 0x3b
 8008cde:	2101      	movs	r1, #1
 8008ce0:	5499      	strb	r1, [r3, r2]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	223c      	movs	r2, #60	; 0x3c
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	5499      	strb	r1, [r3, r2]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	223d      	movs	r2, #61	; 0x3d
 8008cee:	2101      	movs	r1, #1
 8008cf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2239      	movs	r2, #57	; 0x39
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	0018      	movs	r0, r3
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	b002      	add	sp, #8
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <HAL_TIM_IC_Start+0x1a>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	223a      	movs	r2, #58	; 0x3a
 8008d18:	5c9b      	ldrb	r3, [r3, r2]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	e013      	b.n	8008d46 <HAL_TIM_IC_Start+0x42>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d104      	bne.n	8008d2e <HAL_TIM_IC_Start+0x2a>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	223b      	movs	r2, #59	; 0x3b
 8008d28:	5c9b      	ldrb	r3, [r3, r2]
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	e00b      	b.n	8008d46 <HAL_TIM_IC_Start+0x42>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d104      	bne.n	8008d3e <HAL_TIM_IC_Start+0x3a>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	223c      	movs	r2, #60	; 0x3c
 8008d38:	5c9b      	ldrb	r3, [r3, r2]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	e003      	b.n	8008d46 <HAL_TIM_IC_Start+0x42>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	223d      	movs	r2, #61	; 0x3d
 8008d42:	5c9b      	ldrb	r3, [r3, r2]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	210f      	movs	r1, #15
 8008d48:	187a      	adds	r2, r7, r1
 8008d4a:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d4c:	187b      	adds	r3, r7, r1
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d001      	beq.n	8008d58 <HAL_TIM_IC_Start+0x54>
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e052      	b.n	8008dfe <HAL_TIM_IC_Start+0xfa>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <HAL_TIM_IC_Start+0x64>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	223a      	movs	r2, #58	; 0x3a
 8008d62:	2102      	movs	r1, #2
 8008d64:	5499      	strb	r1, [r3, r2]
 8008d66:	e013      	b.n	8008d90 <HAL_TIM_IC_Start+0x8c>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d104      	bne.n	8008d78 <HAL_TIM_IC_Start+0x74>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	223b      	movs	r2, #59	; 0x3b
 8008d72:	2102      	movs	r1, #2
 8008d74:	5499      	strb	r1, [r3, r2]
 8008d76:	e00b      	b.n	8008d90 <HAL_TIM_IC_Start+0x8c>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b08      	cmp	r3, #8
 8008d7c:	d104      	bne.n	8008d88 <HAL_TIM_IC_Start+0x84>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	223c      	movs	r2, #60	; 0x3c
 8008d82:	2102      	movs	r1, #2
 8008d84:	5499      	strb	r1, [r3, r2]
 8008d86:	e003      	b.n	8008d90 <HAL_TIM_IC_Start+0x8c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	223d      	movs	r2, #61	; 0x3d
 8008d8c:	2102      	movs	r1, #2
 8008d8e:	5499      	strb	r1, [r3, r2]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	2201      	movs	r2, #1
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f000 ff67 	bl	8009c6c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	2380      	movs	r3, #128	; 0x80
 8008da4:	05db      	lsls	r3, r3, #23
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d00e      	beq.n	8008dc8 <HAL_TIM_IC_Start+0xc4>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a16      	ldr	r2, [pc, #88]	; (8008e08 <HAL_TIM_IC_Start+0x104>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d009      	beq.n	8008dc8 <HAL_TIM_IC_Start+0xc4>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a14      	ldr	r2, [pc, #80]	; (8008e0c <HAL_TIM_IC_Start+0x108>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d004      	beq.n	8008dc8 <HAL_TIM_IC_Start+0xc4>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a13      	ldr	r2, [pc, #76]	; (8008e10 <HAL_TIM_IC_Start+0x10c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d111      	bne.n	8008dec <HAL_TIM_IC_Start+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2207      	movs	r2, #7
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b06      	cmp	r3, #6
 8008dd8:	d010      	beq.n	8008dfc <HAL_TIM_IC_Start+0xf8>
    {
      __HAL_TIM_ENABLE(htim);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2101      	movs	r1, #1
 8008de6:	430a      	orrs	r2, r1
 8008de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dea:	e007      	b.n	8008dfc <HAL_TIM_IC_Start+0xf8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2101      	movs	r1, #1
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	0018      	movs	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b004      	add	sp, #16
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	40000400 	.word	0x40000400
 8008e0c:	40010800 	.word	0x40010800
 8008e10:	40011400 	.word	0x40011400

08008e14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e1e:	230f      	movs	r3, #15
 8008e20:	18fb      	adds	r3, r7, r3
 8008e22:	2200      	movs	r2, #0
 8008e24:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <HAL_TIM_IC_Start_IT+0x22>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	223a      	movs	r2, #58	; 0x3a
 8008e30:	5c9b      	ldrb	r3, [r3, r2]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	e013      	b.n	8008e5e <HAL_TIM_IC_Start_IT+0x4a>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d104      	bne.n	8008e46 <HAL_TIM_IC_Start_IT+0x32>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	223b      	movs	r2, #59	; 0x3b
 8008e40:	5c9b      	ldrb	r3, [r3, r2]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	e00b      	b.n	8008e5e <HAL_TIM_IC_Start_IT+0x4a>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b08      	cmp	r3, #8
 8008e4a:	d104      	bne.n	8008e56 <HAL_TIM_IC_Start_IT+0x42>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	223c      	movs	r2, #60	; 0x3c
 8008e50:	5c9b      	ldrb	r3, [r3, r2]
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	e003      	b.n	8008e5e <HAL_TIM_IC_Start_IT+0x4a>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	223d      	movs	r2, #61	; 0x3d
 8008e5a:	5c9b      	ldrb	r3, [r3, r2]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	210e      	movs	r1, #14
 8008e60:	187a      	adds	r2, r7, r1
 8008e62:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e64:	187b      	adds	r3, r7, r1
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d001      	beq.n	8008e70 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e095      	b.n	8008f9c <HAL_TIM_IC_Start_IT+0x188>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d104      	bne.n	8008e80 <HAL_TIM_IC_Start_IT+0x6c>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	223a      	movs	r2, #58	; 0x3a
 8008e7a:	2102      	movs	r1, #2
 8008e7c:	5499      	strb	r1, [r3, r2]
 8008e7e:	e013      	b.n	8008ea8 <HAL_TIM_IC_Start_IT+0x94>
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d104      	bne.n	8008e90 <HAL_TIM_IC_Start_IT+0x7c>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	223b      	movs	r2, #59	; 0x3b
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	5499      	strb	r1, [r3, r2]
 8008e8e:	e00b      	b.n	8008ea8 <HAL_TIM_IC_Start_IT+0x94>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d104      	bne.n	8008ea0 <HAL_TIM_IC_Start_IT+0x8c>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	223c      	movs	r2, #60	; 0x3c
 8008e9a:	2102      	movs	r1, #2
 8008e9c:	5499      	strb	r1, [r3, r2]
 8008e9e:	e003      	b.n	8008ea8 <HAL_TIM_IC_Start_IT+0x94>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	223d      	movs	r2, #61	; 0x3d
 8008ea4:	2102      	movs	r1, #2
 8008ea6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2b0c      	cmp	r3, #12
 8008eac:	d02a      	beq.n	8008f04 <HAL_TIM_IC_Start_IT+0xf0>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b0c      	cmp	r3, #12
 8008eb2:	d830      	bhi.n	8008f16 <HAL_TIM_IC_Start_IT+0x102>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b08      	cmp	r3, #8
 8008eb8:	d01b      	beq.n	8008ef2 <HAL_TIM_IC_Start_IT+0xde>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d82a      	bhi.n	8008f16 <HAL_TIM_IC_Start_IT+0x102>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_TIM_IC_Start_IT+0xba>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d009      	beq.n	8008ee0 <HAL_TIM_IC_Start_IT+0xcc>
 8008ecc:	e023      	b.n	8008f16 <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2102      	movs	r1, #2
 8008eda:	430a      	orrs	r2, r1
 8008edc:	60da      	str	r2, [r3, #12]
      break;
 8008ede:	e01f      	b.n	8008f20 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2104      	movs	r1, #4
 8008eec:	430a      	orrs	r2, r1
 8008eee:	60da      	str	r2, [r3, #12]
      break;
 8008ef0:	e016      	b.n	8008f20 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2108      	movs	r1, #8
 8008efe:	430a      	orrs	r2, r1
 8008f00:	60da      	str	r2, [r3, #12]
      break;
 8008f02:	e00d      	b.n	8008f20 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2110      	movs	r1, #16
 8008f10:	430a      	orrs	r2, r1
 8008f12:	60da      	str	r2, [r3, #12]
      break;
 8008f14:	e004      	b.n	8008f20 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8008f16:	230f      	movs	r3, #15
 8008f18:	18fb      	adds	r3, r7, r3
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	701a      	strb	r2, [r3, #0]
      break;
 8008f1e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8008f20:	230f      	movs	r3, #15
 8008f22:	18fb      	adds	r3, r7, r3
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d135      	bne.n	8008f96 <HAL_TIM_IC_Start_IT+0x182>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	2201      	movs	r2, #1
 8008f32:	0018      	movs	r0, r3
 8008f34:	f000 fe9a 	bl	8009c6c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	2380      	movs	r3, #128	; 0x80
 8008f3e:	05db      	lsls	r3, r3, #23
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d00e      	beq.n	8008f62 <HAL_TIM_IC_Start_IT+0x14e>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a16      	ldr	r2, [pc, #88]	; (8008fa4 <HAL_TIM_IC_Start_IT+0x190>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d009      	beq.n	8008f62 <HAL_TIM_IC_Start_IT+0x14e>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a15      	ldr	r2, [pc, #84]	; (8008fa8 <HAL_TIM_IC_Start_IT+0x194>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d004      	beq.n	8008f62 <HAL_TIM_IC_Start_IT+0x14e>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a13      	ldr	r2, [pc, #76]	; (8008fac <HAL_TIM_IC_Start_IT+0x198>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d111      	bne.n	8008f86 <HAL_TIM_IC_Start_IT+0x172>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	2207      	movs	r2, #7
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b06      	cmp	r3, #6
 8008f72:	d010      	beq.n	8008f96 <HAL_TIM_IC_Start_IT+0x182>
      {
        __HAL_TIM_ENABLE(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2101      	movs	r1, #1
 8008f80:	430a      	orrs	r2, r1
 8008f82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f84:	e007      	b.n	8008f96 <HAL_TIM_IC_Start_IT+0x182>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2101      	movs	r1, #1
 8008f92:	430a      	orrs	r2, r1
 8008f94:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008f96:	230f      	movs	r3, #15
 8008f98:	18fb      	adds	r3, r7, r3
 8008f9a:	781b      	ldrb	r3, [r3, #0]
}
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	b004      	add	sp, #16
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	40000400 	.word	0x40000400
 8008fa8:	40010800 	.word	0x40010800
 8008fac:	40011400 	.word	0x40011400

08008fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d124      	bne.n	8009010 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	4013      	ands	r3, r2
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d11d      	bne.n	8009010 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2203      	movs	r2, #3
 8008fda:	4252      	negs	r2, r2
 8008fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	2203      	movs	r2, #3
 8008fec:	4013      	ands	r3, r2
 8008fee:	d004      	beq.n	8008ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f7fa fe94 	bl	8003d20 <HAL_TIM_IC_CaptureCallback>
 8008ff8:	e007      	b.n	800900a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f000 fafd 	bl	80095fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	0018      	movs	r0, r3
 8009006:	f000 fb01 	bl	800960c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2204      	movs	r2, #4
 8009018:	4013      	ands	r3, r2
 800901a:	2b04      	cmp	r3, #4
 800901c:	d125      	bne.n	800906a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2204      	movs	r2, #4
 8009026:	4013      	ands	r3, r2
 8009028:	2b04      	cmp	r3, #4
 800902a:	d11e      	bne.n	800906a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2205      	movs	r2, #5
 8009032:	4252      	negs	r2, r2
 8009034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2202      	movs	r2, #2
 800903a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	23c0      	movs	r3, #192	; 0xc0
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4013      	ands	r3, r2
 8009048:	d004      	beq.n	8009054 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	0018      	movs	r0, r3
 800904e:	f7fa fe67 	bl	8003d20 <HAL_TIM_IC_CaptureCallback>
 8009052:	e007      	b.n	8009064 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	0018      	movs	r0, r3
 8009058:	f000 fad0 	bl	80095fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	0018      	movs	r0, r3
 8009060:	f000 fad4 	bl	800960c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	2208      	movs	r2, #8
 8009072:	4013      	ands	r3, r2
 8009074:	2b08      	cmp	r3, #8
 8009076:	d124      	bne.n	80090c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	2208      	movs	r2, #8
 8009080:	4013      	ands	r3, r2
 8009082:	2b08      	cmp	r3, #8
 8009084:	d11d      	bne.n	80090c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2209      	movs	r2, #9
 800908c:	4252      	negs	r2, r2
 800908e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2204      	movs	r2, #4
 8009094:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	2203      	movs	r2, #3
 800909e:	4013      	ands	r3, r2
 80090a0:	d004      	beq.n	80090ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	0018      	movs	r0, r3
 80090a6:	f7fa fe3b 	bl	8003d20 <HAL_TIM_IC_CaptureCallback>
 80090aa:	e007      	b.n	80090bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	0018      	movs	r0, r3
 80090b0:	f000 faa4 	bl	80095fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	0018      	movs	r0, r3
 80090b8:	f000 faa8 	bl	800960c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2210      	movs	r2, #16
 80090ca:	4013      	ands	r3, r2
 80090cc:	2b10      	cmp	r3, #16
 80090ce:	d125      	bne.n	800911c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	2210      	movs	r2, #16
 80090d8:	4013      	ands	r3, r2
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d11e      	bne.n	800911c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2211      	movs	r2, #17
 80090e4:	4252      	negs	r2, r2
 80090e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2208      	movs	r2, #8
 80090ec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69da      	ldr	r2, [r3, #28]
 80090f4:	23c0      	movs	r3, #192	; 0xc0
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4013      	ands	r3, r2
 80090fa:	d004      	beq.n	8009106 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	0018      	movs	r0, r3
 8009100:	f7fa fe0e 	bl	8003d20 <HAL_TIM_IC_CaptureCallback>
 8009104:	e007      	b.n	8009116 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	0018      	movs	r0, r3
 800910a:	f000 fa77 	bl	80095fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	0018      	movs	r0, r3
 8009112:	f000 fa7b 	bl	800960c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2201      	movs	r2, #1
 8009124:	4013      	ands	r3, r2
 8009126:	2b01      	cmp	r3, #1
 8009128:	d10f      	bne.n	800914a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	4013      	ands	r3, r2
 8009134:	2b01      	cmp	r3, #1
 8009136:	d108      	bne.n	800914a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2202      	movs	r2, #2
 800913e:	4252      	negs	r2, r2
 8009140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	0018      	movs	r0, r3
 8009146:	f7fa fe1b 	bl	8003d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	2240      	movs	r2, #64	; 0x40
 8009152:	4013      	ands	r3, r2
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	d10f      	bne.n	8009178 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	2240      	movs	r2, #64	; 0x40
 8009160:	4013      	ands	r3, r2
 8009162:	2b40      	cmp	r3, #64	; 0x40
 8009164:	d108      	bne.n	8009178 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2241      	movs	r2, #65	; 0x41
 800916c:	4252      	negs	r2, r2
 800916e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	0018      	movs	r0, r3
 8009174:	f000 fa52 	bl	800961c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009178:	46c0      	nop			; (mov r8, r8)
 800917a:	46bd      	mov	sp, r7
 800917c:	b002      	add	sp, #8
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800918c:	2317      	movs	r3, #23
 800918e:	18fb      	adds	r3, r7, r3
 8009190:	2200      	movs	r2, #0
 8009192:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2238      	movs	r2, #56	; 0x38
 8009198:	5c9b      	ldrb	r3, [r3, r2]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d101      	bne.n	80091a2 <HAL_TIM_IC_ConfigChannel+0x22>
 800919e:	2302      	movs	r3, #2
 80091a0:	e08c      	b.n	80092bc <HAL_TIM_IC_ConfigChannel+0x13c>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2238      	movs	r2, #56	; 0x38
 80091a6:	2101      	movs	r1, #1
 80091a8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d11b      	bne.n	80091e8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	6819      	ldr	r1, [r3, #0]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f000 fb96 	bl	80098f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	210c      	movs	r1, #12
 80091d0:	438a      	bics	r2, r1
 80091d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6999      	ldr	r1, [r3, #24]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	619a      	str	r2, [r3, #24]
 80091e6:	e062      	b.n	80092ae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d11c      	bne.n	8009228 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	6819      	ldr	r1, [r3, #0]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f000 fc01 	bl	8009a04 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	492d      	ldr	r1, [pc, #180]	; (80092c4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800920e:	400a      	ands	r2, r1
 8009210:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6999      	ldr	r1, [r3, #24]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	021a      	lsls	r2, r3, #8
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	619a      	str	r2, [r3, #24]
 8009226:	e042      	b.n	80092ae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b08      	cmp	r3, #8
 800922c:	d11b      	bne.n	8009266 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	6819      	ldr	r1, [r3, #0]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f000 fc55 	bl	8009aec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69da      	ldr	r2, [r3, #28]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	210c      	movs	r1, #12
 800924e:	438a      	bics	r2, r1
 8009250:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69d9      	ldr	r1, [r3, #28]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	61da      	str	r2, [r3, #28]
 8009264:	e023      	b.n	80092ae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b0c      	cmp	r3, #12
 800926a:	d11c      	bne.n	80092a6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f000 fc76 	bl	8009b6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69da      	ldr	r2, [r3, #28]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	490e      	ldr	r1, [pc, #56]	; (80092c4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800928c:	400a      	ands	r2, r1
 800928e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	69d9      	ldr	r1, [r3, #28]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	021a      	lsls	r2, r3, #8
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	61da      	str	r2, [r3, #28]
 80092a4:	e003      	b.n	80092ae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80092a6:	2317      	movs	r3, #23
 80092a8:	18fb      	adds	r3, r7, r3
 80092aa:	2201      	movs	r2, #1
 80092ac:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2238      	movs	r2, #56	; 0x38
 80092b2:	2100      	movs	r1, #0
 80092b4:	5499      	strb	r1, [r3, r2]

  return status;
 80092b6:	2317      	movs	r3, #23
 80092b8:	18fb      	adds	r3, r7, r3
 80092ba:	781b      	ldrb	r3, [r3, #0]
}
 80092bc:	0018      	movs	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	b006      	add	sp, #24
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	fffff3ff 	.word	0xfffff3ff

080092c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d4:	2317      	movs	r3, #23
 80092d6:	18fb      	adds	r3, r7, r3
 80092d8:	2200      	movs	r2, #0
 80092da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2238      	movs	r2, #56	; 0x38
 80092e0:	5c9b      	ldrb	r3, [r3, r2]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_TIM_PWM_ConfigChannel+0x22>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e0ad      	b.n	8009446 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2238      	movs	r2, #56	; 0x38
 80092ee:	2101      	movs	r1, #1
 80092f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b0c      	cmp	r3, #12
 80092f6:	d100      	bne.n	80092fa <HAL_TIM_PWM_ConfigChannel+0x32>
 80092f8:	e076      	b.n	80093e8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b0c      	cmp	r3, #12
 80092fe:	d900      	bls.n	8009302 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8009300:	e095      	b.n	800942e <HAL_TIM_PWM_ConfigChannel+0x166>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b08      	cmp	r3, #8
 8009306:	d04e      	beq.n	80093a6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b08      	cmp	r3, #8
 800930c:	d900      	bls.n	8009310 <HAL_TIM_PWM_ConfigChannel+0x48>
 800930e:	e08e      	b.n	800942e <HAL_TIM_PWM_ConfigChannel+0x166>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_TIM_PWM_ConfigChannel+0x56>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b04      	cmp	r3, #4
 800931a:	d021      	beq.n	8009360 <HAL_TIM_PWM_ConfigChannel+0x98>
 800931c:	e087      	b.n	800942e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	0011      	movs	r1, r2
 8009326:	0018      	movs	r0, r3
 8009328:	f000 f9de 	bl	80096e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2108      	movs	r1, #8
 8009338:	430a      	orrs	r2, r1
 800933a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2104      	movs	r1, #4
 8009348:	438a      	bics	r2, r1
 800934a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6999      	ldr	r1, [r3, #24]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	619a      	str	r2, [r3, #24]
      break;
 800935e:	e06b      	b.n	8009438 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	0011      	movs	r1, r2
 8009368:	0018      	movs	r0, r3
 800936a:	f000 f9f9 	bl	8009760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	699a      	ldr	r2, [r3, #24]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2180      	movs	r1, #128	; 0x80
 800937a:	0109      	lsls	r1, r1, #4
 800937c:	430a      	orrs	r2, r1
 800937e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	699a      	ldr	r2, [r3, #24]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4931      	ldr	r1, [pc, #196]	; (8009450 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800938c:	400a      	ands	r2, r1
 800938e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6999      	ldr	r1, [r3, #24]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	021a      	lsls	r2, r3, #8
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	619a      	str	r2, [r3, #24]
      break;
 80093a4:	e048      	b.n	8009438 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	0011      	movs	r1, r2
 80093ae:	0018      	movs	r0, r3
 80093b0:	f000 fa18 	bl	80097e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69da      	ldr	r2, [r3, #28]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2108      	movs	r1, #8
 80093c0:	430a      	orrs	r2, r1
 80093c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	69da      	ldr	r2, [r3, #28]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2104      	movs	r1, #4
 80093d0:	438a      	bics	r2, r1
 80093d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	69d9      	ldr	r1, [r3, #28]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	61da      	str	r2, [r3, #28]
      break;
 80093e6:	e027      	b.n	8009438 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	0011      	movs	r1, r2
 80093f0:	0018      	movs	r0, r3
 80093f2:	f000 fa37 	bl	8009864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69da      	ldr	r2, [r3, #28]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2180      	movs	r1, #128	; 0x80
 8009402:	0109      	lsls	r1, r1, #4
 8009404:	430a      	orrs	r2, r1
 8009406:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69da      	ldr	r2, [r3, #28]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	490f      	ldr	r1, [pc, #60]	; (8009450 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009414:	400a      	ands	r2, r1
 8009416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	69d9      	ldr	r1, [r3, #28]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	021a      	lsls	r2, r3, #8
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	61da      	str	r2, [r3, #28]
      break;
 800942c:	e004      	b.n	8009438 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800942e:	2317      	movs	r3, #23
 8009430:	18fb      	adds	r3, r7, r3
 8009432:	2201      	movs	r2, #1
 8009434:	701a      	strb	r2, [r3, #0]
      break;
 8009436:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2238      	movs	r2, #56	; 0x38
 800943c:	2100      	movs	r1, #0
 800943e:	5499      	strb	r1, [r3, r2]

  return status;
 8009440:	2317      	movs	r3, #23
 8009442:	18fb      	adds	r3, r7, r3
 8009444:	781b      	ldrb	r3, [r3, #0]
}
 8009446:	0018      	movs	r0, r3
 8009448:	46bd      	mov	sp, r7
 800944a:	b006      	add	sp, #24
 800944c:	bd80      	pop	{r7, pc}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	fffffbff 	.word	0xfffffbff

08009454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800945e:	230f      	movs	r3, #15
 8009460:	18fb      	adds	r3, r7, r3
 8009462:	2200      	movs	r2, #0
 8009464:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2238      	movs	r2, #56	; 0x38
 800946a:	5c9b      	ldrb	r3, [r3, r2]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d101      	bne.n	8009474 <HAL_TIM_ConfigClockSource+0x20>
 8009470:	2302      	movs	r3, #2
 8009472:	e0bc      	b.n	80095ee <HAL_TIM_ConfigClockSource+0x19a>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2238      	movs	r2, #56	; 0x38
 8009478:	2101      	movs	r1, #1
 800947a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2239      	movs	r2, #57	; 0x39
 8009480:	2102      	movs	r1, #2
 8009482:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2277      	movs	r2, #119	; 0x77
 8009490:	4393      	bics	r3, r2
 8009492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4a58      	ldr	r2, [pc, #352]	; (80095f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8009498:	4013      	ands	r3, r2
 800949a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2280      	movs	r2, #128	; 0x80
 80094aa:	0192      	lsls	r2, r2, #6
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d040      	beq.n	8009532 <HAL_TIM_ConfigClockSource+0xde>
 80094b0:	2280      	movs	r2, #128	; 0x80
 80094b2:	0192      	lsls	r2, r2, #6
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d900      	bls.n	80094ba <HAL_TIM_ConfigClockSource+0x66>
 80094b8:	e088      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
 80094ba:	2280      	movs	r2, #128	; 0x80
 80094bc:	0152      	lsls	r2, r2, #5
 80094be:	4293      	cmp	r3, r2
 80094c0:	d100      	bne.n	80094c4 <HAL_TIM_ConfigClockSource+0x70>
 80094c2:	e088      	b.n	80095d6 <HAL_TIM_ConfigClockSource+0x182>
 80094c4:	2280      	movs	r2, #128	; 0x80
 80094c6:	0152      	lsls	r2, r2, #5
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d900      	bls.n	80094ce <HAL_TIM_ConfigClockSource+0x7a>
 80094cc:	e07e      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
 80094ce:	2b70      	cmp	r3, #112	; 0x70
 80094d0:	d018      	beq.n	8009504 <HAL_TIM_ConfigClockSource+0xb0>
 80094d2:	d900      	bls.n	80094d6 <HAL_TIM_ConfigClockSource+0x82>
 80094d4:	e07a      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
 80094d6:	2b60      	cmp	r3, #96	; 0x60
 80094d8:	d04f      	beq.n	800957a <HAL_TIM_ConfigClockSource+0x126>
 80094da:	d900      	bls.n	80094de <HAL_TIM_ConfigClockSource+0x8a>
 80094dc:	e076      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
 80094de:	2b50      	cmp	r3, #80	; 0x50
 80094e0:	d03b      	beq.n	800955a <HAL_TIM_ConfigClockSource+0x106>
 80094e2:	d900      	bls.n	80094e6 <HAL_TIM_ConfigClockSource+0x92>
 80094e4:	e072      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
 80094e6:	2b40      	cmp	r3, #64	; 0x40
 80094e8:	d057      	beq.n	800959a <HAL_TIM_ConfigClockSource+0x146>
 80094ea:	d900      	bls.n	80094ee <HAL_TIM_ConfigClockSource+0x9a>
 80094ec:	e06e      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
 80094ee:	2b30      	cmp	r3, #48	; 0x30
 80094f0:	d063      	beq.n	80095ba <HAL_TIM_ConfigClockSource+0x166>
 80094f2:	d86b      	bhi.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d060      	beq.n	80095ba <HAL_TIM_ConfigClockSource+0x166>
 80094f8:	d868      	bhi.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d05d      	beq.n	80095ba <HAL_TIM_ConfigClockSource+0x166>
 80094fe:	2b10      	cmp	r3, #16
 8009500:	d05b      	beq.n	80095ba <HAL_TIM_ConfigClockSource+0x166>
 8009502:	e063      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	6899      	ldr	r1, [r3, #8]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f000 fb8a 	bl	8009c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2277      	movs	r2, #119	; 0x77
 8009524:	4313      	orrs	r3, r2
 8009526:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	609a      	str	r2, [r3, #8]
      break;
 8009530:	e052      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6899      	ldr	r1, [r3, #8]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f000 fb73 	bl	8009c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2180      	movs	r1, #128	; 0x80
 8009552:	01c9      	lsls	r1, r1, #7
 8009554:	430a      	orrs	r2, r1
 8009556:	609a      	str	r2, [r3, #8]
      break;
 8009558:	e03e      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	6859      	ldr	r1, [r3, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	001a      	movs	r2, r3
 8009568:	f000 fa1e 	bl	80099a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2150      	movs	r1, #80	; 0x50
 8009572:	0018      	movs	r0, r3
 8009574:	f000 fb40 	bl	8009bf8 <TIM_ITRx_SetConfig>
      break;
 8009578:	e02e      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	6859      	ldr	r1, [r3, #4]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	001a      	movs	r2, r3
 8009588:	f000 fa7e 	bl	8009a88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2160      	movs	r1, #96	; 0x60
 8009592:	0018      	movs	r0, r3
 8009594:	f000 fb30 	bl	8009bf8 <TIM_ITRx_SetConfig>
      break;
 8009598:	e01e      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	6859      	ldr	r1, [r3, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	001a      	movs	r2, r3
 80095a8:	f000 f9fe 	bl	80099a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2140      	movs	r1, #64	; 0x40
 80095b2:	0018      	movs	r0, r3
 80095b4:	f000 fb20 	bl	8009bf8 <TIM_ITRx_SetConfig>
      break;
 80095b8:	e00e      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	0019      	movs	r1, r3
 80095c4:	0010      	movs	r0, r2
 80095c6:	f000 fb17 	bl	8009bf8 <TIM_ITRx_SetConfig>
      break;
 80095ca:	e005      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80095cc:	230f      	movs	r3, #15
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	2201      	movs	r2, #1
 80095d2:	701a      	strb	r2, [r3, #0]
      break;
 80095d4:	e000      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80095d6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2239      	movs	r2, #57	; 0x39
 80095dc:	2101      	movs	r1, #1
 80095de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2238      	movs	r2, #56	; 0x38
 80095e4:	2100      	movs	r1, #0
 80095e6:	5499      	strb	r1, [r3, r2]

  return status;
 80095e8:	230f      	movs	r3, #15
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	781b      	ldrb	r3, [r3, #0]
}
 80095ee:	0018      	movs	r0, r3
 80095f0:	46bd      	mov	sp, r7
 80095f2:	b004      	add	sp, #16
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	ffff00ff 	.word	0xffff00ff

080095fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009604:	46c0      	nop			; (mov r8, r8)
 8009606:	46bd      	mov	sp, r7
 8009608:	b002      	add	sp, #8
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009614:	46c0      	nop			; (mov r8, r8)
 8009616:	46bd      	mov	sp, r7
 8009618:	b002      	add	sp, #8
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009624:	46c0      	nop			; (mov r8, r8)
 8009626:	46bd      	mov	sp, r7
 8009628:	b002      	add	sp, #8
 800962a:	bd80      	pop	{r7, pc}

0800962c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	2380      	movs	r3, #128	; 0x80
 8009640:	05db      	lsls	r3, r3, #23
 8009642:	429a      	cmp	r2, r3
 8009644:	d00b      	beq.n	800965e <TIM_Base_SetConfig+0x32>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a23      	ldr	r2, [pc, #140]	; (80096d8 <TIM_Base_SetConfig+0xac>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d007      	beq.n	800965e <TIM_Base_SetConfig+0x32>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a22      	ldr	r2, [pc, #136]	; (80096dc <TIM_Base_SetConfig+0xb0>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d003      	beq.n	800965e <TIM_Base_SetConfig+0x32>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a21      	ldr	r2, [pc, #132]	; (80096e0 <TIM_Base_SetConfig+0xb4>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d108      	bne.n	8009670 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2270      	movs	r2, #112	; 0x70
 8009662:	4393      	bics	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4313      	orrs	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	2380      	movs	r3, #128	; 0x80
 8009674:	05db      	lsls	r3, r3, #23
 8009676:	429a      	cmp	r2, r3
 8009678:	d00b      	beq.n	8009692 <TIM_Base_SetConfig+0x66>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a16      	ldr	r2, [pc, #88]	; (80096d8 <TIM_Base_SetConfig+0xac>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d007      	beq.n	8009692 <TIM_Base_SetConfig+0x66>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a15      	ldr	r2, [pc, #84]	; (80096dc <TIM_Base_SetConfig+0xb0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d003      	beq.n	8009692 <TIM_Base_SetConfig+0x66>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a14      	ldr	r2, [pc, #80]	; (80096e0 <TIM_Base_SetConfig+0xb4>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d108      	bne.n	80096a4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4a13      	ldr	r2, [pc, #76]	; (80096e4 <TIM_Base_SetConfig+0xb8>)
 8009696:	4013      	ands	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2280      	movs	r2, #128	; 0x80
 80096a8:	4393      	bics	r3, r2
 80096aa:	001a      	movs	r2, r3
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	615a      	str	r2, [r3, #20]
}
 80096d0:	46c0      	nop			; (mov r8, r8)
 80096d2:	46bd      	mov	sp, r7
 80096d4:	b004      	add	sp, #16
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40010800 	.word	0x40010800
 80096e0:	40011400 	.word	0x40011400
 80096e4:	fffffcff 	.word	0xfffffcff

080096e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	2201      	movs	r2, #1
 80096f8:	4393      	bics	r3, r2
 80096fa:	001a      	movs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2270      	movs	r2, #112	; 0x70
 8009716:	4393      	bics	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2203      	movs	r2, #3
 800971e:	4393      	bics	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4313      	orrs	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2202      	movs	r2, #2
 8009730:	4393      	bics	r3, r2
 8009732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	4313      	orrs	r3, r2
 800973c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	621a      	str	r2, [r3, #32]
}
 8009758:	46c0      	nop			; (mov r8, r8)
 800975a:	46bd      	mov	sp, r7
 800975c:	b006      	add	sp, #24
 800975e:	bd80      	pop	{r7, pc}

08009760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	2210      	movs	r2, #16
 8009770:	4393      	bics	r3, r2
 8009772:	001a      	movs	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a13      	ldr	r2, [pc, #76]	; (80097dc <TIM_OC2_SetConfig+0x7c>)
 800978e:	4013      	ands	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4a12      	ldr	r2, [pc, #72]	; (80097e0 <TIM_OC2_SetConfig+0x80>)
 8009796:	4013      	ands	r3, r2
 8009798:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	021b      	lsls	r3, r3, #8
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2220      	movs	r2, #32
 80097aa:	4393      	bics	r3, r2
 80097ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	011b      	lsls	r3, r3, #4
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	621a      	str	r2, [r3, #32]
}
 80097d4:	46c0      	nop			; (mov r8, r8)
 80097d6:	46bd      	mov	sp, r7
 80097d8:	b006      	add	sp, #24
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	ffff8fff 	.word	0xffff8fff
 80097e0:	fffffcff 	.word	0xfffffcff

080097e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	4a1a      	ldr	r2, [pc, #104]	; (800985c <TIM_OC3_SetConfig+0x78>)
 80097f4:	401a      	ands	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2270      	movs	r2, #112	; 0x70
 8009810:	4393      	bics	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2203      	movs	r2, #3
 8009818:	4393      	bics	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	4313      	orrs	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	4a0d      	ldr	r2, [pc, #52]	; (8009860 <TIM_OC3_SetConfig+0x7c>)
 800982a:	4013      	ands	r3, r2
 800982c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	4313      	orrs	r3, r2
 8009838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	685a      	ldr	r2, [r3, #4]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	621a      	str	r2, [r3, #32]
}
 8009854:	46c0      	nop			; (mov r8, r8)
 8009856:	46bd      	mov	sp, r7
 8009858:	b006      	add	sp, #24
 800985a:	bd80      	pop	{r7, pc}
 800985c:	fffffeff 	.word	0xfffffeff
 8009860:	fffffdff 	.word	0xfffffdff

08009864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	4a1b      	ldr	r2, [pc, #108]	; (80098e0 <TIM_OC4_SetConfig+0x7c>)
 8009874:	401a      	ands	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4a15      	ldr	r2, [pc, #84]	; (80098e4 <TIM_OC4_SetConfig+0x80>)
 8009890:	4013      	ands	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4a14      	ldr	r2, [pc, #80]	; (80098e8 <TIM_OC4_SetConfig+0x84>)
 8009898:	4013      	ands	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	021b      	lsls	r3, r3, #8
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4a10      	ldr	r2, [pc, #64]	; (80098ec <TIM_OC4_SetConfig+0x88>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	031b      	lsls	r3, r3, #12
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	621a      	str	r2, [r3, #32]
}
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	46bd      	mov	sp, r7
 80098da:	b006      	add	sp, #24
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	ffffefff 	.word	0xffffefff
 80098e4:	ffff8fff 	.word	0xffff8fff
 80098e8:	fffffcff 	.word	0xfffffcff
 80098ec:	ffffdfff 	.word	0xffffdfff

080098f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	2201      	movs	r2, #1
 8009904:	4393      	bics	r3, r2
 8009906:	001a      	movs	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	2380      	movs	r3, #128	; 0x80
 800991c:	05db      	lsls	r3, r3, #23
 800991e:	429a      	cmp	r2, r3
 8009920:	d00b      	beq.n	800993a <TIM_TI1_SetConfig+0x4a>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4a1d      	ldr	r2, [pc, #116]	; (800999c <TIM_TI1_SetConfig+0xac>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d007      	beq.n	800993a <TIM_TI1_SetConfig+0x4a>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4a1c      	ldr	r2, [pc, #112]	; (80099a0 <TIM_TI1_SetConfig+0xb0>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d003      	beq.n	800993a <TIM_TI1_SetConfig+0x4a>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4a1b      	ldr	r2, [pc, #108]	; (80099a4 <TIM_TI1_SetConfig+0xb4>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d101      	bne.n	800993e <TIM_TI1_SetConfig+0x4e>
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <TIM_TI1_SetConfig+0x50>
 800993e:	2300      	movs	r3, #0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d008      	beq.n	8009956 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2203      	movs	r2, #3
 8009948:	4393      	bics	r3, r2
 800994a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4313      	orrs	r3, r2
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	e003      	b.n	800995e <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2201      	movs	r2, #1
 800995a:	4313      	orrs	r3, r2
 800995c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	22f0      	movs	r2, #240	; 0xf0
 8009962:	4393      	bics	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	22ff      	movs	r2, #255	; 0xff
 800996c:	4013      	ands	r3, r2
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	4313      	orrs	r3, r2
 8009972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	220a      	movs	r2, #10
 8009978:	4393      	bics	r3, r2
 800997a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	220a      	movs	r2, #10
 8009980:	4013      	ands	r3, r2
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	4313      	orrs	r3, r2
 8009986:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	621a      	str	r2, [r3, #32]
}
 8009994:	46c0      	nop			; (mov r8, r8)
 8009996:	46bd      	mov	sp, r7
 8009998:	b006      	add	sp, #24
 800999a:	bd80      	pop	{r7, pc}
 800999c:	40000400 	.word	0x40000400
 80099a0:	40010800 	.word	0x40010800
 80099a4:	40011400 	.word	0x40011400

080099a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6a1b      	ldr	r3, [r3, #32]
 80099b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	2201      	movs	r2, #1
 80099c0:	4393      	bics	r3, r2
 80099c2:	001a      	movs	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	22f0      	movs	r2, #240	; 0xf0
 80099d2:	4393      	bics	r3, r2
 80099d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	011b      	lsls	r3, r3, #4
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	4313      	orrs	r3, r2
 80099de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	220a      	movs	r2, #10
 80099e4:	4393      	bics	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	621a      	str	r2, [r3, #32]
}
 80099fc:	46c0      	nop			; (mov r8, r8)
 80099fe:	46bd      	mov	sp, r7
 8009a00:	b006      	add	sp, #24
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	2210      	movs	r2, #16
 8009a18:	4393      	bics	r3, r2
 8009a1a:	001a      	movs	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	4a14      	ldr	r2, [pc, #80]	; (8009a80 <TIM_TI2_SetConfig+0x7c>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	021b      	lsls	r3, r3, #8
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4a10      	ldr	r2, [pc, #64]	; (8009a84 <TIM_TI2_SetConfig+0x80>)
 8009a42:	4013      	ands	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	031b      	lsls	r3, r3, #12
 8009a4a:	041b      	lsls	r3, r3, #16
 8009a4c:	0c1b      	lsrs	r3, r3, #16
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	22a0      	movs	r2, #160	; 0xa0
 8009a58:	4393      	bics	r3, r2
 8009a5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	22a0      	movs	r2, #160	; 0xa0
 8009a62:	4013      	ands	r3, r2
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	621a      	str	r2, [r3, #32]
}
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	b006      	add	sp, #24
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	fffffcff 	.word	0xfffffcff
 8009a84:	ffff0fff 	.word	0xffff0fff

08009a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	2210      	movs	r2, #16
 8009a9a:	4393      	bics	r3, r2
 8009a9c:	001a      	movs	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	4a0d      	ldr	r2, [pc, #52]	; (8009ae8 <TIM_TI2_ConfigInputStage+0x60>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	031b      	lsls	r3, r3, #12
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	22a0      	movs	r2, #160	; 0xa0
 8009ac4:	4393      	bics	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	621a      	str	r2, [r3, #32]
}
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	b006      	add	sp, #24
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	ffff0fff 	.word	0xffff0fff

08009aec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	4a19      	ldr	r2, [pc, #100]	; (8009b64 <TIM_TI3_SetConfig+0x78>)
 8009b00:	401a      	ands	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2203      	movs	r2, #3
 8009b16:	4393      	bics	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	22f0      	movs	r2, #240	; 0xf0
 8009b26:	4393      	bics	r3, r2
 8009b28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	22ff      	movs	r2, #255	; 0xff
 8009b30:	4013      	ands	r3, r2
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	4a0b      	ldr	r2, [pc, #44]	; (8009b68 <TIM_TI3_SetConfig+0x7c>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	021a      	lsls	r2, r3, #8
 8009b44:	23a0      	movs	r3, #160	; 0xa0
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	4013      	ands	r3, r2
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	621a      	str	r2, [r3, #32]
}
 8009b5c:	46c0      	nop			; (mov r8, r8)
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b006      	add	sp, #24
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	fffffeff 	.word	0xfffffeff
 8009b68:	fffff5ff 	.word	0xfffff5ff

08009b6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	4a1a      	ldr	r2, [pc, #104]	; (8009be8 <TIM_TI4_SetConfig+0x7c>)
 8009b80:	401a      	ands	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	4a15      	ldr	r2, [pc, #84]	; (8009bec <TIM_TI4_SetConfig+0x80>)
 8009b96:	4013      	ands	r3, r2
 8009b98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	021b      	lsls	r3, r3, #8
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	4a12      	ldr	r2, [pc, #72]	; (8009bf0 <TIM_TI4_SetConfig+0x84>)
 8009ba8:	4013      	ands	r3, r2
 8009baa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	031b      	lsls	r3, r3, #12
 8009bb0:	041b      	lsls	r3, r3, #16
 8009bb2:	0c1b      	lsrs	r3, r3, #16
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	4a0d      	ldr	r2, [pc, #52]	; (8009bf4 <TIM_TI4_SetConfig+0x88>)
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	031a      	lsls	r2, r3, #12
 8009bc6:	23a0      	movs	r3, #160	; 0xa0
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	4013      	ands	r3, r2
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	621a      	str	r2, [r3, #32]
}
 8009bde:	46c0      	nop			; (mov r8, r8)
 8009be0:	46bd      	mov	sp, r7
 8009be2:	b006      	add	sp, #24
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	ffffefff 	.word	0xffffefff
 8009bec:	fffffcff 	.word	0xfffffcff
 8009bf0:	ffff0fff 	.word	0xffff0fff
 8009bf4:	ffff5fff 	.word	0xffff5fff

08009bf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2270      	movs	r2, #112	; 0x70
 8009c0c:	4393      	bics	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	2207      	movs	r2, #7
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	609a      	str	r2, [r3, #8]
}
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	46bd      	mov	sp, r7
 8009c26:	b004      	add	sp, #16
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	4a09      	ldr	r2, [pc, #36]	; (8009c68 <TIM_ETR_SetConfig+0x3c>)
 8009c44:	4013      	ands	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	021a      	lsls	r2, r3, #8
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	609a      	str	r2, [r3, #8]
}
 8009c60:	46c0      	nop			; (mov r8, r8)
 8009c62:	46bd      	mov	sp, r7
 8009c64:	b006      	add	sp, #24
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	ffff00ff 	.word	0xffff00ff

08009c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	221f      	movs	r2, #31
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	2201      	movs	r2, #1
 8009c80:	409a      	lsls	r2, r3
 8009c82:	0013      	movs	r3, r2
 8009c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	43d2      	mvns	r2, r2
 8009c8e:	401a      	ands	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a1a      	ldr	r2, [r3, #32]
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	211f      	movs	r1, #31
 8009c9c:	400b      	ands	r3, r1
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4099      	lsls	r1, r3
 8009ca2:	000b      	movs	r3, r1
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	621a      	str	r2, [r3, #32]
}
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	46bd      	mov	sp, r7
 8009cae:	b006      	add	sp, #24
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2238      	movs	r2, #56	; 0x38
 8009cc2:	5c9b      	ldrb	r3, [r3, r2]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d101      	bne.n	8009ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e047      	b.n	8009d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2238      	movs	r2, #56	; 0x38
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2239      	movs	r2, #57	; 0x39
 8009cd8:	2102      	movs	r1, #2
 8009cda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2270      	movs	r2, #112	; 0x70
 8009cf0:	4393      	bics	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	2380      	movs	r3, #128	; 0x80
 8009d0c:	05db      	lsls	r3, r3, #23
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d00e      	beq.n	8009d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a13      	ldr	r2, [pc, #76]	; (8009d64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d009      	beq.n	8009d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a11      	ldr	r2, [pc, #68]	; (8009d68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d004      	beq.n	8009d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a10      	ldr	r2, [pc, #64]	; (8009d6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d10c      	bne.n	8009d4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2280      	movs	r2, #128	; 0x80
 8009d34:	4393      	bics	r3, r2
 8009d36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2239      	movs	r2, #57	; 0x39
 8009d4e:	2101      	movs	r1, #1
 8009d50:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2238      	movs	r2, #56	; 0x38
 8009d56:	2100      	movs	r1, #0
 8009d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b004      	add	sp, #16
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	40000400 	.word	0x40000400
 8009d68:	40010800 	.word	0x40010800
 8009d6c:	40011400 	.word	0x40011400

08009d70 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2238      	movs	r2, #56	; 0x38
 8009d7e:	5c9b      	ldrb	r3, [r3, r2]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_TIMEx_RemapConfig+0x18>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e00c      	b.n	8009da2 <HAL_TIMEx_RemapConfig+0x32>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2238      	movs	r2, #56	; 0x38
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2238      	movs	r2, #56	; 0x38
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	0018      	movs	r0, r3
 8009da4:	46bd      	mov	sp, r7
 8009da6:	b002      	add	sp, #8
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e044      	b.n	8009e48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d107      	bne.n	8009dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2274      	movs	r2, #116	; 0x74
 8009dca:	2100      	movs	r1, #0
 8009dcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f7fa fe05 	bl	80049e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2224      	movs	r2, #36	; 0x24
 8009dda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2101      	movs	r1, #1
 8009de8:	438a      	bics	r2, r1
 8009dea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	0018      	movs	r0, r3
 8009df0:	f000 fbce 	bl	800a590 <UART_SetConfig>
 8009df4:	0003      	movs	r3, r0
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d101      	bne.n	8009dfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e024      	b.n	8009e48 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	0018      	movs	r0, r3
 8009e0a:	f000 fe61 	bl	800aad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	490d      	ldr	r1, [pc, #52]	; (8009e50 <HAL_UART_Init+0xa4>)
 8009e1a:	400a      	ands	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	212a      	movs	r1, #42	; 0x2a
 8009e2a:	438a      	bics	r2, r1
 8009e2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2101      	movs	r1, #1
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	0018      	movs	r0, r3
 8009e42:	f000 fef9 	bl	800ac38 <UART_CheckIdleState>
 8009e46:	0003      	movs	r3, r0
}
 8009e48:	0018      	movs	r0, r3
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	b002      	add	sp, #8
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	ffffb7ff 	.word	0xffffb7ff

08009e54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08a      	sub	sp, #40	; 0x28
 8009e58:	af02      	add	r7, sp, #8
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	1dbb      	adds	r3, r7, #6
 8009e62:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	d000      	beq.n	8009e6e <HAL_UART_Transmit+0x1a>
 8009e6c:	e095      	b.n	8009f9a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <HAL_UART_Transmit+0x28>
 8009e74:	1dbb      	adds	r3, r7, #6
 8009e76:	881b      	ldrh	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e08d      	b.n	8009f9c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	689a      	ldr	r2, [r3, #8]
 8009e84:	2380      	movs	r3, #128	; 0x80
 8009e86:	015b      	lsls	r3, r3, #5
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d109      	bne.n	8009ea0 <HAL_UART_Transmit+0x4c>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2201      	movs	r2, #1
 8009e98:	4013      	ands	r3, r2
 8009e9a:	d001      	beq.n	8009ea0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e07d      	b.n	8009f9c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2274      	movs	r2, #116	; 0x74
 8009ea4:	5c9b      	ldrb	r3, [r3, r2]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d101      	bne.n	8009eae <HAL_UART_Transmit+0x5a>
 8009eaa:	2302      	movs	r3, #2
 8009eac:	e076      	b.n	8009f9c <HAL_UART_Transmit+0x148>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2274      	movs	r2, #116	; 0x74
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2280      	movs	r2, #128	; 0x80
 8009eba:	2100      	movs	r1, #0
 8009ebc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2221      	movs	r2, #33	; 0x21
 8009ec2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ec4:	f7fb fdba 	bl	8005a3c <HAL_GetTick>
 8009ec8:	0003      	movs	r3, r0
 8009eca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	1dba      	adds	r2, r7, #6
 8009ed0:	2150      	movs	r1, #80	; 0x50
 8009ed2:	8812      	ldrh	r2, [r2, #0]
 8009ed4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	1dba      	adds	r2, r7, #6
 8009eda:	2152      	movs	r1, #82	; 0x52
 8009edc:	8812      	ldrh	r2, [r2, #0]
 8009ede:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	2380      	movs	r3, #128	; 0x80
 8009ee6:	015b      	lsls	r3, r3, #5
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d108      	bne.n	8009efe <HAL_UART_Transmit+0xaa>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d104      	bne.n	8009efe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	61bb      	str	r3, [r7, #24]
 8009efc:	e003      	b.n	8009f06 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2274      	movs	r2, #116	; 0x74
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009f0e:	e02c      	b.n	8009f6a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	0013      	movs	r3, r2
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2180      	movs	r1, #128	; 0x80
 8009f1e:	f000 fed3 	bl	800acc8 <UART_WaitOnFlagUntilTimeout>
 8009f22:	1e03      	subs	r3, r0, #0
 8009f24:	d001      	beq.n	8009f2a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e038      	b.n	8009f9c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10b      	bne.n	8009f48 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	001a      	movs	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	05d2      	lsls	r2, r2, #23
 8009f3c:	0dd2      	lsrs	r2, r2, #23
 8009f3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	3302      	adds	r3, #2
 8009f44:	61bb      	str	r3, [r7, #24]
 8009f46:	e007      	b.n	8009f58 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	781a      	ldrb	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	3301      	adds	r3, #1
 8009f56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2252      	movs	r2, #82	; 0x52
 8009f5c:	5a9b      	ldrh	r3, [r3, r2]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	3b01      	subs	r3, #1
 8009f62:	b299      	uxth	r1, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2252      	movs	r2, #82	; 0x52
 8009f68:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2252      	movs	r2, #82	; 0x52
 8009f6e:	5a9b      	ldrh	r3, [r3, r2]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1cc      	bne.n	8009f10 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	0013      	movs	r3, r2
 8009f80:	2200      	movs	r2, #0
 8009f82:	2140      	movs	r1, #64	; 0x40
 8009f84:	f000 fea0 	bl	800acc8 <UART_WaitOnFlagUntilTimeout>
 8009f88:	1e03      	subs	r3, r0, #0
 8009f8a:	d001      	beq.n	8009f90 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e005      	b.n	8009f9c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2220      	movs	r2, #32
 8009f94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e000      	b.n	8009f9c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8009f9a:	2302      	movs	r3, #2
  }
}
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	b008      	add	sp, #32
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fa4:	b590      	push	{r4, r7, lr}
 8009fa6:	b0ab      	sub	sp, #172	; 0xac
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	22a4      	movs	r2, #164	; 0xa4
 8009fb4:	18b9      	adds	r1, r7, r2
 8009fb6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	20a0      	movs	r0, #160	; 0xa0
 8009fc0:	1839      	adds	r1, r7, r0
 8009fc2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	219c      	movs	r1, #156	; 0x9c
 8009fcc:	1879      	adds	r1, r7, r1
 8009fce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fd0:	0011      	movs	r1, r2
 8009fd2:	18bb      	adds	r3, r7, r2
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a99      	ldr	r2, [pc, #612]	; (800a23c <HAL_UART_IRQHandler+0x298>)
 8009fd8:	4013      	ands	r3, r2
 8009fda:	2298      	movs	r2, #152	; 0x98
 8009fdc:	18bc      	adds	r4, r7, r2
 8009fde:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8009fe0:	18bb      	adds	r3, r7, r2
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d114      	bne.n	800a012 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009fe8:	187b      	adds	r3, r7, r1
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2220      	movs	r2, #32
 8009fee:	4013      	ands	r3, r2
 8009ff0:	d00f      	beq.n	800a012 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ff2:	183b      	adds	r3, r7, r0
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	d00a      	beq.n	800a012 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a000:	2b00      	cmp	r3, #0
 800a002:	d100      	bne.n	800a006 <HAL_UART_IRQHandler+0x62>
 800a004:	e298      	b.n	800a538 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	0010      	movs	r0, r2
 800a00e:	4798      	blx	r3
      }
      return;
 800a010:	e292      	b.n	800a538 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a012:	2398      	movs	r3, #152	; 0x98
 800a014:	18fb      	adds	r3, r7, r3
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d100      	bne.n	800a01e <HAL_UART_IRQHandler+0x7a>
 800a01c:	e114      	b.n	800a248 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a01e:	239c      	movs	r3, #156	; 0x9c
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2201      	movs	r2, #1
 800a026:	4013      	ands	r3, r2
 800a028:	d106      	bne.n	800a038 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a02a:	23a0      	movs	r3, #160	; 0xa0
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a83      	ldr	r2, [pc, #524]	; (800a240 <HAL_UART_IRQHandler+0x29c>)
 800a032:	4013      	ands	r3, r2
 800a034:	d100      	bne.n	800a038 <HAL_UART_IRQHandler+0x94>
 800a036:	e107      	b.n	800a248 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a038:	23a4      	movs	r3, #164	; 0xa4
 800a03a:	18fb      	adds	r3, r7, r3
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2201      	movs	r2, #1
 800a040:	4013      	ands	r3, r2
 800a042:	d012      	beq.n	800a06a <HAL_UART_IRQHandler+0xc6>
 800a044:	23a0      	movs	r3, #160	; 0xa0
 800a046:	18fb      	adds	r3, r7, r3
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	2380      	movs	r3, #128	; 0x80
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	4013      	ands	r3, r2
 800a050:	d00b      	beq.n	800a06a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2201      	movs	r2, #1
 800a058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2280      	movs	r2, #128	; 0x80
 800a05e:	589b      	ldr	r3, [r3, r2]
 800a060:	2201      	movs	r2, #1
 800a062:	431a      	orrs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2180      	movs	r1, #128	; 0x80
 800a068:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a06a:	23a4      	movs	r3, #164	; 0xa4
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2202      	movs	r2, #2
 800a072:	4013      	ands	r3, r2
 800a074:	d011      	beq.n	800a09a <HAL_UART_IRQHandler+0xf6>
 800a076:	239c      	movs	r3, #156	; 0x9c
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2201      	movs	r2, #1
 800a07e:	4013      	ands	r3, r2
 800a080:	d00b      	beq.n	800a09a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2202      	movs	r2, #2
 800a088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2280      	movs	r2, #128	; 0x80
 800a08e:	589b      	ldr	r3, [r3, r2]
 800a090:	2204      	movs	r2, #4
 800a092:	431a      	orrs	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2180      	movs	r1, #128	; 0x80
 800a098:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a09a:	23a4      	movs	r3, #164	; 0xa4
 800a09c:	18fb      	adds	r3, r7, r3
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2204      	movs	r2, #4
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	d011      	beq.n	800a0ca <HAL_UART_IRQHandler+0x126>
 800a0a6:	239c      	movs	r3, #156	; 0x9c
 800a0a8:	18fb      	adds	r3, r7, r3
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	d00b      	beq.n	800a0ca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2280      	movs	r2, #128	; 0x80
 800a0be:	589b      	ldr	r3, [r3, r2]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2180      	movs	r1, #128	; 0x80
 800a0c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0ca:	23a4      	movs	r3, #164	; 0xa4
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2208      	movs	r2, #8
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	d017      	beq.n	800a106 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a0d6:	23a0      	movs	r3, #160	; 0xa0
 800a0d8:	18fb      	adds	r3, r7, r3
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	4013      	ands	r3, r2
 800a0e0:	d105      	bne.n	800a0ee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a0e2:	239c      	movs	r3, #156	; 0x9c
 800a0e4:	18fb      	adds	r3, r7, r3
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a0ec:	d00b      	beq.n	800a106 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2208      	movs	r2, #8
 800a0f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2280      	movs	r2, #128	; 0x80
 800a0fa:	589b      	ldr	r3, [r3, r2]
 800a0fc:	2208      	movs	r2, #8
 800a0fe:	431a      	orrs	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2180      	movs	r1, #128	; 0x80
 800a104:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a106:	23a4      	movs	r3, #164	; 0xa4
 800a108:	18fb      	adds	r3, r7, r3
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	2380      	movs	r3, #128	; 0x80
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	4013      	ands	r3, r2
 800a112:	d013      	beq.n	800a13c <HAL_UART_IRQHandler+0x198>
 800a114:	23a0      	movs	r3, #160	; 0xa0
 800a116:	18fb      	adds	r3, r7, r3
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	2380      	movs	r3, #128	; 0x80
 800a11c:	04db      	lsls	r3, r3, #19
 800a11e:	4013      	ands	r3, r2
 800a120:	d00c      	beq.n	800a13c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2280      	movs	r2, #128	; 0x80
 800a128:	0112      	lsls	r2, r2, #4
 800a12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2280      	movs	r2, #128	; 0x80
 800a130:	589b      	ldr	r3, [r3, r2]
 800a132:	2220      	movs	r2, #32
 800a134:	431a      	orrs	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2180      	movs	r1, #128	; 0x80
 800a13a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2280      	movs	r2, #128	; 0x80
 800a140:	589b      	ldr	r3, [r3, r2]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d100      	bne.n	800a148 <HAL_UART_IRQHandler+0x1a4>
 800a146:	e1f9      	b.n	800a53c <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a148:	23a4      	movs	r3, #164	; 0xa4
 800a14a:	18fb      	adds	r3, r7, r3
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2220      	movs	r2, #32
 800a150:	4013      	ands	r3, r2
 800a152:	d00e      	beq.n	800a172 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a154:	23a0      	movs	r3, #160	; 0xa0
 800a156:	18fb      	adds	r3, r7, r3
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2220      	movs	r2, #32
 800a15c:	4013      	ands	r3, r2
 800a15e:	d008      	beq.n	800a172 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a164:	2b00      	cmp	r3, #0
 800a166:	d004      	beq.n	800a172 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	0010      	movs	r0, r2
 800a170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2280      	movs	r2, #128	; 0x80
 800a176:	589b      	ldr	r3, [r3, r2]
 800a178:	2194      	movs	r1, #148	; 0x94
 800a17a:	187a      	adds	r2, r7, r1
 800a17c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	2240      	movs	r2, #64	; 0x40
 800a186:	4013      	ands	r3, r2
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d004      	beq.n	800a196 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a18c:	187b      	adds	r3, r7, r1
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2228      	movs	r2, #40	; 0x28
 800a192:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a194:	d047      	beq.n	800a226 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	0018      	movs	r0, r3
 800a19a:	f000 fe59 	bl	800ae50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	2240      	movs	r2, #64	; 0x40
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	2b40      	cmp	r3, #64	; 0x40
 800a1aa:	d137      	bne.n	800a21c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a1b0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a1b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1b4:	2090      	movs	r0, #144	; 0x90
 800a1b6:	183a      	adds	r2, r7, r0
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1c0:	f383 8810 	msr	PRIMASK, r3
}
 800a1c4:	46c0      	nop			; (mov r8, r8)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2140      	movs	r1, #64	; 0x40
 800a1d2:	438a      	bics	r2, r1
 800a1d4:	609a      	str	r2, [r3, #8]
 800a1d6:	183b      	adds	r3, r7, r0
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1de:	f383 8810 	msr	PRIMASK, r3
}
 800a1e2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d012      	beq.n	800a212 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f0:	4a14      	ldr	r2, [pc, #80]	; (800a244 <HAL_UART_IRQHandler+0x2a0>)
 800a1f2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f7fc faa1 	bl	8006740 <HAL_DMA_Abort_IT>
 800a1fe:	1e03      	subs	r3, r0, #0
 800a200:	d01a      	beq.n	800a238 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20c:	0018      	movs	r0, r3
 800a20e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a210:	e012      	b.n	800a238 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	0018      	movs	r0, r3
 800a216:	f000 f9a7 	bl	800a568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a21a:	e00d      	b.n	800a238 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	0018      	movs	r0, r3
 800a220:	f000 f9a2 	bl	800a568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a224:	e008      	b.n	800a238 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	0018      	movs	r0, r3
 800a22a:	f000 f99d 	bl	800a568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2280      	movs	r2, #128	; 0x80
 800a232:	2100      	movs	r1, #0
 800a234:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a236:	e181      	b.n	800a53c <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a238:	46c0      	nop			; (mov r8, r8)
    return;
 800a23a:	e17f      	b.n	800a53c <HAL_UART_IRQHandler+0x598>
 800a23c:	0000080f 	.word	0x0000080f
 800a240:	04000120 	.word	0x04000120
 800a244:	0800af15 	.word	0x0800af15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d000      	beq.n	800a252 <HAL_UART_IRQHandler+0x2ae>
 800a250:	e133      	b.n	800a4ba <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a252:	23a4      	movs	r3, #164	; 0xa4
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2210      	movs	r2, #16
 800a25a:	4013      	ands	r3, r2
 800a25c:	d100      	bne.n	800a260 <HAL_UART_IRQHandler+0x2bc>
 800a25e:	e12c      	b.n	800a4ba <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a260:	23a0      	movs	r3, #160	; 0xa0
 800a262:	18fb      	adds	r3, r7, r3
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2210      	movs	r2, #16
 800a268:	4013      	ands	r3, r2
 800a26a:	d100      	bne.n	800a26e <HAL_UART_IRQHandler+0x2ca>
 800a26c:	e125      	b.n	800a4ba <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2210      	movs	r2, #16
 800a274:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	2240      	movs	r2, #64	; 0x40
 800a27e:	4013      	ands	r3, r2
 800a280:	2b40      	cmp	r3, #64	; 0x40
 800a282:	d000      	beq.n	800a286 <HAL_UART_IRQHandler+0x2e2>
 800a284:	e09d      	b.n	800a3c2 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	217e      	movs	r1, #126	; 0x7e
 800a290:	187b      	adds	r3, r7, r1
 800a292:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a294:	187b      	adds	r3, r7, r1
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d100      	bne.n	800a29e <HAL_UART_IRQHandler+0x2fa>
 800a29c:	e150      	b.n	800a540 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2258      	movs	r2, #88	; 0x58
 800a2a2:	5a9b      	ldrh	r3, [r3, r2]
 800a2a4:	187a      	adds	r2, r7, r1
 800a2a6:	8812      	ldrh	r2, [r2, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d300      	bcc.n	800a2ae <HAL_UART_IRQHandler+0x30a>
 800a2ac:	e148      	b.n	800a540 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	187a      	adds	r2, r7, r1
 800a2b2:	215a      	movs	r1, #90	; 0x5a
 800a2b4:	8812      	ldrh	r2, [r2, #0]
 800a2b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2220      	movs	r2, #32
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	d16e      	bne.n	800a3a4 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d6:	f383 8810 	msr	PRIMASK, r3
}
 800a2da:	46c0      	nop			; (mov r8, r8)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	499a      	ldr	r1, [pc, #616]	; (800a550 <HAL_UART_IRQHandler+0x5ac>)
 800a2e8:	400a      	ands	r2, r1
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	f383 8810 	msr	PRIMASK, r3
}
 800a2f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a300:	677b      	str	r3, [r7, #116]	; 0x74
 800a302:	2301      	movs	r3, #1
 800a304:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a308:	f383 8810 	msr	PRIMASK, r3
}
 800a30c:	46c0      	nop			; (mov r8, r8)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2101      	movs	r1, #1
 800a31a:	438a      	bics	r2, r1
 800a31c:	609a      	str	r2, [r3, #8]
 800a31e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a320:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a324:	f383 8810 	msr	PRIMASK, r3
}
 800a328:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a32a:	f3ef 8310 	mrs	r3, PRIMASK
 800a32e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a330:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a332:	673b      	str	r3, [r7, #112]	; 0x70
 800a334:	2301      	movs	r3, #1
 800a336:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a33a:	f383 8810 	msr	PRIMASK, r3
}
 800a33e:	46c0      	nop			; (mov r8, r8)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2140      	movs	r1, #64	; 0x40
 800a34c:	438a      	bics	r2, r1
 800a34e:	609a      	str	r2, [r3, #8]
 800a350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a352:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a356:	f383 8810 	msr	PRIMASK, r3
}
 800a35a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a368:	f3ef 8310 	mrs	r3, PRIMASK
 800a36c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a36e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a370:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a372:	2301      	movs	r3, #1
 800a374:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a378:	f383 8810 	msr	PRIMASK, r3
}
 800a37c:	46c0      	nop			; (mov r8, r8)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2110      	movs	r1, #16
 800a38a:	438a      	bics	r2, r1
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a390:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a394:	f383 8810 	msr	PRIMASK, r3
}
 800a398:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39e:	0018      	movs	r0, r3
 800a3a0:	f7fc f98e 	bl	80066c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2258      	movs	r2, #88	; 0x58
 800a3a8:	5a9a      	ldrh	r2, [r3, r2]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	215a      	movs	r1, #90	; 0x5a
 800a3ae:	5a5b      	ldrh	r3, [r3, r1]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	0011      	movs	r1, r2
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f000 f8dc 	bl	800a578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3c0:	e0be      	b.n	800a540 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2258      	movs	r2, #88	; 0x58
 800a3c6:	5a99      	ldrh	r1, [r3, r2]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	225a      	movs	r2, #90	; 0x5a
 800a3cc:	5a9b      	ldrh	r3, [r3, r2]
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	208e      	movs	r0, #142	; 0x8e
 800a3d2:	183b      	adds	r3, r7, r0
 800a3d4:	1a8a      	subs	r2, r1, r2
 800a3d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	225a      	movs	r2, #90	; 0x5a
 800a3dc:	5a9b      	ldrh	r3, [r3, r2]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d100      	bne.n	800a3e6 <HAL_UART_IRQHandler+0x442>
 800a3e4:	e0ae      	b.n	800a544 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800a3e6:	183b      	adds	r3, r7, r0
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d100      	bne.n	800a3f0 <HAL_UART_IRQHandler+0x44c>
 800a3ee:	e0a9      	b.n	800a544 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a3f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3f8:	2488      	movs	r4, #136	; 0x88
 800a3fa:	193a      	adds	r2, r7, r4
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	2301      	movs	r3, #1
 800a400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	f383 8810 	msr	PRIMASK, r3
}
 800a408:	46c0      	nop			; (mov r8, r8)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	494f      	ldr	r1, [pc, #316]	; (800a554 <HAL_UART_IRQHandler+0x5b0>)
 800a416:	400a      	ands	r2, r1
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	193b      	adds	r3, r7, r4
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f383 8810 	msr	PRIMASK, r3
}
 800a426:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a428:	f3ef 8310 	mrs	r3, PRIMASK
 800a42c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a42e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a430:	2484      	movs	r4, #132	; 0x84
 800a432:	193a      	adds	r2, r7, r4
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	2301      	movs	r3, #1
 800a438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	f383 8810 	msr	PRIMASK, r3
}
 800a440:	46c0      	nop			; (mov r8, r8)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2101      	movs	r1, #1
 800a44e:	438a      	bics	r2, r1
 800a450:	609a      	str	r2, [r3, #8]
 800a452:	193b      	adds	r3, r7, r4
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	f383 8810 	msr	PRIMASK, r3
}
 800a45e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2220      	movs	r2, #32
 800a464:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a472:	f3ef 8310 	mrs	r3, PRIMASK
 800a476:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a47a:	2480      	movs	r4, #128	; 0x80
 800a47c:	193a      	adds	r2, r7, r4
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	2301      	movs	r3, #1
 800a482:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	f383 8810 	msr	PRIMASK, r3
}
 800a48a:	46c0      	nop			; (mov r8, r8)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2110      	movs	r1, #16
 800a498:	438a      	bics	r2, r1
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	193b      	adds	r3, r7, r4
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	f383 8810 	msr	PRIMASK, r3
}
 800a4a8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4aa:	183b      	adds	r3, r7, r0
 800a4ac:	881a      	ldrh	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	0011      	movs	r1, r2
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f000 f860 	bl	800a578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a4b8:	e044      	b.n	800a544 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a4ba:	23a4      	movs	r3, #164	; 0xa4
 800a4bc:	18fb      	adds	r3, r7, r3
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	2380      	movs	r3, #128	; 0x80
 800a4c2:	035b      	lsls	r3, r3, #13
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	d010      	beq.n	800a4ea <HAL_UART_IRQHandler+0x546>
 800a4c8:	239c      	movs	r3, #156	; 0x9c
 800a4ca:	18fb      	adds	r3, r7, r3
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	2380      	movs	r3, #128	; 0x80
 800a4d0:	03db      	lsls	r3, r3, #15
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	d009      	beq.n	800a4ea <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2280      	movs	r2, #128	; 0x80
 800a4dc:	0352      	lsls	r2, r2, #13
 800a4de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	f000 fd58 	bl	800af98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4e8:	e02f      	b.n	800a54a <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a4ea:	23a4      	movs	r3, #164	; 0xa4
 800a4ec:	18fb      	adds	r3, r7, r3
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2280      	movs	r2, #128	; 0x80
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	d00f      	beq.n	800a516 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a4f6:	23a0      	movs	r3, #160	; 0xa0
 800a4f8:	18fb      	adds	r3, r7, r3
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2280      	movs	r2, #128	; 0x80
 800a4fe:	4013      	ands	r3, r2
 800a500:	d009      	beq.n	800a516 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a506:	2b00      	cmp	r3, #0
 800a508:	d01e      	beq.n	800a548 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	0010      	movs	r0, r2
 800a512:	4798      	blx	r3
    }
    return;
 800a514:	e018      	b.n	800a548 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a516:	23a4      	movs	r3, #164	; 0xa4
 800a518:	18fb      	adds	r3, r7, r3
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2240      	movs	r2, #64	; 0x40
 800a51e:	4013      	ands	r3, r2
 800a520:	d013      	beq.n	800a54a <HAL_UART_IRQHandler+0x5a6>
 800a522:	23a0      	movs	r3, #160	; 0xa0
 800a524:	18fb      	adds	r3, r7, r3
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2240      	movs	r2, #64	; 0x40
 800a52a:	4013      	ands	r3, r2
 800a52c:	d00d      	beq.n	800a54a <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	0018      	movs	r0, r3
 800a532:	f000 fd06 	bl	800af42 <UART_EndTransmit_IT>
    return;
 800a536:	e008      	b.n	800a54a <HAL_UART_IRQHandler+0x5a6>
      return;
 800a538:	46c0      	nop			; (mov r8, r8)
 800a53a:	e006      	b.n	800a54a <HAL_UART_IRQHandler+0x5a6>
    return;
 800a53c:	46c0      	nop			; (mov r8, r8)
 800a53e:	e004      	b.n	800a54a <HAL_UART_IRQHandler+0x5a6>
      return;
 800a540:	46c0      	nop			; (mov r8, r8)
 800a542:	e002      	b.n	800a54a <HAL_UART_IRQHandler+0x5a6>
      return;
 800a544:	46c0      	nop			; (mov r8, r8)
 800a546:	e000      	b.n	800a54a <HAL_UART_IRQHandler+0x5a6>
    return;
 800a548:	46c0      	nop			; (mov r8, r8)
  }

}
 800a54a:	46bd      	mov	sp, r7
 800a54c:	b02b      	add	sp, #172	; 0xac
 800a54e:	bd90      	pop	{r4, r7, pc}
 800a550:	fffffeff 	.word	0xfffffeff
 800a554:	fffffedf 	.word	0xfffffedf

0800a558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a560:	46c0      	nop			; (mov r8, r8)
 800a562:	46bd      	mov	sp, r7
 800a564:	b002      	add	sp, #8
 800a566:	bd80      	pop	{r7, pc}

0800a568 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a570:	46c0      	nop			; (mov r8, r8)
 800a572:	46bd      	mov	sp, r7
 800a574:	b002      	add	sp, #8
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	000a      	movs	r2, r1
 800a582:	1cbb      	adds	r3, r7, #2
 800a584:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a586:	46c0      	nop			; (mov r8, r8)
 800a588:	46bd      	mov	sp, r7
 800a58a:	b002      	add	sp, #8
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a590:	b5b0      	push	{r4, r5, r7, lr}
 800a592:	b08e      	sub	sp, #56	; 0x38
 800a594:	af00      	add	r7, sp, #0
 800a596:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a598:	231a      	movs	r3, #26
 800a59a:	2218      	movs	r2, #24
 800a59c:	189b      	adds	r3, r3, r2
 800a59e:	19db      	adds	r3, r3, r7
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4ac3      	ldr	r2, [pc, #780]	; (800a8d0 <UART_SetConfig+0x340>)
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	0019      	movs	r1, r3
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4abe      	ldr	r2, [pc, #760]	; (800a8d4 <UART_SetConfig+0x344>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	0019      	movs	r1, r3
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4ab8      	ldr	r2, [pc, #736]	; (800a8d8 <UART_SetConfig+0x348>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d004      	beq.n	800a604 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a600:	4313      	orrs	r3, r2
 800a602:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	4ab4      	ldr	r2, [pc, #720]	; (800a8dc <UART_SetConfig+0x34c>)
 800a60c:	4013      	ands	r3, r2
 800a60e:	0019      	movs	r1, r3
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a616:	430a      	orrs	r2, r1
 800a618:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4ab0      	ldr	r2, [pc, #704]	; (800a8e0 <UART_SetConfig+0x350>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d131      	bne.n	800a688 <UART_SetConfig+0xf8>
 800a624:	4baf      	ldr	r3, [pc, #700]	; (800a8e4 <UART_SetConfig+0x354>)
 800a626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a628:	2203      	movs	r2, #3
 800a62a:	4013      	ands	r3, r2
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d01d      	beq.n	800a66c <UART_SetConfig+0xdc>
 800a630:	d823      	bhi.n	800a67a <UART_SetConfig+0xea>
 800a632:	2b02      	cmp	r3, #2
 800a634:	d00c      	beq.n	800a650 <UART_SetConfig+0xc0>
 800a636:	d820      	bhi.n	800a67a <UART_SetConfig+0xea>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <UART_SetConfig+0xb2>
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d00e      	beq.n	800a65e <UART_SetConfig+0xce>
 800a640:	e01b      	b.n	800a67a <UART_SetConfig+0xea>
 800a642:	231b      	movs	r3, #27
 800a644:	2218      	movs	r2, #24
 800a646:	189b      	adds	r3, r3, r2
 800a648:	19db      	adds	r3, r3, r7
 800a64a:	2201      	movs	r2, #1
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e0b4      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a650:	231b      	movs	r3, #27
 800a652:	2218      	movs	r2, #24
 800a654:	189b      	adds	r3, r3, r2
 800a656:	19db      	adds	r3, r3, r7
 800a658:	2202      	movs	r2, #2
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	e0ad      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a65e:	231b      	movs	r3, #27
 800a660:	2218      	movs	r2, #24
 800a662:	189b      	adds	r3, r3, r2
 800a664:	19db      	adds	r3, r3, r7
 800a666:	2204      	movs	r2, #4
 800a668:	701a      	strb	r2, [r3, #0]
 800a66a:	e0a6      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a66c:	231b      	movs	r3, #27
 800a66e:	2218      	movs	r2, #24
 800a670:	189b      	adds	r3, r3, r2
 800a672:	19db      	adds	r3, r3, r7
 800a674:	2208      	movs	r2, #8
 800a676:	701a      	strb	r2, [r3, #0]
 800a678:	e09f      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a67a:	231b      	movs	r3, #27
 800a67c:	2218      	movs	r2, #24
 800a67e:	189b      	adds	r3, r3, r2
 800a680:	19db      	adds	r3, r3, r7
 800a682:	2210      	movs	r2, #16
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e098      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a96      	ldr	r2, [pc, #600]	; (800a8e8 <UART_SetConfig+0x358>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d131      	bne.n	800a6f6 <UART_SetConfig+0x166>
 800a692:	4b94      	ldr	r3, [pc, #592]	; (800a8e4 <UART_SetConfig+0x354>)
 800a694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a696:	220c      	movs	r2, #12
 800a698:	4013      	ands	r3, r2
 800a69a:	2b0c      	cmp	r3, #12
 800a69c:	d01d      	beq.n	800a6da <UART_SetConfig+0x14a>
 800a69e:	d823      	bhi.n	800a6e8 <UART_SetConfig+0x158>
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d00c      	beq.n	800a6be <UART_SetConfig+0x12e>
 800a6a4:	d820      	bhi.n	800a6e8 <UART_SetConfig+0x158>
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <UART_SetConfig+0x120>
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d00e      	beq.n	800a6cc <UART_SetConfig+0x13c>
 800a6ae:	e01b      	b.n	800a6e8 <UART_SetConfig+0x158>
 800a6b0:	231b      	movs	r3, #27
 800a6b2:	2218      	movs	r2, #24
 800a6b4:	189b      	adds	r3, r3, r2
 800a6b6:	19db      	adds	r3, r3, r7
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
 800a6bc:	e07d      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a6be:	231b      	movs	r3, #27
 800a6c0:	2218      	movs	r2, #24
 800a6c2:	189b      	adds	r3, r3, r2
 800a6c4:	19db      	adds	r3, r3, r7
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	701a      	strb	r2, [r3, #0]
 800a6ca:	e076      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a6cc:	231b      	movs	r3, #27
 800a6ce:	2218      	movs	r2, #24
 800a6d0:	189b      	adds	r3, r3, r2
 800a6d2:	19db      	adds	r3, r3, r7
 800a6d4:	2204      	movs	r2, #4
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	e06f      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a6da:	231b      	movs	r3, #27
 800a6dc:	2218      	movs	r2, #24
 800a6de:	189b      	adds	r3, r3, r2
 800a6e0:	19db      	adds	r3, r3, r7
 800a6e2:	2208      	movs	r2, #8
 800a6e4:	701a      	strb	r2, [r3, #0]
 800a6e6:	e068      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a6e8:	231b      	movs	r3, #27
 800a6ea:	2218      	movs	r2, #24
 800a6ec:	189b      	adds	r3, r3, r2
 800a6ee:	19db      	adds	r3, r3, r7
 800a6f0:	2210      	movs	r2, #16
 800a6f2:	701a      	strb	r2, [r3, #0]
 800a6f4:	e061      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a7c      	ldr	r2, [pc, #496]	; (800a8ec <UART_SetConfig+0x35c>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d106      	bne.n	800a70e <UART_SetConfig+0x17e>
 800a700:	231b      	movs	r3, #27
 800a702:	2218      	movs	r2, #24
 800a704:	189b      	adds	r3, r3, r2
 800a706:	19db      	adds	r3, r3, r7
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
 800a70c:	e055      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a77      	ldr	r2, [pc, #476]	; (800a8f0 <UART_SetConfig+0x360>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d106      	bne.n	800a726 <UART_SetConfig+0x196>
 800a718:	231b      	movs	r3, #27
 800a71a:	2218      	movs	r2, #24
 800a71c:	189b      	adds	r3, r3, r2
 800a71e:	19db      	adds	r3, r3, r7
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
 800a724:	e049      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a6b      	ldr	r2, [pc, #428]	; (800a8d8 <UART_SetConfig+0x348>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d13e      	bne.n	800a7ae <UART_SetConfig+0x21e>
 800a730:	4b6c      	ldr	r3, [pc, #432]	; (800a8e4 <UART_SetConfig+0x354>)
 800a732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a734:	23c0      	movs	r3, #192	; 0xc0
 800a736:	011b      	lsls	r3, r3, #4
 800a738:	4013      	ands	r3, r2
 800a73a:	22c0      	movs	r2, #192	; 0xc0
 800a73c:	0112      	lsls	r2, r2, #4
 800a73e:	4293      	cmp	r3, r2
 800a740:	d027      	beq.n	800a792 <UART_SetConfig+0x202>
 800a742:	22c0      	movs	r2, #192	; 0xc0
 800a744:	0112      	lsls	r2, r2, #4
 800a746:	4293      	cmp	r3, r2
 800a748:	d82a      	bhi.n	800a7a0 <UART_SetConfig+0x210>
 800a74a:	2280      	movs	r2, #128	; 0x80
 800a74c:	0112      	lsls	r2, r2, #4
 800a74e:	4293      	cmp	r3, r2
 800a750:	d011      	beq.n	800a776 <UART_SetConfig+0x1e6>
 800a752:	2280      	movs	r2, #128	; 0x80
 800a754:	0112      	lsls	r2, r2, #4
 800a756:	4293      	cmp	r3, r2
 800a758:	d822      	bhi.n	800a7a0 <UART_SetConfig+0x210>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <UART_SetConfig+0x1d8>
 800a75e:	2280      	movs	r2, #128	; 0x80
 800a760:	00d2      	lsls	r2, r2, #3
 800a762:	4293      	cmp	r3, r2
 800a764:	d00e      	beq.n	800a784 <UART_SetConfig+0x1f4>
 800a766:	e01b      	b.n	800a7a0 <UART_SetConfig+0x210>
 800a768:	231b      	movs	r3, #27
 800a76a:	2218      	movs	r2, #24
 800a76c:	189b      	adds	r3, r3, r2
 800a76e:	19db      	adds	r3, r3, r7
 800a770:	2200      	movs	r2, #0
 800a772:	701a      	strb	r2, [r3, #0]
 800a774:	e021      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a776:	231b      	movs	r3, #27
 800a778:	2218      	movs	r2, #24
 800a77a:	189b      	adds	r3, r3, r2
 800a77c:	19db      	adds	r3, r3, r7
 800a77e:	2202      	movs	r2, #2
 800a780:	701a      	strb	r2, [r3, #0]
 800a782:	e01a      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a784:	231b      	movs	r3, #27
 800a786:	2218      	movs	r2, #24
 800a788:	189b      	adds	r3, r3, r2
 800a78a:	19db      	adds	r3, r3, r7
 800a78c:	2204      	movs	r2, #4
 800a78e:	701a      	strb	r2, [r3, #0]
 800a790:	e013      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a792:	231b      	movs	r3, #27
 800a794:	2218      	movs	r2, #24
 800a796:	189b      	adds	r3, r3, r2
 800a798:	19db      	adds	r3, r3, r7
 800a79a:	2208      	movs	r2, #8
 800a79c:	701a      	strb	r2, [r3, #0]
 800a79e:	e00c      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a7a0:	231b      	movs	r3, #27
 800a7a2:	2218      	movs	r2, #24
 800a7a4:	189b      	adds	r3, r3, r2
 800a7a6:	19db      	adds	r3, r3, r7
 800a7a8:	2210      	movs	r2, #16
 800a7aa:	701a      	strb	r2, [r3, #0]
 800a7ac:	e005      	b.n	800a7ba <UART_SetConfig+0x22a>
 800a7ae:	231b      	movs	r3, #27
 800a7b0:	2218      	movs	r2, #24
 800a7b2:	189b      	adds	r3, r3, r2
 800a7b4:	19db      	adds	r3, r3, r7
 800a7b6:	2210      	movs	r2, #16
 800a7b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a46      	ldr	r2, [pc, #280]	; (800a8d8 <UART_SetConfig+0x348>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d000      	beq.n	800a7c6 <UART_SetConfig+0x236>
 800a7c4:	e09a      	b.n	800a8fc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7c6:	231b      	movs	r3, #27
 800a7c8:	2218      	movs	r2, #24
 800a7ca:	189b      	adds	r3, r3, r2
 800a7cc:	19db      	adds	r3, r3, r7
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d01d      	beq.n	800a810 <UART_SetConfig+0x280>
 800a7d4:	dc20      	bgt.n	800a818 <UART_SetConfig+0x288>
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	d015      	beq.n	800a806 <UART_SetConfig+0x276>
 800a7da:	dc1d      	bgt.n	800a818 <UART_SetConfig+0x288>
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <UART_SetConfig+0x256>
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d005      	beq.n	800a7f0 <UART_SetConfig+0x260>
 800a7e4:	e018      	b.n	800a818 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7e6:	f7fd f8ed 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 800a7ea:	0003      	movs	r3, r0
 800a7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7ee:	e01c      	b.n	800a82a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f0:	4b3c      	ldr	r3, [pc, #240]	; (800a8e4 <UART_SetConfig+0x354>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2210      	movs	r2, #16
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	d002      	beq.n	800a800 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a7fa:	4b3e      	ldr	r3, [pc, #248]	; (800a8f4 <UART_SetConfig+0x364>)
 800a7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7fe:	e014      	b.n	800a82a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800a800:	4b3d      	ldr	r3, [pc, #244]	; (800a8f8 <UART_SetConfig+0x368>)
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a804:	e011      	b.n	800a82a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a806:	f7fd f82d 	bl	8007864 <HAL_RCC_GetSysClockFreq>
 800a80a:	0003      	movs	r3, r0
 800a80c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a80e:	e00c      	b.n	800a82a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a810:	2380      	movs	r3, #128	; 0x80
 800a812:	021b      	lsls	r3, r3, #8
 800a814:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a816:	e008      	b.n	800a82a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800a818:	2300      	movs	r3, #0
 800a81a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a81c:	231a      	movs	r3, #26
 800a81e:	2218      	movs	r2, #24
 800a820:	189b      	adds	r3, r3, r2
 800a822:	19db      	adds	r3, r3, r7
 800a824:	2201      	movs	r2, #1
 800a826:	701a      	strb	r2, [r3, #0]
        break;
 800a828:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d100      	bne.n	800a832 <UART_SetConfig+0x2a2>
 800a830:	e134      	b.n	800aa9c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	0013      	movs	r3, r2
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	189b      	adds	r3, r3, r2
 800a83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a83e:	429a      	cmp	r2, r3
 800a840:	d305      	bcc.n	800a84e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d906      	bls.n	800a85c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800a84e:	231a      	movs	r3, #26
 800a850:	2218      	movs	r2, #24
 800a852:	189b      	adds	r3, r3, r2
 800a854:	19db      	adds	r3, r3, r7
 800a856:	2201      	movs	r2, #1
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	e11f      	b.n	800aa9c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	2300      	movs	r3, #0
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	6939      	ldr	r1, [r7, #16]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	000b      	movs	r3, r1
 800a86a:	0e1b      	lsrs	r3, r3, #24
 800a86c:	0010      	movs	r0, r2
 800a86e:	0205      	lsls	r5, r0, #8
 800a870:	431d      	orrs	r5, r3
 800a872:	000b      	movs	r3, r1
 800a874:	021c      	lsls	r4, r3, #8
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	085b      	lsrs	r3, r3, #1
 800a87c:	60bb      	str	r3, [r7, #8]
 800a87e:	2300      	movs	r3, #0
 800a880:	60fb      	str	r3, [r7, #12]
 800a882:	68b8      	ldr	r0, [r7, #8]
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	1900      	adds	r0, r0, r4
 800a888:	4169      	adcs	r1, r5
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	2300      	movs	r3, #0
 800a892:	607b      	str	r3, [r7, #4]
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f7f5 fe06 	bl	80004a8 <__aeabi_uldivmod>
 800a89c:	0002      	movs	r2, r0
 800a89e:	000b      	movs	r3, r1
 800a8a0:	0013      	movs	r3, r2
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8a6:	23c0      	movs	r3, #192	; 0xc0
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d309      	bcc.n	800a8c2 <UART_SetConfig+0x332>
 800a8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8b0:	2380      	movs	r3, #128	; 0x80
 800a8b2:	035b      	lsls	r3, r3, #13
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d204      	bcs.n	800a8c2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8be:	60da      	str	r2, [r3, #12]
 800a8c0:	e0ec      	b.n	800aa9c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800a8c2:	231a      	movs	r3, #26
 800a8c4:	2218      	movs	r2, #24
 800a8c6:	189b      	adds	r3, r3, r2
 800a8c8:	19db      	adds	r3, r3, r7
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	e0e5      	b.n	800aa9c <UART_SetConfig+0x50c>
 800a8d0:	efff69f3 	.word	0xefff69f3
 800a8d4:	ffffcfff 	.word	0xffffcfff
 800a8d8:	40004800 	.word	0x40004800
 800a8dc:	fffff4ff 	.word	0xfffff4ff
 800a8e0:	40013800 	.word	0x40013800
 800a8e4:	40021000 	.word	0x40021000
 800a8e8:	40004400 	.word	0x40004400
 800a8ec:	40004c00 	.word	0x40004c00
 800a8f0:	40005000 	.word	0x40005000
 800a8f4:	003d0900 	.word	0x003d0900
 800a8f8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	69da      	ldr	r2, [r3, #28]
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	429a      	cmp	r2, r3
 800a906:	d000      	beq.n	800a90a <UART_SetConfig+0x37a>
 800a908:	e071      	b.n	800a9ee <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a90a:	231b      	movs	r3, #27
 800a90c:	2218      	movs	r2, #24
 800a90e:	189b      	adds	r3, r3, r2
 800a910:	19db      	adds	r3, r3, r7
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b08      	cmp	r3, #8
 800a916:	d822      	bhi.n	800a95e <UART_SetConfig+0x3ce>
 800a918:	009a      	lsls	r2, r3, #2
 800a91a:	4b68      	ldr	r3, [pc, #416]	; (800aabc <UART_SetConfig+0x52c>)
 800a91c:	18d3      	adds	r3, r2, r3
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a922:	f7fd f84f 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 800a926:	0003      	movs	r3, r0
 800a928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a92a:	e021      	b.n	800a970 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a92c:	f7fd f860 	bl	80079f0 <HAL_RCC_GetPCLK2Freq>
 800a930:	0003      	movs	r3, r0
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a934:	e01c      	b.n	800a970 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a936:	4b62      	ldr	r3, [pc, #392]	; (800aac0 <UART_SetConfig+0x530>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2210      	movs	r2, #16
 800a93c:	4013      	ands	r3, r2
 800a93e:	d002      	beq.n	800a946 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a940:	4b60      	ldr	r3, [pc, #384]	; (800aac4 <UART_SetConfig+0x534>)
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a944:	e014      	b.n	800a970 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800a946:	4b60      	ldr	r3, [pc, #384]	; (800aac8 <UART_SetConfig+0x538>)
 800a948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a94a:	e011      	b.n	800a970 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a94c:	f7fc ff8a 	bl	8007864 <HAL_RCC_GetSysClockFreq>
 800a950:	0003      	movs	r3, r0
 800a952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a954:	e00c      	b.n	800a970 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a956:	2380      	movs	r3, #128	; 0x80
 800a958:	021b      	lsls	r3, r3, #8
 800a95a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a95c:	e008      	b.n	800a970 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800a95e:	2300      	movs	r3, #0
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a962:	231a      	movs	r3, #26
 800a964:	2218      	movs	r2, #24
 800a966:	189b      	adds	r3, r3, r2
 800a968:	19db      	adds	r3, r3, r7
 800a96a:	2201      	movs	r2, #1
 800a96c:	701a      	strb	r2, [r3, #0]
        break;
 800a96e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d100      	bne.n	800a978 <UART_SetConfig+0x3e8>
 800a976:	e091      	b.n	800aa9c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	005a      	lsls	r2, r3, #1
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	085b      	lsrs	r3, r3, #1
 800a982:	18d2      	adds	r2, r2, r3
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	0019      	movs	r1, r3
 800a98a:	0010      	movs	r0, r2
 800a98c:	f7f5 fbd8 	bl	8000140 <__udivsi3>
 800a990:	0003      	movs	r3, r0
 800a992:	b29b      	uxth	r3, r3
 800a994:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	2b0f      	cmp	r3, #15
 800a99a:	d921      	bls.n	800a9e0 <UART_SetConfig+0x450>
 800a99c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a99e:	2380      	movs	r3, #128	; 0x80
 800a9a0:	025b      	lsls	r3, r3, #9
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d21c      	bcs.n	800a9e0 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	200e      	movs	r0, #14
 800a9ac:	2418      	movs	r4, #24
 800a9ae:	1903      	adds	r3, r0, r4
 800a9b0:	19db      	adds	r3, r3, r7
 800a9b2:	210f      	movs	r1, #15
 800a9b4:	438a      	bics	r2, r1
 800a9b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	085b      	lsrs	r3, r3, #1
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	2207      	movs	r2, #7
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	b299      	uxth	r1, r3
 800a9c4:	1903      	adds	r3, r0, r4
 800a9c6:	19db      	adds	r3, r3, r7
 800a9c8:	1902      	adds	r2, r0, r4
 800a9ca:	19d2      	adds	r2, r2, r7
 800a9cc:	8812      	ldrh	r2, [r2, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	1902      	adds	r2, r0, r4
 800a9d8:	19d2      	adds	r2, r2, r7
 800a9da:	8812      	ldrh	r2, [r2, #0]
 800a9dc:	60da      	str	r2, [r3, #12]
 800a9de:	e05d      	b.n	800aa9c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800a9e0:	231a      	movs	r3, #26
 800a9e2:	2218      	movs	r2, #24
 800a9e4:	189b      	adds	r3, r3, r2
 800a9e6:	19db      	adds	r3, r3, r7
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	e056      	b.n	800aa9c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9ee:	231b      	movs	r3, #27
 800a9f0:	2218      	movs	r2, #24
 800a9f2:	189b      	adds	r3, r3, r2
 800a9f4:	19db      	adds	r3, r3, r7
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2b08      	cmp	r3, #8
 800a9fa:	d822      	bhi.n	800aa42 <UART_SetConfig+0x4b2>
 800a9fc:	009a      	lsls	r2, r3, #2
 800a9fe:	4b33      	ldr	r3, [pc, #204]	; (800aacc <UART_SetConfig+0x53c>)
 800aa00:	18d3      	adds	r3, r2, r3
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa06:	f7fc ffdd 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 800aa0a:	0003      	movs	r3, r0
 800aa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa0e:	e021      	b.n	800aa54 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa10:	f7fc ffee 	bl	80079f0 <HAL_RCC_GetPCLK2Freq>
 800aa14:	0003      	movs	r3, r0
 800aa16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa18:	e01c      	b.n	800aa54 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa1a:	4b29      	ldr	r3, [pc, #164]	; (800aac0 <UART_SetConfig+0x530>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2210      	movs	r2, #16
 800aa20:	4013      	ands	r3, r2
 800aa22:	d002      	beq.n	800aa2a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800aa24:	4b27      	ldr	r3, [pc, #156]	; (800aac4 <UART_SetConfig+0x534>)
 800aa26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa28:	e014      	b.n	800aa54 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800aa2a:	4b27      	ldr	r3, [pc, #156]	; (800aac8 <UART_SetConfig+0x538>)
 800aa2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa2e:	e011      	b.n	800aa54 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa30:	f7fc ff18 	bl	8007864 <HAL_RCC_GetSysClockFreq>
 800aa34:	0003      	movs	r3, r0
 800aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa38:	e00c      	b.n	800aa54 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa3a:	2380      	movs	r3, #128	; 0x80
 800aa3c:	021b      	lsls	r3, r3, #8
 800aa3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa40:	e008      	b.n	800aa54 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800aa42:	2300      	movs	r3, #0
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa46:	231a      	movs	r3, #26
 800aa48:	2218      	movs	r2, #24
 800aa4a:	189b      	adds	r3, r3, r2
 800aa4c:	19db      	adds	r3, r3, r7
 800aa4e:	2201      	movs	r2, #1
 800aa50:	701a      	strb	r2, [r3, #0]
        break;
 800aa52:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800aa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d020      	beq.n	800aa9c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	085a      	lsrs	r2, r3, #1
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa62:	18d2      	adds	r2, r2, r3
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	0019      	movs	r1, r3
 800aa6a:	0010      	movs	r0, r2
 800aa6c:	f7f5 fb68 	bl	8000140 <__udivsi3>
 800aa70:	0003      	movs	r3, r0
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa78:	2b0f      	cmp	r3, #15
 800aa7a:	d909      	bls.n	800aa90 <UART_SetConfig+0x500>
 800aa7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa7e:	2380      	movs	r3, #128	; 0x80
 800aa80:	025b      	lsls	r3, r3, #9
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d204      	bcs.n	800aa90 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa8c:	60da      	str	r2, [r3, #12]
 800aa8e:	e005      	b.n	800aa9c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800aa90:	231a      	movs	r3, #26
 800aa92:	2218      	movs	r2, #24
 800aa94:	189b      	adds	r3, r3, r2
 800aa96:	19db      	adds	r3, r3, r7
 800aa98:	2201      	movs	r2, #1
 800aa9a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800aaa8:	231a      	movs	r3, #26
 800aaaa:	2218      	movs	r2, #24
 800aaac:	189b      	adds	r3, r3, r2
 800aaae:	19db      	adds	r3, r3, r7
 800aab0:	781b      	ldrb	r3, [r3, #0]
}
 800aab2:	0018      	movs	r0, r3
 800aab4:	46bd      	mov	sp, r7
 800aab6:	b00e      	add	sp, #56	; 0x38
 800aab8:	bdb0      	pop	{r4, r5, r7, pc}
 800aaba:	46c0      	nop			; (mov r8, r8)
 800aabc:	0800e214 	.word	0x0800e214
 800aac0:	40021000 	.word	0x40021000
 800aac4:	003d0900 	.word	0x003d0900
 800aac8:	00f42400 	.word	0x00f42400
 800aacc:	0800e238 	.word	0x0800e238

0800aad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	2201      	movs	r2, #1
 800aade:	4013      	ands	r3, r2
 800aae0:	d00b      	beq.n	800aafa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	4a4a      	ldr	r2, [pc, #296]	; (800ac14 <UART_AdvFeatureConfig+0x144>)
 800aaea:	4013      	ands	r3, r2
 800aaec:	0019      	movs	r1, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2202      	movs	r2, #2
 800ab00:	4013      	ands	r3, r2
 800ab02:	d00b      	beq.n	800ab1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	4a43      	ldr	r2, [pc, #268]	; (800ac18 <UART_AdvFeatureConfig+0x148>)
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	0019      	movs	r1, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2204      	movs	r2, #4
 800ab22:	4013      	ands	r3, r2
 800ab24:	d00b      	beq.n	800ab3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	4a3b      	ldr	r2, [pc, #236]	; (800ac1c <UART_AdvFeatureConfig+0x14c>)
 800ab2e:	4013      	ands	r3, r2
 800ab30:	0019      	movs	r1, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab42:	2208      	movs	r2, #8
 800ab44:	4013      	ands	r3, r2
 800ab46:	d00b      	beq.n	800ab60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	4a34      	ldr	r2, [pc, #208]	; (800ac20 <UART_AdvFeatureConfig+0x150>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	0019      	movs	r1, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	430a      	orrs	r2, r1
 800ab5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2210      	movs	r2, #16
 800ab66:	4013      	ands	r3, r2
 800ab68:	d00b      	beq.n	800ab82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	4a2c      	ldr	r2, [pc, #176]	; (800ac24 <UART_AdvFeatureConfig+0x154>)
 800ab72:	4013      	ands	r3, r2
 800ab74:	0019      	movs	r1, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2220      	movs	r2, #32
 800ab88:	4013      	ands	r3, r2
 800ab8a:	d00b      	beq.n	800aba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	4a25      	ldr	r2, [pc, #148]	; (800ac28 <UART_AdvFeatureConfig+0x158>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	0019      	movs	r1, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba8:	2240      	movs	r2, #64	; 0x40
 800abaa:	4013      	ands	r3, r2
 800abac:	d01d      	beq.n	800abea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	4a1d      	ldr	r2, [pc, #116]	; (800ac2c <UART_AdvFeatureConfig+0x15c>)
 800abb6:	4013      	ands	r3, r2
 800abb8:	0019      	movs	r1, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	430a      	orrs	r2, r1
 800abc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abca:	2380      	movs	r3, #128	; 0x80
 800abcc:	035b      	lsls	r3, r3, #13
 800abce:	429a      	cmp	r2, r3
 800abd0:	d10b      	bne.n	800abea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	4a15      	ldr	r2, [pc, #84]	; (800ac30 <UART_AdvFeatureConfig+0x160>)
 800abda:	4013      	ands	r3, r2
 800abdc:	0019      	movs	r1, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	2280      	movs	r2, #128	; 0x80
 800abf0:	4013      	ands	r3, r2
 800abf2:	d00b      	beq.n	800ac0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	4a0e      	ldr	r2, [pc, #56]	; (800ac34 <UART_AdvFeatureConfig+0x164>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	0019      	movs	r1, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	605a      	str	r2, [r3, #4]
  }
}
 800ac0c:	46c0      	nop			; (mov r8, r8)
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	b002      	add	sp, #8
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	fffdffff 	.word	0xfffdffff
 800ac18:	fffeffff 	.word	0xfffeffff
 800ac1c:	fffbffff 	.word	0xfffbffff
 800ac20:	ffff7fff 	.word	0xffff7fff
 800ac24:	ffffefff 	.word	0xffffefff
 800ac28:	ffffdfff 	.word	0xffffdfff
 800ac2c:	ffefffff 	.word	0xffefffff
 800ac30:	ff9fffff 	.word	0xff9fffff
 800ac34:	fff7ffff 	.word	0xfff7ffff

0800ac38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af02      	add	r7, sp, #8
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2280      	movs	r2, #128	; 0x80
 800ac44:	2100      	movs	r1, #0
 800ac46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac48:	f7fa fef8 	bl	8005a3c <HAL_GetTick>
 800ac4c:	0003      	movs	r3, r0
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2208      	movs	r2, #8
 800ac58:	4013      	ands	r3, r2
 800ac5a:	2b08      	cmp	r3, #8
 800ac5c:	d10c      	bne.n	800ac78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2280      	movs	r2, #128	; 0x80
 800ac62:	0391      	lsls	r1, r2, #14
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	4a17      	ldr	r2, [pc, #92]	; (800acc4 <UART_CheckIdleState+0x8c>)
 800ac68:	9200      	str	r2, [sp, #0]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f000 f82c 	bl	800acc8 <UART_WaitOnFlagUntilTimeout>
 800ac70:	1e03      	subs	r3, r0, #0
 800ac72:	d001      	beq.n	800ac78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e021      	b.n	800acbc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2204      	movs	r2, #4
 800ac80:	4013      	ands	r3, r2
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d10c      	bne.n	800aca0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2280      	movs	r2, #128	; 0x80
 800ac8a:	03d1      	lsls	r1, r2, #15
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	4a0d      	ldr	r2, [pc, #52]	; (800acc4 <UART_CheckIdleState+0x8c>)
 800ac90:	9200      	str	r2, [sp, #0]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f000 f818 	bl	800acc8 <UART_WaitOnFlagUntilTimeout>
 800ac98:	1e03      	subs	r3, r0, #0
 800ac9a:	d001      	beq.n	800aca0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e00d      	b.n	800acbc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2220      	movs	r2, #32
 800acaa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2274      	movs	r2, #116	; 0x74
 800acb6:	2100      	movs	r1, #0
 800acb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	0018      	movs	r0, r3
 800acbe:	46bd      	mov	sp, r7
 800acc0:	b004      	add	sp, #16
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	01ffffff 	.word	0x01ffffff

0800acc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b094      	sub	sp, #80	; 0x50
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	603b      	str	r3, [r7, #0]
 800acd4:	1dfb      	adds	r3, r7, #7
 800acd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acd8:	e0a3      	b.n	800ae22 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acdc:	3301      	adds	r3, #1
 800acde:	d100      	bne.n	800ace2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800ace0:	e09f      	b.n	800ae22 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ace2:	f7fa feab 	bl	8005a3c <HAL_GetTick>
 800ace6:	0002      	movs	r2, r0
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acee:	429a      	cmp	r2, r3
 800acf0:	d302      	bcc.n	800acf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800acf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d13d      	bne.n	800ad74 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acf8:	f3ef 8310 	mrs	r3, PRIMASK
 800acfc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad00:	647b      	str	r3, [r7, #68]	; 0x44
 800ad02:	2301      	movs	r3, #1
 800ad04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad08:	f383 8810 	msr	PRIMASK, r3
}
 800ad0c:	46c0      	nop			; (mov r8, r8)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	494c      	ldr	r1, [pc, #304]	; (800ae4c <UART_WaitOnFlagUntilTimeout+0x184>)
 800ad1a:	400a      	ands	r2, r1
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad20:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	f383 8810 	msr	PRIMASK, r3
}
 800ad28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad2a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad2e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad32:	643b      	str	r3, [r7, #64]	; 0x40
 800ad34:	2301      	movs	r3, #1
 800ad36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	f383 8810 	msr	PRIMASK, r3
}
 800ad3e:	46c0      	nop			; (mov r8, r8)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	689a      	ldr	r2, [r3, #8]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	438a      	bics	r2, r1
 800ad4e:	609a      	str	r2, [r3, #8]
 800ad50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad52:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad56:	f383 8810 	msr	PRIMASK, r3
}
 800ad5a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2220      	movs	r2, #32
 800ad60:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2220      	movs	r2, #32
 800ad66:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2274      	movs	r2, #116	; 0x74
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e067      	b.n	800ae44 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2204      	movs	r2, #4
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	d050      	beq.n	800ae22 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	69da      	ldr	r2, [r3, #28]
 800ad86:	2380      	movs	r3, #128	; 0x80
 800ad88:	011b      	lsls	r3, r3, #4
 800ad8a:	401a      	ands	r2, r3
 800ad8c:	2380      	movs	r3, #128	; 0x80
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d146      	bne.n	800ae22 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2280      	movs	r2, #128	; 0x80
 800ad9a:	0112      	lsls	r2, r2, #4
 800ad9c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad9e:	f3ef 8310 	mrs	r3, PRIMASK
 800ada2:	613b      	str	r3, [r7, #16]
  return(result);
 800ada4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ada6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ada8:	2301      	movs	r3, #1
 800adaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f383 8810 	msr	PRIMASK, r3
}
 800adb2:	46c0      	nop			; (mov r8, r8)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4923      	ldr	r1, [pc, #140]	; (800ae4c <UART_WaitOnFlagUntilTimeout+0x184>)
 800adc0:	400a      	ands	r2, r1
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	f383 8810 	msr	PRIMASK, r3
}
 800adce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800add0:	f3ef 8310 	mrs	r3, PRIMASK
 800add4:	61fb      	str	r3, [r7, #28]
  return(result);
 800add6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adda:	2301      	movs	r3, #1
 800addc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	f383 8810 	msr	PRIMASK, r3
}
 800ade4:	46c0      	nop			; (mov r8, r8)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689a      	ldr	r2, [r3, #8]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2101      	movs	r1, #1
 800adf2:	438a      	bics	r2, r1
 800adf4:	609a      	str	r2, [r3, #8]
 800adf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	f383 8810 	msr	PRIMASK, r3
}
 800ae00:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2220      	movs	r2, #32
 800ae06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2280      	movs	r2, #128	; 0x80
 800ae12:	2120      	movs	r1, #32
 800ae14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2274      	movs	r2, #116	; 0x74
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e010      	b.n	800ae44 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	425a      	negs	r2, r3
 800ae32:	4153      	adcs	r3, r2
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	001a      	movs	r2, r3
 800ae38:	1dfb      	adds	r3, r7, #7
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d100      	bne.n	800ae42 <UART_WaitOnFlagUntilTimeout+0x17a>
 800ae40:	e74b      	b.n	800acda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	0018      	movs	r0, r3
 800ae46:	46bd      	mov	sp, r7
 800ae48:	b014      	add	sp, #80	; 0x50
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	fffffe5f 	.word	0xfffffe5f

0800ae50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08e      	sub	sp, #56	; 0x38
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae58:	f3ef 8310 	mrs	r3, PRIMASK
 800ae5c:	617b      	str	r3, [r7, #20]
  return(result);
 800ae5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae60:	637b      	str	r3, [r7, #52]	; 0x34
 800ae62:	2301      	movs	r3, #1
 800ae64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	f383 8810 	msr	PRIMASK, r3
}
 800ae6c:	46c0      	nop			; (mov r8, r8)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4925      	ldr	r1, [pc, #148]	; (800af10 <UART_EndRxTransfer+0xc0>)
 800ae7a:	400a      	ands	r2, r1
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	f383 8810 	msr	PRIMASK, r3
}
 800ae88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae8e:	623b      	str	r3, [r7, #32]
  return(result);
 800ae90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae92:	633b      	str	r3, [r7, #48]	; 0x30
 800ae94:	2301      	movs	r3, #1
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	f383 8810 	msr	PRIMASK, r3
}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	689a      	ldr	r2, [r3, #8]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2101      	movs	r1, #1
 800aeac:	438a      	bics	r2, r1
 800aeae:	609a      	str	r2, [r3, #8]
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	f383 8810 	msr	PRIMASK, r3
}
 800aeba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d118      	bne.n	800aef6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aec4:	f3ef 8310 	mrs	r3, PRIMASK
 800aec8:	60bb      	str	r3, [r7, #8]
  return(result);
 800aeca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aece:	2301      	movs	r3, #1
 800aed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f383 8810 	msr	PRIMASK, r3
}
 800aed8:	46c0      	nop			; (mov r8, r8)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2110      	movs	r1, #16
 800aee6:	438a      	bics	r2, r1
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f383 8810 	msr	PRIMASK, r3
}
 800aef4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	665a      	str	r2, [r3, #100]	; 0x64
}
 800af08:	46c0      	nop			; (mov r8, r8)
 800af0a:	46bd      	mov	sp, r7
 800af0c:	b00e      	add	sp, #56	; 0x38
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	fffffedf 	.word	0xfffffedf

0800af14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	225a      	movs	r2, #90	; 0x5a
 800af26:	2100      	movs	r1, #0
 800af28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2252      	movs	r2, #82	; 0x52
 800af2e:	2100      	movs	r1, #0
 800af30:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	0018      	movs	r0, r3
 800af36:	f7ff fb17 	bl	800a568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af3a:	46c0      	nop			; (mov r8, r8)
 800af3c:	46bd      	mov	sp, r7
 800af3e:	b004      	add	sp, #16
 800af40:	bd80      	pop	{r7, pc}

0800af42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af4a:	f3ef 8310 	mrs	r3, PRIMASK
 800af4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800af50:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	2301      	movs	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f383 8810 	msr	PRIMASK, r3
}
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2140      	movs	r1, #64	; 0x40
 800af6c:	438a      	bics	r2, r1
 800af6e:	601a      	str	r2, [r3, #0]
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f383 8810 	msr	PRIMASK, r3
}
 800af7a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2220      	movs	r2, #32
 800af80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	0018      	movs	r0, r3
 800af8c:	f7ff fae4 	bl	800a558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af90:	46c0      	nop			; (mov r8, r8)
 800af92:	46bd      	mov	sp, r7
 800af94:	b006      	add	sp, #24
 800af96:	bd80      	pop	{r7, pc}

0800af98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800afa0:	46c0      	nop			; (mov r8, r8)
 800afa2:	46bd      	mov	sp, r7
 800afa4:	b002      	add	sp, #8
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <atoi>:
 800afa8:	b510      	push	{r4, lr}
 800afaa:	220a      	movs	r2, #10
 800afac:	2100      	movs	r1, #0
 800afae:	f000 fe4d 	bl	800bc4c <strtol>
 800afb2:	bd10      	pop	{r4, pc}

0800afb4 <__errno>:
 800afb4:	4b01      	ldr	r3, [pc, #4]	; (800afbc <__errno+0x8>)
 800afb6:	6818      	ldr	r0, [r3, #0]
 800afb8:	4770      	bx	lr
 800afba:	46c0      	nop			; (mov r8, r8)
 800afbc:	2000000c 	.word	0x2000000c

0800afc0 <__libc_init_array>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	2600      	movs	r6, #0
 800afc4:	4d0c      	ldr	r5, [pc, #48]	; (800aff8 <__libc_init_array+0x38>)
 800afc6:	4c0d      	ldr	r4, [pc, #52]	; (800affc <__libc_init_array+0x3c>)
 800afc8:	1b64      	subs	r4, r4, r5
 800afca:	10a4      	asrs	r4, r4, #2
 800afcc:	42a6      	cmp	r6, r4
 800afce:	d109      	bne.n	800afe4 <__libc_init_array+0x24>
 800afd0:	2600      	movs	r6, #0
 800afd2:	f003 f853 	bl	800e07c <_init>
 800afd6:	4d0a      	ldr	r5, [pc, #40]	; (800b000 <__libc_init_array+0x40>)
 800afd8:	4c0a      	ldr	r4, [pc, #40]	; (800b004 <__libc_init_array+0x44>)
 800afda:	1b64      	subs	r4, r4, r5
 800afdc:	10a4      	asrs	r4, r4, #2
 800afde:	42a6      	cmp	r6, r4
 800afe0:	d105      	bne.n	800afee <__libc_init_array+0x2e>
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	00b3      	lsls	r3, r6, #2
 800afe6:	58eb      	ldr	r3, [r5, r3]
 800afe8:	4798      	blx	r3
 800afea:	3601      	adds	r6, #1
 800afec:	e7ee      	b.n	800afcc <__libc_init_array+0xc>
 800afee:	00b3      	lsls	r3, r6, #2
 800aff0:	58eb      	ldr	r3, [r5, r3]
 800aff2:	4798      	blx	r3
 800aff4:	3601      	adds	r6, #1
 800aff6:	e7f2      	b.n	800afde <__libc_init_array+0x1e>
 800aff8:	0800e644 	.word	0x0800e644
 800affc:	0800e644 	.word	0x0800e644
 800b000:	0800e644 	.word	0x0800e644
 800b004:	0800e648 	.word	0x0800e648

0800b008 <malloc>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	4b03      	ldr	r3, [pc, #12]	; (800b018 <malloc+0x10>)
 800b00c:	0001      	movs	r1, r0
 800b00e:	6818      	ldr	r0, [r3, #0]
 800b010:	f000 f878 	bl	800b104 <_malloc_r>
 800b014:	bd10      	pop	{r4, pc}
 800b016:	46c0      	nop			; (mov r8, r8)
 800b018:	2000000c 	.word	0x2000000c

0800b01c <memset>:
 800b01c:	0003      	movs	r3, r0
 800b01e:	1882      	adds	r2, r0, r2
 800b020:	4293      	cmp	r3, r2
 800b022:	d100      	bne.n	800b026 <memset+0xa>
 800b024:	4770      	bx	lr
 800b026:	7019      	strb	r1, [r3, #0]
 800b028:	3301      	adds	r3, #1
 800b02a:	e7f9      	b.n	800b020 <memset+0x4>

0800b02c <_free_r>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	0005      	movs	r5, r0
 800b030:	2900      	cmp	r1, #0
 800b032:	d010      	beq.n	800b056 <_free_r+0x2a>
 800b034:	1f0c      	subs	r4, r1, #4
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	da00      	bge.n	800b03e <_free_r+0x12>
 800b03c:	18e4      	adds	r4, r4, r3
 800b03e:	0028      	movs	r0, r5
 800b040:	f001 ffda 	bl	800cff8 <__malloc_lock>
 800b044:	4a1d      	ldr	r2, [pc, #116]	; (800b0bc <_free_r+0x90>)
 800b046:	6813      	ldr	r3, [r2, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d105      	bne.n	800b058 <_free_r+0x2c>
 800b04c:	6063      	str	r3, [r4, #4]
 800b04e:	6014      	str	r4, [r2, #0]
 800b050:	0028      	movs	r0, r5
 800b052:	f001 ffd9 	bl	800d008 <__malloc_unlock>
 800b056:	bd70      	pop	{r4, r5, r6, pc}
 800b058:	42a3      	cmp	r3, r4
 800b05a:	d908      	bls.n	800b06e <_free_r+0x42>
 800b05c:	6821      	ldr	r1, [r4, #0]
 800b05e:	1860      	adds	r0, r4, r1
 800b060:	4283      	cmp	r3, r0
 800b062:	d1f3      	bne.n	800b04c <_free_r+0x20>
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	1841      	adds	r1, r0, r1
 800b06a:	6021      	str	r1, [r4, #0]
 800b06c:	e7ee      	b.n	800b04c <_free_r+0x20>
 800b06e:	001a      	movs	r2, r3
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <_free_r+0x4e>
 800b076:	42a3      	cmp	r3, r4
 800b078:	d9f9      	bls.n	800b06e <_free_r+0x42>
 800b07a:	6811      	ldr	r1, [r2, #0]
 800b07c:	1850      	adds	r0, r2, r1
 800b07e:	42a0      	cmp	r0, r4
 800b080:	d10b      	bne.n	800b09a <_free_r+0x6e>
 800b082:	6820      	ldr	r0, [r4, #0]
 800b084:	1809      	adds	r1, r1, r0
 800b086:	1850      	adds	r0, r2, r1
 800b088:	6011      	str	r1, [r2, #0]
 800b08a:	4283      	cmp	r3, r0
 800b08c:	d1e0      	bne.n	800b050 <_free_r+0x24>
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	1841      	adds	r1, r0, r1
 800b094:	6011      	str	r1, [r2, #0]
 800b096:	6053      	str	r3, [r2, #4]
 800b098:	e7da      	b.n	800b050 <_free_r+0x24>
 800b09a:	42a0      	cmp	r0, r4
 800b09c:	d902      	bls.n	800b0a4 <_free_r+0x78>
 800b09e:	230c      	movs	r3, #12
 800b0a0:	602b      	str	r3, [r5, #0]
 800b0a2:	e7d5      	b.n	800b050 <_free_r+0x24>
 800b0a4:	6821      	ldr	r1, [r4, #0]
 800b0a6:	1860      	adds	r0, r4, r1
 800b0a8:	4283      	cmp	r3, r0
 800b0aa:	d103      	bne.n	800b0b4 <_free_r+0x88>
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	1841      	adds	r1, r0, r1
 800b0b2:	6021      	str	r1, [r4, #0]
 800b0b4:	6063      	str	r3, [r4, #4]
 800b0b6:	6054      	str	r4, [r2, #4]
 800b0b8:	e7ca      	b.n	800b050 <_free_r+0x24>
 800b0ba:	46c0      	nop			; (mov r8, r8)
 800b0bc:	200007f0 	.word	0x200007f0

0800b0c0 <sbrk_aligned>:
 800b0c0:	b570      	push	{r4, r5, r6, lr}
 800b0c2:	4e0f      	ldr	r6, [pc, #60]	; (800b100 <sbrk_aligned+0x40>)
 800b0c4:	000d      	movs	r5, r1
 800b0c6:	6831      	ldr	r1, [r6, #0]
 800b0c8:	0004      	movs	r4, r0
 800b0ca:	2900      	cmp	r1, #0
 800b0cc:	d102      	bne.n	800b0d4 <sbrk_aligned+0x14>
 800b0ce:	f000 fcfd 	bl	800bacc <_sbrk_r>
 800b0d2:	6030      	str	r0, [r6, #0]
 800b0d4:	0029      	movs	r1, r5
 800b0d6:	0020      	movs	r0, r4
 800b0d8:	f000 fcf8 	bl	800bacc <_sbrk_r>
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d00a      	beq.n	800b0f6 <sbrk_aligned+0x36>
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	1cc5      	adds	r5, r0, #3
 800b0e4:	439d      	bics	r5, r3
 800b0e6:	42a8      	cmp	r0, r5
 800b0e8:	d007      	beq.n	800b0fa <sbrk_aligned+0x3a>
 800b0ea:	1a29      	subs	r1, r5, r0
 800b0ec:	0020      	movs	r0, r4
 800b0ee:	f000 fced 	bl	800bacc <_sbrk_r>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d101      	bne.n	800b0fa <sbrk_aligned+0x3a>
 800b0f6:	2501      	movs	r5, #1
 800b0f8:	426d      	negs	r5, r5
 800b0fa:	0028      	movs	r0, r5
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
 800b0fe:	46c0      	nop			; (mov r8, r8)
 800b100:	200007f4 	.word	0x200007f4

0800b104 <_malloc_r>:
 800b104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b106:	2203      	movs	r2, #3
 800b108:	1ccb      	adds	r3, r1, #3
 800b10a:	4393      	bics	r3, r2
 800b10c:	3308      	adds	r3, #8
 800b10e:	0006      	movs	r6, r0
 800b110:	001f      	movs	r7, r3
 800b112:	2b0c      	cmp	r3, #12
 800b114:	d232      	bcs.n	800b17c <_malloc_r+0x78>
 800b116:	270c      	movs	r7, #12
 800b118:	42b9      	cmp	r1, r7
 800b11a:	d831      	bhi.n	800b180 <_malloc_r+0x7c>
 800b11c:	0030      	movs	r0, r6
 800b11e:	f001 ff6b 	bl	800cff8 <__malloc_lock>
 800b122:	4d32      	ldr	r5, [pc, #200]	; (800b1ec <_malloc_r+0xe8>)
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	001c      	movs	r4, r3
 800b128:	2c00      	cmp	r4, #0
 800b12a:	d12e      	bne.n	800b18a <_malloc_r+0x86>
 800b12c:	0039      	movs	r1, r7
 800b12e:	0030      	movs	r0, r6
 800b130:	f7ff ffc6 	bl	800b0c0 <sbrk_aligned>
 800b134:	0004      	movs	r4, r0
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d11e      	bne.n	800b178 <_malloc_r+0x74>
 800b13a:	682c      	ldr	r4, [r5, #0]
 800b13c:	0025      	movs	r5, r4
 800b13e:	2d00      	cmp	r5, #0
 800b140:	d14a      	bne.n	800b1d8 <_malloc_r+0xd4>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	0029      	movs	r1, r5
 800b146:	18e3      	adds	r3, r4, r3
 800b148:	0030      	movs	r0, r6
 800b14a:	9301      	str	r3, [sp, #4]
 800b14c:	f000 fcbe 	bl	800bacc <_sbrk_r>
 800b150:	9b01      	ldr	r3, [sp, #4]
 800b152:	4283      	cmp	r3, r0
 800b154:	d143      	bne.n	800b1de <_malloc_r+0xda>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	3703      	adds	r7, #3
 800b15a:	1aff      	subs	r7, r7, r3
 800b15c:	2303      	movs	r3, #3
 800b15e:	439f      	bics	r7, r3
 800b160:	3708      	adds	r7, #8
 800b162:	2f0c      	cmp	r7, #12
 800b164:	d200      	bcs.n	800b168 <_malloc_r+0x64>
 800b166:	270c      	movs	r7, #12
 800b168:	0039      	movs	r1, r7
 800b16a:	0030      	movs	r0, r6
 800b16c:	f7ff ffa8 	bl	800b0c0 <sbrk_aligned>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d034      	beq.n	800b1de <_malloc_r+0xda>
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	19df      	adds	r7, r3, r7
 800b178:	6027      	str	r7, [r4, #0]
 800b17a:	e013      	b.n	800b1a4 <_malloc_r+0xa0>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dacb      	bge.n	800b118 <_malloc_r+0x14>
 800b180:	230c      	movs	r3, #12
 800b182:	2500      	movs	r5, #0
 800b184:	6033      	str	r3, [r6, #0]
 800b186:	0028      	movs	r0, r5
 800b188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	1bd1      	subs	r1, r2, r7
 800b18e:	d420      	bmi.n	800b1d2 <_malloc_r+0xce>
 800b190:	290b      	cmp	r1, #11
 800b192:	d917      	bls.n	800b1c4 <_malloc_r+0xc0>
 800b194:	19e2      	adds	r2, r4, r7
 800b196:	6027      	str	r7, [r4, #0]
 800b198:	42a3      	cmp	r3, r4
 800b19a:	d111      	bne.n	800b1c0 <_malloc_r+0xbc>
 800b19c:	602a      	str	r2, [r5, #0]
 800b19e:	6863      	ldr	r3, [r4, #4]
 800b1a0:	6011      	str	r1, [r2, #0]
 800b1a2:	6053      	str	r3, [r2, #4]
 800b1a4:	0030      	movs	r0, r6
 800b1a6:	0025      	movs	r5, r4
 800b1a8:	f001 ff2e 	bl	800d008 <__malloc_unlock>
 800b1ac:	2207      	movs	r2, #7
 800b1ae:	350b      	adds	r5, #11
 800b1b0:	1d23      	adds	r3, r4, #4
 800b1b2:	4395      	bics	r5, r2
 800b1b4:	1aea      	subs	r2, r5, r3
 800b1b6:	429d      	cmp	r5, r3
 800b1b8:	d0e5      	beq.n	800b186 <_malloc_r+0x82>
 800b1ba:	1b5b      	subs	r3, r3, r5
 800b1bc:	50a3      	str	r3, [r4, r2]
 800b1be:	e7e2      	b.n	800b186 <_malloc_r+0x82>
 800b1c0:	605a      	str	r2, [r3, #4]
 800b1c2:	e7ec      	b.n	800b19e <_malloc_r+0x9a>
 800b1c4:	6862      	ldr	r2, [r4, #4]
 800b1c6:	42a3      	cmp	r3, r4
 800b1c8:	d101      	bne.n	800b1ce <_malloc_r+0xca>
 800b1ca:	602a      	str	r2, [r5, #0]
 800b1cc:	e7ea      	b.n	800b1a4 <_malloc_r+0xa0>
 800b1ce:	605a      	str	r2, [r3, #4]
 800b1d0:	e7e8      	b.n	800b1a4 <_malloc_r+0xa0>
 800b1d2:	0023      	movs	r3, r4
 800b1d4:	6864      	ldr	r4, [r4, #4]
 800b1d6:	e7a7      	b.n	800b128 <_malloc_r+0x24>
 800b1d8:	002c      	movs	r4, r5
 800b1da:	686d      	ldr	r5, [r5, #4]
 800b1dc:	e7af      	b.n	800b13e <_malloc_r+0x3a>
 800b1de:	230c      	movs	r3, #12
 800b1e0:	0030      	movs	r0, r6
 800b1e2:	6033      	str	r3, [r6, #0]
 800b1e4:	f001 ff10 	bl	800d008 <__malloc_unlock>
 800b1e8:	e7cd      	b.n	800b186 <_malloc_r+0x82>
 800b1ea:	46c0      	nop			; (mov r8, r8)
 800b1ec:	200007f0 	.word	0x200007f0

0800b1f0 <__cvt>:
 800b1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f2:	001e      	movs	r6, r3
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	0014      	movs	r4, r2
 800b1f8:	b08b      	sub	sp, #44	; 0x2c
 800b1fa:	429e      	cmp	r6, r3
 800b1fc:	da04      	bge.n	800b208 <__cvt+0x18>
 800b1fe:	2180      	movs	r1, #128	; 0x80
 800b200:	0609      	lsls	r1, r1, #24
 800b202:	1873      	adds	r3, r6, r1
 800b204:	001e      	movs	r6, r3
 800b206:	232d      	movs	r3, #45	; 0x2d
 800b208:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b20a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b20c:	7013      	strb	r3, [r2, #0]
 800b20e:	2320      	movs	r3, #32
 800b210:	2203      	movs	r2, #3
 800b212:	439f      	bics	r7, r3
 800b214:	2f46      	cmp	r7, #70	; 0x46
 800b216:	d007      	beq.n	800b228 <__cvt+0x38>
 800b218:	003b      	movs	r3, r7
 800b21a:	3b45      	subs	r3, #69	; 0x45
 800b21c:	4259      	negs	r1, r3
 800b21e:	414b      	adcs	r3, r1
 800b220:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b222:	3a01      	subs	r2, #1
 800b224:	18cb      	adds	r3, r1, r3
 800b226:	9310      	str	r3, [sp, #64]	; 0x40
 800b228:	ab09      	add	r3, sp, #36	; 0x24
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	ab08      	add	r3, sp, #32
 800b22e:	9303      	str	r3, [sp, #12]
 800b230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b232:	9200      	str	r2, [sp, #0]
 800b234:	9302      	str	r3, [sp, #8]
 800b236:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b238:	0022      	movs	r2, r4
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	0033      	movs	r3, r6
 800b23e:	f000 fe6b 	bl	800bf18 <_dtoa_r>
 800b242:	0005      	movs	r5, r0
 800b244:	2f47      	cmp	r7, #71	; 0x47
 800b246:	d102      	bne.n	800b24e <__cvt+0x5e>
 800b248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b24a:	07db      	lsls	r3, r3, #31
 800b24c:	d528      	bpl.n	800b2a0 <__cvt+0xb0>
 800b24e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b250:	18eb      	adds	r3, r5, r3
 800b252:	9307      	str	r3, [sp, #28]
 800b254:	2f46      	cmp	r7, #70	; 0x46
 800b256:	d114      	bne.n	800b282 <__cvt+0x92>
 800b258:	782b      	ldrb	r3, [r5, #0]
 800b25a:	2b30      	cmp	r3, #48	; 0x30
 800b25c:	d10c      	bne.n	800b278 <__cvt+0x88>
 800b25e:	2200      	movs	r2, #0
 800b260:	2300      	movs	r3, #0
 800b262:	0020      	movs	r0, r4
 800b264:	0031      	movs	r1, r6
 800b266:	f7f5 f8f1 	bl	800044c <__aeabi_dcmpeq>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d104      	bne.n	800b278 <__cvt+0x88>
 800b26e:	2301      	movs	r3, #1
 800b270:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b276:	6013      	str	r3, [r2, #0]
 800b278:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b27a:	9a07      	ldr	r2, [sp, #28]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	18d3      	adds	r3, r2, r3
 800b280:	9307      	str	r3, [sp, #28]
 800b282:	2200      	movs	r2, #0
 800b284:	2300      	movs	r3, #0
 800b286:	0020      	movs	r0, r4
 800b288:	0031      	movs	r1, r6
 800b28a:	f7f5 f8df 	bl	800044c <__aeabi_dcmpeq>
 800b28e:	2800      	cmp	r0, #0
 800b290:	d001      	beq.n	800b296 <__cvt+0xa6>
 800b292:	9b07      	ldr	r3, [sp, #28]
 800b294:	9309      	str	r3, [sp, #36]	; 0x24
 800b296:	2230      	movs	r2, #48	; 0x30
 800b298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b29a:	9907      	ldr	r1, [sp, #28]
 800b29c:	428b      	cmp	r3, r1
 800b29e:	d306      	bcc.n	800b2ae <__cvt+0xbe>
 800b2a0:	0028      	movs	r0, r5
 800b2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b2a6:	1b5b      	subs	r3, r3, r5
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	b00b      	add	sp, #44	; 0x2c
 800b2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ae:	1c59      	adds	r1, r3, #1
 800b2b0:	9109      	str	r1, [sp, #36]	; 0x24
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	e7f0      	b.n	800b298 <__cvt+0xa8>

0800b2b6 <__exponent>:
 800b2b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b8:	1c83      	adds	r3, r0, #2
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	9303      	str	r3, [sp, #12]
 800b2be:	0005      	movs	r5, r0
 800b2c0:	000c      	movs	r4, r1
 800b2c2:	232b      	movs	r3, #43	; 0x2b
 800b2c4:	7002      	strb	r2, [r0, #0]
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	da01      	bge.n	800b2ce <__exponent+0x18>
 800b2ca:	424c      	negs	r4, r1
 800b2cc:	3302      	adds	r3, #2
 800b2ce:	706b      	strb	r3, [r5, #1]
 800b2d0:	2c09      	cmp	r4, #9
 800b2d2:	dd31      	ble.n	800b338 <__exponent+0x82>
 800b2d4:	270a      	movs	r7, #10
 800b2d6:	ab04      	add	r3, sp, #16
 800b2d8:	1dde      	adds	r6, r3, #7
 800b2da:	0020      	movs	r0, r4
 800b2dc:	0039      	movs	r1, r7
 800b2de:	9601      	str	r6, [sp, #4]
 800b2e0:	f7f5 f89e 	bl	8000420 <__aeabi_idivmod>
 800b2e4:	3e01      	subs	r6, #1
 800b2e6:	3130      	adds	r1, #48	; 0x30
 800b2e8:	0020      	movs	r0, r4
 800b2ea:	7031      	strb	r1, [r6, #0]
 800b2ec:	0039      	movs	r1, r7
 800b2ee:	9402      	str	r4, [sp, #8]
 800b2f0:	f7f4 ffb0 	bl	8000254 <__divsi3>
 800b2f4:	9b02      	ldr	r3, [sp, #8]
 800b2f6:	0004      	movs	r4, r0
 800b2f8:	2b63      	cmp	r3, #99	; 0x63
 800b2fa:	dcee      	bgt.n	800b2da <__exponent+0x24>
 800b2fc:	9b01      	ldr	r3, [sp, #4]
 800b2fe:	3430      	adds	r4, #48	; 0x30
 800b300:	1e9a      	subs	r2, r3, #2
 800b302:	0013      	movs	r3, r2
 800b304:	9903      	ldr	r1, [sp, #12]
 800b306:	7014      	strb	r4, [r2, #0]
 800b308:	a804      	add	r0, sp, #16
 800b30a:	3007      	adds	r0, #7
 800b30c:	4298      	cmp	r0, r3
 800b30e:	d80e      	bhi.n	800b32e <__exponent+0x78>
 800b310:	ab04      	add	r3, sp, #16
 800b312:	3307      	adds	r3, #7
 800b314:	2000      	movs	r0, #0
 800b316:	429a      	cmp	r2, r3
 800b318:	d804      	bhi.n	800b324 <__exponent+0x6e>
 800b31a:	ab04      	add	r3, sp, #16
 800b31c:	3009      	adds	r0, #9
 800b31e:	18c0      	adds	r0, r0, r3
 800b320:	9b01      	ldr	r3, [sp, #4]
 800b322:	1ac0      	subs	r0, r0, r3
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	1818      	adds	r0, r3, r0
 800b328:	1b40      	subs	r0, r0, r5
 800b32a:	b007      	add	sp, #28
 800b32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b32e:	7818      	ldrb	r0, [r3, #0]
 800b330:	3301      	adds	r3, #1
 800b332:	7008      	strb	r0, [r1, #0]
 800b334:	3101      	adds	r1, #1
 800b336:	e7e7      	b.n	800b308 <__exponent+0x52>
 800b338:	2330      	movs	r3, #48	; 0x30
 800b33a:	18e4      	adds	r4, r4, r3
 800b33c:	70ab      	strb	r3, [r5, #2]
 800b33e:	1d28      	adds	r0, r5, #4
 800b340:	70ec      	strb	r4, [r5, #3]
 800b342:	e7f1      	b.n	800b328 <__exponent+0x72>

0800b344 <_printf_float>:
 800b344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b346:	b095      	sub	sp, #84	; 0x54
 800b348:	000c      	movs	r4, r1
 800b34a:	9209      	str	r2, [sp, #36]	; 0x24
 800b34c:	001e      	movs	r6, r3
 800b34e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b350:	0007      	movs	r7, r0
 800b352:	f001 fdc9 	bl	800cee8 <_localeconv_r>
 800b356:	6803      	ldr	r3, [r0, #0]
 800b358:	0018      	movs	r0, r3
 800b35a:	930c      	str	r3, [sp, #48]	; 0x30
 800b35c:	f7f4 fed4 	bl	8000108 <strlen>
 800b360:	2300      	movs	r3, #0
 800b362:	9312      	str	r3, [sp, #72]	; 0x48
 800b364:	7e23      	ldrb	r3, [r4, #24]
 800b366:	2207      	movs	r2, #7
 800b368:	930a      	str	r3, [sp, #40]	; 0x28
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	900e      	str	r0, [sp, #56]	; 0x38
 800b36e:	930d      	str	r3, [sp, #52]	; 0x34
 800b370:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	05c9      	lsls	r1, r1, #23
 800b376:	d547      	bpl.n	800b408 <_printf_float+0xc4>
 800b378:	189b      	adds	r3, r3, r2
 800b37a:	4393      	bics	r3, r2
 800b37c:	001a      	movs	r2, r3
 800b37e:	3208      	adds	r2, #8
 800b380:	602a      	str	r2, [r5, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	64a2      	str	r2, [r4, #72]	; 0x48
 800b388:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b38a:	2201      	movs	r2, #1
 800b38c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b38e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b390:	930b      	str	r3, [sp, #44]	; 0x2c
 800b392:	006b      	lsls	r3, r5, #1
 800b394:	085b      	lsrs	r3, r3, #1
 800b396:	930f      	str	r3, [sp, #60]	; 0x3c
 800b398:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b39a:	4ba7      	ldr	r3, [pc, #668]	; (800b638 <_printf_float+0x2f4>)
 800b39c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b39e:	4252      	negs	r2, r2
 800b3a0:	f7f7 fd2a 	bl	8002df8 <__aeabi_dcmpun>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d131      	bne.n	800b40c <_printf_float+0xc8>
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	4ba3      	ldr	r3, [pc, #652]	; (800b638 <_printf_float+0x2f4>)
 800b3ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b3b0:	4252      	negs	r2, r2
 800b3b2:	f7f5 f85b 	bl	800046c <__aeabi_dcmple>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d128      	bne.n	800b40c <_printf_float+0xc8>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2300      	movs	r3, #0
 800b3be:	0029      	movs	r1, r5
 800b3c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3c2:	f7f5 f849 	bl	8000458 <__aeabi_dcmplt>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d003      	beq.n	800b3d2 <_printf_float+0x8e>
 800b3ca:	0023      	movs	r3, r4
 800b3cc:	222d      	movs	r2, #45	; 0x2d
 800b3ce:	3343      	adds	r3, #67	; 0x43
 800b3d0:	701a      	strb	r2, [r3, #0]
 800b3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d4:	4d99      	ldr	r5, [pc, #612]	; (800b63c <_printf_float+0x2f8>)
 800b3d6:	2b47      	cmp	r3, #71	; 0x47
 800b3d8:	d900      	bls.n	800b3dc <_printf_float+0x98>
 800b3da:	4d99      	ldr	r5, [pc, #612]	; (800b640 <_printf_float+0x2fc>)
 800b3dc:	2303      	movs	r3, #3
 800b3de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	439a      	bics	r2, r3
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6022      	str	r2, [r4, #0]
 800b3ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ee:	0021      	movs	r1, r4
 800b3f0:	0038      	movs	r0, r7
 800b3f2:	9600      	str	r6, [sp, #0]
 800b3f4:	aa13      	add	r2, sp, #76	; 0x4c
 800b3f6:	f000 f9e7 	bl	800b7c8 <_printf_common>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d000      	beq.n	800b400 <_printf_float+0xbc>
 800b3fe:	e0a2      	b.n	800b546 <_printf_float+0x202>
 800b400:	2001      	movs	r0, #1
 800b402:	4240      	negs	r0, r0
 800b404:	b015      	add	sp, #84	; 0x54
 800b406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b408:	3307      	adds	r3, #7
 800b40a:	e7b6      	b.n	800b37a <_printf_float+0x36>
 800b40c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b40e:	002b      	movs	r3, r5
 800b410:	0010      	movs	r0, r2
 800b412:	0029      	movs	r1, r5
 800b414:	f7f7 fcf0 	bl	8002df8 <__aeabi_dcmpun>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d00b      	beq.n	800b434 <_printf_float+0xf0>
 800b41c:	2d00      	cmp	r5, #0
 800b41e:	da03      	bge.n	800b428 <_printf_float+0xe4>
 800b420:	0023      	movs	r3, r4
 800b422:	222d      	movs	r2, #45	; 0x2d
 800b424:	3343      	adds	r3, #67	; 0x43
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b42a:	4d86      	ldr	r5, [pc, #536]	; (800b644 <_printf_float+0x300>)
 800b42c:	2b47      	cmp	r3, #71	; 0x47
 800b42e:	d9d5      	bls.n	800b3dc <_printf_float+0x98>
 800b430:	4d85      	ldr	r5, [pc, #532]	; (800b648 <_printf_float+0x304>)
 800b432:	e7d3      	b.n	800b3dc <_printf_float+0x98>
 800b434:	2220      	movs	r2, #32
 800b436:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b438:	6863      	ldr	r3, [r4, #4]
 800b43a:	4391      	bics	r1, r2
 800b43c:	910f      	str	r1, [sp, #60]	; 0x3c
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	d149      	bne.n	800b4d6 <_printf_float+0x192>
 800b442:	3307      	adds	r3, #7
 800b444:	6063      	str	r3, [r4, #4]
 800b446:	2380      	movs	r3, #128	; 0x80
 800b448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b44a:	00db      	lsls	r3, r3, #3
 800b44c:	4313      	orrs	r3, r2
 800b44e:	2200      	movs	r2, #0
 800b450:	9206      	str	r2, [sp, #24]
 800b452:	aa12      	add	r2, sp, #72	; 0x48
 800b454:	9205      	str	r2, [sp, #20]
 800b456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b458:	a908      	add	r1, sp, #32
 800b45a:	9204      	str	r2, [sp, #16]
 800b45c:	aa11      	add	r2, sp, #68	; 0x44
 800b45e:	9203      	str	r2, [sp, #12]
 800b460:	2223      	movs	r2, #35	; 0x23
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	6863      	ldr	r3, [r4, #4]
 800b468:	1852      	adds	r2, r2, r1
 800b46a:	9202      	str	r2, [sp, #8]
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	0038      	movs	r0, r7
 800b470:	002b      	movs	r3, r5
 800b472:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b474:	f7ff febc 	bl	800b1f0 <__cvt>
 800b478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b47a:	0005      	movs	r5, r0
 800b47c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b47e:	2b47      	cmp	r3, #71	; 0x47
 800b480:	d108      	bne.n	800b494 <_printf_float+0x150>
 800b482:	1ccb      	adds	r3, r1, #3
 800b484:	db02      	blt.n	800b48c <_printf_float+0x148>
 800b486:	6863      	ldr	r3, [r4, #4]
 800b488:	4299      	cmp	r1, r3
 800b48a:	dd48      	ble.n	800b51e <_printf_float+0x1da>
 800b48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48e:	3b02      	subs	r3, #2
 800b490:	b2db      	uxtb	r3, r3
 800b492:	930a      	str	r3, [sp, #40]	; 0x28
 800b494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b496:	2b65      	cmp	r3, #101	; 0x65
 800b498:	d824      	bhi.n	800b4e4 <_printf_float+0x1a0>
 800b49a:	0020      	movs	r0, r4
 800b49c:	001a      	movs	r2, r3
 800b49e:	3901      	subs	r1, #1
 800b4a0:	3050      	adds	r0, #80	; 0x50
 800b4a2:	9111      	str	r1, [sp, #68]	; 0x44
 800b4a4:	f7ff ff07 	bl	800b2b6 <__exponent>
 800b4a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4ac:	1813      	adds	r3, r2, r0
 800b4ae:	6123      	str	r3, [r4, #16]
 800b4b0:	2a01      	cmp	r2, #1
 800b4b2:	dc02      	bgt.n	800b4ba <_printf_float+0x176>
 800b4b4:	6822      	ldr	r2, [r4, #0]
 800b4b6:	07d2      	lsls	r2, r2, #31
 800b4b8:	d501      	bpl.n	800b4be <_printf_float+0x17a>
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	6123      	str	r3, [r4, #16]
 800b4be:	2323      	movs	r3, #35	; 0x23
 800b4c0:	aa08      	add	r2, sp, #32
 800b4c2:	189b      	adds	r3, r3, r2
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d100      	bne.n	800b4cc <_printf_float+0x188>
 800b4ca:	e78f      	b.n	800b3ec <_printf_float+0xa8>
 800b4cc:	0023      	movs	r3, r4
 800b4ce:	222d      	movs	r2, #45	; 0x2d
 800b4d0:	3343      	adds	r3, #67	; 0x43
 800b4d2:	701a      	strb	r2, [r3, #0]
 800b4d4:	e78a      	b.n	800b3ec <_printf_float+0xa8>
 800b4d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4d8:	2a47      	cmp	r2, #71	; 0x47
 800b4da:	d1b4      	bne.n	800b446 <_printf_float+0x102>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1b2      	bne.n	800b446 <_printf_float+0x102>
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	e7af      	b.n	800b444 <_printf_float+0x100>
 800b4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4e6:	2b66      	cmp	r3, #102	; 0x66
 800b4e8:	d11b      	bne.n	800b522 <_printf_float+0x1de>
 800b4ea:	6863      	ldr	r3, [r4, #4]
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	dd0d      	ble.n	800b50c <_printf_float+0x1c8>
 800b4f0:	6121      	str	r1, [r4, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d102      	bne.n	800b4fc <_printf_float+0x1b8>
 800b4f6:	6822      	ldr	r2, [r4, #0]
 800b4f8:	07d2      	lsls	r2, r2, #31
 800b4fa:	d502      	bpl.n	800b502 <_printf_float+0x1be>
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	1859      	adds	r1, r3, r1
 800b500:	6121      	str	r1, [r4, #16]
 800b502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b504:	65a3      	str	r3, [r4, #88]	; 0x58
 800b506:	2300      	movs	r3, #0
 800b508:	930b      	str	r3, [sp, #44]	; 0x2c
 800b50a:	e7d8      	b.n	800b4be <_printf_float+0x17a>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <_printf_float+0x1d4>
 800b510:	2201      	movs	r2, #1
 800b512:	6821      	ldr	r1, [r4, #0]
 800b514:	4211      	tst	r1, r2
 800b516:	d000      	beq.n	800b51a <_printf_float+0x1d6>
 800b518:	1c9a      	adds	r2, r3, #2
 800b51a:	6122      	str	r2, [r4, #16]
 800b51c:	e7f1      	b.n	800b502 <_printf_float+0x1be>
 800b51e:	2367      	movs	r3, #103	; 0x67
 800b520:	930a      	str	r3, [sp, #40]	; 0x28
 800b522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b526:	4293      	cmp	r3, r2
 800b528:	db06      	blt.n	800b538 <_printf_float+0x1f4>
 800b52a:	6822      	ldr	r2, [r4, #0]
 800b52c:	6123      	str	r3, [r4, #16]
 800b52e:	07d2      	lsls	r2, r2, #31
 800b530:	d5e7      	bpl.n	800b502 <_printf_float+0x1be>
 800b532:	3301      	adds	r3, #1
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	e7e4      	b.n	800b502 <_printf_float+0x1be>
 800b538:	2101      	movs	r1, #1
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	dc01      	bgt.n	800b542 <_printf_float+0x1fe>
 800b53e:	1849      	adds	r1, r1, r1
 800b540:	1ac9      	subs	r1, r1, r3
 800b542:	1852      	adds	r2, r2, r1
 800b544:	e7e9      	b.n	800b51a <_printf_float+0x1d6>
 800b546:	6822      	ldr	r2, [r4, #0]
 800b548:	0553      	lsls	r3, r2, #21
 800b54a:	d407      	bmi.n	800b55c <_printf_float+0x218>
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	002a      	movs	r2, r5
 800b550:	0038      	movs	r0, r7
 800b552:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b554:	47b0      	blx	r6
 800b556:	1c43      	adds	r3, r0, #1
 800b558:	d128      	bne.n	800b5ac <_printf_float+0x268>
 800b55a:	e751      	b.n	800b400 <_printf_float+0xbc>
 800b55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55e:	2b65      	cmp	r3, #101	; 0x65
 800b560:	d800      	bhi.n	800b564 <_printf_float+0x220>
 800b562:	e0e1      	b.n	800b728 <_printf_float+0x3e4>
 800b564:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b566:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b568:	2200      	movs	r2, #0
 800b56a:	2300      	movs	r3, #0
 800b56c:	f7f4 ff6e 	bl	800044c <__aeabi_dcmpeq>
 800b570:	2800      	cmp	r0, #0
 800b572:	d031      	beq.n	800b5d8 <_printf_float+0x294>
 800b574:	2301      	movs	r3, #1
 800b576:	0038      	movs	r0, r7
 800b578:	4a34      	ldr	r2, [pc, #208]	; (800b64c <_printf_float+0x308>)
 800b57a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b57c:	47b0      	blx	r6
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	d100      	bne.n	800b584 <_printf_float+0x240>
 800b582:	e73d      	b.n	800b400 <_printf_float+0xbc>
 800b584:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b586:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b588:	4293      	cmp	r3, r2
 800b58a:	db02      	blt.n	800b592 <_printf_float+0x24e>
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	07db      	lsls	r3, r3, #31
 800b590:	d50c      	bpl.n	800b5ac <_printf_float+0x268>
 800b592:	0038      	movs	r0, r7
 800b594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b598:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b59a:	47b0      	blx	r6
 800b59c:	2500      	movs	r5, #0
 800b59e:	1c43      	adds	r3, r0, #1
 800b5a0:	d100      	bne.n	800b5a4 <_printf_float+0x260>
 800b5a2:	e72d      	b.n	800b400 <_printf_float+0xbc>
 800b5a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	42ab      	cmp	r3, r5
 800b5aa:	dc0a      	bgt.n	800b5c2 <_printf_float+0x27e>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	079b      	lsls	r3, r3, #30
 800b5b0:	d500      	bpl.n	800b5b4 <_printf_float+0x270>
 800b5b2:	e106      	b.n	800b7c2 <_printf_float+0x47e>
 800b5b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5b6:	68e0      	ldr	r0, [r4, #12]
 800b5b8:	4298      	cmp	r0, r3
 800b5ba:	db00      	blt.n	800b5be <_printf_float+0x27a>
 800b5bc:	e722      	b.n	800b404 <_printf_float+0xc0>
 800b5be:	0018      	movs	r0, r3
 800b5c0:	e720      	b.n	800b404 <_printf_float+0xc0>
 800b5c2:	0022      	movs	r2, r4
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	0038      	movs	r0, r7
 800b5c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5ca:	321a      	adds	r2, #26
 800b5cc:	47b0      	blx	r6
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	d100      	bne.n	800b5d4 <_printf_float+0x290>
 800b5d2:	e715      	b.n	800b400 <_printf_float+0xbc>
 800b5d4:	3501      	adds	r5, #1
 800b5d6:	e7e5      	b.n	800b5a4 <_printf_float+0x260>
 800b5d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	dc38      	bgt.n	800b650 <_printf_float+0x30c>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	0038      	movs	r0, r7
 800b5e2:	4a1a      	ldr	r2, [pc, #104]	; (800b64c <_printf_float+0x308>)
 800b5e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5e6:	47b0      	blx	r6
 800b5e8:	1c43      	adds	r3, r0, #1
 800b5ea:	d100      	bne.n	800b5ee <_printf_float+0x2aa>
 800b5ec:	e708      	b.n	800b400 <_printf_float+0xbc>
 800b5ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	d102      	bne.n	800b5fc <_printf_float+0x2b8>
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	07db      	lsls	r3, r3, #31
 800b5fa:	d5d7      	bpl.n	800b5ac <_printf_float+0x268>
 800b5fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5fe:	0038      	movs	r0, r7
 800b600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b602:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b604:	47b0      	blx	r6
 800b606:	1c43      	adds	r3, r0, #1
 800b608:	d100      	bne.n	800b60c <_printf_float+0x2c8>
 800b60a:	e6f9      	b.n	800b400 <_printf_float+0xbc>
 800b60c:	2300      	movs	r3, #0
 800b60e:	930a      	str	r3, [sp, #40]	; 0x28
 800b610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b614:	425b      	negs	r3, r3
 800b616:	4293      	cmp	r3, r2
 800b618:	dc01      	bgt.n	800b61e <_printf_float+0x2da>
 800b61a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b61c:	e797      	b.n	800b54e <_printf_float+0x20a>
 800b61e:	0022      	movs	r2, r4
 800b620:	2301      	movs	r3, #1
 800b622:	0038      	movs	r0, r7
 800b624:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b626:	321a      	adds	r2, #26
 800b628:	47b0      	blx	r6
 800b62a:	1c43      	adds	r3, r0, #1
 800b62c:	d100      	bne.n	800b630 <_printf_float+0x2ec>
 800b62e:	e6e7      	b.n	800b400 <_printf_float+0xbc>
 800b630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b632:	3301      	adds	r3, #1
 800b634:	e7eb      	b.n	800b60e <_printf_float+0x2ca>
 800b636:	46c0      	nop			; (mov r8, r8)
 800b638:	7fefffff 	.word	0x7fefffff
 800b63c:	0800e260 	.word	0x0800e260
 800b640:	0800e264 	.word	0x0800e264
 800b644:	0800e268 	.word	0x0800e268
 800b648:	0800e26c 	.word	0x0800e26c
 800b64c:	0800e270 	.word	0x0800e270
 800b650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b652:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b654:	920a      	str	r2, [sp, #40]	; 0x28
 800b656:	429a      	cmp	r2, r3
 800b658:	dd00      	ble.n	800b65c <_printf_float+0x318>
 800b65a:	930a      	str	r3, [sp, #40]	; 0x28
 800b65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b65e:	2b00      	cmp	r3, #0
 800b660:	dc3c      	bgt.n	800b6dc <_printf_float+0x398>
 800b662:	2300      	movs	r3, #0
 800b664:	930d      	str	r3, [sp, #52]	; 0x34
 800b666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b668:	43db      	mvns	r3, r3
 800b66a:	17db      	asrs	r3, r3, #31
 800b66c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b66e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b670:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b672:	930b      	str	r3, [sp, #44]	; 0x2c
 800b674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b676:	4013      	ands	r3, r2
 800b678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b67e:	4293      	cmp	r3, r2
 800b680:	dc34      	bgt.n	800b6ec <_printf_float+0x3a8>
 800b682:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b686:	4293      	cmp	r3, r2
 800b688:	db3d      	blt.n	800b706 <_printf_float+0x3c2>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	07db      	lsls	r3, r3, #31
 800b68e:	d43a      	bmi.n	800b706 <_printf_float+0x3c2>
 800b690:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b694:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	1a52      	subs	r2, r2, r1
 800b69a:	920a      	str	r2, [sp, #40]	; 0x28
 800b69c:	429a      	cmp	r2, r3
 800b69e:	dd00      	ble.n	800b6a2 <_printf_float+0x35e>
 800b6a0:	930a      	str	r3, [sp, #40]	; 0x28
 800b6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dc36      	bgt.n	800b716 <_printf_float+0x3d2>
 800b6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6aa:	2500      	movs	r5, #0
 800b6ac:	43db      	mvns	r3, r3
 800b6ae:	17db      	asrs	r3, r3, #31
 800b6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b6b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6b8:	1a9b      	subs	r3, r3, r2
 800b6ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6bc:	400a      	ands	r2, r1
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	42ab      	cmp	r3, r5
 800b6c2:	dc00      	bgt.n	800b6c6 <_printf_float+0x382>
 800b6c4:	e772      	b.n	800b5ac <_printf_float+0x268>
 800b6c6:	0022      	movs	r2, r4
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	0038      	movs	r0, r7
 800b6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6ce:	321a      	adds	r2, #26
 800b6d0:	47b0      	blx	r6
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	d100      	bne.n	800b6d8 <_printf_float+0x394>
 800b6d6:	e693      	b.n	800b400 <_printf_float+0xbc>
 800b6d8:	3501      	adds	r5, #1
 800b6da:	e7ea      	b.n	800b6b2 <_printf_float+0x36e>
 800b6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6de:	002a      	movs	r2, r5
 800b6e0:	0038      	movs	r0, r7
 800b6e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6e4:	47b0      	blx	r6
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	d1bb      	bne.n	800b662 <_printf_float+0x31e>
 800b6ea:	e689      	b.n	800b400 <_printf_float+0xbc>
 800b6ec:	0022      	movs	r2, r4
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	0038      	movs	r0, r7
 800b6f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6f4:	321a      	adds	r2, #26
 800b6f6:	47b0      	blx	r6
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d100      	bne.n	800b6fe <_printf_float+0x3ba>
 800b6fc:	e680      	b.n	800b400 <_printf_float+0xbc>
 800b6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b700:	3301      	adds	r3, #1
 800b702:	930d      	str	r3, [sp, #52]	; 0x34
 800b704:	e7b3      	b.n	800b66e <_printf_float+0x32a>
 800b706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b708:	0038      	movs	r0, r7
 800b70a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b70c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b70e:	47b0      	blx	r6
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d1bd      	bne.n	800b690 <_printf_float+0x34c>
 800b714:	e674      	b.n	800b400 <_printf_float+0xbc>
 800b716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b718:	0038      	movs	r0, r7
 800b71a:	18ea      	adds	r2, r5, r3
 800b71c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b720:	47b0      	blx	r6
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	d1c0      	bne.n	800b6a8 <_printf_float+0x364>
 800b726:	e66b      	b.n	800b400 <_printf_float+0xbc>
 800b728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	dc02      	bgt.n	800b734 <_printf_float+0x3f0>
 800b72e:	2301      	movs	r3, #1
 800b730:	421a      	tst	r2, r3
 800b732:	d034      	beq.n	800b79e <_printf_float+0x45a>
 800b734:	2301      	movs	r3, #1
 800b736:	002a      	movs	r2, r5
 800b738:	0038      	movs	r0, r7
 800b73a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b73c:	47b0      	blx	r6
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d100      	bne.n	800b744 <_printf_float+0x400>
 800b742:	e65d      	b.n	800b400 <_printf_float+0xbc>
 800b744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b746:	0038      	movs	r0, r7
 800b748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b74a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b74c:	47b0      	blx	r6
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	d100      	bne.n	800b754 <_printf_float+0x410>
 800b752:	e655      	b.n	800b400 <_printf_float+0xbc>
 800b754:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b756:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b758:	2200      	movs	r2, #0
 800b75a:	2300      	movs	r3, #0
 800b75c:	f7f4 fe76 	bl	800044c <__aeabi_dcmpeq>
 800b760:	2800      	cmp	r0, #0
 800b762:	d11a      	bne.n	800b79a <_printf_float+0x456>
 800b764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b766:	1c6a      	adds	r2, r5, #1
 800b768:	3b01      	subs	r3, #1
 800b76a:	0038      	movs	r0, r7
 800b76c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b76e:	47b0      	blx	r6
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d10e      	bne.n	800b792 <_printf_float+0x44e>
 800b774:	e644      	b.n	800b400 <_printf_float+0xbc>
 800b776:	0022      	movs	r2, r4
 800b778:	2301      	movs	r3, #1
 800b77a:	0038      	movs	r0, r7
 800b77c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b77e:	321a      	adds	r2, #26
 800b780:	47b0      	blx	r6
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	d100      	bne.n	800b788 <_printf_float+0x444>
 800b786:	e63b      	b.n	800b400 <_printf_float+0xbc>
 800b788:	3501      	adds	r5, #1
 800b78a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b78c:	3b01      	subs	r3, #1
 800b78e:	42ab      	cmp	r3, r5
 800b790:	dcf1      	bgt.n	800b776 <_printf_float+0x432>
 800b792:	0022      	movs	r2, r4
 800b794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b796:	3250      	adds	r2, #80	; 0x50
 800b798:	e6da      	b.n	800b550 <_printf_float+0x20c>
 800b79a:	2500      	movs	r5, #0
 800b79c:	e7f5      	b.n	800b78a <_printf_float+0x446>
 800b79e:	002a      	movs	r2, r5
 800b7a0:	e7e3      	b.n	800b76a <_printf_float+0x426>
 800b7a2:	0022      	movs	r2, r4
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	0038      	movs	r0, r7
 800b7a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7aa:	3219      	adds	r2, #25
 800b7ac:	47b0      	blx	r6
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	d100      	bne.n	800b7b4 <_printf_float+0x470>
 800b7b2:	e625      	b.n	800b400 <_printf_float+0xbc>
 800b7b4:	3501      	adds	r5, #1
 800b7b6:	68e3      	ldr	r3, [r4, #12]
 800b7b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7ba:	1a9b      	subs	r3, r3, r2
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	dcf0      	bgt.n	800b7a2 <_printf_float+0x45e>
 800b7c0:	e6f8      	b.n	800b5b4 <_printf_float+0x270>
 800b7c2:	2500      	movs	r5, #0
 800b7c4:	e7f7      	b.n	800b7b6 <_printf_float+0x472>
 800b7c6:	46c0      	nop			; (mov r8, r8)

0800b7c8 <_printf_common>:
 800b7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ca:	0015      	movs	r5, r2
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	688a      	ldr	r2, [r1, #8]
 800b7d0:	690b      	ldr	r3, [r1, #16]
 800b7d2:	000c      	movs	r4, r1
 800b7d4:	9000      	str	r0, [sp, #0]
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	da00      	bge.n	800b7dc <_printf_common+0x14>
 800b7da:	0013      	movs	r3, r2
 800b7dc:	0022      	movs	r2, r4
 800b7de:	602b      	str	r3, [r5, #0]
 800b7e0:	3243      	adds	r2, #67	; 0x43
 800b7e2:	7812      	ldrb	r2, [r2, #0]
 800b7e4:	2a00      	cmp	r2, #0
 800b7e6:	d001      	beq.n	800b7ec <_printf_common+0x24>
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	602b      	str	r3, [r5, #0]
 800b7ec:	6823      	ldr	r3, [r4, #0]
 800b7ee:	069b      	lsls	r3, r3, #26
 800b7f0:	d502      	bpl.n	800b7f8 <_printf_common+0x30>
 800b7f2:	682b      	ldr	r3, [r5, #0]
 800b7f4:	3302      	adds	r3, #2
 800b7f6:	602b      	str	r3, [r5, #0]
 800b7f8:	6822      	ldr	r2, [r4, #0]
 800b7fa:	2306      	movs	r3, #6
 800b7fc:	0017      	movs	r7, r2
 800b7fe:	401f      	ands	r7, r3
 800b800:	421a      	tst	r2, r3
 800b802:	d027      	beq.n	800b854 <_printf_common+0x8c>
 800b804:	0023      	movs	r3, r4
 800b806:	3343      	adds	r3, #67	; 0x43
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	1e5a      	subs	r2, r3, #1
 800b80c:	4193      	sbcs	r3, r2
 800b80e:	6822      	ldr	r2, [r4, #0]
 800b810:	0692      	lsls	r2, r2, #26
 800b812:	d430      	bmi.n	800b876 <_printf_common+0xae>
 800b814:	0022      	movs	r2, r4
 800b816:	9901      	ldr	r1, [sp, #4]
 800b818:	9800      	ldr	r0, [sp, #0]
 800b81a:	9e08      	ldr	r6, [sp, #32]
 800b81c:	3243      	adds	r2, #67	; 0x43
 800b81e:	47b0      	blx	r6
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d025      	beq.n	800b870 <_printf_common+0xa8>
 800b824:	2306      	movs	r3, #6
 800b826:	6820      	ldr	r0, [r4, #0]
 800b828:	682a      	ldr	r2, [r5, #0]
 800b82a:	68e1      	ldr	r1, [r4, #12]
 800b82c:	2500      	movs	r5, #0
 800b82e:	4003      	ands	r3, r0
 800b830:	2b04      	cmp	r3, #4
 800b832:	d103      	bne.n	800b83c <_printf_common+0x74>
 800b834:	1a8d      	subs	r5, r1, r2
 800b836:	43eb      	mvns	r3, r5
 800b838:	17db      	asrs	r3, r3, #31
 800b83a:	401d      	ands	r5, r3
 800b83c:	68a3      	ldr	r3, [r4, #8]
 800b83e:	6922      	ldr	r2, [r4, #16]
 800b840:	4293      	cmp	r3, r2
 800b842:	dd01      	ble.n	800b848 <_printf_common+0x80>
 800b844:	1a9b      	subs	r3, r3, r2
 800b846:	18ed      	adds	r5, r5, r3
 800b848:	2700      	movs	r7, #0
 800b84a:	42bd      	cmp	r5, r7
 800b84c:	d120      	bne.n	800b890 <_printf_common+0xc8>
 800b84e:	2000      	movs	r0, #0
 800b850:	e010      	b.n	800b874 <_printf_common+0xac>
 800b852:	3701      	adds	r7, #1
 800b854:	68e3      	ldr	r3, [r4, #12]
 800b856:	682a      	ldr	r2, [r5, #0]
 800b858:	1a9b      	subs	r3, r3, r2
 800b85a:	42bb      	cmp	r3, r7
 800b85c:	ddd2      	ble.n	800b804 <_printf_common+0x3c>
 800b85e:	0022      	movs	r2, r4
 800b860:	2301      	movs	r3, #1
 800b862:	9901      	ldr	r1, [sp, #4]
 800b864:	9800      	ldr	r0, [sp, #0]
 800b866:	9e08      	ldr	r6, [sp, #32]
 800b868:	3219      	adds	r2, #25
 800b86a:	47b0      	blx	r6
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d1f0      	bne.n	800b852 <_printf_common+0x8a>
 800b870:	2001      	movs	r0, #1
 800b872:	4240      	negs	r0, r0
 800b874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b876:	2030      	movs	r0, #48	; 0x30
 800b878:	18e1      	adds	r1, r4, r3
 800b87a:	3143      	adds	r1, #67	; 0x43
 800b87c:	7008      	strb	r0, [r1, #0]
 800b87e:	0021      	movs	r1, r4
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	3145      	adds	r1, #69	; 0x45
 800b884:	7809      	ldrb	r1, [r1, #0]
 800b886:	18a2      	adds	r2, r4, r2
 800b888:	3243      	adds	r2, #67	; 0x43
 800b88a:	3302      	adds	r3, #2
 800b88c:	7011      	strb	r1, [r2, #0]
 800b88e:	e7c1      	b.n	800b814 <_printf_common+0x4c>
 800b890:	0022      	movs	r2, r4
 800b892:	2301      	movs	r3, #1
 800b894:	9901      	ldr	r1, [sp, #4]
 800b896:	9800      	ldr	r0, [sp, #0]
 800b898:	9e08      	ldr	r6, [sp, #32]
 800b89a:	321a      	adds	r2, #26
 800b89c:	47b0      	blx	r6
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d0e6      	beq.n	800b870 <_printf_common+0xa8>
 800b8a2:	3701      	adds	r7, #1
 800b8a4:	e7d1      	b.n	800b84a <_printf_common+0x82>
	...

0800b8a8 <_printf_i>:
 800b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8aa:	b08b      	sub	sp, #44	; 0x2c
 800b8ac:	9206      	str	r2, [sp, #24]
 800b8ae:	000a      	movs	r2, r1
 800b8b0:	3243      	adds	r2, #67	; 0x43
 800b8b2:	9307      	str	r3, [sp, #28]
 800b8b4:	9005      	str	r0, [sp, #20]
 800b8b6:	9204      	str	r2, [sp, #16]
 800b8b8:	7e0a      	ldrb	r2, [r1, #24]
 800b8ba:	000c      	movs	r4, r1
 800b8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8be:	2a78      	cmp	r2, #120	; 0x78
 800b8c0:	d807      	bhi.n	800b8d2 <_printf_i+0x2a>
 800b8c2:	2a62      	cmp	r2, #98	; 0x62
 800b8c4:	d809      	bhi.n	800b8da <_printf_i+0x32>
 800b8c6:	2a00      	cmp	r2, #0
 800b8c8:	d100      	bne.n	800b8cc <_printf_i+0x24>
 800b8ca:	e0c1      	b.n	800ba50 <_printf_i+0x1a8>
 800b8cc:	2a58      	cmp	r2, #88	; 0x58
 800b8ce:	d100      	bne.n	800b8d2 <_printf_i+0x2a>
 800b8d0:	e08c      	b.n	800b9ec <_printf_i+0x144>
 800b8d2:	0026      	movs	r6, r4
 800b8d4:	3642      	adds	r6, #66	; 0x42
 800b8d6:	7032      	strb	r2, [r6, #0]
 800b8d8:	e022      	b.n	800b920 <_printf_i+0x78>
 800b8da:	0010      	movs	r0, r2
 800b8dc:	3863      	subs	r0, #99	; 0x63
 800b8de:	2815      	cmp	r0, #21
 800b8e0:	d8f7      	bhi.n	800b8d2 <_printf_i+0x2a>
 800b8e2:	f7f4 fc23 	bl	800012c <__gnu_thumb1_case_shi>
 800b8e6:	0016      	.short	0x0016
 800b8e8:	fff6001f 	.word	0xfff6001f
 800b8ec:	fff6fff6 	.word	0xfff6fff6
 800b8f0:	001ffff6 	.word	0x001ffff6
 800b8f4:	fff6fff6 	.word	0xfff6fff6
 800b8f8:	fff6fff6 	.word	0xfff6fff6
 800b8fc:	003600a8 	.word	0x003600a8
 800b900:	fff6009a 	.word	0xfff6009a
 800b904:	00b9fff6 	.word	0x00b9fff6
 800b908:	0036fff6 	.word	0x0036fff6
 800b90c:	fff6fff6 	.word	0xfff6fff6
 800b910:	009e      	.short	0x009e
 800b912:	0026      	movs	r6, r4
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	3642      	adds	r6, #66	; 0x42
 800b918:	1d11      	adds	r1, r2, #4
 800b91a:	6019      	str	r1, [r3, #0]
 800b91c:	6813      	ldr	r3, [r2, #0]
 800b91e:	7033      	strb	r3, [r6, #0]
 800b920:	2301      	movs	r3, #1
 800b922:	e0a7      	b.n	800ba74 <_printf_i+0x1cc>
 800b924:	6808      	ldr	r0, [r1, #0]
 800b926:	6819      	ldr	r1, [r3, #0]
 800b928:	1d0a      	adds	r2, r1, #4
 800b92a:	0605      	lsls	r5, r0, #24
 800b92c:	d50b      	bpl.n	800b946 <_printf_i+0x9e>
 800b92e:	680d      	ldr	r5, [r1, #0]
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	2d00      	cmp	r5, #0
 800b934:	da03      	bge.n	800b93e <_printf_i+0x96>
 800b936:	232d      	movs	r3, #45	; 0x2d
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	426d      	negs	r5, r5
 800b93c:	7013      	strb	r3, [r2, #0]
 800b93e:	4b61      	ldr	r3, [pc, #388]	; (800bac4 <_printf_i+0x21c>)
 800b940:	270a      	movs	r7, #10
 800b942:	9303      	str	r3, [sp, #12]
 800b944:	e01b      	b.n	800b97e <_printf_i+0xd6>
 800b946:	680d      	ldr	r5, [r1, #0]
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	0641      	lsls	r1, r0, #25
 800b94c:	d5f1      	bpl.n	800b932 <_printf_i+0x8a>
 800b94e:	b22d      	sxth	r5, r5
 800b950:	e7ef      	b.n	800b932 <_printf_i+0x8a>
 800b952:	680d      	ldr	r5, [r1, #0]
 800b954:	6819      	ldr	r1, [r3, #0]
 800b956:	1d08      	adds	r0, r1, #4
 800b958:	6018      	str	r0, [r3, #0]
 800b95a:	062e      	lsls	r6, r5, #24
 800b95c:	d501      	bpl.n	800b962 <_printf_i+0xba>
 800b95e:	680d      	ldr	r5, [r1, #0]
 800b960:	e003      	b.n	800b96a <_printf_i+0xc2>
 800b962:	066d      	lsls	r5, r5, #25
 800b964:	d5fb      	bpl.n	800b95e <_printf_i+0xb6>
 800b966:	680d      	ldr	r5, [r1, #0]
 800b968:	b2ad      	uxth	r5, r5
 800b96a:	4b56      	ldr	r3, [pc, #344]	; (800bac4 <_printf_i+0x21c>)
 800b96c:	2708      	movs	r7, #8
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	2a6f      	cmp	r2, #111	; 0x6f
 800b972:	d000      	beq.n	800b976 <_printf_i+0xce>
 800b974:	3702      	adds	r7, #2
 800b976:	0023      	movs	r3, r4
 800b978:	2200      	movs	r2, #0
 800b97a:	3343      	adds	r3, #67	; 0x43
 800b97c:	701a      	strb	r2, [r3, #0]
 800b97e:	6863      	ldr	r3, [r4, #4]
 800b980:	60a3      	str	r3, [r4, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	db03      	blt.n	800b98e <_printf_i+0xe6>
 800b986:	2204      	movs	r2, #4
 800b988:	6821      	ldr	r1, [r4, #0]
 800b98a:	4391      	bics	r1, r2
 800b98c:	6021      	str	r1, [r4, #0]
 800b98e:	2d00      	cmp	r5, #0
 800b990:	d102      	bne.n	800b998 <_printf_i+0xf0>
 800b992:	9e04      	ldr	r6, [sp, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00c      	beq.n	800b9b2 <_printf_i+0x10a>
 800b998:	9e04      	ldr	r6, [sp, #16]
 800b99a:	0028      	movs	r0, r5
 800b99c:	0039      	movs	r1, r7
 800b99e:	f7f4 fc55 	bl	800024c <__aeabi_uidivmod>
 800b9a2:	9b03      	ldr	r3, [sp, #12]
 800b9a4:	3e01      	subs	r6, #1
 800b9a6:	5c5b      	ldrb	r3, [r3, r1]
 800b9a8:	7033      	strb	r3, [r6, #0]
 800b9aa:	002b      	movs	r3, r5
 800b9ac:	0005      	movs	r5, r0
 800b9ae:	429f      	cmp	r7, r3
 800b9b0:	d9f3      	bls.n	800b99a <_printf_i+0xf2>
 800b9b2:	2f08      	cmp	r7, #8
 800b9b4:	d109      	bne.n	800b9ca <_printf_i+0x122>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	07db      	lsls	r3, r3, #31
 800b9ba:	d506      	bpl.n	800b9ca <_printf_i+0x122>
 800b9bc:	6863      	ldr	r3, [r4, #4]
 800b9be:	6922      	ldr	r2, [r4, #16]
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	dc02      	bgt.n	800b9ca <_printf_i+0x122>
 800b9c4:	2330      	movs	r3, #48	; 0x30
 800b9c6:	3e01      	subs	r6, #1
 800b9c8:	7033      	strb	r3, [r6, #0]
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	1b9b      	subs	r3, r3, r6
 800b9ce:	6123      	str	r3, [r4, #16]
 800b9d0:	9b07      	ldr	r3, [sp, #28]
 800b9d2:	0021      	movs	r1, r4
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	9805      	ldr	r0, [sp, #20]
 800b9d8:	9b06      	ldr	r3, [sp, #24]
 800b9da:	aa09      	add	r2, sp, #36	; 0x24
 800b9dc:	f7ff fef4 	bl	800b7c8 <_printf_common>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d14c      	bne.n	800ba7e <_printf_i+0x1d6>
 800b9e4:	2001      	movs	r0, #1
 800b9e6:	4240      	negs	r0, r0
 800b9e8:	b00b      	add	sp, #44	; 0x2c
 800b9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ec:	3145      	adds	r1, #69	; 0x45
 800b9ee:	700a      	strb	r2, [r1, #0]
 800b9f0:	4a34      	ldr	r2, [pc, #208]	; (800bac4 <_printf_i+0x21c>)
 800b9f2:	9203      	str	r2, [sp, #12]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	6821      	ldr	r1, [r4, #0]
 800b9f8:	ca20      	ldmia	r2!, {r5}
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	0608      	lsls	r0, r1, #24
 800b9fe:	d516      	bpl.n	800ba2e <_printf_i+0x186>
 800ba00:	07cb      	lsls	r3, r1, #31
 800ba02:	d502      	bpl.n	800ba0a <_printf_i+0x162>
 800ba04:	2320      	movs	r3, #32
 800ba06:	4319      	orrs	r1, r3
 800ba08:	6021      	str	r1, [r4, #0]
 800ba0a:	2710      	movs	r7, #16
 800ba0c:	2d00      	cmp	r5, #0
 800ba0e:	d1b2      	bne.n	800b976 <_printf_i+0xce>
 800ba10:	2320      	movs	r3, #32
 800ba12:	6822      	ldr	r2, [r4, #0]
 800ba14:	439a      	bics	r2, r3
 800ba16:	6022      	str	r2, [r4, #0]
 800ba18:	e7ad      	b.n	800b976 <_printf_i+0xce>
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	6809      	ldr	r1, [r1, #0]
 800ba1e:	430a      	orrs	r2, r1
 800ba20:	6022      	str	r2, [r4, #0]
 800ba22:	0022      	movs	r2, r4
 800ba24:	2178      	movs	r1, #120	; 0x78
 800ba26:	3245      	adds	r2, #69	; 0x45
 800ba28:	7011      	strb	r1, [r2, #0]
 800ba2a:	4a27      	ldr	r2, [pc, #156]	; (800bac8 <_printf_i+0x220>)
 800ba2c:	e7e1      	b.n	800b9f2 <_printf_i+0x14a>
 800ba2e:	0648      	lsls	r0, r1, #25
 800ba30:	d5e6      	bpl.n	800ba00 <_printf_i+0x158>
 800ba32:	b2ad      	uxth	r5, r5
 800ba34:	e7e4      	b.n	800ba00 <_printf_i+0x158>
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	680d      	ldr	r5, [r1, #0]
 800ba3a:	1d10      	adds	r0, r2, #4
 800ba3c:	6949      	ldr	r1, [r1, #20]
 800ba3e:	6018      	str	r0, [r3, #0]
 800ba40:	6813      	ldr	r3, [r2, #0]
 800ba42:	062e      	lsls	r6, r5, #24
 800ba44:	d501      	bpl.n	800ba4a <_printf_i+0x1a2>
 800ba46:	6019      	str	r1, [r3, #0]
 800ba48:	e002      	b.n	800ba50 <_printf_i+0x1a8>
 800ba4a:	066d      	lsls	r5, r5, #25
 800ba4c:	d5fb      	bpl.n	800ba46 <_printf_i+0x19e>
 800ba4e:	8019      	strh	r1, [r3, #0]
 800ba50:	2300      	movs	r3, #0
 800ba52:	9e04      	ldr	r6, [sp, #16]
 800ba54:	6123      	str	r3, [r4, #16]
 800ba56:	e7bb      	b.n	800b9d0 <_printf_i+0x128>
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	1d11      	adds	r1, r2, #4
 800ba5c:	6019      	str	r1, [r3, #0]
 800ba5e:	6816      	ldr	r6, [r2, #0]
 800ba60:	2100      	movs	r1, #0
 800ba62:	0030      	movs	r0, r6
 800ba64:	6862      	ldr	r2, [r4, #4]
 800ba66:	f001 fab3 	bl	800cfd0 <memchr>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d001      	beq.n	800ba72 <_printf_i+0x1ca>
 800ba6e:	1b80      	subs	r0, r0, r6
 800ba70:	6060      	str	r0, [r4, #4]
 800ba72:	6863      	ldr	r3, [r4, #4]
 800ba74:	6123      	str	r3, [r4, #16]
 800ba76:	2300      	movs	r3, #0
 800ba78:	9a04      	ldr	r2, [sp, #16]
 800ba7a:	7013      	strb	r3, [r2, #0]
 800ba7c:	e7a8      	b.n	800b9d0 <_printf_i+0x128>
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	0032      	movs	r2, r6
 800ba82:	9906      	ldr	r1, [sp, #24]
 800ba84:	9805      	ldr	r0, [sp, #20]
 800ba86:	9d07      	ldr	r5, [sp, #28]
 800ba88:	47a8      	blx	r5
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d0aa      	beq.n	800b9e4 <_printf_i+0x13c>
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	079b      	lsls	r3, r3, #30
 800ba92:	d415      	bmi.n	800bac0 <_printf_i+0x218>
 800ba94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba96:	68e0      	ldr	r0, [r4, #12]
 800ba98:	4298      	cmp	r0, r3
 800ba9a:	daa5      	bge.n	800b9e8 <_printf_i+0x140>
 800ba9c:	0018      	movs	r0, r3
 800ba9e:	e7a3      	b.n	800b9e8 <_printf_i+0x140>
 800baa0:	0022      	movs	r2, r4
 800baa2:	2301      	movs	r3, #1
 800baa4:	9906      	ldr	r1, [sp, #24]
 800baa6:	9805      	ldr	r0, [sp, #20]
 800baa8:	9e07      	ldr	r6, [sp, #28]
 800baaa:	3219      	adds	r2, #25
 800baac:	47b0      	blx	r6
 800baae:	1c43      	adds	r3, r0, #1
 800bab0:	d098      	beq.n	800b9e4 <_printf_i+0x13c>
 800bab2:	3501      	adds	r5, #1
 800bab4:	68e3      	ldr	r3, [r4, #12]
 800bab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bab8:	1a9b      	subs	r3, r3, r2
 800baba:	42ab      	cmp	r3, r5
 800babc:	dcf0      	bgt.n	800baa0 <_printf_i+0x1f8>
 800babe:	e7e9      	b.n	800ba94 <_printf_i+0x1ec>
 800bac0:	2500      	movs	r5, #0
 800bac2:	e7f7      	b.n	800bab4 <_printf_i+0x20c>
 800bac4:	0800e272 	.word	0x0800e272
 800bac8:	0800e283 	.word	0x0800e283

0800bacc <_sbrk_r>:
 800bacc:	2300      	movs	r3, #0
 800bace:	b570      	push	{r4, r5, r6, lr}
 800bad0:	4d06      	ldr	r5, [pc, #24]	; (800baec <_sbrk_r+0x20>)
 800bad2:	0004      	movs	r4, r0
 800bad4:	0008      	movs	r0, r1
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	f7f8 fcac 	bl	8004434 <_sbrk>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d103      	bne.n	800bae8 <_sbrk_r+0x1c>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d000      	beq.n	800bae8 <_sbrk_r+0x1c>
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	bd70      	pop	{r4, r5, r6, pc}
 800baea:	46c0      	nop			; (mov r8, r8)
 800baec:	200007fc 	.word	0x200007fc

0800baf0 <siprintf>:
 800baf0:	b40e      	push	{r1, r2, r3}
 800baf2:	b500      	push	{lr}
 800baf4:	490b      	ldr	r1, [pc, #44]	; (800bb24 <siprintf+0x34>)
 800baf6:	b09c      	sub	sp, #112	; 0x70
 800baf8:	ab1d      	add	r3, sp, #116	; 0x74
 800bafa:	9002      	str	r0, [sp, #8]
 800bafc:	9006      	str	r0, [sp, #24]
 800bafe:	9107      	str	r1, [sp, #28]
 800bb00:	9104      	str	r1, [sp, #16]
 800bb02:	4809      	ldr	r0, [pc, #36]	; (800bb28 <siprintf+0x38>)
 800bb04:	4909      	ldr	r1, [pc, #36]	; (800bb2c <siprintf+0x3c>)
 800bb06:	cb04      	ldmia	r3!, {r2}
 800bb08:	9105      	str	r1, [sp, #20]
 800bb0a:	6800      	ldr	r0, [r0, #0]
 800bb0c:	a902      	add	r1, sp, #8
 800bb0e:	9301      	str	r3, [sp, #4]
 800bb10:	f001 feac 	bl	800d86c <_svfiprintf_r>
 800bb14:	2300      	movs	r3, #0
 800bb16:	9a02      	ldr	r2, [sp, #8]
 800bb18:	7013      	strb	r3, [r2, #0]
 800bb1a:	b01c      	add	sp, #112	; 0x70
 800bb1c:	bc08      	pop	{r3}
 800bb1e:	b003      	add	sp, #12
 800bb20:	4718      	bx	r3
 800bb22:	46c0      	nop			; (mov r8, r8)
 800bb24:	7fffffff 	.word	0x7fffffff
 800bb28:	2000000c 	.word	0x2000000c
 800bb2c:	ffff0208 	.word	0xffff0208

0800bb30 <_strtol_l.constprop.0>:
 800bb30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb32:	b087      	sub	sp, #28
 800bb34:	001e      	movs	r6, r3
 800bb36:	9005      	str	r0, [sp, #20]
 800bb38:	9101      	str	r1, [sp, #4]
 800bb3a:	9202      	str	r2, [sp, #8]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d045      	beq.n	800bbcc <_strtol_l.constprop.0+0x9c>
 800bb40:	000b      	movs	r3, r1
 800bb42:	2e24      	cmp	r6, #36	; 0x24
 800bb44:	d842      	bhi.n	800bbcc <_strtol_l.constprop.0+0x9c>
 800bb46:	4a3f      	ldr	r2, [pc, #252]	; (800bc44 <_strtol_l.constprop.0+0x114>)
 800bb48:	2108      	movs	r1, #8
 800bb4a:	4694      	mov	ip, r2
 800bb4c:	001a      	movs	r2, r3
 800bb4e:	4660      	mov	r0, ip
 800bb50:	7814      	ldrb	r4, [r2, #0]
 800bb52:	3301      	adds	r3, #1
 800bb54:	5d00      	ldrb	r0, [r0, r4]
 800bb56:	001d      	movs	r5, r3
 800bb58:	0007      	movs	r7, r0
 800bb5a:	400f      	ands	r7, r1
 800bb5c:	4208      	tst	r0, r1
 800bb5e:	d1f5      	bne.n	800bb4c <_strtol_l.constprop.0+0x1c>
 800bb60:	2c2d      	cmp	r4, #45	; 0x2d
 800bb62:	d13a      	bne.n	800bbda <_strtol_l.constprop.0+0xaa>
 800bb64:	2701      	movs	r7, #1
 800bb66:	781c      	ldrb	r4, [r3, #0]
 800bb68:	1c95      	adds	r5, r2, #2
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	d065      	beq.n	800bc3a <_strtol_l.constprop.0+0x10a>
 800bb6e:	2e10      	cmp	r6, #16
 800bb70:	d109      	bne.n	800bb86 <_strtol_l.constprop.0+0x56>
 800bb72:	2c30      	cmp	r4, #48	; 0x30
 800bb74:	d107      	bne.n	800bb86 <_strtol_l.constprop.0+0x56>
 800bb76:	2220      	movs	r2, #32
 800bb78:	782b      	ldrb	r3, [r5, #0]
 800bb7a:	4393      	bics	r3, r2
 800bb7c:	2b58      	cmp	r3, #88	; 0x58
 800bb7e:	d157      	bne.n	800bc30 <_strtol_l.constprop.0+0x100>
 800bb80:	2610      	movs	r6, #16
 800bb82:	786c      	ldrb	r4, [r5, #1]
 800bb84:	3502      	adds	r5, #2
 800bb86:	4b30      	ldr	r3, [pc, #192]	; (800bc48 <_strtol_l.constprop.0+0x118>)
 800bb88:	0031      	movs	r1, r6
 800bb8a:	18fb      	adds	r3, r7, r3
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	9303      	str	r3, [sp, #12]
 800bb90:	f7f4 fb5c 	bl	800024c <__aeabi_uidivmod>
 800bb94:	2300      	movs	r3, #0
 800bb96:	2201      	movs	r2, #1
 800bb98:	4684      	mov	ip, r0
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	9104      	str	r1, [sp, #16]
 800bb9e:	4252      	negs	r2, r2
 800bba0:	0021      	movs	r1, r4
 800bba2:	3930      	subs	r1, #48	; 0x30
 800bba4:	2909      	cmp	r1, #9
 800bba6:	d81d      	bhi.n	800bbe4 <_strtol_l.constprop.0+0xb4>
 800bba8:	000c      	movs	r4, r1
 800bbaa:	42a6      	cmp	r6, r4
 800bbac:	dd28      	ble.n	800bc00 <_strtol_l.constprop.0+0xd0>
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	db24      	blt.n	800bbfc <_strtol_l.constprop.0+0xcc>
 800bbb2:	0013      	movs	r3, r2
 800bbb4:	4584      	cmp	ip, r0
 800bbb6:	d306      	bcc.n	800bbc6 <_strtol_l.constprop.0+0x96>
 800bbb8:	d102      	bne.n	800bbc0 <_strtol_l.constprop.0+0x90>
 800bbba:	9904      	ldr	r1, [sp, #16]
 800bbbc:	42a1      	cmp	r1, r4
 800bbbe:	db02      	blt.n	800bbc6 <_strtol_l.constprop.0+0x96>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	4370      	muls	r0, r6
 800bbc4:	1820      	adds	r0, r4, r0
 800bbc6:	782c      	ldrb	r4, [r5, #0]
 800bbc8:	3501      	adds	r5, #1
 800bbca:	e7e9      	b.n	800bba0 <_strtol_l.constprop.0+0x70>
 800bbcc:	f7ff f9f2 	bl	800afb4 <__errno>
 800bbd0:	2316      	movs	r3, #22
 800bbd2:	6003      	str	r3, [r0, #0]
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	b007      	add	sp, #28
 800bbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbda:	2c2b      	cmp	r4, #43	; 0x2b
 800bbdc:	d1c5      	bne.n	800bb6a <_strtol_l.constprop.0+0x3a>
 800bbde:	781c      	ldrb	r4, [r3, #0]
 800bbe0:	1c95      	adds	r5, r2, #2
 800bbe2:	e7c2      	b.n	800bb6a <_strtol_l.constprop.0+0x3a>
 800bbe4:	0021      	movs	r1, r4
 800bbe6:	3941      	subs	r1, #65	; 0x41
 800bbe8:	2919      	cmp	r1, #25
 800bbea:	d801      	bhi.n	800bbf0 <_strtol_l.constprop.0+0xc0>
 800bbec:	3c37      	subs	r4, #55	; 0x37
 800bbee:	e7dc      	b.n	800bbaa <_strtol_l.constprop.0+0x7a>
 800bbf0:	0021      	movs	r1, r4
 800bbf2:	3961      	subs	r1, #97	; 0x61
 800bbf4:	2919      	cmp	r1, #25
 800bbf6:	d803      	bhi.n	800bc00 <_strtol_l.constprop.0+0xd0>
 800bbf8:	3c57      	subs	r4, #87	; 0x57
 800bbfa:	e7d6      	b.n	800bbaa <_strtol_l.constprop.0+0x7a>
 800bbfc:	0013      	movs	r3, r2
 800bbfe:	e7e2      	b.n	800bbc6 <_strtol_l.constprop.0+0x96>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	da09      	bge.n	800bc18 <_strtol_l.constprop.0+0xe8>
 800bc04:	2322      	movs	r3, #34	; 0x22
 800bc06:	9a05      	ldr	r2, [sp, #20]
 800bc08:	9803      	ldr	r0, [sp, #12]
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	9b02      	ldr	r3, [sp, #8]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0e1      	beq.n	800bbd6 <_strtol_l.constprop.0+0xa6>
 800bc12:	1e6b      	subs	r3, r5, #1
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	e007      	b.n	800bc28 <_strtol_l.constprop.0+0xf8>
 800bc18:	2f00      	cmp	r7, #0
 800bc1a:	d000      	beq.n	800bc1e <_strtol_l.constprop.0+0xee>
 800bc1c:	4240      	negs	r0, r0
 800bc1e:	9a02      	ldr	r2, [sp, #8]
 800bc20:	2a00      	cmp	r2, #0
 800bc22:	d0d8      	beq.n	800bbd6 <_strtol_l.constprop.0+0xa6>
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1f4      	bne.n	800bc12 <_strtol_l.constprop.0+0xe2>
 800bc28:	9b02      	ldr	r3, [sp, #8]
 800bc2a:	9a01      	ldr	r2, [sp, #4]
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	e7d2      	b.n	800bbd6 <_strtol_l.constprop.0+0xa6>
 800bc30:	2430      	movs	r4, #48	; 0x30
 800bc32:	2e00      	cmp	r6, #0
 800bc34:	d1a7      	bne.n	800bb86 <_strtol_l.constprop.0+0x56>
 800bc36:	3608      	adds	r6, #8
 800bc38:	e7a5      	b.n	800bb86 <_strtol_l.constprop.0+0x56>
 800bc3a:	2c30      	cmp	r4, #48	; 0x30
 800bc3c:	d09b      	beq.n	800bb76 <_strtol_l.constprop.0+0x46>
 800bc3e:	260a      	movs	r6, #10
 800bc40:	e7a1      	b.n	800bb86 <_strtol_l.constprop.0+0x56>
 800bc42:	46c0      	nop			; (mov r8, r8)
 800bc44:	0800e295 	.word	0x0800e295
 800bc48:	7fffffff 	.word	0x7fffffff

0800bc4c <strtol>:
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	0013      	movs	r3, r2
 800bc50:	000a      	movs	r2, r1
 800bc52:	0001      	movs	r1, r0
 800bc54:	4802      	ldr	r0, [pc, #8]	; (800bc60 <strtol+0x14>)
 800bc56:	6800      	ldr	r0, [r0, #0]
 800bc58:	f7ff ff6a 	bl	800bb30 <_strtol_l.constprop.0>
 800bc5c:	bd10      	pop	{r4, pc}
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	2000000c 	.word	0x2000000c

0800bc64 <__swbuf_r>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	0005      	movs	r5, r0
 800bc68:	000e      	movs	r6, r1
 800bc6a:	0014      	movs	r4, r2
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d004      	beq.n	800bc7a <__swbuf_r+0x16>
 800bc70:	6983      	ldr	r3, [r0, #24]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <__swbuf_r+0x16>
 800bc76:	f001 f897 	bl	800cda8 <__sinit>
 800bc7a:	4b22      	ldr	r3, [pc, #136]	; (800bd04 <__swbuf_r+0xa0>)
 800bc7c:	429c      	cmp	r4, r3
 800bc7e:	d12e      	bne.n	800bcde <__swbuf_r+0x7a>
 800bc80:	686c      	ldr	r4, [r5, #4]
 800bc82:	69a3      	ldr	r3, [r4, #24]
 800bc84:	60a3      	str	r3, [r4, #8]
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	071b      	lsls	r3, r3, #28
 800bc8a:	d532      	bpl.n	800bcf2 <__swbuf_r+0x8e>
 800bc8c:	6923      	ldr	r3, [r4, #16]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d02f      	beq.n	800bcf2 <__swbuf_r+0x8e>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	6922      	ldr	r2, [r4, #16]
 800bc96:	b2f7      	uxtb	r7, r6
 800bc98:	1a98      	subs	r0, r3, r2
 800bc9a:	6963      	ldr	r3, [r4, #20]
 800bc9c:	b2f6      	uxtb	r6, r6
 800bc9e:	4283      	cmp	r3, r0
 800bca0:	dc05      	bgt.n	800bcae <__swbuf_r+0x4a>
 800bca2:	0021      	movs	r1, r4
 800bca4:	0028      	movs	r0, r5
 800bca6:	f000 ffdd 	bl	800cc64 <_fflush_r>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d127      	bne.n	800bcfe <__swbuf_r+0x9a>
 800bcae:	68a3      	ldr	r3, [r4, #8]
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	60a3      	str	r3, [r4, #8]
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	6022      	str	r2, [r4, #0]
 800bcbc:	701f      	strb	r7, [r3, #0]
 800bcbe:	6963      	ldr	r3, [r4, #20]
 800bcc0:	4283      	cmp	r3, r0
 800bcc2:	d004      	beq.n	800bcce <__swbuf_r+0x6a>
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	07db      	lsls	r3, r3, #31
 800bcc8:	d507      	bpl.n	800bcda <__swbuf_r+0x76>
 800bcca:	2e0a      	cmp	r6, #10
 800bccc:	d105      	bne.n	800bcda <__swbuf_r+0x76>
 800bcce:	0021      	movs	r1, r4
 800bcd0:	0028      	movs	r0, r5
 800bcd2:	f000 ffc7 	bl	800cc64 <_fflush_r>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d111      	bne.n	800bcfe <__swbuf_r+0x9a>
 800bcda:	0030      	movs	r0, r6
 800bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcde:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <__swbuf_r+0xa4>)
 800bce0:	429c      	cmp	r4, r3
 800bce2:	d101      	bne.n	800bce8 <__swbuf_r+0x84>
 800bce4:	68ac      	ldr	r4, [r5, #8]
 800bce6:	e7cc      	b.n	800bc82 <__swbuf_r+0x1e>
 800bce8:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <__swbuf_r+0xa8>)
 800bcea:	429c      	cmp	r4, r3
 800bcec:	d1c9      	bne.n	800bc82 <__swbuf_r+0x1e>
 800bcee:	68ec      	ldr	r4, [r5, #12]
 800bcf0:	e7c7      	b.n	800bc82 <__swbuf_r+0x1e>
 800bcf2:	0021      	movs	r1, r4
 800bcf4:	0028      	movs	r0, r5
 800bcf6:	f000 f80b 	bl	800bd10 <__swsetup_r>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d0c9      	beq.n	800bc92 <__swbuf_r+0x2e>
 800bcfe:	2601      	movs	r6, #1
 800bd00:	4276      	negs	r6, r6
 800bd02:	e7ea      	b.n	800bcda <__swbuf_r+0x76>
 800bd04:	0800e448 	.word	0x0800e448
 800bd08:	0800e468 	.word	0x0800e468
 800bd0c:	0800e428 	.word	0x0800e428

0800bd10 <__swsetup_r>:
 800bd10:	4b37      	ldr	r3, [pc, #220]	; (800bdf0 <__swsetup_r+0xe0>)
 800bd12:	b570      	push	{r4, r5, r6, lr}
 800bd14:	681d      	ldr	r5, [r3, #0]
 800bd16:	0006      	movs	r6, r0
 800bd18:	000c      	movs	r4, r1
 800bd1a:	2d00      	cmp	r5, #0
 800bd1c:	d005      	beq.n	800bd2a <__swsetup_r+0x1a>
 800bd1e:	69ab      	ldr	r3, [r5, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <__swsetup_r+0x1a>
 800bd24:	0028      	movs	r0, r5
 800bd26:	f001 f83f 	bl	800cda8 <__sinit>
 800bd2a:	4b32      	ldr	r3, [pc, #200]	; (800bdf4 <__swsetup_r+0xe4>)
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d10f      	bne.n	800bd50 <__swsetup_r+0x40>
 800bd30:	686c      	ldr	r4, [r5, #4]
 800bd32:	230c      	movs	r3, #12
 800bd34:	5ee2      	ldrsh	r2, [r4, r3]
 800bd36:	b293      	uxth	r3, r2
 800bd38:	0711      	lsls	r1, r2, #28
 800bd3a:	d42d      	bmi.n	800bd98 <__swsetup_r+0x88>
 800bd3c:	06d9      	lsls	r1, r3, #27
 800bd3e:	d411      	bmi.n	800bd64 <__swsetup_r+0x54>
 800bd40:	2309      	movs	r3, #9
 800bd42:	2001      	movs	r0, #1
 800bd44:	6033      	str	r3, [r6, #0]
 800bd46:	3337      	adds	r3, #55	; 0x37
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	81a3      	strh	r3, [r4, #12]
 800bd4c:	4240      	negs	r0, r0
 800bd4e:	bd70      	pop	{r4, r5, r6, pc}
 800bd50:	4b29      	ldr	r3, [pc, #164]	; (800bdf8 <__swsetup_r+0xe8>)
 800bd52:	429c      	cmp	r4, r3
 800bd54:	d101      	bne.n	800bd5a <__swsetup_r+0x4a>
 800bd56:	68ac      	ldr	r4, [r5, #8]
 800bd58:	e7eb      	b.n	800bd32 <__swsetup_r+0x22>
 800bd5a:	4b28      	ldr	r3, [pc, #160]	; (800bdfc <__swsetup_r+0xec>)
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d1e8      	bne.n	800bd32 <__swsetup_r+0x22>
 800bd60:	68ec      	ldr	r4, [r5, #12]
 800bd62:	e7e6      	b.n	800bd32 <__swsetup_r+0x22>
 800bd64:	075b      	lsls	r3, r3, #29
 800bd66:	d513      	bpl.n	800bd90 <__swsetup_r+0x80>
 800bd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd6a:	2900      	cmp	r1, #0
 800bd6c:	d008      	beq.n	800bd80 <__swsetup_r+0x70>
 800bd6e:	0023      	movs	r3, r4
 800bd70:	3344      	adds	r3, #68	; 0x44
 800bd72:	4299      	cmp	r1, r3
 800bd74:	d002      	beq.n	800bd7c <__swsetup_r+0x6c>
 800bd76:	0030      	movs	r0, r6
 800bd78:	f7ff f958 	bl	800b02c <_free_r>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	6363      	str	r3, [r4, #52]	; 0x34
 800bd80:	2224      	movs	r2, #36	; 0x24
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	4393      	bics	r3, r2
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6063      	str	r3, [r4, #4]
 800bd8c:	6923      	ldr	r3, [r4, #16]
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	2308      	movs	r3, #8
 800bd92:	89a2      	ldrh	r2, [r4, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10b      	bne.n	800bdb6 <__swsetup_r+0xa6>
 800bd9e:	21a0      	movs	r1, #160	; 0xa0
 800bda0:	2280      	movs	r2, #128	; 0x80
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	0089      	lsls	r1, r1, #2
 800bda6:	0092      	lsls	r2, r2, #2
 800bda8:	400b      	ands	r3, r1
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d003      	beq.n	800bdb6 <__swsetup_r+0xa6>
 800bdae:	0021      	movs	r1, r4
 800bdb0:	0030      	movs	r0, r6
 800bdb2:	f001 f8c9 	bl	800cf48 <__smakebuf_r>
 800bdb6:	220c      	movs	r2, #12
 800bdb8:	5ea3      	ldrsh	r3, [r4, r2]
 800bdba:	2001      	movs	r0, #1
 800bdbc:	001a      	movs	r2, r3
 800bdbe:	b299      	uxth	r1, r3
 800bdc0:	4002      	ands	r2, r0
 800bdc2:	4203      	tst	r3, r0
 800bdc4:	d00f      	beq.n	800bde6 <__swsetup_r+0xd6>
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	60a2      	str	r2, [r4, #8]
 800bdca:	6962      	ldr	r2, [r4, #20]
 800bdcc:	4252      	negs	r2, r2
 800bdce:	61a2      	str	r2, [r4, #24]
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	6922      	ldr	r2, [r4, #16]
 800bdd4:	4282      	cmp	r2, r0
 800bdd6:	d1ba      	bne.n	800bd4e <__swsetup_r+0x3e>
 800bdd8:	060a      	lsls	r2, r1, #24
 800bdda:	d5b8      	bpl.n	800bd4e <__swsetup_r+0x3e>
 800bddc:	2240      	movs	r2, #64	; 0x40
 800bdde:	4313      	orrs	r3, r2
 800bde0:	81a3      	strh	r3, [r4, #12]
 800bde2:	3801      	subs	r0, #1
 800bde4:	e7b3      	b.n	800bd4e <__swsetup_r+0x3e>
 800bde6:	0788      	lsls	r0, r1, #30
 800bde8:	d400      	bmi.n	800bdec <__swsetup_r+0xdc>
 800bdea:	6962      	ldr	r2, [r4, #20]
 800bdec:	60a2      	str	r2, [r4, #8]
 800bdee:	e7ef      	b.n	800bdd0 <__swsetup_r+0xc0>
 800bdf0:	2000000c 	.word	0x2000000c
 800bdf4:	0800e448 	.word	0x0800e448
 800bdf8:	0800e468 	.word	0x0800e468
 800bdfc:	0800e428 	.word	0x0800e428

0800be00 <quorem>:
 800be00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be02:	0006      	movs	r6, r0
 800be04:	690b      	ldr	r3, [r1, #16]
 800be06:	6932      	ldr	r2, [r6, #16]
 800be08:	b087      	sub	sp, #28
 800be0a:	2000      	movs	r0, #0
 800be0c:	9103      	str	r1, [sp, #12]
 800be0e:	429a      	cmp	r2, r3
 800be10:	db65      	blt.n	800bede <quorem+0xde>
 800be12:	3b01      	subs	r3, #1
 800be14:	009c      	lsls	r4, r3, #2
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	000b      	movs	r3, r1
 800be1a:	3314      	adds	r3, #20
 800be1c:	9305      	str	r3, [sp, #20]
 800be1e:	191b      	adds	r3, r3, r4
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	0033      	movs	r3, r6
 800be24:	3314      	adds	r3, #20
 800be26:	9302      	str	r3, [sp, #8]
 800be28:	191c      	adds	r4, r3, r4
 800be2a:	9b04      	ldr	r3, [sp, #16]
 800be2c:	6827      	ldr	r7, [r4, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	0038      	movs	r0, r7
 800be32:	1c5d      	adds	r5, r3, #1
 800be34:	0029      	movs	r1, r5
 800be36:	9301      	str	r3, [sp, #4]
 800be38:	f7f4 f982 	bl	8000140 <__udivsi3>
 800be3c:	9001      	str	r0, [sp, #4]
 800be3e:	42af      	cmp	r7, r5
 800be40:	d324      	bcc.n	800be8c <quorem+0x8c>
 800be42:	2500      	movs	r5, #0
 800be44:	46ac      	mov	ip, r5
 800be46:	9802      	ldr	r0, [sp, #8]
 800be48:	9f05      	ldr	r7, [sp, #20]
 800be4a:	cf08      	ldmia	r7!, {r3}
 800be4c:	9a01      	ldr	r2, [sp, #4]
 800be4e:	b299      	uxth	r1, r3
 800be50:	4351      	muls	r1, r2
 800be52:	0c1b      	lsrs	r3, r3, #16
 800be54:	4353      	muls	r3, r2
 800be56:	1949      	adds	r1, r1, r5
 800be58:	0c0a      	lsrs	r2, r1, #16
 800be5a:	189b      	adds	r3, r3, r2
 800be5c:	6802      	ldr	r2, [r0, #0]
 800be5e:	b289      	uxth	r1, r1
 800be60:	b292      	uxth	r2, r2
 800be62:	4462      	add	r2, ip
 800be64:	1a52      	subs	r2, r2, r1
 800be66:	6801      	ldr	r1, [r0, #0]
 800be68:	0c1d      	lsrs	r5, r3, #16
 800be6a:	0c09      	lsrs	r1, r1, #16
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	1acb      	subs	r3, r1, r3
 800be70:	1411      	asrs	r1, r2, #16
 800be72:	185b      	adds	r3, r3, r1
 800be74:	1419      	asrs	r1, r3, #16
 800be76:	b292      	uxth	r2, r2
 800be78:	041b      	lsls	r3, r3, #16
 800be7a:	431a      	orrs	r2, r3
 800be7c:	9b04      	ldr	r3, [sp, #16]
 800be7e:	468c      	mov	ip, r1
 800be80:	c004      	stmia	r0!, {r2}
 800be82:	42bb      	cmp	r3, r7
 800be84:	d2e1      	bcs.n	800be4a <quorem+0x4a>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d030      	beq.n	800beee <quorem+0xee>
 800be8c:	0030      	movs	r0, r6
 800be8e:	9903      	ldr	r1, [sp, #12]
 800be90:	f001 fb46 	bl	800d520 <__mcmp>
 800be94:	2800      	cmp	r0, #0
 800be96:	db21      	blt.n	800bedc <quorem+0xdc>
 800be98:	0030      	movs	r0, r6
 800be9a:	2400      	movs	r4, #0
 800be9c:	9b01      	ldr	r3, [sp, #4]
 800be9e:	9903      	ldr	r1, [sp, #12]
 800bea0:	3301      	adds	r3, #1
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	3014      	adds	r0, #20
 800bea6:	3114      	adds	r1, #20
 800bea8:	6803      	ldr	r3, [r0, #0]
 800beaa:	c920      	ldmia	r1!, {r5}
 800beac:	b29a      	uxth	r2, r3
 800beae:	1914      	adds	r4, r2, r4
 800beb0:	b2aa      	uxth	r2, r5
 800beb2:	1aa2      	subs	r2, r4, r2
 800beb4:	0c1b      	lsrs	r3, r3, #16
 800beb6:	0c2d      	lsrs	r5, r5, #16
 800beb8:	1414      	asrs	r4, r2, #16
 800beba:	1b5b      	subs	r3, r3, r5
 800bebc:	191b      	adds	r3, r3, r4
 800bebe:	141c      	asrs	r4, r3, #16
 800bec0:	b292      	uxth	r2, r2
 800bec2:	041b      	lsls	r3, r3, #16
 800bec4:	4313      	orrs	r3, r2
 800bec6:	c008      	stmia	r0!, {r3}
 800bec8:	9b04      	ldr	r3, [sp, #16]
 800beca:	428b      	cmp	r3, r1
 800becc:	d2ec      	bcs.n	800bea8 <quorem+0xa8>
 800bece:	9b00      	ldr	r3, [sp, #0]
 800bed0:	9a02      	ldr	r2, [sp, #8]
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	18d3      	adds	r3, r2, r3
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	2a00      	cmp	r2, #0
 800beda:	d015      	beq.n	800bf08 <quorem+0x108>
 800bedc:	9801      	ldr	r0, [sp, #4]
 800bede:	b007      	add	sp, #28
 800bee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d106      	bne.n	800bef6 <quorem+0xf6>
 800bee8:	9b00      	ldr	r3, [sp, #0]
 800beea:	3b01      	subs	r3, #1
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	9b02      	ldr	r3, [sp, #8]
 800bef0:	3c04      	subs	r4, #4
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	d3f5      	bcc.n	800bee2 <quorem+0xe2>
 800bef6:	9b00      	ldr	r3, [sp, #0]
 800bef8:	6133      	str	r3, [r6, #16]
 800befa:	e7c7      	b.n	800be8c <quorem+0x8c>
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	2a00      	cmp	r2, #0
 800bf00:	d106      	bne.n	800bf10 <quorem+0x110>
 800bf02:	9a00      	ldr	r2, [sp, #0]
 800bf04:	3a01      	subs	r2, #1
 800bf06:	9200      	str	r2, [sp, #0]
 800bf08:	9a02      	ldr	r2, [sp, #8]
 800bf0a:	3b04      	subs	r3, #4
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d3f5      	bcc.n	800befc <quorem+0xfc>
 800bf10:	9b00      	ldr	r3, [sp, #0]
 800bf12:	6133      	str	r3, [r6, #16]
 800bf14:	e7e2      	b.n	800bedc <quorem+0xdc>
	...

0800bf18 <_dtoa_r>:
 800bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf1a:	b09d      	sub	sp, #116	; 0x74
 800bf1c:	9202      	str	r2, [sp, #8]
 800bf1e:	9303      	str	r3, [sp, #12]
 800bf20:	9b02      	ldr	r3, [sp, #8]
 800bf22:	9c03      	ldr	r4, [sp, #12]
 800bf24:	9308      	str	r3, [sp, #32]
 800bf26:	9409      	str	r4, [sp, #36]	; 0x24
 800bf28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bf2a:	0007      	movs	r7, r0
 800bf2c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800bf2e:	2c00      	cmp	r4, #0
 800bf30:	d10e      	bne.n	800bf50 <_dtoa_r+0x38>
 800bf32:	2010      	movs	r0, #16
 800bf34:	f7ff f868 	bl	800b008 <malloc>
 800bf38:	1e02      	subs	r2, r0, #0
 800bf3a:	6278      	str	r0, [r7, #36]	; 0x24
 800bf3c:	d104      	bne.n	800bf48 <_dtoa_r+0x30>
 800bf3e:	21ea      	movs	r1, #234	; 0xea
 800bf40:	4bc7      	ldr	r3, [pc, #796]	; (800c260 <_dtoa_r+0x348>)
 800bf42:	48c8      	ldr	r0, [pc, #800]	; (800c264 <_dtoa_r+0x34c>)
 800bf44:	f001 ff54 	bl	800ddf0 <__assert_func>
 800bf48:	6044      	str	r4, [r0, #4]
 800bf4a:	6084      	str	r4, [r0, #8]
 800bf4c:	6004      	str	r4, [r0, #0]
 800bf4e:	60c4      	str	r4, [r0, #12]
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	6819      	ldr	r1, [r3, #0]
 800bf54:	2900      	cmp	r1, #0
 800bf56:	d00a      	beq.n	800bf6e <_dtoa_r+0x56>
 800bf58:	685a      	ldr	r2, [r3, #4]
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	4093      	lsls	r3, r2
 800bf5e:	604a      	str	r2, [r1, #4]
 800bf60:	608b      	str	r3, [r1, #8]
 800bf62:	0038      	movs	r0, r7
 800bf64:	f001 f89c 	bl	800d0a0 <_Bfree>
 800bf68:	2200      	movs	r2, #0
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	601a      	str	r2, [r3, #0]
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	da20      	bge.n	800bfb6 <_dtoa_r+0x9e>
 800bf74:	2301      	movs	r3, #1
 800bf76:	602b      	str	r3, [r5, #0]
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	085b      	lsrs	r3, r3, #1
 800bf7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bf82:	4bb9      	ldr	r3, [pc, #740]	; (800c268 <_dtoa_r+0x350>)
 800bf84:	4ab8      	ldr	r2, [pc, #736]	; (800c268 <_dtoa_r+0x350>)
 800bf86:	402b      	ands	r3, r5
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d117      	bne.n	800bfbc <_dtoa_r+0xa4>
 800bf8c:	4bb7      	ldr	r3, [pc, #732]	; (800c26c <_dtoa_r+0x354>)
 800bf8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf90:	0328      	lsls	r0, r5, #12
 800bf92:	6013      	str	r3, [r2, #0]
 800bf94:	9b02      	ldr	r3, [sp, #8]
 800bf96:	0b00      	lsrs	r0, r0, #12
 800bf98:	4318      	orrs	r0, r3
 800bf9a:	d101      	bne.n	800bfa0 <_dtoa_r+0x88>
 800bf9c:	f000 fdbf 	bl	800cb1e <_dtoa_r+0xc06>
 800bfa0:	48b3      	ldr	r0, [pc, #716]	; (800c270 <_dtoa_r+0x358>)
 800bfa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bfa4:	9006      	str	r0, [sp, #24]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d002      	beq.n	800bfb0 <_dtoa_r+0x98>
 800bfaa:	4bb2      	ldr	r3, [pc, #712]	; (800c274 <_dtoa_r+0x35c>)
 800bfac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	9806      	ldr	r0, [sp, #24]
 800bfb2:	b01d      	add	sp, #116	; 0x74
 800bfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	602b      	str	r3, [r5, #0]
 800bfba:	e7e1      	b.n	800bf80 <_dtoa_r+0x68>
 800bfbc:	9b08      	ldr	r3, [sp, #32]
 800bfbe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bfc0:	9312      	str	r3, [sp, #72]	; 0x48
 800bfc2:	9413      	str	r4, [sp, #76]	; 0x4c
 800bfc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bfc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f7f4 fa3e 	bl	800044c <__aeabi_dcmpeq>
 800bfd0:	1e04      	subs	r4, r0, #0
 800bfd2:	d009      	beq.n	800bfe8 <_dtoa_r+0xd0>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	4ba7      	ldr	r3, [pc, #668]	; (800c278 <_dtoa_r+0x360>)
 800bfdc:	9306      	str	r3, [sp, #24]
 800bfde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0e5      	beq.n	800bfb0 <_dtoa_r+0x98>
 800bfe4:	4ba5      	ldr	r3, [pc, #660]	; (800c27c <_dtoa_r+0x364>)
 800bfe6:	e7e1      	b.n	800bfac <_dtoa_r+0x94>
 800bfe8:	ab1a      	add	r3, sp, #104	; 0x68
 800bfea:	9301      	str	r3, [sp, #4]
 800bfec:	ab1b      	add	r3, sp, #108	; 0x6c
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	0038      	movs	r0, r7
 800bff2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bff6:	f001 fb47 	bl	800d688 <__d2b>
 800bffa:	006e      	lsls	r6, r5, #1
 800bffc:	9005      	str	r0, [sp, #20]
 800bffe:	0d76      	lsrs	r6, r6, #21
 800c000:	d100      	bne.n	800c004 <_dtoa_r+0xec>
 800c002:	e07c      	b.n	800c0fe <_dtoa_r+0x1e6>
 800c004:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c006:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c00a:	4a9d      	ldr	r2, [pc, #628]	; (800c280 <_dtoa_r+0x368>)
 800c00c:	031b      	lsls	r3, r3, #12
 800c00e:	0b1b      	lsrs	r3, r3, #12
 800c010:	431a      	orrs	r2, r3
 800c012:	0011      	movs	r1, r2
 800c014:	4b9b      	ldr	r3, [pc, #620]	; (800c284 <_dtoa_r+0x36c>)
 800c016:	9418      	str	r4, [sp, #96]	; 0x60
 800c018:	18f6      	adds	r6, r6, r3
 800c01a:	2200      	movs	r2, #0
 800c01c:	4b9a      	ldr	r3, [pc, #616]	; (800c288 <_dtoa_r+0x370>)
 800c01e:	f7f6 fb59 	bl	80026d4 <__aeabi_dsub>
 800c022:	4a9a      	ldr	r2, [pc, #616]	; (800c28c <_dtoa_r+0x374>)
 800c024:	4b9a      	ldr	r3, [pc, #616]	; (800c290 <_dtoa_r+0x378>)
 800c026:	f7f6 f8e9 	bl	80021fc <__aeabi_dmul>
 800c02a:	4a9a      	ldr	r2, [pc, #616]	; (800c294 <_dtoa_r+0x37c>)
 800c02c:	4b9a      	ldr	r3, [pc, #616]	; (800c298 <_dtoa_r+0x380>)
 800c02e:	f7f5 f9a7 	bl	8001380 <__aeabi_dadd>
 800c032:	0004      	movs	r4, r0
 800c034:	0030      	movs	r0, r6
 800c036:	000d      	movs	r5, r1
 800c038:	f7f6 ff32 	bl	8002ea0 <__aeabi_i2d>
 800c03c:	4a97      	ldr	r2, [pc, #604]	; (800c29c <_dtoa_r+0x384>)
 800c03e:	4b98      	ldr	r3, [pc, #608]	; (800c2a0 <_dtoa_r+0x388>)
 800c040:	f7f6 f8dc 	bl	80021fc <__aeabi_dmul>
 800c044:	0002      	movs	r2, r0
 800c046:	000b      	movs	r3, r1
 800c048:	0020      	movs	r0, r4
 800c04a:	0029      	movs	r1, r5
 800c04c:	f7f5 f998 	bl	8001380 <__aeabi_dadd>
 800c050:	0004      	movs	r4, r0
 800c052:	000d      	movs	r5, r1
 800c054:	f7f6 feee 	bl	8002e34 <__aeabi_d2iz>
 800c058:	2200      	movs	r2, #0
 800c05a:	9002      	str	r0, [sp, #8]
 800c05c:	2300      	movs	r3, #0
 800c05e:	0020      	movs	r0, r4
 800c060:	0029      	movs	r1, r5
 800c062:	f7f4 f9f9 	bl	8000458 <__aeabi_dcmplt>
 800c066:	2800      	cmp	r0, #0
 800c068:	d00b      	beq.n	800c082 <_dtoa_r+0x16a>
 800c06a:	9802      	ldr	r0, [sp, #8]
 800c06c:	f7f6 ff18 	bl	8002ea0 <__aeabi_i2d>
 800c070:	002b      	movs	r3, r5
 800c072:	0022      	movs	r2, r4
 800c074:	f7f4 f9ea 	bl	800044c <__aeabi_dcmpeq>
 800c078:	4243      	negs	r3, r0
 800c07a:	4158      	adcs	r0, r3
 800c07c:	9b02      	ldr	r3, [sp, #8]
 800c07e:	1a1b      	subs	r3, r3, r0
 800c080:	9302      	str	r3, [sp, #8]
 800c082:	2301      	movs	r3, #1
 800c084:	9316      	str	r3, [sp, #88]	; 0x58
 800c086:	9b02      	ldr	r3, [sp, #8]
 800c088:	2b16      	cmp	r3, #22
 800c08a:	d80f      	bhi.n	800c0ac <_dtoa_r+0x194>
 800c08c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c08e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c090:	00da      	lsls	r2, r3, #3
 800c092:	4b84      	ldr	r3, [pc, #528]	; (800c2a4 <_dtoa_r+0x38c>)
 800c094:	189b      	adds	r3, r3, r2
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f7f4 f9dd 	bl	8000458 <__aeabi_dcmplt>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d049      	beq.n	800c136 <_dtoa_r+0x21e>
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	9302      	str	r3, [sp, #8]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9316      	str	r3, [sp, #88]	; 0x58
 800c0ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c0ae:	1b9e      	subs	r6, r3, r6
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c0b4:	0033      	movs	r3, r6
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	930d      	str	r3, [sp, #52]	; 0x34
 800c0ba:	d504      	bpl.n	800c0c6 <_dtoa_r+0x1ae>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	1b9b      	subs	r3, r3, r6
 800c0c0:	930a      	str	r3, [sp, #40]	; 0x28
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	930d      	str	r3, [sp, #52]	; 0x34
 800c0c6:	9b02      	ldr	r3, [sp, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	db36      	blt.n	800c13a <_dtoa_r+0x222>
 800c0cc:	9a02      	ldr	r2, [sp, #8]
 800c0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0d0:	4694      	mov	ip, r2
 800c0d2:	4463      	add	r3, ip
 800c0d4:	930d      	str	r3, [sp, #52]	; 0x34
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9215      	str	r2, [sp, #84]	; 0x54
 800c0da:	930e      	str	r3, [sp, #56]	; 0x38
 800c0dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0de:	2401      	movs	r4, #1
 800c0e0:	2b09      	cmp	r3, #9
 800c0e2:	d864      	bhi.n	800c1ae <_dtoa_r+0x296>
 800c0e4:	2b05      	cmp	r3, #5
 800c0e6:	dd02      	ble.n	800c0ee <_dtoa_r+0x1d6>
 800c0e8:	2400      	movs	r4, #0
 800c0ea:	3b04      	subs	r3, #4
 800c0ec:	9322      	str	r3, [sp, #136]	; 0x88
 800c0ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0f0:	1e98      	subs	r0, r3, #2
 800c0f2:	2803      	cmp	r0, #3
 800c0f4:	d864      	bhi.n	800c1c0 <_dtoa_r+0x2a8>
 800c0f6:	f7f4 f80f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c0fa:	3829      	.short	0x3829
 800c0fc:	5836      	.short	0x5836
 800c0fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c100:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c102:	189e      	adds	r6, r3, r2
 800c104:	4b68      	ldr	r3, [pc, #416]	; (800c2a8 <_dtoa_r+0x390>)
 800c106:	18f2      	adds	r2, r6, r3
 800c108:	2a20      	cmp	r2, #32
 800c10a:	dd0f      	ble.n	800c12c <_dtoa_r+0x214>
 800c10c:	2340      	movs	r3, #64	; 0x40
 800c10e:	1a9b      	subs	r3, r3, r2
 800c110:	409d      	lsls	r5, r3
 800c112:	4b66      	ldr	r3, [pc, #408]	; (800c2ac <_dtoa_r+0x394>)
 800c114:	9802      	ldr	r0, [sp, #8]
 800c116:	18f3      	adds	r3, r6, r3
 800c118:	40d8      	lsrs	r0, r3
 800c11a:	4328      	orrs	r0, r5
 800c11c:	f7f6 fef0 	bl	8002f00 <__aeabi_ui2d>
 800c120:	2301      	movs	r3, #1
 800c122:	4c63      	ldr	r4, [pc, #396]	; (800c2b0 <_dtoa_r+0x398>)
 800c124:	3e01      	subs	r6, #1
 800c126:	1909      	adds	r1, r1, r4
 800c128:	9318      	str	r3, [sp, #96]	; 0x60
 800c12a:	e776      	b.n	800c01a <_dtoa_r+0x102>
 800c12c:	2320      	movs	r3, #32
 800c12e:	9802      	ldr	r0, [sp, #8]
 800c130:	1a9b      	subs	r3, r3, r2
 800c132:	4098      	lsls	r0, r3
 800c134:	e7f2      	b.n	800c11c <_dtoa_r+0x204>
 800c136:	9016      	str	r0, [sp, #88]	; 0x58
 800c138:	e7b8      	b.n	800c0ac <_dtoa_r+0x194>
 800c13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c13c:	9a02      	ldr	r2, [sp, #8]
 800c13e:	1a9b      	subs	r3, r3, r2
 800c140:	930a      	str	r3, [sp, #40]	; 0x28
 800c142:	4253      	negs	r3, r2
 800c144:	930e      	str	r3, [sp, #56]	; 0x38
 800c146:	2300      	movs	r3, #0
 800c148:	9315      	str	r3, [sp, #84]	; 0x54
 800c14a:	e7c7      	b.n	800c0dc <_dtoa_r+0x1c4>
 800c14c:	2300      	movs	r3, #0
 800c14e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c150:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c152:	930c      	str	r3, [sp, #48]	; 0x30
 800c154:	9307      	str	r3, [sp, #28]
 800c156:	2b00      	cmp	r3, #0
 800c158:	dc13      	bgt.n	800c182 <_dtoa_r+0x26a>
 800c15a:	2301      	movs	r3, #1
 800c15c:	001a      	movs	r2, r3
 800c15e:	930c      	str	r3, [sp, #48]	; 0x30
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	9223      	str	r2, [sp, #140]	; 0x8c
 800c164:	e00d      	b.n	800c182 <_dtoa_r+0x26a>
 800c166:	2301      	movs	r3, #1
 800c168:	e7f1      	b.n	800c14e <_dtoa_r+0x236>
 800c16a:	2300      	movs	r3, #0
 800c16c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c16e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c170:	4694      	mov	ip, r2
 800c172:	9b02      	ldr	r3, [sp, #8]
 800c174:	4463      	add	r3, ip
 800c176:	930c      	str	r3, [sp, #48]	; 0x30
 800c178:	3301      	adds	r3, #1
 800c17a:	9307      	str	r3, [sp, #28]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	dc00      	bgt.n	800c182 <_dtoa_r+0x26a>
 800c180:	2301      	movs	r3, #1
 800c182:	2200      	movs	r2, #0
 800c184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c186:	6042      	str	r2, [r0, #4]
 800c188:	3204      	adds	r2, #4
 800c18a:	0015      	movs	r5, r2
 800c18c:	3514      	adds	r5, #20
 800c18e:	6841      	ldr	r1, [r0, #4]
 800c190:	429d      	cmp	r5, r3
 800c192:	d919      	bls.n	800c1c8 <_dtoa_r+0x2b0>
 800c194:	0038      	movs	r0, r7
 800c196:	f000 ff3f 	bl	800d018 <_Balloc>
 800c19a:	9006      	str	r0, [sp, #24]
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d117      	bne.n	800c1d0 <_dtoa_r+0x2b8>
 800c1a0:	21d5      	movs	r1, #213	; 0xd5
 800c1a2:	0002      	movs	r2, r0
 800c1a4:	4b43      	ldr	r3, [pc, #268]	; (800c2b4 <_dtoa_r+0x39c>)
 800c1a6:	0049      	lsls	r1, r1, #1
 800c1a8:	e6cb      	b.n	800bf42 <_dtoa_r+0x2a>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e7de      	b.n	800c16c <_dtoa_r+0x254>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	940f      	str	r4, [sp, #60]	; 0x3c
 800c1b2:	9322      	str	r3, [sp, #136]	; 0x88
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	930c      	str	r3, [sp, #48]	; 0x30
 800c1b8:	9307      	str	r3, [sp, #28]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	3313      	adds	r3, #19
 800c1be:	e7d0      	b.n	800c162 <_dtoa_r+0x24a>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1c4:	3b02      	subs	r3, #2
 800c1c6:	e7f6      	b.n	800c1b6 <_dtoa_r+0x29e>
 800c1c8:	3101      	adds	r1, #1
 800c1ca:	6041      	str	r1, [r0, #4]
 800c1cc:	0052      	lsls	r2, r2, #1
 800c1ce:	e7dc      	b.n	800c18a <_dtoa_r+0x272>
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	9a06      	ldr	r2, [sp, #24]
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	9b07      	ldr	r3, [sp, #28]
 800c1d8:	2b0e      	cmp	r3, #14
 800c1da:	d900      	bls.n	800c1de <_dtoa_r+0x2c6>
 800c1dc:	e0eb      	b.n	800c3b6 <_dtoa_r+0x49e>
 800c1de:	2c00      	cmp	r4, #0
 800c1e0:	d100      	bne.n	800c1e4 <_dtoa_r+0x2cc>
 800c1e2:	e0e8      	b.n	800c3b6 <_dtoa_r+0x49e>
 800c1e4:	9b02      	ldr	r3, [sp, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	dd68      	ble.n	800c2bc <_dtoa_r+0x3a4>
 800c1ea:	001a      	movs	r2, r3
 800c1ec:	210f      	movs	r1, #15
 800c1ee:	4b2d      	ldr	r3, [pc, #180]	; (800c2a4 <_dtoa_r+0x38c>)
 800c1f0:	400a      	ands	r2, r1
 800c1f2:	00d2      	lsls	r2, r2, #3
 800c1f4:	189b      	adds	r3, r3, r2
 800c1f6:	681d      	ldr	r5, [r3, #0]
 800c1f8:	685e      	ldr	r6, [r3, #4]
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	111c      	asrs	r4, r3, #4
 800c1fe:	2302      	movs	r3, #2
 800c200:	9310      	str	r3, [sp, #64]	; 0x40
 800c202:	9b02      	ldr	r3, [sp, #8]
 800c204:	05db      	lsls	r3, r3, #23
 800c206:	d50b      	bpl.n	800c220 <_dtoa_r+0x308>
 800c208:	4b2b      	ldr	r3, [pc, #172]	; (800c2b8 <_dtoa_r+0x3a0>)
 800c20a:	400c      	ands	r4, r1
 800c20c:	6a1a      	ldr	r2, [r3, #32]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c210:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c212:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c214:	f7f5 fbf0 	bl	80019f8 <__aeabi_ddiv>
 800c218:	2303      	movs	r3, #3
 800c21a:	9008      	str	r0, [sp, #32]
 800c21c:	9109      	str	r1, [sp, #36]	; 0x24
 800c21e:	9310      	str	r3, [sp, #64]	; 0x40
 800c220:	4b25      	ldr	r3, [pc, #148]	; (800c2b8 <_dtoa_r+0x3a0>)
 800c222:	9314      	str	r3, [sp, #80]	; 0x50
 800c224:	2c00      	cmp	r4, #0
 800c226:	d108      	bne.n	800c23a <_dtoa_r+0x322>
 800c228:	9808      	ldr	r0, [sp, #32]
 800c22a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c22c:	002a      	movs	r2, r5
 800c22e:	0033      	movs	r3, r6
 800c230:	f7f5 fbe2 	bl	80019f8 <__aeabi_ddiv>
 800c234:	9008      	str	r0, [sp, #32]
 800c236:	9109      	str	r1, [sp, #36]	; 0x24
 800c238:	e05c      	b.n	800c2f4 <_dtoa_r+0x3dc>
 800c23a:	2301      	movs	r3, #1
 800c23c:	421c      	tst	r4, r3
 800c23e:	d00b      	beq.n	800c258 <_dtoa_r+0x340>
 800c240:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c242:	0028      	movs	r0, r5
 800c244:	3301      	adds	r3, #1
 800c246:	9310      	str	r3, [sp, #64]	; 0x40
 800c248:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c24a:	0031      	movs	r1, r6
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	f7f5 ffd4 	bl	80021fc <__aeabi_dmul>
 800c254:	0005      	movs	r5, r0
 800c256:	000e      	movs	r6, r1
 800c258:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c25a:	1064      	asrs	r4, r4, #1
 800c25c:	3308      	adds	r3, #8
 800c25e:	e7e0      	b.n	800c222 <_dtoa_r+0x30a>
 800c260:	0800e3a2 	.word	0x0800e3a2
 800c264:	0800e3b9 	.word	0x0800e3b9
 800c268:	7ff00000 	.word	0x7ff00000
 800c26c:	0000270f 	.word	0x0000270f
 800c270:	0800e39e 	.word	0x0800e39e
 800c274:	0800e3a1 	.word	0x0800e3a1
 800c278:	0800e270 	.word	0x0800e270
 800c27c:	0800e271 	.word	0x0800e271
 800c280:	3ff00000 	.word	0x3ff00000
 800c284:	fffffc01 	.word	0xfffffc01
 800c288:	3ff80000 	.word	0x3ff80000
 800c28c:	636f4361 	.word	0x636f4361
 800c290:	3fd287a7 	.word	0x3fd287a7
 800c294:	8b60c8b3 	.word	0x8b60c8b3
 800c298:	3fc68a28 	.word	0x3fc68a28
 800c29c:	509f79fb 	.word	0x509f79fb
 800c2a0:	3fd34413 	.word	0x3fd34413
 800c2a4:	0800e510 	.word	0x0800e510
 800c2a8:	00000432 	.word	0x00000432
 800c2ac:	00000412 	.word	0x00000412
 800c2b0:	fe100000 	.word	0xfe100000
 800c2b4:	0800e414 	.word	0x0800e414
 800c2b8:	0800e4e8 	.word	0x0800e4e8
 800c2bc:	2302      	movs	r3, #2
 800c2be:	9310      	str	r3, [sp, #64]	; 0x40
 800c2c0:	9b02      	ldr	r3, [sp, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d016      	beq.n	800c2f4 <_dtoa_r+0x3dc>
 800c2c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c2c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c2ca:	425c      	negs	r4, r3
 800c2cc:	230f      	movs	r3, #15
 800c2ce:	4ab6      	ldr	r2, [pc, #728]	; (800c5a8 <_dtoa_r+0x690>)
 800c2d0:	4023      	ands	r3, r4
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	18d3      	adds	r3, r2, r3
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	f7f5 ff8f 	bl	80021fc <__aeabi_dmul>
 800c2de:	2601      	movs	r6, #1
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	9008      	str	r0, [sp, #32]
 800c2e4:	9109      	str	r1, [sp, #36]	; 0x24
 800c2e6:	4db1      	ldr	r5, [pc, #708]	; (800c5ac <_dtoa_r+0x694>)
 800c2e8:	1124      	asrs	r4, r4, #4
 800c2ea:	2c00      	cmp	r4, #0
 800c2ec:	d000      	beq.n	800c2f0 <_dtoa_r+0x3d8>
 800c2ee:	e094      	b.n	800c41a <_dtoa_r+0x502>
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d19f      	bne.n	800c234 <_dtoa_r+0x31c>
 800c2f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d100      	bne.n	800c2fc <_dtoa_r+0x3e4>
 800c2fa:	e09b      	b.n	800c434 <_dtoa_r+0x51c>
 800c2fc:	9c08      	ldr	r4, [sp, #32]
 800c2fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c300:	2200      	movs	r2, #0
 800c302:	0020      	movs	r0, r4
 800c304:	0029      	movs	r1, r5
 800c306:	4baa      	ldr	r3, [pc, #680]	; (800c5b0 <_dtoa_r+0x698>)
 800c308:	f7f4 f8a6 	bl	8000458 <__aeabi_dcmplt>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d100      	bne.n	800c312 <_dtoa_r+0x3fa>
 800c310:	e090      	b.n	800c434 <_dtoa_r+0x51c>
 800c312:	9b07      	ldr	r3, [sp, #28]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d100      	bne.n	800c31a <_dtoa_r+0x402>
 800c318:	e08c      	b.n	800c434 <_dtoa_r+0x51c>
 800c31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dd46      	ble.n	800c3ae <_dtoa_r+0x496>
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	2200      	movs	r2, #0
 800c324:	0020      	movs	r0, r4
 800c326:	0029      	movs	r1, r5
 800c328:	1e5e      	subs	r6, r3, #1
 800c32a:	4ba2      	ldr	r3, [pc, #648]	; (800c5b4 <_dtoa_r+0x69c>)
 800c32c:	f7f5 ff66 	bl	80021fc <__aeabi_dmul>
 800c330:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c332:	9008      	str	r0, [sp, #32]
 800c334:	9109      	str	r1, [sp, #36]	; 0x24
 800c336:	3301      	adds	r3, #1
 800c338:	9310      	str	r3, [sp, #64]	; 0x40
 800c33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c33c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c33e:	9c08      	ldr	r4, [sp, #32]
 800c340:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c342:	9314      	str	r3, [sp, #80]	; 0x50
 800c344:	f7f6 fdac 	bl	8002ea0 <__aeabi_i2d>
 800c348:	0022      	movs	r2, r4
 800c34a:	002b      	movs	r3, r5
 800c34c:	f7f5 ff56 	bl	80021fc <__aeabi_dmul>
 800c350:	2200      	movs	r2, #0
 800c352:	4b99      	ldr	r3, [pc, #612]	; (800c5b8 <_dtoa_r+0x6a0>)
 800c354:	f7f5 f814 	bl	8001380 <__aeabi_dadd>
 800c358:	9010      	str	r0, [sp, #64]	; 0x40
 800c35a:	9111      	str	r1, [sp, #68]	; 0x44
 800c35c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c35e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c360:	9208      	str	r2, [sp, #32]
 800c362:	9309      	str	r3, [sp, #36]	; 0x24
 800c364:	4a95      	ldr	r2, [pc, #596]	; (800c5bc <_dtoa_r+0x6a4>)
 800c366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c368:	4694      	mov	ip, r2
 800c36a:	4463      	add	r3, ip
 800c36c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c36e:	9309      	str	r3, [sp, #36]	; 0x24
 800c370:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c372:	2b00      	cmp	r3, #0
 800c374:	d161      	bne.n	800c43a <_dtoa_r+0x522>
 800c376:	2200      	movs	r2, #0
 800c378:	0020      	movs	r0, r4
 800c37a:	0029      	movs	r1, r5
 800c37c:	4b90      	ldr	r3, [pc, #576]	; (800c5c0 <_dtoa_r+0x6a8>)
 800c37e:	f7f6 f9a9 	bl	80026d4 <__aeabi_dsub>
 800c382:	9a08      	ldr	r2, [sp, #32]
 800c384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c386:	0004      	movs	r4, r0
 800c388:	000d      	movs	r5, r1
 800c38a:	f7f4 f879 	bl	8000480 <__aeabi_dcmpgt>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d000      	beq.n	800c394 <_dtoa_r+0x47c>
 800c392:	e2af      	b.n	800c8f4 <_dtoa_r+0x9dc>
 800c394:	488b      	ldr	r0, [pc, #556]	; (800c5c4 <_dtoa_r+0x6ac>)
 800c396:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c398:	4684      	mov	ip, r0
 800c39a:	4461      	add	r1, ip
 800c39c:	000b      	movs	r3, r1
 800c39e:	0020      	movs	r0, r4
 800c3a0:	0029      	movs	r1, r5
 800c3a2:	9a08      	ldr	r2, [sp, #32]
 800c3a4:	f7f4 f858 	bl	8000458 <__aeabi_dcmplt>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d000      	beq.n	800c3ae <_dtoa_r+0x496>
 800c3ac:	e29f      	b.n	800c8ee <_dtoa_r+0x9d6>
 800c3ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c3b2:	9308      	str	r3, [sp, #32]
 800c3b4:	9409      	str	r4, [sp, #36]	; 0x24
 800c3b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	da00      	bge.n	800c3be <_dtoa_r+0x4a6>
 800c3bc:	e172      	b.n	800c6a4 <_dtoa_r+0x78c>
 800c3be:	9a02      	ldr	r2, [sp, #8]
 800c3c0:	2a0e      	cmp	r2, #14
 800c3c2:	dd00      	ble.n	800c3c6 <_dtoa_r+0x4ae>
 800c3c4:	e16e      	b.n	800c6a4 <_dtoa_r+0x78c>
 800c3c6:	4b78      	ldr	r3, [pc, #480]	; (800c5a8 <_dtoa_r+0x690>)
 800c3c8:	00d2      	lsls	r2, r2, #3
 800c3ca:	189b      	adds	r3, r3, r2
 800c3cc:	685c      	ldr	r4, [r3, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d2:	940b      	str	r4, [sp, #44]	; 0x2c
 800c3d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	db00      	blt.n	800c3dc <_dtoa_r+0x4c4>
 800c3da:	e0f7      	b.n	800c5cc <_dtoa_r+0x6b4>
 800c3dc:	9b07      	ldr	r3, [sp, #28]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	dd00      	ble.n	800c3e4 <_dtoa_r+0x4cc>
 800c3e2:	e0f3      	b.n	800c5cc <_dtoa_r+0x6b4>
 800c3e4:	d000      	beq.n	800c3e8 <_dtoa_r+0x4d0>
 800c3e6:	e282      	b.n	800c8ee <_dtoa_r+0x9d6>
 800c3e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c3ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	4b74      	ldr	r3, [pc, #464]	; (800c5c0 <_dtoa_r+0x6a8>)
 800c3f0:	f7f5 ff04 	bl	80021fc <__aeabi_dmul>
 800c3f4:	9a08      	ldr	r2, [sp, #32]
 800c3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f8:	f7f4 f84c 	bl	8000494 <__aeabi_dcmpge>
 800c3fc:	9e07      	ldr	r6, [sp, #28]
 800c3fe:	0035      	movs	r5, r6
 800c400:	2800      	cmp	r0, #0
 800c402:	d000      	beq.n	800c406 <_dtoa_r+0x4ee>
 800c404:	e259      	b.n	800c8ba <_dtoa_r+0x9a2>
 800c406:	9b06      	ldr	r3, [sp, #24]
 800c408:	9a06      	ldr	r2, [sp, #24]
 800c40a:	3301      	adds	r3, #1
 800c40c:	9308      	str	r3, [sp, #32]
 800c40e:	2331      	movs	r3, #49	; 0x31
 800c410:	7013      	strb	r3, [r2, #0]
 800c412:	9b02      	ldr	r3, [sp, #8]
 800c414:	3301      	adds	r3, #1
 800c416:	9302      	str	r3, [sp, #8]
 800c418:	e254      	b.n	800c8c4 <_dtoa_r+0x9ac>
 800c41a:	4234      	tst	r4, r6
 800c41c:	d007      	beq.n	800c42e <_dtoa_r+0x516>
 800c41e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c420:	3301      	adds	r3, #1
 800c422:	9310      	str	r3, [sp, #64]	; 0x40
 800c424:	682a      	ldr	r2, [r5, #0]
 800c426:	686b      	ldr	r3, [r5, #4]
 800c428:	f7f5 fee8 	bl	80021fc <__aeabi_dmul>
 800c42c:	0033      	movs	r3, r6
 800c42e:	1064      	asrs	r4, r4, #1
 800c430:	3508      	adds	r5, #8
 800c432:	e75a      	b.n	800c2ea <_dtoa_r+0x3d2>
 800c434:	9e02      	ldr	r6, [sp, #8]
 800c436:	9b07      	ldr	r3, [sp, #28]
 800c438:	e780      	b.n	800c33c <_dtoa_r+0x424>
 800c43a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c43c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c43e:	1e5a      	subs	r2, r3, #1
 800c440:	4b59      	ldr	r3, [pc, #356]	; (800c5a8 <_dtoa_r+0x690>)
 800c442:	00d2      	lsls	r2, r2, #3
 800c444:	189b      	adds	r3, r3, r2
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	2900      	cmp	r1, #0
 800c44c:	d051      	beq.n	800c4f2 <_dtoa_r+0x5da>
 800c44e:	2000      	movs	r0, #0
 800c450:	495d      	ldr	r1, [pc, #372]	; (800c5c8 <_dtoa_r+0x6b0>)
 800c452:	f7f5 fad1 	bl	80019f8 <__aeabi_ddiv>
 800c456:	9a08      	ldr	r2, [sp, #32]
 800c458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c45a:	f7f6 f93b 	bl	80026d4 <__aeabi_dsub>
 800c45e:	9a06      	ldr	r2, [sp, #24]
 800c460:	9b06      	ldr	r3, [sp, #24]
 800c462:	4694      	mov	ip, r2
 800c464:	9317      	str	r3, [sp, #92]	; 0x5c
 800c466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c468:	9010      	str	r0, [sp, #64]	; 0x40
 800c46a:	9111      	str	r1, [sp, #68]	; 0x44
 800c46c:	4463      	add	r3, ip
 800c46e:	9319      	str	r3, [sp, #100]	; 0x64
 800c470:	0029      	movs	r1, r5
 800c472:	0020      	movs	r0, r4
 800c474:	f7f6 fcde 	bl	8002e34 <__aeabi_d2iz>
 800c478:	9014      	str	r0, [sp, #80]	; 0x50
 800c47a:	f7f6 fd11 	bl	8002ea0 <__aeabi_i2d>
 800c47e:	0002      	movs	r2, r0
 800c480:	000b      	movs	r3, r1
 800c482:	0020      	movs	r0, r4
 800c484:	0029      	movs	r1, r5
 800c486:	f7f6 f925 	bl	80026d4 <__aeabi_dsub>
 800c48a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c48c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c48e:	3301      	adds	r3, #1
 800c490:	9308      	str	r3, [sp, #32]
 800c492:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c494:	0004      	movs	r4, r0
 800c496:	3330      	adds	r3, #48	; 0x30
 800c498:	7013      	strb	r3, [r2, #0]
 800c49a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c49c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c49e:	000d      	movs	r5, r1
 800c4a0:	f7f3 ffda 	bl	8000458 <__aeabi_dcmplt>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d175      	bne.n	800c594 <_dtoa_r+0x67c>
 800c4a8:	0022      	movs	r2, r4
 800c4aa:	002b      	movs	r3, r5
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	4940      	ldr	r1, [pc, #256]	; (800c5b0 <_dtoa_r+0x698>)
 800c4b0:	f7f6 f910 	bl	80026d4 <__aeabi_dsub>
 800c4b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4b8:	f7f3 ffce 	bl	8000458 <__aeabi_dcmplt>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d000      	beq.n	800c4c2 <_dtoa_r+0x5aa>
 800c4c0:	e0d2      	b.n	800c668 <_dtoa_r+0x750>
 800c4c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c4c4:	9a08      	ldr	r2, [sp, #32]
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d100      	bne.n	800c4cc <_dtoa_r+0x5b4>
 800c4ca:	e770      	b.n	800c3ae <_dtoa_r+0x496>
 800c4cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c4ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	4b38      	ldr	r3, [pc, #224]	; (800c5b4 <_dtoa_r+0x69c>)
 800c4d4:	f7f5 fe92 	bl	80021fc <__aeabi_dmul>
 800c4d8:	4b36      	ldr	r3, [pc, #216]	; (800c5b4 <_dtoa_r+0x69c>)
 800c4da:	9010      	str	r0, [sp, #64]	; 0x40
 800c4dc:	9111      	str	r1, [sp, #68]	; 0x44
 800c4de:	2200      	movs	r2, #0
 800c4e0:	0020      	movs	r0, r4
 800c4e2:	0029      	movs	r1, r5
 800c4e4:	f7f5 fe8a 	bl	80021fc <__aeabi_dmul>
 800c4e8:	9b08      	ldr	r3, [sp, #32]
 800c4ea:	0004      	movs	r4, r0
 800c4ec:	000d      	movs	r5, r1
 800c4ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4f0:	e7be      	b.n	800c470 <_dtoa_r+0x558>
 800c4f2:	9808      	ldr	r0, [sp, #32]
 800c4f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4f6:	f7f5 fe81 	bl	80021fc <__aeabi_dmul>
 800c4fa:	9a06      	ldr	r2, [sp, #24]
 800c4fc:	9b06      	ldr	r3, [sp, #24]
 800c4fe:	4694      	mov	ip, r2
 800c500:	9308      	str	r3, [sp, #32]
 800c502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c504:	9010      	str	r0, [sp, #64]	; 0x40
 800c506:	9111      	str	r1, [sp, #68]	; 0x44
 800c508:	4463      	add	r3, ip
 800c50a:	9319      	str	r3, [sp, #100]	; 0x64
 800c50c:	0029      	movs	r1, r5
 800c50e:	0020      	movs	r0, r4
 800c510:	f7f6 fc90 	bl	8002e34 <__aeabi_d2iz>
 800c514:	9017      	str	r0, [sp, #92]	; 0x5c
 800c516:	f7f6 fcc3 	bl	8002ea0 <__aeabi_i2d>
 800c51a:	0002      	movs	r2, r0
 800c51c:	000b      	movs	r3, r1
 800c51e:	0020      	movs	r0, r4
 800c520:	0029      	movs	r1, r5
 800c522:	f7f6 f8d7 	bl	80026d4 <__aeabi_dsub>
 800c526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c528:	9a08      	ldr	r2, [sp, #32]
 800c52a:	3330      	adds	r3, #48	; 0x30
 800c52c:	7013      	strb	r3, [r2, #0]
 800c52e:	0013      	movs	r3, r2
 800c530:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c532:	3301      	adds	r3, #1
 800c534:	0004      	movs	r4, r0
 800c536:	000d      	movs	r5, r1
 800c538:	9308      	str	r3, [sp, #32]
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d12c      	bne.n	800c598 <_dtoa_r+0x680>
 800c53e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c540:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c542:	9a06      	ldr	r2, [sp, #24]
 800c544:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c546:	4694      	mov	ip, r2
 800c548:	4463      	add	r3, ip
 800c54a:	2200      	movs	r2, #0
 800c54c:	9308      	str	r3, [sp, #32]
 800c54e:	4b1e      	ldr	r3, [pc, #120]	; (800c5c8 <_dtoa_r+0x6b0>)
 800c550:	f7f4 ff16 	bl	8001380 <__aeabi_dadd>
 800c554:	0002      	movs	r2, r0
 800c556:	000b      	movs	r3, r1
 800c558:	0020      	movs	r0, r4
 800c55a:	0029      	movs	r1, r5
 800c55c:	f7f3 ff90 	bl	8000480 <__aeabi_dcmpgt>
 800c560:	2800      	cmp	r0, #0
 800c562:	d000      	beq.n	800c566 <_dtoa_r+0x64e>
 800c564:	e080      	b.n	800c668 <_dtoa_r+0x750>
 800c566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c56a:	2000      	movs	r0, #0
 800c56c:	4916      	ldr	r1, [pc, #88]	; (800c5c8 <_dtoa_r+0x6b0>)
 800c56e:	f7f6 f8b1 	bl	80026d4 <__aeabi_dsub>
 800c572:	0002      	movs	r2, r0
 800c574:	000b      	movs	r3, r1
 800c576:	0020      	movs	r0, r4
 800c578:	0029      	movs	r1, r5
 800c57a:	f7f3 ff6d 	bl	8000458 <__aeabi_dcmplt>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d100      	bne.n	800c584 <_dtoa_r+0x66c>
 800c582:	e714      	b.n	800c3ae <_dtoa_r+0x496>
 800c584:	9b08      	ldr	r3, [sp, #32]
 800c586:	001a      	movs	r2, r3
 800c588:	3a01      	subs	r2, #1
 800c58a:	9208      	str	r2, [sp, #32]
 800c58c:	7812      	ldrb	r2, [r2, #0]
 800c58e:	2a30      	cmp	r2, #48	; 0x30
 800c590:	d0f8      	beq.n	800c584 <_dtoa_r+0x66c>
 800c592:	9308      	str	r3, [sp, #32]
 800c594:	9602      	str	r6, [sp, #8]
 800c596:	e055      	b.n	800c644 <_dtoa_r+0x72c>
 800c598:	2200      	movs	r2, #0
 800c59a:	4b06      	ldr	r3, [pc, #24]	; (800c5b4 <_dtoa_r+0x69c>)
 800c59c:	f7f5 fe2e 	bl	80021fc <__aeabi_dmul>
 800c5a0:	0004      	movs	r4, r0
 800c5a2:	000d      	movs	r5, r1
 800c5a4:	e7b2      	b.n	800c50c <_dtoa_r+0x5f4>
 800c5a6:	46c0      	nop			; (mov r8, r8)
 800c5a8:	0800e510 	.word	0x0800e510
 800c5ac:	0800e4e8 	.word	0x0800e4e8
 800c5b0:	3ff00000 	.word	0x3ff00000
 800c5b4:	40240000 	.word	0x40240000
 800c5b8:	401c0000 	.word	0x401c0000
 800c5bc:	fcc00000 	.word	0xfcc00000
 800c5c0:	40140000 	.word	0x40140000
 800c5c4:	7cc00000 	.word	0x7cc00000
 800c5c8:	3fe00000 	.word	0x3fe00000
 800c5cc:	9b07      	ldr	r3, [sp, #28]
 800c5ce:	9e06      	ldr	r6, [sp, #24]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	199b      	adds	r3, r3, r6
 800c5d4:	930c      	str	r3, [sp, #48]	; 0x30
 800c5d6:	9c08      	ldr	r4, [sp, #32]
 800c5d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c5da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5de:	0020      	movs	r0, r4
 800c5e0:	0029      	movs	r1, r5
 800c5e2:	f7f5 fa09 	bl	80019f8 <__aeabi_ddiv>
 800c5e6:	f7f6 fc25 	bl	8002e34 <__aeabi_d2iz>
 800c5ea:	9007      	str	r0, [sp, #28]
 800c5ec:	f7f6 fc58 	bl	8002ea0 <__aeabi_i2d>
 800c5f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5f4:	f7f5 fe02 	bl	80021fc <__aeabi_dmul>
 800c5f8:	0002      	movs	r2, r0
 800c5fa:	000b      	movs	r3, r1
 800c5fc:	0020      	movs	r0, r4
 800c5fe:	0029      	movs	r1, r5
 800c600:	f7f6 f868 	bl	80026d4 <__aeabi_dsub>
 800c604:	0033      	movs	r3, r6
 800c606:	9a07      	ldr	r2, [sp, #28]
 800c608:	3601      	adds	r6, #1
 800c60a:	3230      	adds	r2, #48	; 0x30
 800c60c:	701a      	strb	r2, [r3, #0]
 800c60e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c610:	9608      	str	r6, [sp, #32]
 800c612:	429a      	cmp	r2, r3
 800c614:	d139      	bne.n	800c68a <_dtoa_r+0x772>
 800c616:	0002      	movs	r2, r0
 800c618:	000b      	movs	r3, r1
 800c61a:	f7f4 feb1 	bl	8001380 <__aeabi_dadd>
 800c61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c622:	0004      	movs	r4, r0
 800c624:	000d      	movs	r5, r1
 800c626:	f7f3 ff2b 	bl	8000480 <__aeabi_dcmpgt>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d11b      	bne.n	800c666 <_dtoa_r+0x74e>
 800c62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c632:	0020      	movs	r0, r4
 800c634:	0029      	movs	r1, r5
 800c636:	f7f3 ff09 	bl	800044c <__aeabi_dcmpeq>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d002      	beq.n	800c644 <_dtoa_r+0x72c>
 800c63e:	9b07      	ldr	r3, [sp, #28]
 800c640:	07db      	lsls	r3, r3, #31
 800c642:	d410      	bmi.n	800c666 <_dtoa_r+0x74e>
 800c644:	0038      	movs	r0, r7
 800c646:	9905      	ldr	r1, [sp, #20]
 800c648:	f000 fd2a 	bl	800d0a0 <_Bfree>
 800c64c:	2300      	movs	r3, #0
 800c64e:	9a08      	ldr	r2, [sp, #32]
 800c650:	9802      	ldr	r0, [sp, #8]
 800c652:	7013      	strb	r3, [r2, #0]
 800c654:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c656:	3001      	adds	r0, #1
 800c658:	6018      	str	r0, [r3, #0]
 800c65a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d100      	bne.n	800c662 <_dtoa_r+0x74a>
 800c660:	e4a6      	b.n	800bfb0 <_dtoa_r+0x98>
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	e4a4      	b.n	800bfb0 <_dtoa_r+0x98>
 800c666:	9e02      	ldr	r6, [sp, #8]
 800c668:	9b08      	ldr	r3, [sp, #32]
 800c66a:	9308      	str	r3, [sp, #32]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	781a      	ldrb	r2, [r3, #0]
 800c670:	2a39      	cmp	r2, #57	; 0x39
 800c672:	d106      	bne.n	800c682 <_dtoa_r+0x76a>
 800c674:	9a06      	ldr	r2, [sp, #24]
 800c676:	429a      	cmp	r2, r3
 800c678:	d1f7      	bne.n	800c66a <_dtoa_r+0x752>
 800c67a:	2230      	movs	r2, #48	; 0x30
 800c67c:	9906      	ldr	r1, [sp, #24]
 800c67e:	3601      	adds	r6, #1
 800c680:	700a      	strb	r2, [r1, #0]
 800c682:	781a      	ldrb	r2, [r3, #0]
 800c684:	3201      	adds	r2, #1
 800c686:	701a      	strb	r2, [r3, #0]
 800c688:	e784      	b.n	800c594 <_dtoa_r+0x67c>
 800c68a:	2200      	movs	r2, #0
 800c68c:	4baa      	ldr	r3, [pc, #680]	; (800c938 <_dtoa_r+0xa20>)
 800c68e:	f7f5 fdb5 	bl	80021fc <__aeabi_dmul>
 800c692:	2200      	movs	r2, #0
 800c694:	2300      	movs	r3, #0
 800c696:	0004      	movs	r4, r0
 800c698:	000d      	movs	r5, r1
 800c69a:	f7f3 fed7 	bl	800044c <__aeabi_dcmpeq>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d09b      	beq.n	800c5da <_dtoa_r+0x6c2>
 800c6a2:	e7cf      	b.n	800c644 <_dtoa_r+0x72c>
 800c6a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c6a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c6a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c6aa:	2d00      	cmp	r5, #0
 800c6ac:	d012      	beq.n	800c6d4 <_dtoa_r+0x7bc>
 800c6ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c6b0:	2a01      	cmp	r2, #1
 800c6b2:	dc66      	bgt.n	800c782 <_dtoa_r+0x86a>
 800c6b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6b6:	2a00      	cmp	r2, #0
 800c6b8:	d05d      	beq.n	800c776 <_dtoa_r+0x85e>
 800c6ba:	4aa0      	ldr	r2, [pc, #640]	; (800c93c <_dtoa_r+0xa24>)
 800c6bc:	189b      	adds	r3, r3, r2
 800c6be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	18d2      	adds	r2, r2, r3
 800c6c4:	920a      	str	r2, [sp, #40]	; 0x28
 800c6c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6c8:	0038      	movs	r0, r7
 800c6ca:	18d3      	adds	r3, r2, r3
 800c6cc:	930d      	str	r3, [sp, #52]	; 0x34
 800c6ce:	f000 fd97 	bl	800d200 <__i2b>
 800c6d2:	0005      	movs	r5, r0
 800c6d4:	2c00      	cmp	r4, #0
 800c6d6:	dd0e      	ble.n	800c6f6 <_dtoa_r+0x7de>
 800c6d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dd0b      	ble.n	800c6f6 <_dtoa_r+0x7de>
 800c6de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6e0:	0023      	movs	r3, r4
 800c6e2:	4294      	cmp	r4, r2
 800c6e4:	dd00      	ble.n	800c6e8 <_dtoa_r+0x7d0>
 800c6e6:	0013      	movs	r3, r2
 800c6e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6ea:	1ae4      	subs	r4, r4, r3
 800c6ec:	1ad2      	subs	r2, r2, r3
 800c6ee:	920a      	str	r2, [sp, #40]	; 0x28
 800c6f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	930d      	str	r3, [sp, #52]	; 0x34
 800c6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d01f      	beq.n	800c73c <_dtoa_r+0x824>
 800c6fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d054      	beq.n	800c7ac <_dtoa_r+0x894>
 800c702:	2e00      	cmp	r6, #0
 800c704:	dd11      	ble.n	800c72a <_dtoa_r+0x812>
 800c706:	0029      	movs	r1, r5
 800c708:	0032      	movs	r2, r6
 800c70a:	0038      	movs	r0, r7
 800c70c:	f000 fe3e 	bl	800d38c <__pow5mult>
 800c710:	9a05      	ldr	r2, [sp, #20]
 800c712:	0001      	movs	r1, r0
 800c714:	0005      	movs	r5, r0
 800c716:	0038      	movs	r0, r7
 800c718:	f000 fd88 	bl	800d22c <__multiply>
 800c71c:	9905      	ldr	r1, [sp, #20]
 800c71e:	9014      	str	r0, [sp, #80]	; 0x50
 800c720:	0038      	movs	r0, r7
 800c722:	f000 fcbd 	bl	800d0a0 <_Bfree>
 800c726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c72c:	1b9a      	subs	r2, r3, r6
 800c72e:	42b3      	cmp	r3, r6
 800c730:	d004      	beq.n	800c73c <_dtoa_r+0x824>
 800c732:	0038      	movs	r0, r7
 800c734:	9905      	ldr	r1, [sp, #20]
 800c736:	f000 fe29 	bl	800d38c <__pow5mult>
 800c73a:	9005      	str	r0, [sp, #20]
 800c73c:	2101      	movs	r1, #1
 800c73e:	0038      	movs	r0, r7
 800c740:	f000 fd5e 	bl	800d200 <__i2b>
 800c744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c746:	0006      	movs	r6, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	dd31      	ble.n	800c7b0 <_dtoa_r+0x898>
 800c74c:	001a      	movs	r2, r3
 800c74e:	0001      	movs	r1, r0
 800c750:	0038      	movs	r0, r7
 800c752:	f000 fe1b 	bl	800d38c <__pow5mult>
 800c756:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c758:	0006      	movs	r6, r0
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	dd2d      	ble.n	800c7ba <_dtoa_r+0x8a2>
 800c75e:	2300      	movs	r3, #0
 800c760:	930e      	str	r3, [sp, #56]	; 0x38
 800c762:	6933      	ldr	r3, [r6, #16]
 800c764:	3303      	adds	r3, #3
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	18f3      	adds	r3, r6, r3
 800c76a:	6858      	ldr	r0, [r3, #4]
 800c76c:	f000 fd00 	bl	800d170 <__hi0bits>
 800c770:	2320      	movs	r3, #32
 800c772:	1a18      	subs	r0, r3, r0
 800c774:	e039      	b.n	800c7ea <_dtoa_r+0x8d2>
 800c776:	2336      	movs	r3, #54	; 0x36
 800c778:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c77a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c77c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c77e:	1a9b      	subs	r3, r3, r2
 800c780:	e79d      	b.n	800c6be <_dtoa_r+0x7a6>
 800c782:	9b07      	ldr	r3, [sp, #28]
 800c784:	1e5e      	subs	r6, r3, #1
 800c786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c788:	42b3      	cmp	r3, r6
 800c78a:	db07      	blt.n	800c79c <_dtoa_r+0x884>
 800c78c:	1b9e      	subs	r6, r3, r6
 800c78e:	9b07      	ldr	r3, [sp, #28]
 800c790:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c792:	2b00      	cmp	r3, #0
 800c794:	da93      	bge.n	800c6be <_dtoa_r+0x7a6>
 800c796:	1ae4      	subs	r4, r4, r3
 800c798:	2300      	movs	r3, #0
 800c79a:	e790      	b.n	800c6be <_dtoa_r+0x7a6>
 800c79c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c79e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c7a0:	1af3      	subs	r3, r6, r3
 800c7a2:	18d3      	adds	r3, r2, r3
 800c7a4:	960e      	str	r6, [sp, #56]	; 0x38
 800c7a6:	9315      	str	r3, [sp, #84]	; 0x54
 800c7a8:	2600      	movs	r6, #0
 800c7aa:	e7f0      	b.n	800c78e <_dtoa_r+0x876>
 800c7ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7ae:	e7c0      	b.n	800c732 <_dtoa_r+0x81a>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	930e      	str	r3, [sp, #56]	; 0x38
 800c7b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	dc13      	bgt.n	800c7e2 <_dtoa_r+0x8ca>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	930e      	str	r3, [sp, #56]	; 0x38
 800c7be:	9b08      	ldr	r3, [sp, #32]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10e      	bne.n	800c7e2 <_dtoa_r+0x8ca>
 800c7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c6:	031b      	lsls	r3, r3, #12
 800c7c8:	d10b      	bne.n	800c7e2 <_dtoa_r+0x8ca>
 800c7ca:	4b5d      	ldr	r3, [pc, #372]	; (800c940 <_dtoa_r+0xa28>)
 800c7cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ce:	4213      	tst	r3, r2
 800c7d0:	d007      	beq.n	800c7e2 <_dtoa_r+0x8ca>
 800c7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c7d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7da:	3301      	adds	r3, #1
 800c7dc:	930d      	str	r3, [sp, #52]	; 0x34
 800c7de:	2301      	movs	r3, #1
 800c7e0:	930e      	str	r3, [sp, #56]	; 0x38
 800c7e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1bb      	bne.n	800c762 <_dtoa_r+0x84a>
 800c7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7ec:	221f      	movs	r2, #31
 800c7ee:	1818      	adds	r0, r3, r0
 800c7f0:	0003      	movs	r3, r0
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	4210      	tst	r0, r2
 800c7f6:	d046      	beq.n	800c886 <_dtoa_r+0x96e>
 800c7f8:	3201      	adds	r2, #1
 800c7fa:	1ad2      	subs	r2, r2, r3
 800c7fc:	2a04      	cmp	r2, #4
 800c7fe:	dd3f      	ble.n	800c880 <_dtoa_r+0x968>
 800c800:	221c      	movs	r2, #28
 800c802:	1ad3      	subs	r3, r2, r3
 800c804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c806:	18e4      	adds	r4, r4, r3
 800c808:	18d2      	adds	r2, r2, r3
 800c80a:	920a      	str	r2, [sp, #40]	; 0x28
 800c80c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c80e:	18d3      	adds	r3, r2, r3
 800c810:	930d      	str	r3, [sp, #52]	; 0x34
 800c812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c814:	2b00      	cmp	r3, #0
 800c816:	dd05      	ble.n	800c824 <_dtoa_r+0x90c>
 800c818:	001a      	movs	r2, r3
 800c81a:	0038      	movs	r0, r7
 800c81c:	9905      	ldr	r1, [sp, #20]
 800c81e:	f000 fe11 	bl	800d444 <__lshift>
 800c822:	9005      	str	r0, [sp, #20]
 800c824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c826:	2b00      	cmp	r3, #0
 800c828:	dd05      	ble.n	800c836 <_dtoa_r+0x91e>
 800c82a:	0031      	movs	r1, r6
 800c82c:	001a      	movs	r2, r3
 800c82e:	0038      	movs	r0, r7
 800c830:	f000 fe08 	bl	800d444 <__lshift>
 800c834:	0006      	movs	r6, r0
 800c836:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d026      	beq.n	800c88a <_dtoa_r+0x972>
 800c83c:	0031      	movs	r1, r6
 800c83e:	9805      	ldr	r0, [sp, #20]
 800c840:	f000 fe6e 	bl	800d520 <__mcmp>
 800c844:	2800      	cmp	r0, #0
 800c846:	da20      	bge.n	800c88a <_dtoa_r+0x972>
 800c848:	9b02      	ldr	r3, [sp, #8]
 800c84a:	220a      	movs	r2, #10
 800c84c:	3b01      	subs	r3, #1
 800c84e:	9302      	str	r3, [sp, #8]
 800c850:	0038      	movs	r0, r7
 800c852:	2300      	movs	r3, #0
 800c854:	9905      	ldr	r1, [sp, #20]
 800c856:	f000 fc47 	bl	800d0e8 <__multadd>
 800c85a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c85c:	9005      	str	r0, [sp, #20]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d100      	bne.n	800c864 <_dtoa_r+0x94c>
 800c862:	e166      	b.n	800cb32 <_dtoa_r+0xc1a>
 800c864:	2300      	movs	r3, #0
 800c866:	0029      	movs	r1, r5
 800c868:	220a      	movs	r2, #10
 800c86a:	0038      	movs	r0, r7
 800c86c:	f000 fc3c 	bl	800d0e8 <__multadd>
 800c870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c872:	0005      	movs	r5, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	dc47      	bgt.n	800c908 <_dtoa_r+0x9f0>
 800c878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	dc0d      	bgt.n	800c89a <_dtoa_r+0x982>
 800c87e:	e043      	b.n	800c908 <_dtoa_r+0x9f0>
 800c880:	2a04      	cmp	r2, #4
 800c882:	d0c6      	beq.n	800c812 <_dtoa_r+0x8fa>
 800c884:	0013      	movs	r3, r2
 800c886:	331c      	adds	r3, #28
 800c888:	e7bc      	b.n	800c804 <_dtoa_r+0x8ec>
 800c88a:	9b07      	ldr	r3, [sp, #28]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dc35      	bgt.n	800c8fc <_dtoa_r+0x9e4>
 800c890:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c892:	2b02      	cmp	r3, #2
 800c894:	dd32      	ble.n	800c8fc <_dtoa_r+0x9e4>
 800c896:	9b07      	ldr	r3, [sp, #28]
 800c898:	930c      	str	r3, [sp, #48]	; 0x30
 800c89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10c      	bne.n	800c8ba <_dtoa_r+0x9a2>
 800c8a0:	0031      	movs	r1, r6
 800c8a2:	2205      	movs	r2, #5
 800c8a4:	0038      	movs	r0, r7
 800c8a6:	f000 fc1f 	bl	800d0e8 <__multadd>
 800c8aa:	0006      	movs	r6, r0
 800c8ac:	0001      	movs	r1, r0
 800c8ae:	9805      	ldr	r0, [sp, #20]
 800c8b0:	f000 fe36 	bl	800d520 <__mcmp>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	dd00      	ble.n	800c8ba <_dtoa_r+0x9a2>
 800c8b8:	e5a5      	b.n	800c406 <_dtoa_r+0x4ee>
 800c8ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c8bc:	43db      	mvns	r3, r3
 800c8be:	9302      	str	r3, [sp, #8]
 800c8c0:	9b06      	ldr	r3, [sp, #24]
 800c8c2:	9308      	str	r3, [sp, #32]
 800c8c4:	2400      	movs	r4, #0
 800c8c6:	0031      	movs	r1, r6
 800c8c8:	0038      	movs	r0, r7
 800c8ca:	f000 fbe9 	bl	800d0a0 <_Bfree>
 800c8ce:	2d00      	cmp	r5, #0
 800c8d0:	d100      	bne.n	800c8d4 <_dtoa_r+0x9bc>
 800c8d2:	e6b7      	b.n	800c644 <_dtoa_r+0x72c>
 800c8d4:	2c00      	cmp	r4, #0
 800c8d6:	d005      	beq.n	800c8e4 <_dtoa_r+0x9cc>
 800c8d8:	42ac      	cmp	r4, r5
 800c8da:	d003      	beq.n	800c8e4 <_dtoa_r+0x9cc>
 800c8dc:	0021      	movs	r1, r4
 800c8de:	0038      	movs	r0, r7
 800c8e0:	f000 fbde 	bl	800d0a0 <_Bfree>
 800c8e4:	0029      	movs	r1, r5
 800c8e6:	0038      	movs	r0, r7
 800c8e8:	f000 fbda 	bl	800d0a0 <_Bfree>
 800c8ec:	e6aa      	b.n	800c644 <_dtoa_r+0x72c>
 800c8ee:	2600      	movs	r6, #0
 800c8f0:	0035      	movs	r5, r6
 800c8f2:	e7e2      	b.n	800c8ba <_dtoa_r+0x9a2>
 800c8f4:	9602      	str	r6, [sp, #8]
 800c8f6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c8f8:	0035      	movs	r5, r6
 800c8fa:	e584      	b.n	800c406 <_dtoa_r+0x4ee>
 800c8fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d100      	bne.n	800c904 <_dtoa_r+0x9ec>
 800c902:	e0ce      	b.n	800caa2 <_dtoa_r+0xb8a>
 800c904:	9b07      	ldr	r3, [sp, #28]
 800c906:	930c      	str	r3, [sp, #48]	; 0x30
 800c908:	2c00      	cmp	r4, #0
 800c90a:	dd05      	ble.n	800c918 <_dtoa_r+0xa00>
 800c90c:	0029      	movs	r1, r5
 800c90e:	0022      	movs	r2, r4
 800c910:	0038      	movs	r0, r7
 800c912:	f000 fd97 	bl	800d444 <__lshift>
 800c916:	0005      	movs	r5, r0
 800c918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c91a:	0028      	movs	r0, r5
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d022      	beq.n	800c966 <_dtoa_r+0xa4e>
 800c920:	0038      	movs	r0, r7
 800c922:	6869      	ldr	r1, [r5, #4]
 800c924:	f000 fb78 	bl	800d018 <_Balloc>
 800c928:	1e04      	subs	r4, r0, #0
 800c92a:	d10f      	bne.n	800c94c <_dtoa_r+0xa34>
 800c92c:	0002      	movs	r2, r0
 800c92e:	4b05      	ldr	r3, [pc, #20]	; (800c944 <_dtoa_r+0xa2c>)
 800c930:	4905      	ldr	r1, [pc, #20]	; (800c948 <_dtoa_r+0xa30>)
 800c932:	f7ff fb06 	bl	800bf42 <_dtoa_r+0x2a>
 800c936:	46c0      	nop			; (mov r8, r8)
 800c938:	40240000 	.word	0x40240000
 800c93c:	00000433 	.word	0x00000433
 800c940:	7ff00000 	.word	0x7ff00000
 800c944:	0800e414 	.word	0x0800e414
 800c948:	000002ea 	.word	0x000002ea
 800c94c:	0029      	movs	r1, r5
 800c94e:	692b      	ldr	r3, [r5, #16]
 800c950:	310c      	adds	r1, #12
 800c952:	1c9a      	adds	r2, r3, #2
 800c954:	0092      	lsls	r2, r2, #2
 800c956:	300c      	adds	r0, #12
 800c958:	f000 fb45 	bl	800cfe6 <memcpy>
 800c95c:	2201      	movs	r2, #1
 800c95e:	0021      	movs	r1, r4
 800c960:	0038      	movs	r0, r7
 800c962:	f000 fd6f 	bl	800d444 <__lshift>
 800c966:	9b06      	ldr	r3, [sp, #24]
 800c968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c96a:	930a      	str	r3, [sp, #40]	; 0x28
 800c96c:	3b01      	subs	r3, #1
 800c96e:	189b      	adds	r3, r3, r2
 800c970:	2201      	movs	r2, #1
 800c972:	002c      	movs	r4, r5
 800c974:	0005      	movs	r5, r0
 800c976:	9314      	str	r3, [sp, #80]	; 0x50
 800c978:	9b08      	ldr	r3, [sp, #32]
 800c97a:	4013      	ands	r3, r2
 800c97c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c97e:	0031      	movs	r1, r6
 800c980:	9805      	ldr	r0, [sp, #20]
 800c982:	f7ff fa3d 	bl	800be00 <quorem>
 800c986:	0003      	movs	r3, r0
 800c988:	0021      	movs	r1, r4
 800c98a:	3330      	adds	r3, #48	; 0x30
 800c98c:	900d      	str	r0, [sp, #52]	; 0x34
 800c98e:	9805      	ldr	r0, [sp, #20]
 800c990:	9307      	str	r3, [sp, #28]
 800c992:	f000 fdc5 	bl	800d520 <__mcmp>
 800c996:	002a      	movs	r2, r5
 800c998:	900e      	str	r0, [sp, #56]	; 0x38
 800c99a:	0031      	movs	r1, r6
 800c99c:	0038      	movs	r0, r7
 800c99e:	f000 fddb 	bl	800d558 <__mdiff>
 800c9a2:	68c3      	ldr	r3, [r0, #12]
 800c9a4:	9008      	str	r0, [sp, #32]
 800c9a6:	9310      	str	r3, [sp, #64]	; 0x40
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d104      	bne.n	800c9bc <_dtoa_r+0xaa4>
 800c9b2:	0001      	movs	r1, r0
 800c9b4:	9805      	ldr	r0, [sp, #20]
 800c9b6:	f000 fdb3 	bl	800d520 <__mcmp>
 800c9ba:	900c      	str	r0, [sp, #48]	; 0x30
 800c9bc:	0038      	movs	r0, r7
 800c9be:	9908      	ldr	r1, [sp, #32]
 800c9c0:	f000 fb6e 	bl	800d0a0 <_Bfree>
 800c9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	9308      	str	r3, [sp, #32]
 800c9cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	d10c      	bne.n	800c9f0 <_dtoa_r+0xad8>
 800c9d6:	9b07      	ldr	r3, [sp, #28]
 800c9d8:	2b39      	cmp	r3, #57	; 0x39
 800c9da:	d026      	beq.n	800ca2a <_dtoa_r+0xb12>
 800c9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	dd02      	ble.n	800c9e8 <_dtoa_r+0xad0>
 800c9e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9e4:	3331      	adds	r3, #49	; 0x31
 800c9e6:	9307      	str	r3, [sp, #28]
 800c9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ea:	9a07      	ldr	r2, [sp, #28]
 800c9ec:	701a      	strb	r2, [r3, #0]
 800c9ee:	e76a      	b.n	800c8c6 <_dtoa_r+0x9ae>
 800c9f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	db04      	blt.n	800ca00 <_dtoa_r+0xae8>
 800c9f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	d11f      	bne.n	800ca40 <_dtoa_r+0xb28>
 800ca00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	ddf0      	ble.n	800c9e8 <_dtoa_r+0xad0>
 800ca06:	9905      	ldr	r1, [sp, #20]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	0038      	movs	r0, r7
 800ca0c:	f000 fd1a 	bl	800d444 <__lshift>
 800ca10:	0031      	movs	r1, r6
 800ca12:	9005      	str	r0, [sp, #20]
 800ca14:	f000 fd84 	bl	800d520 <__mcmp>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	dc03      	bgt.n	800ca24 <_dtoa_r+0xb0c>
 800ca1c:	d1e4      	bne.n	800c9e8 <_dtoa_r+0xad0>
 800ca1e:	9b07      	ldr	r3, [sp, #28]
 800ca20:	07db      	lsls	r3, r3, #31
 800ca22:	d5e1      	bpl.n	800c9e8 <_dtoa_r+0xad0>
 800ca24:	9b07      	ldr	r3, [sp, #28]
 800ca26:	2b39      	cmp	r3, #57	; 0x39
 800ca28:	d1db      	bne.n	800c9e2 <_dtoa_r+0xaca>
 800ca2a:	2339      	movs	r3, #57	; 0x39
 800ca2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca2e:	7013      	strb	r3, [r2, #0]
 800ca30:	9b08      	ldr	r3, [sp, #32]
 800ca32:	9308      	str	r3, [sp, #32]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	781a      	ldrb	r2, [r3, #0]
 800ca38:	2a39      	cmp	r2, #57	; 0x39
 800ca3a:	d068      	beq.n	800cb0e <_dtoa_r+0xbf6>
 800ca3c:	3201      	adds	r2, #1
 800ca3e:	e7d5      	b.n	800c9ec <_dtoa_r+0xad4>
 800ca40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	dd07      	ble.n	800ca56 <_dtoa_r+0xb3e>
 800ca46:	9b07      	ldr	r3, [sp, #28]
 800ca48:	2b39      	cmp	r3, #57	; 0x39
 800ca4a:	d0ee      	beq.n	800ca2a <_dtoa_r+0xb12>
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca50:	3301      	adds	r3, #1
 800ca52:	7013      	strb	r3, [r2, #0]
 800ca54:	e737      	b.n	800c8c6 <_dtoa_r+0x9ae>
 800ca56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca58:	9a07      	ldr	r2, [sp, #28]
 800ca5a:	701a      	strb	r2, [r3, #0]
 800ca5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d03e      	beq.n	800cae2 <_dtoa_r+0xbca>
 800ca64:	2300      	movs	r3, #0
 800ca66:	220a      	movs	r2, #10
 800ca68:	9905      	ldr	r1, [sp, #20]
 800ca6a:	0038      	movs	r0, r7
 800ca6c:	f000 fb3c 	bl	800d0e8 <__multadd>
 800ca70:	2300      	movs	r3, #0
 800ca72:	9005      	str	r0, [sp, #20]
 800ca74:	220a      	movs	r2, #10
 800ca76:	0021      	movs	r1, r4
 800ca78:	0038      	movs	r0, r7
 800ca7a:	42ac      	cmp	r4, r5
 800ca7c:	d106      	bne.n	800ca8c <_dtoa_r+0xb74>
 800ca7e:	f000 fb33 	bl	800d0e8 <__multadd>
 800ca82:	0004      	movs	r4, r0
 800ca84:	0005      	movs	r5, r0
 800ca86:	9b08      	ldr	r3, [sp, #32]
 800ca88:	930a      	str	r3, [sp, #40]	; 0x28
 800ca8a:	e778      	b.n	800c97e <_dtoa_r+0xa66>
 800ca8c:	f000 fb2c 	bl	800d0e8 <__multadd>
 800ca90:	0029      	movs	r1, r5
 800ca92:	0004      	movs	r4, r0
 800ca94:	2300      	movs	r3, #0
 800ca96:	220a      	movs	r2, #10
 800ca98:	0038      	movs	r0, r7
 800ca9a:	f000 fb25 	bl	800d0e8 <__multadd>
 800ca9e:	0005      	movs	r5, r0
 800caa0:	e7f1      	b.n	800ca86 <_dtoa_r+0xb6e>
 800caa2:	9b07      	ldr	r3, [sp, #28]
 800caa4:	930c      	str	r3, [sp, #48]	; 0x30
 800caa6:	2400      	movs	r4, #0
 800caa8:	0031      	movs	r1, r6
 800caaa:	9805      	ldr	r0, [sp, #20]
 800caac:	f7ff f9a8 	bl	800be00 <quorem>
 800cab0:	9b06      	ldr	r3, [sp, #24]
 800cab2:	3030      	adds	r0, #48	; 0x30
 800cab4:	5518      	strb	r0, [r3, r4]
 800cab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cab8:	3401      	adds	r4, #1
 800caba:	9007      	str	r0, [sp, #28]
 800cabc:	42a3      	cmp	r3, r4
 800cabe:	dd07      	ble.n	800cad0 <_dtoa_r+0xbb8>
 800cac0:	2300      	movs	r3, #0
 800cac2:	220a      	movs	r2, #10
 800cac4:	0038      	movs	r0, r7
 800cac6:	9905      	ldr	r1, [sp, #20]
 800cac8:	f000 fb0e 	bl	800d0e8 <__multadd>
 800cacc:	9005      	str	r0, [sp, #20]
 800cace:	e7eb      	b.n	800caa8 <_dtoa_r+0xb90>
 800cad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cad2:	2001      	movs	r0, #1
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dd00      	ble.n	800cada <_dtoa_r+0xbc2>
 800cad8:	0018      	movs	r0, r3
 800cada:	2400      	movs	r4, #0
 800cadc:	9b06      	ldr	r3, [sp, #24]
 800cade:	181b      	adds	r3, r3, r0
 800cae0:	9308      	str	r3, [sp, #32]
 800cae2:	9905      	ldr	r1, [sp, #20]
 800cae4:	2201      	movs	r2, #1
 800cae6:	0038      	movs	r0, r7
 800cae8:	f000 fcac 	bl	800d444 <__lshift>
 800caec:	0031      	movs	r1, r6
 800caee:	9005      	str	r0, [sp, #20]
 800caf0:	f000 fd16 	bl	800d520 <__mcmp>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	dc9b      	bgt.n	800ca30 <_dtoa_r+0xb18>
 800caf8:	d102      	bne.n	800cb00 <_dtoa_r+0xbe8>
 800cafa:	9b07      	ldr	r3, [sp, #28]
 800cafc:	07db      	lsls	r3, r3, #31
 800cafe:	d497      	bmi.n	800ca30 <_dtoa_r+0xb18>
 800cb00:	9b08      	ldr	r3, [sp, #32]
 800cb02:	9308      	str	r3, [sp, #32]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	781a      	ldrb	r2, [r3, #0]
 800cb08:	2a30      	cmp	r2, #48	; 0x30
 800cb0a:	d0fa      	beq.n	800cb02 <_dtoa_r+0xbea>
 800cb0c:	e6db      	b.n	800c8c6 <_dtoa_r+0x9ae>
 800cb0e:	9a06      	ldr	r2, [sp, #24]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d18e      	bne.n	800ca32 <_dtoa_r+0xb1a>
 800cb14:	9b02      	ldr	r3, [sp, #8]
 800cb16:	3301      	adds	r3, #1
 800cb18:	9302      	str	r3, [sp, #8]
 800cb1a:	2331      	movs	r3, #49	; 0x31
 800cb1c:	e799      	b.n	800ca52 <_dtoa_r+0xb3a>
 800cb1e:	4b09      	ldr	r3, [pc, #36]	; (800cb44 <_dtoa_r+0xc2c>)
 800cb20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cb22:	9306      	str	r3, [sp, #24]
 800cb24:	4b08      	ldr	r3, [pc, #32]	; (800cb48 <_dtoa_r+0xc30>)
 800cb26:	2a00      	cmp	r2, #0
 800cb28:	d001      	beq.n	800cb2e <_dtoa_r+0xc16>
 800cb2a:	f7ff fa3f 	bl	800bfac <_dtoa_r+0x94>
 800cb2e:	f7ff fa3f 	bl	800bfb0 <_dtoa_r+0x98>
 800cb32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	dcb6      	bgt.n	800caa6 <_dtoa_r+0xb8e>
 800cb38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	dd00      	ble.n	800cb40 <_dtoa_r+0xc28>
 800cb3e:	e6ac      	b.n	800c89a <_dtoa_r+0x982>
 800cb40:	e7b1      	b.n	800caa6 <_dtoa_r+0xb8e>
 800cb42:	46c0      	nop			; (mov r8, r8)
 800cb44:	0800e395 	.word	0x0800e395
 800cb48:	0800e39d 	.word	0x0800e39d

0800cb4c <__sflush_r>:
 800cb4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb4e:	898b      	ldrh	r3, [r1, #12]
 800cb50:	0005      	movs	r5, r0
 800cb52:	000c      	movs	r4, r1
 800cb54:	071a      	lsls	r2, r3, #28
 800cb56:	d45f      	bmi.n	800cc18 <__sflush_r+0xcc>
 800cb58:	684a      	ldr	r2, [r1, #4]
 800cb5a:	2a00      	cmp	r2, #0
 800cb5c:	dc04      	bgt.n	800cb68 <__sflush_r+0x1c>
 800cb5e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cb60:	2a00      	cmp	r2, #0
 800cb62:	dc01      	bgt.n	800cb68 <__sflush_r+0x1c>
 800cb64:	2000      	movs	r0, #0
 800cb66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb68:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cb6a:	2f00      	cmp	r7, #0
 800cb6c:	d0fa      	beq.n	800cb64 <__sflush_r+0x18>
 800cb6e:	2200      	movs	r2, #0
 800cb70:	2180      	movs	r1, #128	; 0x80
 800cb72:	682e      	ldr	r6, [r5, #0]
 800cb74:	602a      	str	r2, [r5, #0]
 800cb76:	001a      	movs	r2, r3
 800cb78:	0149      	lsls	r1, r1, #5
 800cb7a:	400a      	ands	r2, r1
 800cb7c:	420b      	tst	r3, r1
 800cb7e:	d034      	beq.n	800cbea <__sflush_r+0x9e>
 800cb80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	075b      	lsls	r3, r3, #29
 800cb86:	d506      	bpl.n	800cb96 <__sflush_r+0x4a>
 800cb88:	6863      	ldr	r3, [r4, #4]
 800cb8a:	1ac0      	subs	r0, r0, r3
 800cb8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <__sflush_r+0x4a>
 800cb92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb94:	1ac0      	subs	r0, r0, r3
 800cb96:	0002      	movs	r2, r0
 800cb98:	6a21      	ldr	r1, [r4, #32]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	0028      	movs	r0, r5
 800cb9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cba0:	47b8      	blx	r7
 800cba2:	89a1      	ldrh	r1, [r4, #12]
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d106      	bne.n	800cbb6 <__sflush_r+0x6a>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	2b1d      	cmp	r3, #29
 800cbac:	d831      	bhi.n	800cc12 <__sflush_r+0xc6>
 800cbae:	4a2c      	ldr	r2, [pc, #176]	; (800cc60 <__sflush_r+0x114>)
 800cbb0:	40da      	lsrs	r2, r3
 800cbb2:	07d3      	lsls	r3, r2, #31
 800cbb4:	d52d      	bpl.n	800cc12 <__sflush_r+0xc6>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6063      	str	r3, [r4, #4]
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	04cb      	lsls	r3, r1, #19
 800cbc0:	d505      	bpl.n	800cbce <__sflush_r+0x82>
 800cbc2:	1c43      	adds	r3, r0, #1
 800cbc4:	d102      	bne.n	800cbcc <__sflush_r+0x80>
 800cbc6:	682b      	ldr	r3, [r5, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d100      	bne.n	800cbce <__sflush_r+0x82>
 800cbcc:	6560      	str	r0, [r4, #84]	; 0x54
 800cbce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbd0:	602e      	str	r6, [r5, #0]
 800cbd2:	2900      	cmp	r1, #0
 800cbd4:	d0c6      	beq.n	800cb64 <__sflush_r+0x18>
 800cbd6:	0023      	movs	r3, r4
 800cbd8:	3344      	adds	r3, #68	; 0x44
 800cbda:	4299      	cmp	r1, r3
 800cbdc:	d002      	beq.n	800cbe4 <__sflush_r+0x98>
 800cbde:	0028      	movs	r0, r5
 800cbe0:	f7fe fa24 	bl	800b02c <_free_r>
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	6360      	str	r0, [r4, #52]	; 0x34
 800cbe8:	e7bd      	b.n	800cb66 <__sflush_r+0x1a>
 800cbea:	2301      	movs	r3, #1
 800cbec:	0028      	movs	r0, r5
 800cbee:	6a21      	ldr	r1, [r4, #32]
 800cbf0:	47b8      	blx	r7
 800cbf2:	1c43      	adds	r3, r0, #1
 800cbf4:	d1c5      	bne.n	800cb82 <__sflush_r+0x36>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d0c2      	beq.n	800cb82 <__sflush_r+0x36>
 800cbfc:	2b1d      	cmp	r3, #29
 800cbfe:	d001      	beq.n	800cc04 <__sflush_r+0xb8>
 800cc00:	2b16      	cmp	r3, #22
 800cc02:	d101      	bne.n	800cc08 <__sflush_r+0xbc>
 800cc04:	602e      	str	r6, [r5, #0]
 800cc06:	e7ad      	b.n	800cb64 <__sflush_r+0x18>
 800cc08:	2340      	movs	r3, #64	; 0x40
 800cc0a:	89a2      	ldrh	r2, [r4, #12]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	e7a9      	b.n	800cb66 <__sflush_r+0x1a>
 800cc12:	2340      	movs	r3, #64	; 0x40
 800cc14:	430b      	orrs	r3, r1
 800cc16:	e7fa      	b.n	800cc0e <__sflush_r+0xc2>
 800cc18:	690f      	ldr	r7, [r1, #16]
 800cc1a:	2f00      	cmp	r7, #0
 800cc1c:	d0a2      	beq.n	800cb64 <__sflush_r+0x18>
 800cc1e:	680a      	ldr	r2, [r1, #0]
 800cc20:	600f      	str	r7, [r1, #0]
 800cc22:	1bd2      	subs	r2, r2, r7
 800cc24:	9201      	str	r2, [sp, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	079b      	lsls	r3, r3, #30
 800cc2a:	d100      	bne.n	800cc2e <__sflush_r+0xe2>
 800cc2c:	694a      	ldr	r2, [r1, #20]
 800cc2e:	60a2      	str	r2, [r4, #8]
 800cc30:	9b01      	ldr	r3, [sp, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	dc00      	bgt.n	800cc38 <__sflush_r+0xec>
 800cc36:	e795      	b.n	800cb64 <__sflush_r+0x18>
 800cc38:	003a      	movs	r2, r7
 800cc3a:	0028      	movs	r0, r5
 800cc3c:	9b01      	ldr	r3, [sp, #4]
 800cc3e:	6a21      	ldr	r1, [r4, #32]
 800cc40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc42:	47b0      	blx	r6
 800cc44:	2800      	cmp	r0, #0
 800cc46:	dc06      	bgt.n	800cc56 <__sflush_r+0x10a>
 800cc48:	2340      	movs	r3, #64	; 0x40
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	89a2      	ldrh	r2, [r4, #12]
 800cc4e:	4240      	negs	r0, r0
 800cc50:	4313      	orrs	r3, r2
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	e787      	b.n	800cb66 <__sflush_r+0x1a>
 800cc56:	9b01      	ldr	r3, [sp, #4]
 800cc58:	183f      	adds	r7, r7, r0
 800cc5a:	1a1b      	subs	r3, r3, r0
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	e7e7      	b.n	800cc30 <__sflush_r+0xe4>
 800cc60:	20400001 	.word	0x20400001

0800cc64 <_fflush_r>:
 800cc64:	690b      	ldr	r3, [r1, #16]
 800cc66:	b570      	push	{r4, r5, r6, lr}
 800cc68:	0005      	movs	r5, r0
 800cc6a:	000c      	movs	r4, r1
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d102      	bne.n	800cc76 <_fflush_r+0x12>
 800cc70:	2500      	movs	r5, #0
 800cc72:	0028      	movs	r0, r5
 800cc74:	bd70      	pop	{r4, r5, r6, pc}
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d004      	beq.n	800cc84 <_fflush_r+0x20>
 800cc7a:	6983      	ldr	r3, [r0, #24]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d101      	bne.n	800cc84 <_fflush_r+0x20>
 800cc80:	f000 f892 	bl	800cda8 <__sinit>
 800cc84:	4b14      	ldr	r3, [pc, #80]	; (800ccd8 <_fflush_r+0x74>)
 800cc86:	429c      	cmp	r4, r3
 800cc88:	d11b      	bne.n	800ccc2 <_fflush_r+0x5e>
 800cc8a:	686c      	ldr	r4, [r5, #4]
 800cc8c:	220c      	movs	r2, #12
 800cc8e:	5ea3      	ldrsh	r3, [r4, r2]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d0ed      	beq.n	800cc70 <_fflush_r+0xc>
 800cc94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc96:	07d2      	lsls	r2, r2, #31
 800cc98:	d404      	bmi.n	800cca4 <_fflush_r+0x40>
 800cc9a:	059b      	lsls	r3, r3, #22
 800cc9c:	d402      	bmi.n	800cca4 <_fflush_r+0x40>
 800cc9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cca0:	f000 f927 	bl	800cef2 <__retarget_lock_acquire_recursive>
 800cca4:	0028      	movs	r0, r5
 800cca6:	0021      	movs	r1, r4
 800cca8:	f7ff ff50 	bl	800cb4c <__sflush_r>
 800ccac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccae:	0005      	movs	r5, r0
 800ccb0:	07db      	lsls	r3, r3, #31
 800ccb2:	d4de      	bmi.n	800cc72 <_fflush_r+0xe>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	059b      	lsls	r3, r3, #22
 800ccb8:	d4db      	bmi.n	800cc72 <_fflush_r+0xe>
 800ccba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccbc:	f000 f91a 	bl	800cef4 <__retarget_lock_release_recursive>
 800ccc0:	e7d7      	b.n	800cc72 <_fflush_r+0xe>
 800ccc2:	4b06      	ldr	r3, [pc, #24]	; (800ccdc <_fflush_r+0x78>)
 800ccc4:	429c      	cmp	r4, r3
 800ccc6:	d101      	bne.n	800cccc <_fflush_r+0x68>
 800ccc8:	68ac      	ldr	r4, [r5, #8]
 800ccca:	e7df      	b.n	800cc8c <_fflush_r+0x28>
 800cccc:	4b04      	ldr	r3, [pc, #16]	; (800cce0 <_fflush_r+0x7c>)
 800ccce:	429c      	cmp	r4, r3
 800ccd0:	d1dc      	bne.n	800cc8c <_fflush_r+0x28>
 800ccd2:	68ec      	ldr	r4, [r5, #12]
 800ccd4:	e7da      	b.n	800cc8c <_fflush_r+0x28>
 800ccd6:	46c0      	nop			; (mov r8, r8)
 800ccd8:	0800e448 	.word	0x0800e448
 800ccdc:	0800e468 	.word	0x0800e468
 800cce0:	0800e428 	.word	0x0800e428

0800cce4 <std>:
 800cce4:	2300      	movs	r3, #0
 800cce6:	b510      	push	{r4, lr}
 800cce8:	0004      	movs	r4, r0
 800ccea:	6003      	str	r3, [r0, #0]
 800ccec:	6043      	str	r3, [r0, #4]
 800ccee:	6083      	str	r3, [r0, #8]
 800ccf0:	8181      	strh	r1, [r0, #12]
 800ccf2:	6643      	str	r3, [r0, #100]	; 0x64
 800ccf4:	0019      	movs	r1, r3
 800ccf6:	81c2      	strh	r2, [r0, #14]
 800ccf8:	6103      	str	r3, [r0, #16]
 800ccfa:	6143      	str	r3, [r0, #20]
 800ccfc:	6183      	str	r3, [r0, #24]
 800ccfe:	2208      	movs	r2, #8
 800cd00:	305c      	adds	r0, #92	; 0x5c
 800cd02:	f7fe f98b 	bl	800b01c <memset>
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <std+0x38>)
 800cd08:	6224      	str	r4, [r4, #32]
 800cd0a:	6263      	str	r3, [r4, #36]	; 0x24
 800cd0c:	4b04      	ldr	r3, [pc, #16]	; (800cd20 <std+0x3c>)
 800cd0e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd10:	4b04      	ldr	r3, [pc, #16]	; (800cd24 <std+0x40>)
 800cd12:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <std+0x44>)
 800cd16:	6323      	str	r3, [r4, #48]	; 0x30
 800cd18:	bd10      	pop	{r4, pc}
 800cd1a:	46c0      	nop			; (mov r8, r8)
 800cd1c:	0800dd31 	.word	0x0800dd31
 800cd20:	0800dd59 	.word	0x0800dd59
 800cd24:	0800dd91 	.word	0x0800dd91
 800cd28:	0800ddbd 	.word	0x0800ddbd

0800cd2c <_cleanup_r>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	4902      	ldr	r1, [pc, #8]	; (800cd38 <_cleanup_r+0xc>)
 800cd30:	f000 f8ba 	bl	800cea8 <_fwalk_reent>
 800cd34:	bd10      	pop	{r4, pc}
 800cd36:	46c0      	nop			; (mov r8, r8)
 800cd38:	0800cc65 	.word	0x0800cc65

0800cd3c <__sfmoreglue>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	2568      	movs	r5, #104	; 0x68
 800cd40:	1e4a      	subs	r2, r1, #1
 800cd42:	4355      	muls	r5, r2
 800cd44:	000e      	movs	r6, r1
 800cd46:	0029      	movs	r1, r5
 800cd48:	3174      	adds	r1, #116	; 0x74
 800cd4a:	f7fe f9db 	bl	800b104 <_malloc_r>
 800cd4e:	1e04      	subs	r4, r0, #0
 800cd50:	d008      	beq.n	800cd64 <__sfmoreglue+0x28>
 800cd52:	2100      	movs	r1, #0
 800cd54:	002a      	movs	r2, r5
 800cd56:	6001      	str	r1, [r0, #0]
 800cd58:	6046      	str	r6, [r0, #4]
 800cd5a:	300c      	adds	r0, #12
 800cd5c:	60a0      	str	r0, [r4, #8]
 800cd5e:	3268      	adds	r2, #104	; 0x68
 800cd60:	f7fe f95c 	bl	800b01c <memset>
 800cd64:	0020      	movs	r0, r4
 800cd66:	bd70      	pop	{r4, r5, r6, pc}

0800cd68 <__sfp_lock_acquire>:
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	4802      	ldr	r0, [pc, #8]	; (800cd74 <__sfp_lock_acquire+0xc>)
 800cd6c:	f000 f8c1 	bl	800cef2 <__retarget_lock_acquire_recursive>
 800cd70:	bd10      	pop	{r4, pc}
 800cd72:	46c0      	nop			; (mov r8, r8)
 800cd74:	200007f9 	.word	0x200007f9

0800cd78 <__sfp_lock_release>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	4802      	ldr	r0, [pc, #8]	; (800cd84 <__sfp_lock_release+0xc>)
 800cd7c:	f000 f8ba 	bl	800cef4 <__retarget_lock_release_recursive>
 800cd80:	bd10      	pop	{r4, pc}
 800cd82:	46c0      	nop			; (mov r8, r8)
 800cd84:	200007f9 	.word	0x200007f9

0800cd88 <__sinit_lock_acquire>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	4802      	ldr	r0, [pc, #8]	; (800cd94 <__sinit_lock_acquire+0xc>)
 800cd8c:	f000 f8b1 	bl	800cef2 <__retarget_lock_acquire_recursive>
 800cd90:	bd10      	pop	{r4, pc}
 800cd92:	46c0      	nop			; (mov r8, r8)
 800cd94:	200007fa 	.word	0x200007fa

0800cd98 <__sinit_lock_release>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	4802      	ldr	r0, [pc, #8]	; (800cda4 <__sinit_lock_release+0xc>)
 800cd9c:	f000 f8aa 	bl	800cef4 <__retarget_lock_release_recursive>
 800cda0:	bd10      	pop	{r4, pc}
 800cda2:	46c0      	nop			; (mov r8, r8)
 800cda4:	200007fa 	.word	0x200007fa

0800cda8 <__sinit>:
 800cda8:	b513      	push	{r0, r1, r4, lr}
 800cdaa:	0004      	movs	r4, r0
 800cdac:	f7ff ffec 	bl	800cd88 <__sinit_lock_acquire>
 800cdb0:	69a3      	ldr	r3, [r4, #24]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d002      	beq.n	800cdbc <__sinit+0x14>
 800cdb6:	f7ff ffef 	bl	800cd98 <__sinit_lock_release>
 800cdba:	bd13      	pop	{r0, r1, r4, pc}
 800cdbc:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdbe:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cdc0:	6523      	str	r3, [r4, #80]	; 0x50
 800cdc2:	4b13      	ldr	r3, [pc, #76]	; (800ce10 <__sinit+0x68>)
 800cdc4:	4a13      	ldr	r2, [pc, #76]	; (800ce14 <__sinit+0x6c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800cdca:	9301      	str	r3, [sp, #4]
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	d101      	bne.n	800cdd4 <__sinit+0x2c>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	61a3      	str	r3, [r4, #24]
 800cdd4:	0020      	movs	r0, r4
 800cdd6:	f000 f81f 	bl	800ce18 <__sfp>
 800cdda:	6060      	str	r0, [r4, #4]
 800cddc:	0020      	movs	r0, r4
 800cdde:	f000 f81b 	bl	800ce18 <__sfp>
 800cde2:	60a0      	str	r0, [r4, #8]
 800cde4:	0020      	movs	r0, r4
 800cde6:	f000 f817 	bl	800ce18 <__sfp>
 800cdea:	2200      	movs	r2, #0
 800cdec:	2104      	movs	r1, #4
 800cdee:	60e0      	str	r0, [r4, #12]
 800cdf0:	6860      	ldr	r0, [r4, #4]
 800cdf2:	f7ff ff77 	bl	800cce4 <std>
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	2109      	movs	r1, #9
 800cdfa:	68a0      	ldr	r0, [r4, #8]
 800cdfc:	f7ff ff72 	bl	800cce4 <std>
 800ce00:	2202      	movs	r2, #2
 800ce02:	2112      	movs	r1, #18
 800ce04:	68e0      	ldr	r0, [r4, #12]
 800ce06:	f7ff ff6d 	bl	800cce4 <std>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	61a3      	str	r3, [r4, #24]
 800ce0e:	e7d2      	b.n	800cdb6 <__sinit+0xe>
 800ce10:	0800e25c 	.word	0x0800e25c
 800ce14:	0800cd2d 	.word	0x0800cd2d

0800ce18 <__sfp>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	0007      	movs	r7, r0
 800ce1c:	f7ff ffa4 	bl	800cd68 <__sfp_lock_acquire>
 800ce20:	4b1f      	ldr	r3, [pc, #124]	; (800cea0 <__sfp+0x88>)
 800ce22:	681e      	ldr	r6, [r3, #0]
 800ce24:	69b3      	ldr	r3, [r6, #24]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d102      	bne.n	800ce30 <__sfp+0x18>
 800ce2a:	0030      	movs	r0, r6
 800ce2c:	f7ff ffbc 	bl	800cda8 <__sinit>
 800ce30:	3648      	adds	r6, #72	; 0x48
 800ce32:	68b4      	ldr	r4, [r6, #8]
 800ce34:	6873      	ldr	r3, [r6, #4]
 800ce36:	3b01      	subs	r3, #1
 800ce38:	d504      	bpl.n	800ce44 <__sfp+0x2c>
 800ce3a:	6833      	ldr	r3, [r6, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d022      	beq.n	800ce86 <__sfp+0x6e>
 800ce40:	6836      	ldr	r6, [r6, #0]
 800ce42:	e7f6      	b.n	800ce32 <__sfp+0x1a>
 800ce44:	220c      	movs	r2, #12
 800ce46:	5ea5      	ldrsh	r5, [r4, r2]
 800ce48:	2d00      	cmp	r5, #0
 800ce4a:	d11a      	bne.n	800ce82 <__sfp+0x6a>
 800ce4c:	0020      	movs	r0, r4
 800ce4e:	4b15      	ldr	r3, [pc, #84]	; (800cea4 <__sfp+0x8c>)
 800ce50:	3058      	adds	r0, #88	; 0x58
 800ce52:	60e3      	str	r3, [r4, #12]
 800ce54:	6665      	str	r5, [r4, #100]	; 0x64
 800ce56:	f000 f84b 	bl	800cef0 <__retarget_lock_init_recursive>
 800ce5a:	f7ff ff8d 	bl	800cd78 <__sfp_lock_release>
 800ce5e:	0020      	movs	r0, r4
 800ce60:	2208      	movs	r2, #8
 800ce62:	0029      	movs	r1, r5
 800ce64:	6025      	str	r5, [r4, #0]
 800ce66:	60a5      	str	r5, [r4, #8]
 800ce68:	6065      	str	r5, [r4, #4]
 800ce6a:	6125      	str	r5, [r4, #16]
 800ce6c:	6165      	str	r5, [r4, #20]
 800ce6e:	61a5      	str	r5, [r4, #24]
 800ce70:	305c      	adds	r0, #92	; 0x5c
 800ce72:	f7fe f8d3 	bl	800b01c <memset>
 800ce76:	6365      	str	r5, [r4, #52]	; 0x34
 800ce78:	63a5      	str	r5, [r4, #56]	; 0x38
 800ce7a:	64a5      	str	r5, [r4, #72]	; 0x48
 800ce7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ce7e:	0020      	movs	r0, r4
 800ce80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce82:	3468      	adds	r4, #104	; 0x68
 800ce84:	e7d7      	b.n	800ce36 <__sfp+0x1e>
 800ce86:	2104      	movs	r1, #4
 800ce88:	0038      	movs	r0, r7
 800ce8a:	f7ff ff57 	bl	800cd3c <__sfmoreglue>
 800ce8e:	1e04      	subs	r4, r0, #0
 800ce90:	6030      	str	r0, [r6, #0]
 800ce92:	d1d5      	bne.n	800ce40 <__sfp+0x28>
 800ce94:	f7ff ff70 	bl	800cd78 <__sfp_lock_release>
 800ce98:	230c      	movs	r3, #12
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	e7ef      	b.n	800ce7e <__sfp+0x66>
 800ce9e:	46c0      	nop			; (mov r8, r8)
 800cea0:	0800e25c 	.word	0x0800e25c
 800cea4:	ffff0001 	.word	0xffff0001

0800cea8 <_fwalk_reent>:
 800cea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceaa:	0004      	movs	r4, r0
 800ceac:	0006      	movs	r6, r0
 800ceae:	2700      	movs	r7, #0
 800ceb0:	9101      	str	r1, [sp, #4]
 800ceb2:	3448      	adds	r4, #72	; 0x48
 800ceb4:	6863      	ldr	r3, [r4, #4]
 800ceb6:	68a5      	ldr	r5, [r4, #8]
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	d504      	bpl.n	800cecc <_fwalk_reent+0x24>
 800cec2:	6824      	ldr	r4, [r4, #0]
 800cec4:	2c00      	cmp	r4, #0
 800cec6:	d1f5      	bne.n	800ceb4 <_fwalk_reent+0xc>
 800cec8:	0038      	movs	r0, r7
 800ceca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cecc:	89ab      	ldrh	r3, [r5, #12]
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d908      	bls.n	800cee4 <_fwalk_reent+0x3c>
 800ced2:	220e      	movs	r2, #14
 800ced4:	5eab      	ldrsh	r3, [r5, r2]
 800ced6:	3301      	adds	r3, #1
 800ced8:	d004      	beq.n	800cee4 <_fwalk_reent+0x3c>
 800ceda:	0029      	movs	r1, r5
 800cedc:	0030      	movs	r0, r6
 800cede:	9b01      	ldr	r3, [sp, #4]
 800cee0:	4798      	blx	r3
 800cee2:	4307      	orrs	r7, r0
 800cee4:	3568      	adds	r5, #104	; 0x68
 800cee6:	e7e8      	b.n	800ceba <_fwalk_reent+0x12>

0800cee8 <_localeconv_r>:
 800cee8:	4800      	ldr	r0, [pc, #0]	; (800ceec <_localeconv_r+0x4>)
 800ceea:	4770      	bx	lr
 800ceec:	20000160 	.word	0x20000160

0800cef0 <__retarget_lock_init_recursive>:
 800cef0:	4770      	bx	lr

0800cef2 <__retarget_lock_acquire_recursive>:
 800cef2:	4770      	bx	lr

0800cef4 <__retarget_lock_release_recursive>:
 800cef4:	4770      	bx	lr
	...

0800cef8 <__swhatbuf_r>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	000e      	movs	r6, r1
 800cefc:	001d      	movs	r5, r3
 800cefe:	230e      	movs	r3, #14
 800cf00:	5ec9      	ldrsh	r1, [r1, r3]
 800cf02:	0014      	movs	r4, r2
 800cf04:	b096      	sub	sp, #88	; 0x58
 800cf06:	2900      	cmp	r1, #0
 800cf08:	da08      	bge.n	800cf1c <__swhatbuf_r+0x24>
 800cf0a:	220c      	movs	r2, #12
 800cf0c:	5eb3      	ldrsh	r3, [r6, r2]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	602a      	str	r2, [r5, #0]
 800cf12:	061b      	lsls	r3, r3, #24
 800cf14:	d411      	bmi.n	800cf3a <__swhatbuf_r+0x42>
 800cf16:	2380      	movs	r3, #128	; 0x80
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	e00f      	b.n	800cf3c <__swhatbuf_r+0x44>
 800cf1c:	466a      	mov	r2, sp
 800cf1e:	f000 ffa7 	bl	800de70 <_fstat_r>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	dbf1      	blt.n	800cf0a <__swhatbuf_r+0x12>
 800cf26:	23f0      	movs	r3, #240	; 0xf0
 800cf28:	9901      	ldr	r1, [sp, #4]
 800cf2a:	021b      	lsls	r3, r3, #8
 800cf2c:	4019      	ands	r1, r3
 800cf2e:	4b05      	ldr	r3, [pc, #20]	; (800cf44 <__swhatbuf_r+0x4c>)
 800cf30:	18c9      	adds	r1, r1, r3
 800cf32:	424b      	negs	r3, r1
 800cf34:	4159      	adcs	r1, r3
 800cf36:	6029      	str	r1, [r5, #0]
 800cf38:	e7ed      	b.n	800cf16 <__swhatbuf_r+0x1e>
 800cf3a:	2340      	movs	r3, #64	; 0x40
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	6023      	str	r3, [r4, #0]
 800cf40:	b016      	add	sp, #88	; 0x58
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	ffffe000 	.word	0xffffe000

0800cf48 <__smakebuf_r>:
 800cf48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf4a:	2602      	movs	r6, #2
 800cf4c:	898b      	ldrh	r3, [r1, #12]
 800cf4e:	0005      	movs	r5, r0
 800cf50:	000c      	movs	r4, r1
 800cf52:	4233      	tst	r3, r6
 800cf54:	d006      	beq.n	800cf64 <__smakebuf_r+0x1c>
 800cf56:	0023      	movs	r3, r4
 800cf58:	3347      	adds	r3, #71	; 0x47
 800cf5a:	6023      	str	r3, [r4, #0]
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	2301      	movs	r3, #1
 800cf60:	6163      	str	r3, [r4, #20]
 800cf62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cf64:	466a      	mov	r2, sp
 800cf66:	ab01      	add	r3, sp, #4
 800cf68:	f7ff ffc6 	bl	800cef8 <__swhatbuf_r>
 800cf6c:	9900      	ldr	r1, [sp, #0]
 800cf6e:	0007      	movs	r7, r0
 800cf70:	0028      	movs	r0, r5
 800cf72:	f7fe f8c7 	bl	800b104 <_malloc_r>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d108      	bne.n	800cf8c <__smakebuf_r+0x44>
 800cf7a:	220c      	movs	r2, #12
 800cf7c:	5ea3      	ldrsh	r3, [r4, r2]
 800cf7e:	059a      	lsls	r2, r3, #22
 800cf80:	d4ef      	bmi.n	800cf62 <__smakebuf_r+0x1a>
 800cf82:	2203      	movs	r2, #3
 800cf84:	4393      	bics	r3, r2
 800cf86:	431e      	orrs	r6, r3
 800cf88:	81a6      	strh	r6, [r4, #12]
 800cf8a:	e7e4      	b.n	800cf56 <__smakebuf_r+0xe>
 800cf8c:	4b0f      	ldr	r3, [pc, #60]	; (800cfcc <__smakebuf_r+0x84>)
 800cf8e:	62ab      	str	r3, [r5, #40]	; 0x28
 800cf90:	2380      	movs	r3, #128	; 0x80
 800cf92:	89a2      	ldrh	r2, [r4, #12]
 800cf94:	6020      	str	r0, [r4, #0]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	81a3      	strh	r3, [r4, #12]
 800cf9a:	9b00      	ldr	r3, [sp, #0]
 800cf9c:	6120      	str	r0, [r4, #16]
 800cf9e:	6163      	str	r3, [r4, #20]
 800cfa0:	9b01      	ldr	r3, [sp, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00d      	beq.n	800cfc2 <__smakebuf_r+0x7a>
 800cfa6:	0028      	movs	r0, r5
 800cfa8:	230e      	movs	r3, #14
 800cfaa:	5ee1      	ldrsh	r1, [r4, r3]
 800cfac:	f000 ff72 	bl	800de94 <_isatty_r>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d006      	beq.n	800cfc2 <__smakebuf_r+0x7a>
 800cfb4:	2203      	movs	r2, #3
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	4393      	bics	r3, r2
 800cfba:	001a      	movs	r2, r3
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	81a3      	strh	r3, [r4, #12]
 800cfc2:	89a0      	ldrh	r0, [r4, #12]
 800cfc4:	4307      	orrs	r7, r0
 800cfc6:	81a7      	strh	r7, [r4, #12]
 800cfc8:	e7cb      	b.n	800cf62 <__smakebuf_r+0x1a>
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	0800cd2d 	.word	0x0800cd2d

0800cfd0 <memchr>:
 800cfd0:	b2c9      	uxtb	r1, r1
 800cfd2:	1882      	adds	r2, r0, r2
 800cfd4:	4290      	cmp	r0, r2
 800cfd6:	d101      	bne.n	800cfdc <memchr+0xc>
 800cfd8:	2000      	movs	r0, #0
 800cfda:	4770      	bx	lr
 800cfdc:	7803      	ldrb	r3, [r0, #0]
 800cfde:	428b      	cmp	r3, r1
 800cfe0:	d0fb      	beq.n	800cfda <memchr+0xa>
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	e7f6      	b.n	800cfd4 <memchr+0x4>

0800cfe6 <memcpy>:
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d100      	bne.n	800cff0 <memcpy+0xa>
 800cfee:	bd10      	pop	{r4, pc}
 800cff0:	5ccc      	ldrb	r4, [r1, r3]
 800cff2:	54c4      	strb	r4, [r0, r3]
 800cff4:	3301      	adds	r3, #1
 800cff6:	e7f8      	b.n	800cfea <memcpy+0x4>

0800cff8 <__malloc_lock>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	4802      	ldr	r0, [pc, #8]	; (800d004 <__malloc_lock+0xc>)
 800cffc:	f7ff ff79 	bl	800cef2 <__retarget_lock_acquire_recursive>
 800d000:	bd10      	pop	{r4, pc}
 800d002:	46c0      	nop			; (mov r8, r8)
 800d004:	200007f8 	.word	0x200007f8

0800d008 <__malloc_unlock>:
 800d008:	b510      	push	{r4, lr}
 800d00a:	4802      	ldr	r0, [pc, #8]	; (800d014 <__malloc_unlock+0xc>)
 800d00c:	f7ff ff72 	bl	800cef4 <__retarget_lock_release_recursive>
 800d010:	bd10      	pop	{r4, pc}
 800d012:	46c0      	nop			; (mov r8, r8)
 800d014:	200007f8 	.word	0x200007f8

0800d018 <_Balloc>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d01c:	0006      	movs	r6, r0
 800d01e:	000c      	movs	r4, r1
 800d020:	2d00      	cmp	r5, #0
 800d022:	d10e      	bne.n	800d042 <_Balloc+0x2a>
 800d024:	2010      	movs	r0, #16
 800d026:	f7fd ffef 	bl	800b008 <malloc>
 800d02a:	1e02      	subs	r2, r0, #0
 800d02c:	6270      	str	r0, [r6, #36]	; 0x24
 800d02e:	d104      	bne.n	800d03a <_Balloc+0x22>
 800d030:	2166      	movs	r1, #102	; 0x66
 800d032:	4b19      	ldr	r3, [pc, #100]	; (800d098 <_Balloc+0x80>)
 800d034:	4819      	ldr	r0, [pc, #100]	; (800d09c <_Balloc+0x84>)
 800d036:	f000 fedb 	bl	800ddf0 <__assert_func>
 800d03a:	6045      	str	r5, [r0, #4]
 800d03c:	6085      	str	r5, [r0, #8]
 800d03e:	6005      	str	r5, [r0, #0]
 800d040:	60c5      	str	r5, [r0, #12]
 800d042:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d044:	68eb      	ldr	r3, [r5, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d013      	beq.n	800d072 <_Balloc+0x5a>
 800d04a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d04c:	00a2      	lsls	r2, r4, #2
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	189b      	adds	r3, r3, r2
 800d052:	6818      	ldr	r0, [r3, #0]
 800d054:	2800      	cmp	r0, #0
 800d056:	d118      	bne.n	800d08a <_Balloc+0x72>
 800d058:	2101      	movs	r1, #1
 800d05a:	000d      	movs	r5, r1
 800d05c:	40a5      	lsls	r5, r4
 800d05e:	1d6a      	adds	r2, r5, #5
 800d060:	0030      	movs	r0, r6
 800d062:	0092      	lsls	r2, r2, #2
 800d064:	f000 fb74 	bl	800d750 <_calloc_r>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d00c      	beq.n	800d086 <_Balloc+0x6e>
 800d06c:	6044      	str	r4, [r0, #4]
 800d06e:	6085      	str	r5, [r0, #8]
 800d070:	e00d      	b.n	800d08e <_Balloc+0x76>
 800d072:	2221      	movs	r2, #33	; 0x21
 800d074:	2104      	movs	r1, #4
 800d076:	0030      	movs	r0, r6
 800d078:	f000 fb6a 	bl	800d750 <_calloc_r>
 800d07c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d07e:	60e8      	str	r0, [r5, #12]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1e1      	bne.n	800d04a <_Balloc+0x32>
 800d086:	2000      	movs	r0, #0
 800d088:	bd70      	pop	{r4, r5, r6, pc}
 800d08a:	6802      	ldr	r2, [r0, #0]
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	2300      	movs	r3, #0
 800d090:	6103      	str	r3, [r0, #16]
 800d092:	60c3      	str	r3, [r0, #12]
 800d094:	e7f8      	b.n	800d088 <_Balloc+0x70>
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	0800e3a2 	.word	0x0800e3a2
 800d09c:	0800e488 	.word	0x0800e488

0800d0a0 <_Bfree>:
 800d0a0:	b570      	push	{r4, r5, r6, lr}
 800d0a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0a4:	0005      	movs	r5, r0
 800d0a6:	000c      	movs	r4, r1
 800d0a8:	2e00      	cmp	r6, #0
 800d0aa:	d10e      	bne.n	800d0ca <_Bfree+0x2a>
 800d0ac:	2010      	movs	r0, #16
 800d0ae:	f7fd ffab 	bl	800b008 <malloc>
 800d0b2:	1e02      	subs	r2, r0, #0
 800d0b4:	6268      	str	r0, [r5, #36]	; 0x24
 800d0b6:	d104      	bne.n	800d0c2 <_Bfree+0x22>
 800d0b8:	218a      	movs	r1, #138	; 0x8a
 800d0ba:	4b09      	ldr	r3, [pc, #36]	; (800d0e0 <_Bfree+0x40>)
 800d0bc:	4809      	ldr	r0, [pc, #36]	; (800d0e4 <_Bfree+0x44>)
 800d0be:	f000 fe97 	bl	800ddf0 <__assert_func>
 800d0c2:	6046      	str	r6, [r0, #4]
 800d0c4:	6086      	str	r6, [r0, #8]
 800d0c6:	6006      	str	r6, [r0, #0]
 800d0c8:	60c6      	str	r6, [r0, #12]
 800d0ca:	2c00      	cmp	r4, #0
 800d0cc:	d007      	beq.n	800d0de <_Bfree+0x3e>
 800d0ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0d0:	6862      	ldr	r2, [r4, #4]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	0092      	lsls	r2, r2, #2
 800d0d6:	189b      	adds	r3, r3, r2
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	6022      	str	r2, [r4, #0]
 800d0dc:	601c      	str	r4, [r3, #0]
 800d0de:	bd70      	pop	{r4, r5, r6, pc}
 800d0e0:	0800e3a2 	.word	0x0800e3a2
 800d0e4:	0800e488 	.word	0x0800e488

0800d0e8 <__multadd>:
 800d0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ea:	000e      	movs	r6, r1
 800d0ec:	9001      	str	r0, [sp, #4]
 800d0ee:	000c      	movs	r4, r1
 800d0f0:	001d      	movs	r5, r3
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	690f      	ldr	r7, [r1, #16]
 800d0f6:	3614      	adds	r6, #20
 800d0f8:	6833      	ldr	r3, [r6, #0]
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	b299      	uxth	r1, r3
 800d0fe:	4351      	muls	r1, r2
 800d100:	0c1b      	lsrs	r3, r3, #16
 800d102:	4353      	muls	r3, r2
 800d104:	1949      	adds	r1, r1, r5
 800d106:	0c0d      	lsrs	r5, r1, #16
 800d108:	195b      	adds	r3, r3, r5
 800d10a:	0c1d      	lsrs	r5, r3, #16
 800d10c:	b289      	uxth	r1, r1
 800d10e:	041b      	lsls	r3, r3, #16
 800d110:	185b      	adds	r3, r3, r1
 800d112:	c608      	stmia	r6!, {r3}
 800d114:	4287      	cmp	r7, r0
 800d116:	dcef      	bgt.n	800d0f8 <__multadd+0x10>
 800d118:	2d00      	cmp	r5, #0
 800d11a:	d022      	beq.n	800d162 <__multadd+0x7a>
 800d11c:	68a3      	ldr	r3, [r4, #8]
 800d11e:	42bb      	cmp	r3, r7
 800d120:	dc19      	bgt.n	800d156 <__multadd+0x6e>
 800d122:	6863      	ldr	r3, [r4, #4]
 800d124:	9801      	ldr	r0, [sp, #4]
 800d126:	1c59      	adds	r1, r3, #1
 800d128:	f7ff ff76 	bl	800d018 <_Balloc>
 800d12c:	1e06      	subs	r6, r0, #0
 800d12e:	d105      	bne.n	800d13c <__multadd+0x54>
 800d130:	0002      	movs	r2, r0
 800d132:	21b5      	movs	r1, #181	; 0xb5
 800d134:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <__multadd+0x80>)
 800d136:	480d      	ldr	r0, [pc, #52]	; (800d16c <__multadd+0x84>)
 800d138:	f000 fe5a 	bl	800ddf0 <__assert_func>
 800d13c:	0021      	movs	r1, r4
 800d13e:	6923      	ldr	r3, [r4, #16]
 800d140:	310c      	adds	r1, #12
 800d142:	1c9a      	adds	r2, r3, #2
 800d144:	0092      	lsls	r2, r2, #2
 800d146:	300c      	adds	r0, #12
 800d148:	f7ff ff4d 	bl	800cfe6 <memcpy>
 800d14c:	0021      	movs	r1, r4
 800d14e:	9801      	ldr	r0, [sp, #4]
 800d150:	f7ff ffa6 	bl	800d0a0 <_Bfree>
 800d154:	0034      	movs	r4, r6
 800d156:	1d3b      	adds	r3, r7, #4
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	18e3      	adds	r3, r4, r3
 800d15c:	605d      	str	r5, [r3, #4]
 800d15e:	1c7b      	adds	r3, r7, #1
 800d160:	6123      	str	r3, [r4, #16]
 800d162:	0020      	movs	r0, r4
 800d164:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d166:	46c0      	nop			; (mov r8, r8)
 800d168:	0800e414 	.word	0x0800e414
 800d16c:	0800e488 	.word	0x0800e488

0800d170 <__hi0bits>:
 800d170:	0003      	movs	r3, r0
 800d172:	0c02      	lsrs	r2, r0, #16
 800d174:	2000      	movs	r0, #0
 800d176:	4282      	cmp	r2, r0
 800d178:	d101      	bne.n	800d17e <__hi0bits+0xe>
 800d17a:	041b      	lsls	r3, r3, #16
 800d17c:	3010      	adds	r0, #16
 800d17e:	0e1a      	lsrs	r2, r3, #24
 800d180:	d101      	bne.n	800d186 <__hi0bits+0x16>
 800d182:	3008      	adds	r0, #8
 800d184:	021b      	lsls	r3, r3, #8
 800d186:	0f1a      	lsrs	r2, r3, #28
 800d188:	d101      	bne.n	800d18e <__hi0bits+0x1e>
 800d18a:	3004      	adds	r0, #4
 800d18c:	011b      	lsls	r3, r3, #4
 800d18e:	0f9a      	lsrs	r2, r3, #30
 800d190:	d101      	bne.n	800d196 <__hi0bits+0x26>
 800d192:	3002      	adds	r0, #2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	2b00      	cmp	r3, #0
 800d198:	db03      	blt.n	800d1a2 <__hi0bits+0x32>
 800d19a:	3001      	adds	r0, #1
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	d400      	bmi.n	800d1a2 <__hi0bits+0x32>
 800d1a0:	2020      	movs	r0, #32
 800d1a2:	4770      	bx	lr

0800d1a4 <__lo0bits>:
 800d1a4:	6803      	ldr	r3, [r0, #0]
 800d1a6:	0002      	movs	r2, r0
 800d1a8:	2107      	movs	r1, #7
 800d1aa:	0018      	movs	r0, r3
 800d1ac:	4008      	ands	r0, r1
 800d1ae:	420b      	tst	r3, r1
 800d1b0:	d00d      	beq.n	800d1ce <__lo0bits+0x2a>
 800d1b2:	3906      	subs	r1, #6
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	420b      	tst	r3, r1
 800d1b8:	d105      	bne.n	800d1c6 <__lo0bits+0x22>
 800d1ba:	3002      	adds	r0, #2
 800d1bc:	4203      	tst	r3, r0
 800d1be:	d003      	beq.n	800d1c8 <__lo0bits+0x24>
 800d1c0:	40cb      	lsrs	r3, r1
 800d1c2:	0008      	movs	r0, r1
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	4770      	bx	lr
 800d1c8:	089b      	lsrs	r3, r3, #2
 800d1ca:	6013      	str	r3, [r2, #0]
 800d1cc:	e7fb      	b.n	800d1c6 <__lo0bits+0x22>
 800d1ce:	b299      	uxth	r1, r3
 800d1d0:	2900      	cmp	r1, #0
 800d1d2:	d101      	bne.n	800d1d8 <__lo0bits+0x34>
 800d1d4:	2010      	movs	r0, #16
 800d1d6:	0c1b      	lsrs	r3, r3, #16
 800d1d8:	b2d9      	uxtb	r1, r3
 800d1da:	2900      	cmp	r1, #0
 800d1dc:	d101      	bne.n	800d1e2 <__lo0bits+0x3e>
 800d1de:	3008      	adds	r0, #8
 800d1e0:	0a1b      	lsrs	r3, r3, #8
 800d1e2:	0719      	lsls	r1, r3, #28
 800d1e4:	d101      	bne.n	800d1ea <__lo0bits+0x46>
 800d1e6:	3004      	adds	r0, #4
 800d1e8:	091b      	lsrs	r3, r3, #4
 800d1ea:	0799      	lsls	r1, r3, #30
 800d1ec:	d101      	bne.n	800d1f2 <__lo0bits+0x4e>
 800d1ee:	3002      	adds	r0, #2
 800d1f0:	089b      	lsrs	r3, r3, #2
 800d1f2:	07d9      	lsls	r1, r3, #31
 800d1f4:	d4e9      	bmi.n	800d1ca <__lo0bits+0x26>
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	085b      	lsrs	r3, r3, #1
 800d1fa:	d1e6      	bne.n	800d1ca <__lo0bits+0x26>
 800d1fc:	2020      	movs	r0, #32
 800d1fe:	e7e2      	b.n	800d1c6 <__lo0bits+0x22>

0800d200 <__i2b>:
 800d200:	b510      	push	{r4, lr}
 800d202:	000c      	movs	r4, r1
 800d204:	2101      	movs	r1, #1
 800d206:	f7ff ff07 	bl	800d018 <_Balloc>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d106      	bne.n	800d21c <__i2b+0x1c>
 800d20e:	21a0      	movs	r1, #160	; 0xa0
 800d210:	0002      	movs	r2, r0
 800d212:	4b04      	ldr	r3, [pc, #16]	; (800d224 <__i2b+0x24>)
 800d214:	4804      	ldr	r0, [pc, #16]	; (800d228 <__i2b+0x28>)
 800d216:	0049      	lsls	r1, r1, #1
 800d218:	f000 fdea 	bl	800ddf0 <__assert_func>
 800d21c:	2301      	movs	r3, #1
 800d21e:	6144      	str	r4, [r0, #20]
 800d220:	6103      	str	r3, [r0, #16]
 800d222:	bd10      	pop	{r4, pc}
 800d224:	0800e414 	.word	0x0800e414
 800d228:	0800e488 	.word	0x0800e488

0800d22c <__multiply>:
 800d22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d22e:	690b      	ldr	r3, [r1, #16]
 800d230:	0014      	movs	r4, r2
 800d232:	6912      	ldr	r2, [r2, #16]
 800d234:	000d      	movs	r5, r1
 800d236:	b089      	sub	sp, #36	; 0x24
 800d238:	4293      	cmp	r3, r2
 800d23a:	da01      	bge.n	800d240 <__multiply+0x14>
 800d23c:	0025      	movs	r5, r4
 800d23e:	000c      	movs	r4, r1
 800d240:	692f      	ldr	r7, [r5, #16]
 800d242:	6926      	ldr	r6, [r4, #16]
 800d244:	6869      	ldr	r1, [r5, #4]
 800d246:	19bb      	adds	r3, r7, r6
 800d248:	9302      	str	r3, [sp, #8]
 800d24a:	68ab      	ldr	r3, [r5, #8]
 800d24c:	19ba      	adds	r2, r7, r6
 800d24e:	4293      	cmp	r3, r2
 800d250:	da00      	bge.n	800d254 <__multiply+0x28>
 800d252:	3101      	adds	r1, #1
 800d254:	f7ff fee0 	bl	800d018 <_Balloc>
 800d258:	9001      	str	r0, [sp, #4]
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d106      	bne.n	800d26c <__multiply+0x40>
 800d25e:	215e      	movs	r1, #94	; 0x5e
 800d260:	0002      	movs	r2, r0
 800d262:	4b48      	ldr	r3, [pc, #288]	; (800d384 <__multiply+0x158>)
 800d264:	4848      	ldr	r0, [pc, #288]	; (800d388 <__multiply+0x15c>)
 800d266:	31ff      	adds	r1, #255	; 0xff
 800d268:	f000 fdc2 	bl	800ddf0 <__assert_func>
 800d26c:	9b01      	ldr	r3, [sp, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	3314      	adds	r3, #20
 800d272:	469c      	mov	ip, r3
 800d274:	19bb      	adds	r3, r7, r6
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4463      	add	r3, ip
 800d27a:	9303      	str	r3, [sp, #12]
 800d27c:	4663      	mov	r3, ip
 800d27e:	9903      	ldr	r1, [sp, #12]
 800d280:	428b      	cmp	r3, r1
 800d282:	d32c      	bcc.n	800d2de <__multiply+0xb2>
 800d284:	002b      	movs	r3, r5
 800d286:	0022      	movs	r2, r4
 800d288:	3314      	adds	r3, #20
 800d28a:	00bf      	lsls	r7, r7, #2
 800d28c:	3214      	adds	r2, #20
 800d28e:	9306      	str	r3, [sp, #24]
 800d290:	00b6      	lsls	r6, r6, #2
 800d292:	19db      	adds	r3, r3, r7
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	1993      	adds	r3, r2, r6
 800d298:	9307      	str	r3, [sp, #28]
 800d29a:	2304      	movs	r3, #4
 800d29c:	9305      	str	r3, [sp, #20]
 800d29e:	002b      	movs	r3, r5
 800d2a0:	9904      	ldr	r1, [sp, #16]
 800d2a2:	3315      	adds	r3, #21
 800d2a4:	9200      	str	r2, [sp, #0]
 800d2a6:	4299      	cmp	r1, r3
 800d2a8:	d305      	bcc.n	800d2b6 <__multiply+0x8a>
 800d2aa:	1b4b      	subs	r3, r1, r5
 800d2ac:	3b15      	subs	r3, #21
 800d2ae:	089b      	lsrs	r3, r3, #2
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	9305      	str	r3, [sp, #20]
 800d2b6:	9b07      	ldr	r3, [sp, #28]
 800d2b8:	9a00      	ldr	r2, [sp, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d311      	bcc.n	800d2e2 <__multiply+0xb6>
 800d2be:	9b02      	ldr	r3, [sp, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	dd06      	ble.n	800d2d2 <__multiply+0xa6>
 800d2c4:	9b03      	ldr	r3, [sp, #12]
 800d2c6:	3b04      	subs	r3, #4
 800d2c8:	9303      	str	r3, [sp, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d053      	beq.n	800d37a <__multiply+0x14e>
 800d2d2:	9b01      	ldr	r3, [sp, #4]
 800d2d4:	9a02      	ldr	r2, [sp, #8]
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	611a      	str	r2, [r3, #16]
 800d2da:	b009      	add	sp, #36	; 0x24
 800d2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2de:	c304      	stmia	r3!, {r2}
 800d2e0:	e7cd      	b.n	800d27e <__multiply+0x52>
 800d2e2:	9b00      	ldr	r3, [sp, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	b298      	uxth	r0, r3
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d01b      	beq.n	800d324 <__multiply+0xf8>
 800d2ec:	4667      	mov	r7, ip
 800d2ee:	2400      	movs	r4, #0
 800d2f0:	9e06      	ldr	r6, [sp, #24]
 800d2f2:	ce02      	ldmia	r6!, {r1}
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	b28b      	uxth	r3, r1
 800d2f8:	4343      	muls	r3, r0
 800d2fa:	b292      	uxth	r2, r2
 800d2fc:	189b      	adds	r3, r3, r2
 800d2fe:	191b      	adds	r3, r3, r4
 800d300:	0c0c      	lsrs	r4, r1, #16
 800d302:	4344      	muls	r4, r0
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	0c11      	lsrs	r1, r2, #16
 800d308:	1861      	adds	r1, r4, r1
 800d30a:	0c1c      	lsrs	r4, r3, #16
 800d30c:	1909      	adds	r1, r1, r4
 800d30e:	0c0c      	lsrs	r4, r1, #16
 800d310:	b29b      	uxth	r3, r3
 800d312:	0409      	lsls	r1, r1, #16
 800d314:	430b      	orrs	r3, r1
 800d316:	c708      	stmia	r7!, {r3}
 800d318:	9b04      	ldr	r3, [sp, #16]
 800d31a:	42b3      	cmp	r3, r6
 800d31c:	d8e9      	bhi.n	800d2f2 <__multiply+0xc6>
 800d31e:	4663      	mov	r3, ip
 800d320:	9a05      	ldr	r2, [sp, #20]
 800d322:	509c      	str	r4, [r3, r2]
 800d324:	9b00      	ldr	r3, [sp, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	0c1e      	lsrs	r6, r3, #16
 800d32a:	d020      	beq.n	800d36e <__multiply+0x142>
 800d32c:	4663      	mov	r3, ip
 800d32e:	002c      	movs	r4, r5
 800d330:	4660      	mov	r0, ip
 800d332:	2700      	movs	r7, #0
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3414      	adds	r4, #20
 800d338:	6822      	ldr	r2, [r4, #0]
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	b291      	uxth	r1, r2
 800d33e:	4371      	muls	r1, r6
 800d340:	6802      	ldr	r2, [r0, #0]
 800d342:	0c12      	lsrs	r2, r2, #16
 800d344:	1889      	adds	r1, r1, r2
 800d346:	19cf      	adds	r7, r1, r7
 800d348:	0439      	lsls	r1, r7, #16
 800d34a:	430b      	orrs	r3, r1
 800d34c:	6003      	str	r3, [r0, #0]
 800d34e:	cc02      	ldmia	r4!, {r1}
 800d350:	6843      	ldr	r3, [r0, #4]
 800d352:	0c09      	lsrs	r1, r1, #16
 800d354:	4371      	muls	r1, r6
 800d356:	b29b      	uxth	r3, r3
 800d358:	0c3f      	lsrs	r7, r7, #16
 800d35a:	18cb      	adds	r3, r1, r3
 800d35c:	9a04      	ldr	r2, [sp, #16]
 800d35e:	19db      	adds	r3, r3, r7
 800d360:	0c1f      	lsrs	r7, r3, #16
 800d362:	3004      	adds	r0, #4
 800d364:	42a2      	cmp	r2, r4
 800d366:	d8e7      	bhi.n	800d338 <__multiply+0x10c>
 800d368:	4662      	mov	r2, ip
 800d36a:	9905      	ldr	r1, [sp, #20]
 800d36c:	5053      	str	r3, [r2, r1]
 800d36e:	9b00      	ldr	r3, [sp, #0]
 800d370:	3304      	adds	r3, #4
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	2304      	movs	r3, #4
 800d376:	449c      	add	ip, r3
 800d378:	e79d      	b.n	800d2b6 <__multiply+0x8a>
 800d37a:	9b02      	ldr	r3, [sp, #8]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	9302      	str	r3, [sp, #8]
 800d380:	e79d      	b.n	800d2be <__multiply+0x92>
 800d382:	46c0      	nop			; (mov r8, r8)
 800d384:	0800e414 	.word	0x0800e414
 800d388:	0800e488 	.word	0x0800e488

0800d38c <__pow5mult>:
 800d38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d38e:	2303      	movs	r3, #3
 800d390:	0015      	movs	r5, r2
 800d392:	0007      	movs	r7, r0
 800d394:	000e      	movs	r6, r1
 800d396:	401a      	ands	r2, r3
 800d398:	421d      	tst	r5, r3
 800d39a:	d008      	beq.n	800d3ae <__pow5mult+0x22>
 800d39c:	4925      	ldr	r1, [pc, #148]	; (800d434 <__pow5mult+0xa8>)
 800d39e:	3a01      	subs	r2, #1
 800d3a0:	0092      	lsls	r2, r2, #2
 800d3a2:	5852      	ldr	r2, [r2, r1]
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	0031      	movs	r1, r6
 800d3a8:	f7ff fe9e 	bl	800d0e8 <__multadd>
 800d3ac:	0006      	movs	r6, r0
 800d3ae:	10ad      	asrs	r5, r5, #2
 800d3b0:	d03d      	beq.n	800d42e <__pow5mult+0xa2>
 800d3b2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d3b4:	2c00      	cmp	r4, #0
 800d3b6:	d10f      	bne.n	800d3d8 <__pow5mult+0x4c>
 800d3b8:	2010      	movs	r0, #16
 800d3ba:	f7fd fe25 	bl	800b008 <malloc>
 800d3be:	1e02      	subs	r2, r0, #0
 800d3c0:	6278      	str	r0, [r7, #36]	; 0x24
 800d3c2:	d105      	bne.n	800d3d0 <__pow5mult+0x44>
 800d3c4:	21d7      	movs	r1, #215	; 0xd7
 800d3c6:	4b1c      	ldr	r3, [pc, #112]	; (800d438 <__pow5mult+0xac>)
 800d3c8:	481c      	ldr	r0, [pc, #112]	; (800d43c <__pow5mult+0xb0>)
 800d3ca:	0049      	lsls	r1, r1, #1
 800d3cc:	f000 fd10 	bl	800ddf0 <__assert_func>
 800d3d0:	6044      	str	r4, [r0, #4]
 800d3d2:	6084      	str	r4, [r0, #8]
 800d3d4:	6004      	str	r4, [r0, #0]
 800d3d6:	60c4      	str	r4, [r0, #12]
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	689c      	ldr	r4, [r3, #8]
 800d3dc:	9301      	str	r3, [sp, #4]
 800d3de:	2c00      	cmp	r4, #0
 800d3e0:	d108      	bne.n	800d3f4 <__pow5mult+0x68>
 800d3e2:	0038      	movs	r0, r7
 800d3e4:	4916      	ldr	r1, [pc, #88]	; (800d440 <__pow5mult+0xb4>)
 800d3e6:	f7ff ff0b 	bl	800d200 <__i2b>
 800d3ea:	9b01      	ldr	r3, [sp, #4]
 800d3ec:	0004      	movs	r4, r0
 800d3ee:	6098      	str	r0, [r3, #8]
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	6003      	str	r3, [r0, #0]
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	421d      	tst	r5, r3
 800d3f8:	d00a      	beq.n	800d410 <__pow5mult+0x84>
 800d3fa:	0031      	movs	r1, r6
 800d3fc:	0022      	movs	r2, r4
 800d3fe:	0038      	movs	r0, r7
 800d400:	f7ff ff14 	bl	800d22c <__multiply>
 800d404:	0031      	movs	r1, r6
 800d406:	9001      	str	r0, [sp, #4]
 800d408:	0038      	movs	r0, r7
 800d40a:	f7ff fe49 	bl	800d0a0 <_Bfree>
 800d40e:	9e01      	ldr	r6, [sp, #4]
 800d410:	106d      	asrs	r5, r5, #1
 800d412:	d00c      	beq.n	800d42e <__pow5mult+0xa2>
 800d414:	6820      	ldr	r0, [r4, #0]
 800d416:	2800      	cmp	r0, #0
 800d418:	d107      	bne.n	800d42a <__pow5mult+0x9e>
 800d41a:	0022      	movs	r2, r4
 800d41c:	0021      	movs	r1, r4
 800d41e:	0038      	movs	r0, r7
 800d420:	f7ff ff04 	bl	800d22c <__multiply>
 800d424:	2300      	movs	r3, #0
 800d426:	6020      	str	r0, [r4, #0]
 800d428:	6003      	str	r3, [r0, #0]
 800d42a:	0004      	movs	r4, r0
 800d42c:	e7e2      	b.n	800d3f4 <__pow5mult+0x68>
 800d42e:	0030      	movs	r0, r6
 800d430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d432:	46c0      	nop			; (mov r8, r8)
 800d434:	0800e5d8 	.word	0x0800e5d8
 800d438:	0800e3a2 	.word	0x0800e3a2
 800d43c:	0800e488 	.word	0x0800e488
 800d440:	00000271 	.word	0x00000271

0800d444 <__lshift>:
 800d444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d446:	000c      	movs	r4, r1
 800d448:	0017      	movs	r7, r2
 800d44a:	6923      	ldr	r3, [r4, #16]
 800d44c:	1155      	asrs	r5, r2, #5
 800d44e:	b087      	sub	sp, #28
 800d450:	18eb      	adds	r3, r5, r3
 800d452:	9302      	str	r3, [sp, #8]
 800d454:	3301      	adds	r3, #1
 800d456:	9301      	str	r3, [sp, #4]
 800d458:	6849      	ldr	r1, [r1, #4]
 800d45a:	68a3      	ldr	r3, [r4, #8]
 800d45c:	9004      	str	r0, [sp, #16]
 800d45e:	9a01      	ldr	r2, [sp, #4]
 800d460:	4293      	cmp	r3, r2
 800d462:	db10      	blt.n	800d486 <__lshift+0x42>
 800d464:	9804      	ldr	r0, [sp, #16]
 800d466:	f7ff fdd7 	bl	800d018 <_Balloc>
 800d46a:	2300      	movs	r3, #0
 800d46c:	0002      	movs	r2, r0
 800d46e:	0006      	movs	r6, r0
 800d470:	0019      	movs	r1, r3
 800d472:	3214      	adds	r2, #20
 800d474:	4298      	cmp	r0, r3
 800d476:	d10c      	bne.n	800d492 <__lshift+0x4e>
 800d478:	21da      	movs	r1, #218	; 0xda
 800d47a:	0002      	movs	r2, r0
 800d47c:	4b26      	ldr	r3, [pc, #152]	; (800d518 <__lshift+0xd4>)
 800d47e:	4827      	ldr	r0, [pc, #156]	; (800d51c <__lshift+0xd8>)
 800d480:	31ff      	adds	r1, #255	; 0xff
 800d482:	f000 fcb5 	bl	800ddf0 <__assert_func>
 800d486:	3101      	adds	r1, #1
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	e7e8      	b.n	800d45e <__lshift+0x1a>
 800d48c:	0098      	lsls	r0, r3, #2
 800d48e:	5011      	str	r1, [r2, r0]
 800d490:	3301      	adds	r3, #1
 800d492:	42ab      	cmp	r3, r5
 800d494:	dbfa      	blt.n	800d48c <__lshift+0x48>
 800d496:	43eb      	mvns	r3, r5
 800d498:	17db      	asrs	r3, r3, #31
 800d49a:	401d      	ands	r5, r3
 800d49c:	211f      	movs	r1, #31
 800d49e:	0023      	movs	r3, r4
 800d4a0:	0038      	movs	r0, r7
 800d4a2:	00ad      	lsls	r5, r5, #2
 800d4a4:	1955      	adds	r5, r2, r5
 800d4a6:	6922      	ldr	r2, [r4, #16]
 800d4a8:	3314      	adds	r3, #20
 800d4aa:	0092      	lsls	r2, r2, #2
 800d4ac:	4008      	ands	r0, r1
 800d4ae:	4684      	mov	ip, r0
 800d4b0:	189a      	adds	r2, r3, r2
 800d4b2:	420f      	tst	r7, r1
 800d4b4:	d02a      	beq.n	800d50c <__lshift+0xc8>
 800d4b6:	3101      	adds	r1, #1
 800d4b8:	1a09      	subs	r1, r1, r0
 800d4ba:	9105      	str	r1, [sp, #20]
 800d4bc:	2100      	movs	r1, #0
 800d4be:	9503      	str	r5, [sp, #12]
 800d4c0:	4667      	mov	r7, ip
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	40b8      	lsls	r0, r7
 800d4c6:	4301      	orrs	r1, r0
 800d4c8:	9803      	ldr	r0, [sp, #12]
 800d4ca:	c002      	stmia	r0!, {r1}
 800d4cc:	cb02      	ldmia	r3!, {r1}
 800d4ce:	9003      	str	r0, [sp, #12]
 800d4d0:	9805      	ldr	r0, [sp, #20]
 800d4d2:	40c1      	lsrs	r1, r0
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d8f3      	bhi.n	800d4c0 <__lshift+0x7c>
 800d4d8:	0020      	movs	r0, r4
 800d4da:	3015      	adds	r0, #21
 800d4dc:	2304      	movs	r3, #4
 800d4de:	4282      	cmp	r2, r0
 800d4e0:	d304      	bcc.n	800d4ec <__lshift+0xa8>
 800d4e2:	1b13      	subs	r3, r2, r4
 800d4e4:	3b15      	subs	r3, #21
 800d4e6:	089b      	lsrs	r3, r3, #2
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	50e9      	str	r1, [r5, r3]
 800d4ee:	2900      	cmp	r1, #0
 800d4f0:	d002      	beq.n	800d4f8 <__lshift+0xb4>
 800d4f2:	9b02      	ldr	r3, [sp, #8]
 800d4f4:	3302      	adds	r3, #2
 800d4f6:	9301      	str	r3, [sp, #4]
 800d4f8:	9b01      	ldr	r3, [sp, #4]
 800d4fa:	9804      	ldr	r0, [sp, #16]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	0021      	movs	r1, r4
 800d500:	6133      	str	r3, [r6, #16]
 800d502:	f7ff fdcd 	bl	800d0a0 <_Bfree>
 800d506:	0030      	movs	r0, r6
 800d508:	b007      	add	sp, #28
 800d50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d50c:	cb02      	ldmia	r3!, {r1}
 800d50e:	c502      	stmia	r5!, {r1}
 800d510:	429a      	cmp	r2, r3
 800d512:	d8fb      	bhi.n	800d50c <__lshift+0xc8>
 800d514:	e7f0      	b.n	800d4f8 <__lshift+0xb4>
 800d516:	46c0      	nop			; (mov r8, r8)
 800d518:	0800e414 	.word	0x0800e414
 800d51c:	0800e488 	.word	0x0800e488

0800d520 <__mcmp>:
 800d520:	6902      	ldr	r2, [r0, #16]
 800d522:	690b      	ldr	r3, [r1, #16]
 800d524:	b530      	push	{r4, r5, lr}
 800d526:	0004      	movs	r4, r0
 800d528:	1ad0      	subs	r0, r2, r3
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d10d      	bne.n	800d54a <__mcmp+0x2a>
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	3414      	adds	r4, #20
 800d532:	3114      	adds	r1, #20
 800d534:	18e2      	adds	r2, r4, r3
 800d536:	18c9      	adds	r1, r1, r3
 800d538:	3a04      	subs	r2, #4
 800d53a:	3904      	subs	r1, #4
 800d53c:	6815      	ldr	r5, [r2, #0]
 800d53e:	680b      	ldr	r3, [r1, #0]
 800d540:	429d      	cmp	r5, r3
 800d542:	d003      	beq.n	800d54c <__mcmp+0x2c>
 800d544:	2001      	movs	r0, #1
 800d546:	429d      	cmp	r5, r3
 800d548:	d303      	bcc.n	800d552 <__mcmp+0x32>
 800d54a:	bd30      	pop	{r4, r5, pc}
 800d54c:	4294      	cmp	r4, r2
 800d54e:	d3f3      	bcc.n	800d538 <__mcmp+0x18>
 800d550:	e7fb      	b.n	800d54a <__mcmp+0x2a>
 800d552:	4240      	negs	r0, r0
 800d554:	e7f9      	b.n	800d54a <__mcmp+0x2a>
	...

0800d558 <__mdiff>:
 800d558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d55a:	000e      	movs	r6, r1
 800d55c:	0007      	movs	r7, r0
 800d55e:	0011      	movs	r1, r2
 800d560:	0030      	movs	r0, r6
 800d562:	b087      	sub	sp, #28
 800d564:	0014      	movs	r4, r2
 800d566:	f7ff ffdb 	bl	800d520 <__mcmp>
 800d56a:	1e05      	subs	r5, r0, #0
 800d56c:	d110      	bne.n	800d590 <__mdiff+0x38>
 800d56e:	0001      	movs	r1, r0
 800d570:	0038      	movs	r0, r7
 800d572:	f7ff fd51 	bl	800d018 <_Balloc>
 800d576:	1e02      	subs	r2, r0, #0
 800d578:	d104      	bne.n	800d584 <__mdiff+0x2c>
 800d57a:	4b40      	ldr	r3, [pc, #256]	; (800d67c <__mdiff+0x124>)
 800d57c:	4940      	ldr	r1, [pc, #256]	; (800d680 <__mdiff+0x128>)
 800d57e:	4841      	ldr	r0, [pc, #260]	; (800d684 <__mdiff+0x12c>)
 800d580:	f000 fc36 	bl	800ddf0 <__assert_func>
 800d584:	2301      	movs	r3, #1
 800d586:	6145      	str	r5, [r0, #20]
 800d588:	6103      	str	r3, [r0, #16]
 800d58a:	0010      	movs	r0, r2
 800d58c:	b007      	add	sp, #28
 800d58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d590:	2301      	movs	r3, #1
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	2800      	cmp	r0, #0
 800d596:	db04      	blt.n	800d5a2 <__mdiff+0x4a>
 800d598:	0023      	movs	r3, r4
 800d59a:	0034      	movs	r4, r6
 800d59c:	001e      	movs	r6, r3
 800d59e:	2300      	movs	r3, #0
 800d5a0:	9301      	str	r3, [sp, #4]
 800d5a2:	0038      	movs	r0, r7
 800d5a4:	6861      	ldr	r1, [r4, #4]
 800d5a6:	f7ff fd37 	bl	800d018 <_Balloc>
 800d5aa:	1e02      	subs	r2, r0, #0
 800d5ac:	d103      	bne.n	800d5b6 <__mdiff+0x5e>
 800d5ae:	2190      	movs	r1, #144	; 0x90
 800d5b0:	4b32      	ldr	r3, [pc, #200]	; (800d67c <__mdiff+0x124>)
 800d5b2:	0089      	lsls	r1, r1, #2
 800d5b4:	e7e3      	b.n	800d57e <__mdiff+0x26>
 800d5b6:	9b01      	ldr	r3, [sp, #4]
 800d5b8:	2700      	movs	r7, #0
 800d5ba:	60c3      	str	r3, [r0, #12]
 800d5bc:	6920      	ldr	r0, [r4, #16]
 800d5be:	3414      	adds	r4, #20
 800d5c0:	9401      	str	r4, [sp, #4]
 800d5c2:	9b01      	ldr	r3, [sp, #4]
 800d5c4:	0084      	lsls	r4, r0, #2
 800d5c6:	191b      	adds	r3, r3, r4
 800d5c8:	0034      	movs	r4, r6
 800d5ca:	9302      	str	r3, [sp, #8]
 800d5cc:	6933      	ldr	r3, [r6, #16]
 800d5ce:	3414      	adds	r4, #20
 800d5d0:	0099      	lsls	r1, r3, #2
 800d5d2:	1863      	adds	r3, r4, r1
 800d5d4:	9303      	str	r3, [sp, #12]
 800d5d6:	0013      	movs	r3, r2
 800d5d8:	3314      	adds	r3, #20
 800d5da:	469c      	mov	ip, r3
 800d5dc:	9305      	str	r3, [sp, #20]
 800d5de:	9b01      	ldr	r3, [sp, #4]
 800d5e0:	9304      	str	r3, [sp, #16]
 800d5e2:	9b04      	ldr	r3, [sp, #16]
 800d5e4:	cc02      	ldmia	r4!, {r1}
 800d5e6:	cb20      	ldmia	r3!, {r5}
 800d5e8:	9304      	str	r3, [sp, #16]
 800d5ea:	b2ab      	uxth	r3, r5
 800d5ec:	19df      	adds	r7, r3, r7
 800d5ee:	b28b      	uxth	r3, r1
 800d5f0:	1afb      	subs	r3, r7, r3
 800d5f2:	0c09      	lsrs	r1, r1, #16
 800d5f4:	0c2d      	lsrs	r5, r5, #16
 800d5f6:	1a6d      	subs	r5, r5, r1
 800d5f8:	1419      	asrs	r1, r3, #16
 800d5fa:	186d      	adds	r5, r5, r1
 800d5fc:	4661      	mov	r1, ip
 800d5fe:	142f      	asrs	r7, r5, #16
 800d600:	b29b      	uxth	r3, r3
 800d602:	042d      	lsls	r5, r5, #16
 800d604:	432b      	orrs	r3, r5
 800d606:	c108      	stmia	r1!, {r3}
 800d608:	9b03      	ldr	r3, [sp, #12]
 800d60a:	468c      	mov	ip, r1
 800d60c:	42a3      	cmp	r3, r4
 800d60e:	d8e8      	bhi.n	800d5e2 <__mdiff+0x8a>
 800d610:	0031      	movs	r1, r6
 800d612:	9c03      	ldr	r4, [sp, #12]
 800d614:	3115      	adds	r1, #21
 800d616:	2304      	movs	r3, #4
 800d618:	428c      	cmp	r4, r1
 800d61a:	d304      	bcc.n	800d626 <__mdiff+0xce>
 800d61c:	1ba3      	subs	r3, r4, r6
 800d61e:	3b15      	subs	r3, #21
 800d620:	089b      	lsrs	r3, r3, #2
 800d622:	3301      	adds	r3, #1
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	9901      	ldr	r1, [sp, #4]
 800d628:	18cc      	adds	r4, r1, r3
 800d62a:	9905      	ldr	r1, [sp, #20]
 800d62c:	0026      	movs	r6, r4
 800d62e:	18cb      	adds	r3, r1, r3
 800d630:	469c      	mov	ip, r3
 800d632:	9902      	ldr	r1, [sp, #8]
 800d634:	428e      	cmp	r6, r1
 800d636:	d310      	bcc.n	800d65a <__mdiff+0x102>
 800d638:	9e02      	ldr	r6, [sp, #8]
 800d63a:	1ee1      	subs	r1, r4, #3
 800d63c:	2500      	movs	r5, #0
 800d63e:	428e      	cmp	r6, r1
 800d640:	d304      	bcc.n	800d64c <__mdiff+0xf4>
 800d642:	0031      	movs	r1, r6
 800d644:	3103      	adds	r1, #3
 800d646:	1b0c      	subs	r4, r1, r4
 800d648:	08a4      	lsrs	r4, r4, #2
 800d64a:	00a5      	lsls	r5, r4, #2
 800d64c:	195b      	adds	r3, r3, r5
 800d64e:	3b04      	subs	r3, #4
 800d650:	6819      	ldr	r1, [r3, #0]
 800d652:	2900      	cmp	r1, #0
 800d654:	d00f      	beq.n	800d676 <__mdiff+0x11e>
 800d656:	6110      	str	r0, [r2, #16]
 800d658:	e797      	b.n	800d58a <__mdiff+0x32>
 800d65a:	ce02      	ldmia	r6!, {r1}
 800d65c:	b28d      	uxth	r5, r1
 800d65e:	19ed      	adds	r5, r5, r7
 800d660:	0c0f      	lsrs	r7, r1, #16
 800d662:	1429      	asrs	r1, r5, #16
 800d664:	1879      	adds	r1, r7, r1
 800d666:	140f      	asrs	r7, r1, #16
 800d668:	b2ad      	uxth	r5, r5
 800d66a:	0409      	lsls	r1, r1, #16
 800d66c:	430d      	orrs	r5, r1
 800d66e:	4661      	mov	r1, ip
 800d670:	c120      	stmia	r1!, {r5}
 800d672:	468c      	mov	ip, r1
 800d674:	e7dd      	b.n	800d632 <__mdiff+0xda>
 800d676:	3801      	subs	r0, #1
 800d678:	e7e9      	b.n	800d64e <__mdiff+0xf6>
 800d67a:	46c0      	nop			; (mov r8, r8)
 800d67c:	0800e414 	.word	0x0800e414
 800d680:	00000232 	.word	0x00000232
 800d684:	0800e488 	.word	0x0800e488

0800d688 <__d2b>:
 800d688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d68a:	2101      	movs	r1, #1
 800d68c:	0014      	movs	r4, r2
 800d68e:	001e      	movs	r6, r3
 800d690:	9f08      	ldr	r7, [sp, #32]
 800d692:	f7ff fcc1 	bl	800d018 <_Balloc>
 800d696:	1e05      	subs	r5, r0, #0
 800d698:	d105      	bne.n	800d6a6 <__d2b+0x1e>
 800d69a:	0002      	movs	r2, r0
 800d69c:	4b26      	ldr	r3, [pc, #152]	; (800d738 <__d2b+0xb0>)
 800d69e:	4927      	ldr	r1, [pc, #156]	; (800d73c <__d2b+0xb4>)
 800d6a0:	4827      	ldr	r0, [pc, #156]	; (800d740 <__d2b+0xb8>)
 800d6a2:	f000 fba5 	bl	800ddf0 <__assert_func>
 800d6a6:	0333      	lsls	r3, r6, #12
 800d6a8:	0076      	lsls	r6, r6, #1
 800d6aa:	0b1b      	lsrs	r3, r3, #12
 800d6ac:	0d76      	lsrs	r6, r6, #21
 800d6ae:	d124      	bne.n	800d6fa <__d2b+0x72>
 800d6b0:	9301      	str	r3, [sp, #4]
 800d6b2:	2c00      	cmp	r4, #0
 800d6b4:	d027      	beq.n	800d706 <__d2b+0x7e>
 800d6b6:	4668      	mov	r0, sp
 800d6b8:	9400      	str	r4, [sp, #0]
 800d6ba:	f7ff fd73 	bl	800d1a4 <__lo0bits>
 800d6be:	9c00      	ldr	r4, [sp, #0]
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d01e      	beq.n	800d702 <__d2b+0x7a>
 800d6c4:	9b01      	ldr	r3, [sp, #4]
 800d6c6:	2120      	movs	r1, #32
 800d6c8:	001a      	movs	r2, r3
 800d6ca:	1a09      	subs	r1, r1, r0
 800d6cc:	408a      	lsls	r2, r1
 800d6ce:	40c3      	lsrs	r3, r0
 800d6d0:	4322      	orrs	r2, r4
 800d6d2:	616a      	str	r2, [r5, #20]
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	9c01      	ldr	r4, [sp, #4]
 800d6d8:	61ac      	str	r4, [r5, #24]
 800d6da:	1e63      	subs	r3, r4, #1
 800d6dc:	419c      	sbcs	r4, r3
 800d6de:	3401      	adds	r4, #1
 800d6e0:	612c      	str	r4, [r5, #16]
 800d6e2:	2e00      	cmp	r6, #0
 800d6e4:	d018      	beq.n	800d718 <__d2b+0x90>
 800d6e6:	4b17      	ldr	r3, [pc, #92]	; (800d744 <__d2b+0xbc>)
 800d6e8:	18f6      	adds	r6, r6, r3
 800d6ea:	2335      	movs	r3, #53	; 0x35
 800d6ec:	1836      	adds	r6, r6, r0
 800d6ee:	1a18      	subs	r0, r3, r0
 800d6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f2:	603e      	str	r6, [r7, #0]
 800d6f4:	6018      	str	r0, [r3, #0]
 800d6f6:	0028      	movs	r0, r5
 800d6f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6fa:	2280      	movs	r2, #128	; 0x80
 800d6fc:	0352      	lsls	r2, r2, #13
 800d6fe:	4313      	orrs	r3, r2
 800d700:	e7d6      	b.n	800d6b0 <__d2b+0x28>
 800d702:	616c      	str	r4, [r5, #20]
 800d704:	e7e7      	b.n	800d6d6 <__d2b+0x4e>
 800d706:	a801      	add	r0, sp, #4
 800d708:	f7ff fd4c 	bl	800d1a4 <__lo0bits>
 800d70c:	2401      	movs	r4, #1
 800d70e:	9b01      	ldr	r3, [sp, #4]
 800d710:	612c      	str	r4, [r5, #16]
 800d712:	616b      	str	r3, [r5, #20]
 800d714:	3020      	adds	r0, #32
 800d716:	e7e4      	b.n	800d6e2 <__d2b+0x5a>
 800d718:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <__d2b+0xc0>)
 800d71a:	18c0      	adds	r0, r0, r3
 800d71c:	4b0b      	ldr	r3, [pc, #44]	; (800d74c <__d2b+0xc4>)
 800d71e:	6038      	str	r0, [r7, #0]
 800d720:	18e3      	adds	r3, r4, r3
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	18eb      	adds	r3, r5, r3
 800d726:	6958      	ldr	r0, [r3, #20]
 800d728:	f7ff fd22 	bl	800d170 <__hi0bits>
 800d72c:	0164      	lsls	r4, r4, #5
 800d72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d730:	1a24      	subs	r4, r4, r0
 800d732:	601c      	str	r4, [r3, #0]
 800d734:	e7df      	b.n	800d6f6 <__d2b+0x6e>
 800d736:	46c0      	nop			; (mov r8, r8)
 800d738:	0800e414 	.word	0x0800e414
 800d73c:	0000030a 	.word	0x0000030a
 800d740:	0800e488 	.word	0x0800e488
 800d744:	fffffbcd 	.word	0xfffffbcd
 800d748:	fffffbce 	.word	0xfffffbce
 800d74c:	3fffffff 	.word	0x3fffffff

0800d750 <_calloc_r>:
 800d750:	b570      	push	{r4, r5, r6, lr}
 800d752:	0c13      	lsrs	r3, r2, #16
 800d754:	0c0d      	lsrs	r5, r1, #16
 800d756:	d11e      	bne.n	800d796 <_calloc_r+0x46>
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10c      	bne.n	800d776 <_calloc_r+0x26>
 800d75c:	b289      	uxth	r1, r1
 800d75e:	b294      	uxth	r4, r2
 800d760:	434c      	muls	r4, r1
 800d762:	0021      	movs	r1, r4
 800d764:	f7fd fcce 	bl	800b104 <_malloc_r>
 800d768:	1e05      	subs	r5, r0, #0
 800d76a:	d01b      	beq.n	800d7a4 <_calloc_r+0x54>
 800d76c:	0022      	movs	r2, r4
 800d76e:	2100      	movs	r1, #0
 800d770:	f7fd fc54 	bl	800b01c <memset>
 800d774:	e016      	b.n	800d7a4 <_calloc_r+0x54>
 800d776:	1c1d      	adds	r5, r3, #0
 800d778:	1c0b      	adds	r3, r1, #0
 800d77a:	b292      	uxth	r2, r2
 800d77c:	b289      	uxth	r1, r1
 800d77e:	b29c      	uxth	r4, r3
 800d780:	4351      	muls	r1, r2
 800d782:	b2ab      	uxth	r3, r5
 800d784:	4363      	muls	r3, r4
 800d786:	0c0c      	lsrs	r4, r1, #16
 800d788:	191c      	adds	r4, r3, r4
 800d78a:	0c22      	lsrs	r2, r4, #16
 800d78c:	d107      	bne.n	800d79e <_calloc_r+0x4e>
 800d78e:	0424      	lsls	r4, r4, #16
 800d790:	b289      	uxth	r1, r1
 800d792:	430c      	orrs	r4, r1
 800d794:	e7e5      	b.n	800d762 <_calloc_r+0x12>
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <_calloc_r+0x4e>
 800d79a:	1c13      	adds	r3, r2, #0
 800d79c:	e7ed      	b.n	800d77a <_calloc_r+0x2a>
 800d79e:	230c      	movs	r3, #12
 800d7a0:	2500      	movs	r5, #0
 800d7a2:	6003      	str	r3, [r0, #0]
 800d7a4:	0028      	movs	r0, r5
 800d7a6:	bd70      	pop	{r4, r5, r6, pc}

0800d7a8 <__ssputs_r>:
 800d7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7aa:	688e      	ldr	r6, [r1, #8]
 800d7ac:	b085      	sub	sp, #20
 800d7ae:	0007      	movs	r7, r0
 800d7b0:	000c      	movs	r4, r1
 800d7b2:	9203      	str	r2, [sp, #12]
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	429e      	cmp	r6, r3
 800d7b8:	d83c      	bhi.n	800d834 <__ssputs_r+0x8c>
 800d7ba:	2390      	movs	r3, #144	; 0x90
 800d7bc:	898a      	ldrh	r2, [r1, #12]
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	421a      	tst	r2, r3
 800d7c2:	d034      	beq.n	800d82e <__ssputs_r+0x86>
 800d7c4:	6909      	ldr	r1, [r1, #16]
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	6960      	ldr	r0, [r4, #20]
 800d7ca:	1a5b      	subs	r3, r3, r1
 800d7cc:	9302      	str	r3, [sp, #8]
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	4343      	muls	r3, r0
 800d7d2:	0fdd      	lsrs	r5, r3, #31
 800d7d4:	18ed      	adds	r5, r5, r3
 800d7d6:	9b01      	ldr	r3, [sp, #4]
 800d7d8:	9802      	ldr	r0, [sp, #8]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	181b      	adds	r3, r3, r0
 800d7de:	106d      	asrs	r5, r5, #1
 800d7e0:	42ab      	cmp	r3, r5
 800d7e2:	d900      	bls.n	800d7e6 <__ssputs_r+0x3e>
 800d7e4:	001d      	movs	r5, r3
 800d7e6:	0553      	lsls	r3, r2, #21
 800d7e8:	d532      	bpl.n	800d850 <__ssputs_r+0xa8>
 800d7ea:	0029      	movs	r1, r5
 800d7ec:	0038      	movs	r0, r7
 800d7ee:	f7fd fc89 	bl	800b104 <_malloc_r>
 800d7f2:	1e06      	subs	r6, r0, #0
 800d7f4:	d109      	bne.n	800d80a <__ssputs_r+0x62>
 800d7f6:	230c      	movs	r3, #12
 800d7f8:	603b      	str	r3, [r7, #0]
 800d7fa:	2340      	movs	r3, #64	; 0x40
 800d7fc:	2001      	movs	r0, #1
 800d7fe:	89a2      	ldrh	r2, [r4, #12]
 800d800:	4240      	negs	r0, r0
 800d802:	4313      	orrs	r3, r2
 800d804:	81a3      	strh	r3, [r4, #12]
 800d806:	b005      	add	sp, #20
 800d808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d80a:	9a02      	ldr	r2, [sp, #8]
 800d80c:	6921      	ldr	r1, [r4, #16]
 800d80e:	f7ff fbea 	bl	800cfe6 <memcpy>
 800d812:	89a3      	ldrh	r3, [r4, #12]
 800d814:	4a14      	ldr	r2, [pc, #80]	; (800d868 <__ssputs_r+0xc0>)
 800d816:	401a      	ands	r2, r3
 800d818:	2380      	movs	r3, #128	; 0x80
 800d81a:	4313      	orrs	r3, r2
 800d81c:	81a3      	strh	r3, [r4, #12]
 800d81e:	9b02      	ldr	r3, [sp, #8]
 800d820:	6126      	str	r6, [r4, #16]
 800d822:	18f6      	adds	r6, r6, r3
 800d824:	6026      	str	r6, [r4, #0]
 800d826:	6165      	str	r5, [r4, #20]
 800d828:	9e01      	ldr	r6, [sp, #4]
 800d82a:	1aed      	subs	r5, r5, r3
 800d82c:	60a5      	str	r5, [r4, #8]
 800d82e:	9b01      	ldr	r3, [sp, #4]
 800d830:	429e      	cmp	r6, r3
 800d832:	d900      	bls.n	800d836 <__ssputs_r+0x8e>
 800d834:	9e01      	ldr	r6, [sp, #4]
 800d836:	0032      	movs	r2, r6
 800d838:	9903      	ldr	r1, [sp, #12]
 800d83a:	6820      	ldr	r0, [r4, #0]
 800d83c:	f000 fb62 	bl	800df04 <memmove>
 800d840:	68a3      	ldr	r3, [r4, #8]
 800d842:	2000      	movs	r0, #0
 800d844:	1b9b      	subs	r3, r3, r6
 800d846:	60a3      	str	r3, [r4, #8]
 800d848:	6823      	ldr	r3, [r4, #0]
 800d84a:	199e      	adds	r6, r3, r6
 800d84c:	6026      	str	r6, [r4, #0]
 800d84e:	e7da      	b.n	800d806 <__ssputs_r+0x5e>
 800d850:	002a      	movs	r2, r5
 800d852:	0038      	movs	r0, r7
 800d854:	f000 fb69 	bl	800df2a <_realloc_r>
 800d858:	1e06      	subs	r6, r0, #0
 800d85a:	d1e0      	bne.n	800d81e <__ssputs_r+0x76>
 800d85c:	0038      	movs	r0, r7
 800d85e:	6921      	ldr	r1, [r4, #16]
 800d860:	f7fd fbe4 	bl	800b02c <_free_r>
 800d864:	e7c7      	b.n	800d7f6 <__ssputs_r+0x4e>
 800d866:	46c0      	nop			; (mov r8, r8)
 800d868:	fffffb7f 	.word	0xfffffb7f

0800d86c <_svfiprintf_r>:
 800d86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d86e:	b0a1      	sub	sp, #132	; 0x84
 800d870:	9003      	str	r0, [sp, #12]
 800d872:	001d      	movs	r5, r3
 800d874:	898b      	ldrh	r3, [r1, #12]
 800d876:	000f      	movs	r7, r1
 800d878:	0016      	movs	r6, r2
 800d87a:	061b      	lsls	r3, r3, #24
 800d87c:	d511      	bpl.n	800d8a2 <_svfiprintf_r+0x36>
 800d87e:	690b      	ldr	r3, [r1, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10e      	bne.n	800d8a2 <_svfiprintf_r+0x36>
 800d884:	2140      	movs	r1, #64	; 0x40
 800d886:	f7fd fc3d 	bl	800b104 <_malloc_r>
 800d88a:	6038      	str	r0, [r7, #0]
 800d88c:	6138      	str	r0, [r7, #16]
 800d88e:	2800      	cmp	r0, #0
 800d890:	d105      	bne.n	800d89e <_svfiprintf_r+0x32>
 800d892:	230c      	movs	r3, #12
 800d894:	9a03      	ldr	r2, [sp, #12]
 800d896:	3801      	subs	r0, #1
 800d898:	6013      	str	r3, [r2, #0]
 800d89a:	b021      	add	sp, #132	; 0x84
 800d89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d89e:	2340      	movs	r3, #64	; 0x40
 800d8a0:	617b      	str	r3, [r7, #20]
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	ac08      	add	r4, sp, #32
 800d8a6:	6163      	str	r3, [r4, #20]
 800d8a8:	3320      	adds	r3, #32
 800d8aa:	7663      	strb	r3, [r4, #25]
 800d8ac:	3310      	adds	r3, #16
 800d8ae:	76a3      	strb	r3, [r4, #26]
 800d8b0:	9507      	str	r5, [sp, #28]
 800d8b2:	0035      	movs	r5, r6
 800d8b4:	782b      	ldrb	r3, [r5, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <_svfiprintf_r+0x52>
 800d8ba:	2b25      	cmp	r3, #37	; 0x25
 800d8bc:	d147      	bne.n	800d94e <_svfiprintf_r+0xe2>
 800d8be:	1bab      	subs	r3, r5, r6
 800d8c0:	9305      	str	r3, [sp, #20]
 800d8c2:	42b5      	cmp	r5, r6
 800d8c4:	d00c      	beq.n	800d8e0 <_svfiprintf_r+0x74>
 800d8c6:	0032      	movs	r2, r6
 800d8c8:	0039      	movs	r1, r7
 800d8ca:	9803      	ldr	r0, [sp, #12]
 800d8cc:	f7ff ff6c 	bl	800d7a8 <__ssputs_r>
 800d8d0:	1c43      	adds	r3, r0, #1
 800d8d2:	d100      	bne.n	800d8d6 <_svfiprintf_r+0x6a>
 800d8d4:	e0ae      	b.n	800da34 <_svfiprintf_r+0x1c8>
 800d8d6:	6962      	ldr	r2, [r4, #20]
 800d8d8:	9b05      	ldr	r3, [sp, #20]
 800d8da:	4694      	mov	ip, r2
 800d8dc:	4463      	add	r3, ip
 800d8de:	6163      	str	r3, [r4, #20]
 800d8e0:	782b      	ldrb	r3, [r5, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d100      	bne.n	800d8e8 <_svfiprintf_r+0x7c>
 800d8e6:	e0a5      	b.n	800da34 <_svfiprintf_r+0x1c8>
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	4252      	negs	r2, r2
 800d8ee:	6062      	str	r2, [r4, #4]
 800d8f0:	a904      	add	r1, sp, #16
 800d8f2:	3254      	adds	r2, #84	; 0x54
 800d8f4:	1852      	adds	r2, r2, r1
 800d8f6:	1c6e      	adds	r6, r5, #1
 800d8f8:	6023      	str	r3, [r4, #0]
 800d8fa:	60e3      	str	r3, [r4, #12]
 800d8fc:	60a3      	str	r3, [r4, #8]
 800d8fe:	7013      	strb	r3, [r2, #0]
 800d900:	65a3      	str	r3, [r4, #88]	; 0x58
 800d902:	2205      	movs	r2, #5
 800d904:	7831      	ldrb	r1, [r6, #0]
 800d906:	4854      	ldr	r0, [pc, #336]	; (800da58 <_svfiprintf_r+0x1ec>)
 800d908:	f7ff fb62 	bl	800cfd0 <memchr>
 800d90c:	1c75      	adds	r5, r6, #1
 800d90e:	2800      	cmp	r0, #0
 800d910:	d11f      	bne.n	800d952 <_svfiprintf_r+0xe6>
 800d912:	6822      	ldr	r2, [r4, #0]
 800d914:	06d3      	lsls	r3, r2, #27
 800d916:	d504      	bpl.n	800d922 <_svfiprintf_r+0xb6>
 800d918:	2353      	movs	r3, #83	; 0x53
 800d91a:	a904      	add	r1, sp, #16
 800d91c:	185b      	adds	r3, r3, r1
 800d91e:	2120      	movs	r1, #32
 800d920:	7019      	strb	r1, [r3, #0]
 800d922:	0713      	lsls	r3, r2, #28
 800d924:	d504      	bpl.n	800d930 <_svfiprintf_r+0xc4>
 800d926:	2353      	movs	r3, #83	; 0x53
 800d928:	a904      	add	r1, sp, #16
 800d92a:	185b      	adds	r3, r3, r1
 800d92c:	212b      	movs	r1, #43	; 0x2b
 800d92e:	7019      	strb	r1, [r3, #0]
 800d930:	7833      	ldrb	r3, [r6, #0]
 800d932:	2b2a      	cmp	r3, #42	; 0x2a
 800d934:	d016      	beq.n	800d964 <_svfiprintf_r+0xf8>
 800d936:	0035      	movs	r5, r6
 800d938:	2100      	movs	r1, #0
 800d93a:	200a      	movs	r0, #10
 800d93c:	68e3      	ldr	r3, [r4, #12]
 800d93e:	782a      	ldrb	r2, [r5, #0]
 800d940:	1c6e      	adds	r6, r5, #1
 800d942:	3a30      	subs	r2, #48	; 0x30
 800d944:	2a09      	cmp	r2, #9
 800d946:	d94e      	bls.n	800d9e6 <_svfiprintf_r+0x17a>
 800d948:	2900      	cmp	r1, #0
 800d94a:	d111      	bne.n	800d970 <_svfiprintf_r+0x104>
 800d94c:	e017      	b.n	800d97e <_svfiprintf_r+0x112>
 800d94e:	3501      	adds	r5, #1
 800d950:	e7b0      	b.n	800d8b4 <_svfiprintf_r+0x48>
 800d952:	4b41      	ldr	r3, [pc, #260]	; (800da58 <_svfiprintf_r+0x1ec>)
 800d954:	6822      	ldr	r2, [r4, #0]
 800d956:	1ac0      	subs	r0, r0, r3
 800d958:	2301      	movs	r3, #1
 800d95a:	4083      	lsls	r3, r0
 800d95c:	4313      	orrs	r3, r2
 800d95e:	002e      	movs	r6, r5
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	e7ce      	b.n	800d902 <_svfiprintf_r+0x96>
 800d964:	9b07      	ldr	r3, [sp, #28]
 800d966:	1d19      	adds	r1, r3, #4
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	9107      	str	r1, [sp, #28]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	db01      	blt.n	800d974 <_svfiprintf_r+0x108>
 800d970:	930b      	str	r3, [sp, #44]	; 0x2c
 800d972:	e004      	b.n	800d97e <_svfiprintf_r+0x112>
 800d974:	425b      	negs	r3, r3
 800d976:	60e3      	str	r3, [r4, #12]
 800d978:	2302      	movs	r3, #2
 800d97a:	4313      	orrs	r3, r2
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	782b      	ldrb	r3, [r5, #0]
 800d980:	2b2e      	cmp	r3, #46	; 0x2e
 800d982:	d10a      	bne.n	800d99a <_svfiprintf_r+0x12e>
 800d984:	786b      	ldrb	r3, [r5, #1]
 800d986:	2b2a      	cmp	r3, #42	; 0x2a
 800d988:	d135      	bne.n	800d9f6 <_svfiprintf_r+0x18a>
 800d98a:	9b07      	ldr	r3, [sp, #28]
 800d98c:	3502      	adds	r5, #2
 800d98e:	1d1a      	adds	r2, r3, #4
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	9207      	str	r2, [sp, #28]
 800d994:	2b00      	cmp	r3, #0
 800d996:	db2b      	blt.n	800d9f0 <_svfiprintf_r+0x184>
 800d998:	9309      	str	r3, [sp, #36]	; 0x24
 800d99a:	4e30      	ldr	r6, [pc, #192]	; (800da5c <_svfiprintf_r+0x1f0>)
 800d99c:	2203      	movs	r2, #3
 800d99e:	0030      	movs	r0, r6
 800d9a0:	7829      	ldrb	r1, [r5, #0]
 800d9a2:	f7ff fb15 	bl	800cfd0 <memchr>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d006      	beq.n	800d9b8 <_svfiprintf_r+0x14c>
 800d9aa:	2340      	movs	r3, #64	; 0x40
 800d9ac:	1b80      	subs	r0, r0, r6
 800d9ae:	4083      	lsls	r3, r0
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	3501      	adds	r5, #1
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	6023      	str	r3, [r4, #0]
 800d9b8:	7829      	ldrb	r1, [r5, #0]
 800d9ba:	2206      	movs	r2, #6
 800d9bc:	4828      	ldr	r0, [pc, #160]	; (800da60 <_svfiprintf_r+0x1f4>)
 800d9be:	1c6e      	adds	r6, r5, #1
 800d9c0:	7621      	strb	r1, [r4, #24]
 800d9c2:	f7ff fb05 	bl	800cfd0 <memchr>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d03c      	beq.n	800da44 <_svfiprintf_r+0x1d8>
 800d9ca:	4b26      	ldr	r3, [pc, #152]	; (800da64 <_svfiprintf_r+0x1f8>)
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d125      	bne.n	800da1c <_svfiprintf_r+0x1b0>
 800d9d0:	2207      	movs	r2, #7
 800d9d2:	9b07      	ldr	r3, [sp, #28]
 800d9d4:	3307      	adds	r3, #7
 800d9d6:	4393      	bics	r3, r2
 800d9d8:	3308      	adds	r3, #8
 800d9da:	9307      	str	r3, [sp, #28]
 800d9dc:	6963      	ldr	r3, [r4, #20]
 800d9de:	9a04      	ldr	r2, [sp, #16]
 800d9e0:	189b      	adds	r3, r3, r2
 800d9e2:	6163      	str	r3, [r4, #20]
 800d9e4:	e765      	b.n	800d8b2 <_svfiprintf_r+0x46>
 800d9e6:	4343      	muls	r3, r0
 800d9e8:	0035      	movs	r5, r6
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	189b      	adds	r3, r3, r2
 800d9ee:	e7a6      	b.n	800d93e <_svfiprintf_r+0xd2>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	425b      	negs	r3, r3
 800d9f4:	e7d0      	b.n	800d998 <_svfiprintf_r+0x12c>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	200a      	movs	r0, #10
 800d9fa:	001a      	movs	r2, r3
 800d9fc:	3501      	adds	r5, #1
 800d9fe:	6063      	str	r3, [r4, #4]
 800da00:	7829      	ldrb	r1, [r5, #0]
 800da02:	1c6e      	adds	r6, r5, #1
 800da04:	3930      	subs	r1, #48	; 0x30
 800da06:	2909      	cmp	r1, #9
 800da08:	d903      	bls.n	800da12 <_svfiprintf_r+0x1a6>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0c5      	beq.n	800d99a <_svfiprintf_r+0x12e>
 800da0e:	9209      	str	r2, [sp, #36]	; 0x24
 800da10:	e7c3      	b.n	800d99a <_svfiprintf_r+0x12e>
 800da12:	4342      	muls	r2, r0
 800da14:	0035      	movs	r5, r6
 800da16:	2301      	movs	r3, #1
 800da18:	1852      	adds	r2, r2, r1
 800da1a:	e7f1      	b.n	800da00 <_svfiprintf_r+0x194>
 800da1c:	ab07      	add	r3, sp, #28
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	003a      	movs	r2, r7
 800da22:	0021      	movs	r1, r4
 800da24:	4b10      	ldr	r3, [pc, #64]	; (800da68 <_svfiprintf_r+0x1fc>)
 800da26:	9803      	ldr	r0, [sp, #12]
 800da28:	f7fd fc8c 	bl	800b344 <_printf_float>
 800da2c:	9004      	str	r0, [sp, #16]
 800da2e:	9b04      	ldr	r3, [sp, #16]
 800da30:	3301      	adds	r3, #1
 800da32:	d1d3      	bne.n	800d9dc <_svfiprintf_r+0x170>
 800da34:	89bb      	ldrh	r3, [r7, #12]
 800da36:	980d      	ldr	r0, [sp, #52]	; 0x34
 800da38:	065b      	lsls	r3, r3, #25
 800da3a:	d400      	bmi.n	800da3e <_svfiprintf_r+0x1d2>
 800da3c:	e72d      	b.n	800d89a <_svfiprintf_r+0x2e>
 800da3e:	2001      	movs	r0, #1
 800da40:	4240      	negs	r0, r0
 800da42:	e72a      	b.n	800d89a <_svfiprintf_r+0x2e>
 800da44:	ab07      	add	r3, sp, #28
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	003a      	movs	r2, r7
 800da4a:	0021      	movs	r1, r4
 800da4c:	4b06      	ldr	r3, [pc, #24]	; (800da68 <_svfiprintf_r+0x1fc>)
 800da4e:	9803      	ldr	r0, [sp, #12]
 800da50:	f7fd ff2a 	bl	800b8a8 <_printf_i>
 800da54:	e7ea      	b.n	800da2c <_svfiprintf_r+0x1c0>
 800da56:	46c0      	nop			; (mov r8, r8)
 800da58:	0800e5e4 	.word	0x0800e5e4
 800da5c:	0800e5ea 	.word	0x0800e5ea
 800da60:	0800e5ee 	.word	0x0800e5ee
 800da64:	0800b345 	.word	0x0800b345
 800da68:	0800d7a9 	.word	0x0800d7a9

0800da6c <__sfputc_r>:
 800da6c:	6893      	ldr	r3, [r2, #8]
 800da6e:	b510      	push	{r4, lr}
 800da70:	3b01      	subs	r3, #1
 800da72:	6093      	str	r3, [r2, #8]
 800da74:	2b00      	cmp	r3, #0
 800da76:	da04      	bge.n	800da82 <__sfputc_r+0x16>
 800da78:	6994      	ldr	r4, [r2, #24]
 800da7a:	42a3      	cmp	r3, r4
 800da7c:	db07      	blt.n	800da8e <__sfputc_r+0x22>
 800da7e:	290a      	cmp	r1, #10
 800da80:	d005      	beq.n	800da8e <__sfputc_r+0x22>
 800da82:	6813      	ldr	r3, [r2, #0]
 800da84:	1c58      	adds	r0, r3, #1
 800da86:	6010      	str	r0, [r2, #0]
 800da88:	7019      	strb	r1, [r3, #0]
 800da8a:	0008      	movs	r0, r1
 800da8c:	bd10      	pop	{r4, pc}
 800da8e:	f7fe f8e9 	bl	800bc64 <__swbuf_r>
 800da92:	0001      	movs	r1, r0
 800da94:	e7f9      	b.n	800da8a <__sfputc_r+0x1e>

0800da96 <__sfputs_r>:
 800da96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da98:	0006      	movs	r6, r0
 800da9a:	000f      	movs	r7, r1
 800da9c:	0014      	movs	r4, r2
 800da9e:	18d5      	adds	r5, r2, r3
 800daa0:	42ac      	cmp	r4, r5
 800daa2:	d101      	bne.n	800daa8 <__sfputs_r+0x12>
 800daa4:	2000      	movs	r0, #0
 800daa6:	e007      	b.n	800dab8 <__sfputs_r+0x22>
 800daa8:	7821      	ldrb	r1, [r4, #0]
 800daaa:	003a      	movs	r2, r7
 800daac:	0030      	movs	r0, r6
 800daae:	f7ff ffdd 	bl	800da6c <__sfputc_r>
 800dab2:	3401      	adds	r4, #1
 800dab4:	1c43      	adds	r3, r0, #1
 800dab6:	d1f3      	bne.n	800daa0 <__sfputs_r+0xa>
 800dab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dabc <_vfiprintf_r>:
 800dabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dabe:	b0a1      	sub	sp, #132	; 0x84
 800dac0:	0006      	movs	r6, r0
 800dac2:	000c      	movs	r4, r1
 800dac4:	001f      	movs	r7, r3
 800dac6:	9203      	str	r2, [sp, #12]
 800dac8:	2800      	cmp	r0, #0
 800daca:	d004      	beq.n	800dad6 <_vfiprintf_r+0x1a>
 800dacc:	6983      	ldr	r3, [r0, #24]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d101      	bne.n	800dad6 <_vfiprintf_r+0x1a>
 800dad2:	f7ff f969 	bl	800cda8 <__sinit>
 800dad6:	4b8e      	ldr	r3, [pc, #568]	; (800dd10 <_vfiprintf_r+0x254>)
 800dad8:	429c      	cmp	r4, r3
 800dada:	d11c      	bne.n	800db16 <_vfiprintf_r+0x5a>
 800dadc:	6874      	ldr	r4, [r6, #4]
 800dade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dae0:	07db      	lsls	r3, r3, #31
 800dae2:	d405      	bmi.n	800daf0 <_vfiprintf_r+0x34>
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	059b      	lsls	r3, r3, #22
 800dae8:	d402      	bmi.n	800daf0 <_vfiprintf_r+0x34>
 800daea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daec:	f7ff fa01 	bl	800cef2 <__retarget_lock_acquire_recursive>
 800daf0:	89a3      	ldrh	r3, [r4, #12]
 800daf2:	071b      	lsls	r3, r3, #28
 800daf4:	d502      	bpl.n	800dafc <_vfiprintf_r+0x40>
 800daf6:	6923      	ldr	r3, [r4, #16]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d11d      	bne.n	800db38 <_vfiprintf_r+0x7c>
 800dafc:	0021      	movs	r1, r4
 800dafe:	0030      	movs	r0, r6
 800db00:	f7fe f906 	bl	800bd10 <__swsetup_r>
 800db04:	2800      	cmp	r0, #0
 800db06:	d017      	beq.n	800db38 <_vfiprintf_r+0x7c>
 800db08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db0a:	07db      	lsls	r3, r3, #31
 800db0c:	d50d      	bpl.n	800db2a <_vfiprintf_r+0x6e>
 800db0e:	2001      	movs	r0, #1
 800db10:	4240      	negs	r0, r0
 800db12:	b021      	add	sp, #132	; 0x84
 800db14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db16:	4b7f      	ldr	r3, [pc, #508]	; (800dd14 <_vfiprintf_r+0x258>)
 800db18:	429c      	cmp	r4, r3
 800db1a:	d101      	bne.n	800db20 <_vfiprintf_r+0x64>
 800db1c:	68b4      	ldr	r4, [r6, #8]
 800db1e:	e7de      	b.n	800dade <_vfiprintf_r+0x22>
 800db20:	4b7d      	ldr	r3, [pc, #500]	; (800dd18 <_vfiprintf_r+0x25c>)
 800db22:	429c      	cmp	r4, r3
 800db24:	d1db      	bne.n	800dade <_vfiprintf_r+0x22>
 800db26:	68f4      	ldr	r4, [r6, #12]
 800db28:	e7d9      	b.n	800dade <_vfiprintf_r+0x22>
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	059b      	lsls	r3, r3, #22
 800db2e:	d4ee      	bmi.n	800db0e <_vfiprintf_r+0x52>
 800db30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db32:	f7ff f9df 	bl	800cef4 <__retarget_lock_release_recursive>
 800db36:	e7ea      	b.n	800db0e <_vfiprintf_r+0x52>
 800db38:	2300      	movs	r3, #0
 800db3a:	ad08      	add	r5, sp, #32
 800db3c:	616b      	str	r3, [r5, #20]
 800db3e:	3320      	adds	r3, #32
 800db40:	766b      	strb	r3, [r5, #25]
 800db42:	3310      	adds	r3, #16
 800db44:	76ab      	strb	r3, [r5, #26]
 800db46:	9707      	str	r7, [sp, #28]
 800db48:	9f03      	ldr	r7, [sp, #12]
 800db4a:	783b      	ldrb	r3, [r7, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d001      	beq.n	800db54 <_vfiprintf_r+0x98>
 800db50:	2b25      	cmp	r3, #37	; 0x25
 800db52:	d14e      	bne.n	800dbf2 <_vfiprintf_r+0x136>
 800db54:	9b03      	ldr	r3, [sp, #12]
 800db56:	1afb      	subs	r3, r7, r3
 800db58:	9305      	str	r3, [sp, #20]
 800db5a:	9b03      	ldr	r3, [sp, #12]
 800db5c:	429f      	cmp	r7, r3
 800db5e:	d00d      	beq.n	800db7c <_vfiprintf_r+0xc0>
 800db60:	9b05      	ldr	r3, [sp, #20]
 800db62:	0021      	movs	r1, r4
 800db64:	0030      	movs	r0, r6
 800db66:	9a03      	ldr	r2, [sp, #12]
 800db68:	f7ff ff95 	bl	800da96 <__sfputs_r>
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	d100      	bne.n	800db72 <_vfiprintf_r+0xb6>
 800db70:	e0b5      	b.n	800dcde <_vfiprintf_r+0x222>
 800db72:	696a      	ldr	r2, [r5, #20]
 800db74:	9b05      	ldr	r3, [sp, #20]
 800db76:	4694      	mov	ip, r2
 800db78:	4463      	add	r3, ip
 800db7a:	616b      	str	r3, [r5, #20]
 800db7c:	783b      	ldrb	r3, [r7, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d100      	bne.n	800db84 <_vfiprintf_r+0xc8>
 800db82:	e0ac      	b.n	800dcde <_vfiprintf_r+0x222>
 800db84:	2201      	movs	r2, #1
 800db86:	1c7b      	adds	r3, r7, #1
 800db88:	9303      	str	r3, [sp, #12]
 800db8a:	2300      	movs	r3, #0
 800db8c:	4252      	negs	r2, r2
 800db8e:	606a      	str	r2, [r5, #4]
 800db90:	a904      	add	r1, sp, #16
 800db92:	3254      	adds	r2, #84	; 0x54
 800db94:	1852      	adds	r2, r2, r1
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	60eb      	str	r3, [r5, #12]
 800db9a:	60ab      	str	r3, [r5, #8]
 800db9c:	7013      	strb	r3, [r2, #0]
 800db9e:	65ab      	str	r3, [r5, #88]	; 0x58
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	2205      	movs	r2, #5
 800dba4:	7819      	ldrb	r1, [r3, #0]
 800dba6:	485d      	ldr	r0, [pc, #372]	; (800dd1c <_vfiprintf_r+0x260>)
 800dba8:	f7ff fa12 	bl	800cfd0 <memchr>
 800dbac:	9b03      	ldr	r3, [sp, #12]
 800dbae:	1c5f      	adds	r7, r3, #1
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d120      	bne.n	800dbf6 <_vfiprintf_r+0x13a>
 800dbb4:	682a      	ldr	r2, [r5, #0]
 800dbb6:	06d3      	lsls	r3, r2, #27
 800dbb8:	d504      	bpl.n	800dbc4 <_vfiprintf_r+0x108>
 800dbba:	2353      	movs	r3, #83	; 0x53
 800dbbc:	a904      	add	r1, sp, #16
 800dbbe:	185b      	adds	r3, r3, r1
 800dbc0:	2120      	movs	r1, #32
 800dbc2:	7019      	strb	r1, [r3, #0]
 800dbc4:	0713      	lsls	r3, r2, #28
 800dbc6:	d504      	bpl.n	800dbd2 <_vfiprintf_r+0x116>
 800dbc8:	2353      	movs	r3, #83	; 0x53
 800dbca:	a904      	add	r1, sp, #16
 800dbcc:	185b      	adds	r3, r3, r1
 800dbce:	212b      	movs	r1, #43	; 0x2b
 800dbd0:	7019      	strb	r1, [r3, #0]
 800dbd2:	9b03      	ldr	r3, [sp, #12]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd8:	d016      	beq.n	800dc08 <_vfiprintf_r+0x14c>
 800dbda:	2100      	movs	r1, #0
 800dbdc:	68eb      	ldr	r3, [r5, #12]
 800dbde:	9f03      	ldr	r7, [sp, #12]
 800dbe0:	783a      	ldrb	r2, [r7, #0]
 800dbe2:	1c78      	adds	r0, r7, #1
 800dbe4:	3a30      	subs	r2, #48	; 0x30
 800dbe6:	4684      	mov	ip, r0
 800dbe8:	2a09      	cmp	r2, #9
 800dbea:	d94f      	bls.n	800dc8c <_vfiprintf_r+0x1d0>
 800dbec:	2900      	cmp	r1, #0
 800dbee:	d111      	bne.n	800dc14 <_vfiprintf_r+0x158>
 800dbf0:	e017      	b.n	800dc22 <_vfiprintf_r+0x166>
 800dbf2:	3701      	adds	r7, #1
 800dbf4:	e7a9      	b.n	800db4a <_vfiprintf_r+0x8e>
 800dbf6:	4b49      	ldr	r3, [pc, #292]	; (800dd1c <_vfiprintf_r+0x260>)
 800dbf8:	682a      	ldr	r2, [r5, #0]
 800dbfa:	1ac0      	subs	r0, r0, r3
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	4083      	lsls	r3, r0
 800dc00:	4313      	orrs	r3, r2
 800dc02:	602b      	str	r3, [r5, #0]
 800dc04:	9703      	str	r7, [sp, #12]
 800dc06:	e7cb      	b.n	800dba0 <_vfiprintf_r+0xe4>
 800dc08:	9b07      	ldr	r3, [sp, #28]
 800dc0a:	1d19      	adds	r1, r3, #4
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	9107      	str	r1, [sp, #28]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	db01      	blt.n	800dc18 <_vfiprintf_r+0x15c>
 800dc14:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc16:	e004      	b.n	800dc22 <_vfiprintf_r+0x166>
 800dc18:	425b      	negs	r3, r3
 800dc1a:	60eb      	str	r3, [r5, #12]
 800dc1c:	2302      	movs	r3, #2
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	783b      	ldrb	r3, [r7, #0]
 800dc24:	2b2e      	cmp	r3, #46	; 0x2e
 800dc26:	d10a      	bne.n	800dc3e <_vfiprintf_r+0x182>
 800dc28:	787b      	ldrb	r3, [r7, #1]
 800dc2a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc2c:	d137      	bne.n	800dc9e <_vfiprintf_r+0x1e2>
 800dc2e:	9b07      	ldr	r3, [sp, #28]
 800dc30:	3702      	adds	r7, #2
 800dc32:	1d1a      	adds	r2, r3, #4
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	9207      	str	r2, [sp, #28]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	db2d      	blt.n	800dc98 <_vfiprintf_r+0x1dc>
 800dc3c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc3e:	2203      	movs	r2, #3
 800dc40:	7839      	ldrb	r1, [r7, #0]
 800dc42:	4837      	ldr	r0, [pc, #220]	; (800dd20 <_vfiprintf_r+0x264>)
 800dc44:	f7ff f9c4 	bl	800cfd0 <memchr>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	d007      	beq.n	800dc5c <_vfiprintf_r+0x1a0>
 800dc4c:	4b34      	ldr	r3, [pc, #208]	; (800dd20 <_vfiprintf_r+0x264>)
 800dc4e:	682a      	ldr	r2, [r5, #0]
 800dc50:	1ac0      	subs	r0, r0, r3
 800dc52:	2340      	movs	r3, #64	; 0x40
 800dc54:	4083      	lsls	r3, r0
 800dc56:	4313      	orrs	r3, r2
 800dc58:	3701      	adds	r7, #1
 800dc5a:	602b      	str	r3, [r5, #0]
 800dc5c:	7839      	ldrb	r1, [r7, #0]
 800dc5e:	1c7b      	adds	r3, r7, #1
 800dc60:	2206      	movs	r2, #6
 800dc62:	4830      	ldr	r0, [pc, #192]	; (800dd24 <_vfiprintf_r+0x268>)
 800dc64:	9303      	str	r3, [sp, #12]
 800dc66:	7629      	strb	r1, [r5, #24]
 800dc68:	f7ff f9b2 	bl	800cfd0 <memchr>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d045      	beq.n	800dcfc <_vfiprintf_r+0x240>
 800dc70:	4b2d      	ldr	r3, [pc, #180]	; (800dd28 <_vfiprintf_r+0x26c>)
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d127      	bne.n	800dcc6 <_vfiprintf_r+0x20a>
 800dc76:	2207      	movs	r2, #7
 800dc78:	9b07      	ldr	r3, [sp, #28]
 800dc7a:	3307      	adds	r3, #7
 800dc7c:	4393      	bics	r3, r2
 800dc7e:	3308      	adds	r3, #8
 800dc80:	9307      	str	r3, [sp, #28]
 800dc82:	696b      	ldr	r3, [r5, #20]
 800dc84:	9a04      	ldr	r2, [sp, #16]
 800dc86:	189b      	adds	r3, r3, r2
 800dc88:	616b      	str	r3, [r5, #20]
 800dc8a:	e75d      	b.n	800db48 <_vfiprintf_r+0x8c>
 800dc8c:	210a      	movs	r1, #10
 800dc8e:	434b      	muls	r3, r1
 800dc90:	4667      	mov	r7, ip
 800dc92:	189b      	adds	r3, r3, r2
 800dc94:	3909      	subs	r1, #9
 800dc96:	e7a3      	b.n	800dbe0 <_vfiprintf_r+0x124>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	425b      	negs	r3, r3
 800dc9c:	e7ce      	b.n	800dc3c <_vfiprintf_r+0x180>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	001a      	movs	r2, r3
 800dca2:	3701      	adds	r7, #1
 800dca4:	606b      	str	r3, [r5, #4]
 800dca6:	7839      	ldrb	r1, [r7, #0]
 800dca8:	1c78      	adds	r0, r7, #1
 800dcaa:	3930      	subs	r1, #48	; 0x30
 800dcac:	4684      	mov	ip, r0
 800dcae:	2909      	cmp	r1, #9
 800dcb0:	d903      	bls.n	800dcba <_vfiprintf_r+0x1fe>
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d0c3      	beq.n	800dc3e <_vfiprintf_r+0x182>
 800dcb6:	9209      	str	r2, [sp, #36]	; 0x24
 800dcb8:	e7c1      	b.n	800dc3e <_vfiprintf_r+0x182>
 800dcba:	230a      	movs	r3, #10
 800dcbc:	435a      	muls	r2, r3
 800dcbe:	4667      	mov	r7, ip
 800dcc0:	1852      	adds	r2, r2, r1
 800dcc2:	3b09      	subs	r3, #9
 800dcc4:	e7ef      	b.n	800dca6 <_vfiprintf_r+0x1ea>
 800dcc6:	ab07      	add	r3, sp, #28
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	0022      	movs	r2, r4
 800dccc:	0029      	movs	r1, r5
 800dcce:	0030      	movs	r0, r6
 800dcd0:	4b16      	ldr	r3, [pc, #88]	; (800dd2c <_vfiprintf_r+0x270>)
 800dcd2:	f7fd fb37 	bl	800b344 <_printf_float>
 800dcd6:	9004      	str	r0, [sp, #16]
 800dcd8:	9b04      	ldr	r3, [sp, #16]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	d1d1      	bne.n	800dc82 <_vfiprintf_r+0x1c6>
 800dcde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dce0:	07db      	lsls	r3, r3, #31
 800dce2:	d405      	bmi.n	800dcf0 <_vfiprintf_r+0x234>
 800dce4:	89a3      	ldrh	r3, [r4, #12]
 800dce6:	059b      	lsls	r3, r3, #22
 800dce8:	d402      	bmi.n	800dcf0 <_vfiprintf_r+0x234>
 800dcea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcec:	f7ff f902 	bl	800cef4 <__retarget_lock_release_recursive>
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	065b      	lsls	r3, r3, #25
 800dcf4:	d500      	bpl.n	800dcf8 <_vfiprintf_r+0x23c>
 800dcf6:	e70a      	b.n	800db0e <_vfiprintf_r+0x52>
 800dcf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dcfa:	e70a      	b.n	800db12 <_vfiprintf_r+0x56>
 800dcfc:	ab07      	add	r3, sp, #28
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	0022      	movs	r2, r4
 800dd02:	0029      	movs	r1, r5
 800dd04:	0030      	movs	r0, r6
 800dd06:	4b09      	ldr	r3, [pc, #36]	; (800dd2c <_vfiprintf_r+0x270>)
 800dd08:	f7fd fdce 	bl	800b8a8 <_printf_i>
 800dd0c:	e7e3      	b.n	800dcd6 <_vfiprintf_r+0x21a>
 800dd0e:	46c0      	nop			; (mov r8, r8)
 800dd10:	0800e448 	.word	0x0800e448
 800dd14:	0800e468 	.word	0x0800e468
 800dd18:	0800e428 	.word	0x0800e428
 800dd1c:	0800e5e4 	.word	0x0800e5e4
 800dd20:	0800e5ea 	.word	0x0800e5ea
 800dd24:	0800e5ee 	.word	0x0800e5ee
 800dd28:	0800b345 	.word	0x0800b345
 800dd2c:	0800da97 	.word	0x0800da97

0800dd30 <__sread>:
 800dd30:	b570      	push	{r4, r5, r6, lr}
 800dd32:	000c      	movs	r4, r1
 800dd34:	250e      	movs	r5, #14
 800dd36:	5f49      	ldrsh	r1, [r1, r5]
 800dd38:	f000 f926 	bl	800df88 <_read_r>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	db03      	blt.n	800dd48 <__sread+0x18>
 800dd40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dd42:	181b      	adds	r3, r3, r0
 800dd44:	6563      	str	r3, [r4, #84]	; 0x54
 800dd46:	bd70      	pop	{r4, r5, r6, pc}
 800dd48:	89a3      	ldrh	r3, [r4, #12]
 800dd4a:	4a02      	ldr	r2, [pc, #8]	; (800dd54 <__sread+0x24>)
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	81a3      	strh	r3, [r4, #12]
 800dd50:	e7f9      	b.n	800dd46 <__sread+0x16>
 800dd52:	46c0      	nop			; (mov r8, r8)
 800dd54:	ffffefff 	.word	0xffffefff

0800dd58 <__swrite>:
 800dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5a:	001f      	movs	r7, r3
 800dd5c:	898b      	ldrh	r3, [r1, #12]
 800dd5e:	0005      	movs	r5, r0
 800dd60:	000c      	movs	r4, r1
 800dd62:	0016      	movs	r6, r2
 800dd64:	05db      	lsls	r3, r3, #23
 800dd66:	d505      	bpl.n	800dd74 <__swrite+0x1c>
 800dd68:	230e      	movs	r3, #14
 800dd6a:	5ec9      	ldrsh	r1, [r1, r3]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	2302      	movs	r3, #2
 800dd70:	f000 f8a2 	bl	800deb8 <_lseek_r>
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	4a05      	ldr	r2, [pc, #20]	; (800dd8c <__swrite+0x34>)
 800dd78:	0028      	movs	r0, r5
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	81a3      	strh	r3, [r4, #12]
 800dd7e:	0032      	movs	r2, r6
 800dd80:	230e      	movs	r3, #14
 800dd82:	5ee1      	ldrsh	r1, [r4, r3]
 800dd84:	003b      	movs	r3, r7
 800dd86:	f000 f81f 	bl	800ddc8 <_write_r>
 800dd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd8c:	ffffefff 	.word	0xffffefff

0800dd90 <__sseek>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	000c      	movs	r4, r1
 800dd94:	250e      	movs	r5, #14
 800dd96:	5f49      	ldrsh	r1, [r1, r5]
 800dd98:	f000 f88e 	bl	800deb8 <_lseek_r>
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	1c42      	adds	r2, r0, #1
 800dda0:	d103      	bne.n	800ddaa <__sseek+0x1a>
 800dda2:	4a05      	ldr	r2, [pc, #20]	; (800ddb8 <__sseek+0x28>)
 800dda4:	4013      	ands	r3, r2
 800dda6:	81a3      	strh	r3, [r4, #12]
 800dda8:	bd70      	pop	{r4, r5, r6, pc}
 800ddaa:	2280      	movs	r2, #128	; 0x80
 800ddac:	0152      	lsls	r2, r2, #5
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	81a3      	strh	r3, [r4, #12]
 800ddb2:	6560      	str	r0, [r4, #84]	; 0x54
 800ddb4:	e7f8      	b.n	800dda8 <__sseek+0x18>
 800ddb6:	46c0      	nop			; (mov r8, r8)
 800ddb8:	ffffefff 	.word	0xffffefff

0800ddbc <__sclose>:
 800ddbc:	b510      	push	{r4, lr}
 800ddbe:	230e      	movs	r3, #14
 800ddc0:	5ec9      	ldrsh	r1, [r1, r3]
 800ddc2:	f000 f833 	bl	800de2c <_close_r>
 800ddc6:	bd10      	pop	{r4, pc}

0800ddc8 <_write_r>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	0004      	movs	r4, r0
 800ddcc:	0008      	movs	r0, r1
 800ddce:	0011      	movs	r1, r2
 800ddd0:	001a      	movs	r2, r3
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	4d05      	ldr	r5, [pc, #20]	; (800ddec <_write_r+0x24>)
 800ddd6:	602b      	str	r3, [r5, #0]
 800ddd8:	f7f6 fae3 	bl	80043a2 <_write>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d103      	bne.n	800dde8 <_write_r+0x20>
 800dde0:	682b      	ldr	r3, [r5, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d000      	beq.n	800dde8 <_write_r+0x20>
 800dde6:	6023      	str	r3, [r4, #0]
 800dde8:	bd70      	pop	{r4, r5, r6, pc}
 800ddea:	46c0      	nop			; (mov r8, r8)
 800ddec:	200007fc 	.word	0x200007fc

0800ddf0 <__assert_func>:
 800ddf0:	b530      	push	{r4, r5, lr}
 800ddf2:	0014      	movs	r4, r2
 800ddf4:	001a      	movs	r2, r3
 800ddf6:	4b09      	ldr	r3, [pc, #36]	; (800de1c <__assert_func+0x2c>)
 800ddf8:	0005      	movs	r5, r0
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	b085      	sub	sp, #20
 800ddfe:	68d8      	ldr	r0, [r3, #12]
 800de00:	4b07      	ldr	r3, [pc, #28]	; (800de20 <__assert_func+0x30>)
 800de02:	2c00      	cmp	r4, #0
 800de04:	d101      	bne.n	800de0a <__assert_func+0x1a>
 800de06:	4b07      	ldr	r3, [pc, #28]	; (800de24 <__assert_func+0x34>)
 800de08:	001c      	movs	r4, r3
 800de0a:	9301      	str	r3, [sp, #4]
 800de0c:	9100      	str	r1, [sp, #0]
 800de0e:	002b      	movs	r3, r5
 800de10:	4905      	ldr	r1, [pc, #20]	; (800de28 <__assert_func+0x38>)
 800de12:	9402      	str	r4, [sp, #8]
 800de14:	f000 f81c 	bl	800de50 <fiprintf>
 800de18:	f000 f8d7 	bl	800dfca <abort>
 800de1c:	2000000c 	.word	0x2000000c
 800de20:	0800e5f5 	.word	0x0800e5f5
 800de24:	0800e630 	.word	0x0800e630
 800de28:	0800e602 	.word	0x0800e602

0800de2c <_close_r>:
 800de2c:	2300      	movs	r3, #0
 800de2e:	b570      	push	{r4, r5, r6, lr}
 800de30:	4d06      	ldr	r5, [pc, #24]	; (800de4c <_close_r+0x20>)
 800de32:	0004      	movs	r4, r0
 800de34:	0008      	movs	r0, r1
 800de36:	602b      	str	r3, [r5, #0]
 800de38:	f7f6 facf 	bl	80043da <_close>
 800de3c:	1c43      	adds	r3, r0, #1
 800de3e:	d103      	bne.n	800de48 <_close_r+0x1c>
 800de40:	682b      	ldr	r3, [r5, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d000      	beq.n	800de48 <_close_r+0x1c>
 800de46:	6023      	str	r3, [r4, #0]
 800de48:	bd70      	pop	{r4, r5, r6, pc}
 800de4a:	46c0      	nop			; (mov r8, r8)
 800de4c:	200007fc 	.word	0x200007fc

0800de50 <fiprintf>:
 800de50:	b40e      	push	{r1, r2, r3}
 800de52:	b503      	push	{r0, r1, lr}
 800de54:	0001      	movs	r1, r0
 800de56:	ab03      	add	r3, sp, #12
 800de58:	4804      	ldr	r0, [pc, #16]	; (800de6c <fiprintf+0x1c>)
 800de5a:	cb04      	ldmia	r3!, {r2}
 800de5c:	6800      	ldr	r0, [r0, #0]
 800de5e:	9301      	str	r3, [sp, #4]
 800de60:	f7ff fe2c 	bl	800dabc <_vfiprintf_r>
 800de64:	b002      	add	sp, #8
 800de66:	bc08      	pop	{r3}
 800de68:	b003      	add	sp, #12
 800de6a:	4718      	bx	r3
 800de6c:	2000000c 	.word	0x2000000c

0800de70 <_fstat_r>:
 800de70:	2300      	movs	r3, #0
 800de72:	b570      	push	{r4, r5, r6, lr}
 800de74:	4d06      	ldr	r5, [pc, #24]	; (800de90 <_fstat_r+0x20>)
 800de76:	0004      	movs	r4, r0
 800de78:	0008      	movs	r0, r1
 800de7a:	0011      	movs	r1, r2
 800de7c:	602b      	str	r3, [r5, #0]
 800de7e:	f7f6 fab6 	bl	80043ee <_fstat>
 800de82:	1c43      	adds	r3, r0, #1
 800de84:	d103      	bne.n	800de8e <_fstat_r+0x1e>
 800de86:	682b      	ldr	r3, [r5, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d000      	beq.n	800de8e <_fstat_r+0x1e>
 800de8c:	6023      	str	r3, [r4, #0]
 800de8e:	bd70      	pop	{r4, r5, r6, pc}
 800de90:	200007fc 	.word	0x200007fc

0800de94 <_isatty_r>:
 800de94:	2300      	movs	r3, #0
 800de96:	b570      	push	{r4, r5, r6, lr}
 800de98:	4d06      	ldr	r5, [pc, #24]	; (800deb4 <_isatty_r+0x20>)
 800de9a:	0004      	movs	r4, r0
 800de9c:	0008      	movs	r0, r1
 800de9e:	602b      	str	r3, [r5, #0]
 800dea0:	f7f6 fab3 	bl	800440a <_isatty>
 800dea4:	1c43      	adds	r3, r0, #1
 800dea6:	d103      	bne.n	800deb0 <_isatty_r+0x1c>
 800dea8:	682b      	ldr	r3, [r5, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d000      	beq.n	800deb0 <_isatty_r+0x1c>
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	bd70      	pop	{r4, r5, r6, pc}
 800deb2:	46c0      	nop			; (mov r8, r8)
 800deb4:	200007fc 	.word	0x200007fc

0800deb8 <_lseek_r>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	0004      	movs	r4, r0
 800debc:	0008      	movs	r0, r1
 800debe:	0011      	movs	r1, r2
 800dec0:	001a      	movs	r2, r3
 800dec2:	2300      	movs	r3, #0
 800dec4:	4d05      	ldr	r5, [pc, #20]	; (800dedc <_lseek_r+0x24>)
 800dec6:	602b      	str	r3, [r5, #0]
 800dec8:	f7f6 faa8 	bl	800441c <_lseek>
 800decc:	1c43      	adds	r3, r0, #1
 800dece:	d103      	bne.n	800ded8 <_lseek_r+0x20>
 800ded0:	682b      	ldr	r3, [r5, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d000      	beq.n	800ded8 <_lseek_r+0x20>
 800ded6:	6023      	str	r3, [r4, #0]
 800ded8:	bd70      	pop	{r4, r5, r6, pc}
 800deda:	46c0      	nop			; (mov r8, r8)
 800dedc:	200007fc 	.word	0x200007fc

0800dee0 <__ascii_mbtowc>:
 800dee0:	b082      	sub	sp, #8
 800dee2:	2900      	cmp	r1, #0
 800dee4:	d100      	bne.n	800dee8 <__ascii_mbtowc+0x8>
 800dee6:	a901      	add	r1, sp, #4
 800dee8:	1e10      	subs	r0, r2, #0
 800deea:	d006      	beq.n	800defa <__ascii_mbtowc+0x1a>
 800deec:	2b00      	cmp	r3, #0
 800deee:	d006      	beq.n	800defe <__ascii_mbtowc+0x1e>
 800def0:	7813      	ldrb	r3, [r2, #0]
 800def2:	600b      	str	r3, [r1, #0]
 800def4:	7810      	ldrb	r0, [r2, #0]
 800def6:	1e43      	subs	r3, r0, #1
 800def8:	4198      	sbcs	r0, r3
 800defa:	b002      	add	sp, #8
 800defc:	4770      	bx	lr
 800defe:	2002      	movs	r0, #2
 800df00:	4240      	negs	r0, r0
 800df02:	e7fa      	b.n	800defa <__ascii_mbtowc+0x1a>

0800df04 <memmove>:
 800df04:	b510      	push	{r4, lr}
 800df06:	4288      	cmp	r0, r1
 800df08:	d902      	bls.n	800df10 <memmove+0xc>
 800df0a:	188b      	adds	r3, r1, r2
 800df0c:	4298      	cmp	r0, r3
 800df0e:	d303      	bcc.n	800df18 <memmove+0x14>
 800df10:	2300      	movs	r3, #0
 800df12:	e007      	b.n	800df24 <memmove+0x20>
 800df14:	5c8b      	ldrb	r3, [r1, r2]
 800df16:	5483      	strb	r3, [r0, r2]
 800df18:	3a01      	subs	r2, #1
 800df1a:	d2fb      	bcs.n	800df14 <memmove+0x10>
 800df1c:	bd10      	pop	{r4, pc}
 800df1e:	5ccc      	ldrb	r4, [r1, r3]
 800df20:	54c4      	strb	r4, [r0, r3]
 800df22:	3301      	adds	r3, #1
 800df24:	429a      	cmp	r2, r3
 800df26:	d1fa      	bne.n	800df1e <memmove+0x1a>
 800df28:	e7f8      	b.n	800df1c <memmove+0x18>

0800df2a <_realloc_r>:
 800df2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df2c:	0007      	movs	r7, r0
 800df2e:	000e      	movs	r6, r1
 800df30:	0014      	movs	r4, r2
 800df32:	2900      	cmp	r1, #0
 800df34:	d105      	bne.n	800df42 <_realloc_r+0x18>
 800df36:	0011      	movs	r1, r2
 800df38:	f7fd f8e4 	bl	800b104 <_malloc_r>
 800df3c:	0005      	movs	r5, r0
 800df3e:	0028      	movs	r0, r5
 800df40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df42:	2a00      	cmp	r2, #0
 800df44:	d103      	bne.n	800df4e <_realloc_r+0x24>
 800df46:	f7fd f871 	bl	800b02c <_free_r>
 800df4a:	0025      	movs	r5, r4
 800df4c:	e7f7      	b.n	800df3e <_realloc_r+0x14>
 800df4e:	f000 f843 	bl	800dfd8 <_malloc_usable_size_r>
 800df52:	9001      	str	r0, [sp, #4]
 800df54:	4284      	cmp	r4, r0
 800df56:	d803      	bhi.n	800df60 <_realloc_r+0x36>
 800df58:	0035      	movs	r5, r6
 800df5a:	0843      	lsrs	r3, r0, #1
 800df5c:	42a3      	cmp	r3, r4
 800df5e:	d3ee      	bcc.n	800df3e <_realloc_r+0x14>
 800df60:	0021      	movs	r1, r4
 800df62:	0038      	movs	r0, r7
 800df64:	f7fd f8ce 	bl	800b104 <_malloc_r>
 800df68:	1e05      	subs	r5, r0, #0
 800df6a:	d0e8      	beq.n	800df3e <_realloc_r+0x14>
 800df6c:	9b01      	ldr	r3, [sp, #4]
 800df6e:	0022      	movs	r2, r4
 800df70:	429c      	cmp	r4, r3
 800df72:	d900      	bls.n	800df76 <_realloc_r+0x4c>
 800df74:	001a      	movs	r2, r3
 800df76:	0031      	movs	r1, r6
 800df78:	0028      	movs	r0, r5
 800df7a:	f7ff f834 	bl	800cfe6 <memcpy>
 800df7e:	0031      	movs	r1, r6
 800df80:	0038      	movs	r0, r7
 800df82:	f7fd f853 	bl	800b02c <_free_r>
 800df86:	e7da      	b.n	800df3e <_realloc_r+0x14>

0800df88 <_read_r>:
 800df88:	b570      	push	{r4, r5, r6, lr}
 800df8a:	0004      	movs	r4, r0
 800df8c:	0008      	movs	r0, r1
 800df8e:	0011      	movs	r1, r2
 800df90:	001a      	movs	r2, r3
 800df92:	2300      	movs	r3, #0
 800df94:	4d05      	ldr	r5, [pc, #20]	; (800dfac <_read_r+0x24>)
 800df96:	602b      	str	r3, [r5, #0]
 800df98:	f7f6 f9e6 	bl	8004368 <_read>
 800df9c:	1c43      	adds	r3, r0, #1
 800df9e:	d103      	bne.n	800dfa8 <_read_r+0x20>
 800dfa0:	682b      	ldr	r3, [r5, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d000      	beq.n	800dfa8 <_read_r+0x20>
 800dfa6:	6023      	str	r3, [r4, #0]
 800dfa8:	bd70      	pop	{r4, r5, r6, pc}
 800dfaa:	46c0      	nop			; (mov r8, r8)
 800dfac:	200007fc 	.word	0x200007fc

0800dfb0 <__ascii_wctomb>:
 800dfb0:	0003      	movs	r3, r0
 800dfb2:	1e08      	subs	r0, r1, #0
 800dfb4:	d005      	beq.n	800dfc2 <__ascii_wctomb+0x12>
 800dfb6:	2aff      	cmp	r2, #255	; 0xff
 800dfb8:	d904      	bls.n	800dfc4 <__ascii_wctomb+0x14>
 800dfba:	228a      	movs	r2, #138	; 0x8a
 800dfbc:	2001      	movs	r0, #1
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	4240      	negs	r0, r0
 800dfc2:	4770      	bx	lr
 800dfc4:	2001      	movs	r0, #1
 800dfc6:	700a      	strb	r2, [r1, #0]
 800dfc8:	e7fb      	b.n	800dfc2 <__ascii_wctomb+0x12>

0800dfca <abort>:
 800dfca:	2006      	movs	r0, #6
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	f000 f835 	bl	800e03c <raise>
 800dfd2:	2001      	movs	r0, #1
 800dfd4:	f7f6 f9bc 	bl	8004350 <_exit>

0800dfd8 <_malloc_usable_size_r>:
 800dfd8:	1f0b      	subs	r3, r1, #4
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	1f18      	subs	r0, r3, #4
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	da01      	bge.n	800dfe6 <_malloc_usable_size_r+0xe>
 800dfe2:	580b      	ldr	r3, [r1, r0]
 800dfe4:	18c0      	adds	r0, r0, r3
 800dfe6:	4770      	bx	lr

0800dfe8 <_raise_r>:
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	0004      	movs	r4, r0
 800dfec:	000d      	movs	r5, r1
 800dfee:	291f      	cmp	r1, #31
 800dff0:	d904      	bls.n	800dffc <_raise_r+0x14>
 800dff2:	2316      	movs	r3, #22
 800dff4:	6003      	str	r3, [r0, #0]
 800dff6:	2001      	movs	r0, #1
 800dff8:	4240      	negs	r0, r0
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
 800dffc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d004      	beq.n	800e00c <_raise_r+0x24>
 800e002:	008a      	lsls	r2, r1, #2
 800e004:	189b      	adds	r3, r3, r2
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	2a00      	cmp	r2, #0
 800e00a:	d108      	bne.n	800e01e <_raise_r+0x36>
 800e00c:	0020      	movs	r0, r4
 800e00e:	f000 f831 	bl	800e074 <_getpid_r>
 800e012:	002a      	movs	r2, r5
 800e014:	0001      	movs	r1, r0
 800e016:	0020      	movs	r0, r4
 800e018:	f000 f81a 	bl	800e050 <_kill_r>
 800e01c:	e7ed      	b.n	800dffa <_raise_r+0x12>
 800e01e:	2000      	movs	r0, #0
 800e020:	2a01      	cmp	r2, #1
 800e022:	d0ea      	beq.n	800dffa <_raise_r+0x12>
 800e024:	1c51      	adds	r1, r2, #1
 800e026:	d103      	bne.n	800e030 <_raise_r+0x48>
 800e028:	2316      	movs	r3, #22
 800e02a:	3001      	adds	r0, #1
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	e7e4      	b.n	800dffa <_raise_r+0x12>
 800e030:	2400      	movs	r4, #0
 800e032:	0028      	movs	r0, r5
 800e034:	601c      	str	r4, [r3, #0]
 800e036:	4790      	blx	r2
 800e038:	0020      	movs	r0, r4
 800e03a:	e7de      	b.n	800dffa <_raise_r+0x12>

0800e03c <raise>:
 800e03c:	b510      	push	{r4, lr}
 800e03e:	4b03      	ldr	r3, [pc, #12]	; (800e04c <raise+0x10>)
 800e040:	0001      	movs	r1, r0
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	f7ff ffd0 	bl	800dfe8 <_raise_r>
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	46c0      	nop			; (mov r8, r8)
 800e04c:	2000000c 	.word	0x2000000c

0800e050 <_kill_r>:
 800e050:	2300      	movs	r3, #0
 800e052:	b570      	push	{r4, r5, r6, lr}
 800e054:	4d06      	ldr	r5, [pc, #24]	; (800e070 <_kill_r+0x20>)
 800e056:	0004      	movs	r4, r0
 800e058:	0008      	movs	r0, r1
 800e05a:	0011      	movs	r1, r2
 800e05c:	602b      	str	r3, [r5, #0]
 800e05e:	f7f6 f967 	bl	8004330 <_kill>
 800e062:	1c43      	adds	r3, r0, #1
 800e064:	d103      	bne.n	800e06e <_kill_r+0x1e>
 800e066:	682b      	ldr	r3, [r5, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d000      	beq.n	800e06e <_kill_r+0x1e>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	200007fc 	.word	0x200007fc

0800e074 <_getpid_r>:
 800e074:	b510      	push	{r4, lr}
 800e076:	f7f6 f955 	bl	8004324 <_getpid>
 800e07a:	bd10      	pop	{r4, pc}

0800e07c <_init>:
 800e07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07e:	46c0      	nop			; (mov r8, r8)
 800e080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e082:	bc08      	pop	{r3}
 800e084:	469e      	mov	lr, r3
 800e086:	4770      	bx	lr

0800e088 <_fini>:
 800e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08a:	46c0      	nop			; (mov r8, r8)
 800e08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e08e:	bc08      	pop	{r3}
 800e090:	469e      	mov	lr, r3
 800e092:	4770      	bx	lr
